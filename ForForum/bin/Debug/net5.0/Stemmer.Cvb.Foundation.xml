<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stemmer.Cvb.Foundation</name>
    </assembly>
    <members>
        <member name="T:Stemmer.Cvb.Foundation.AddNoise">
            <summary>
            Collection of functions that add noise to Cvb Images.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AddNoise.Uniform(Stemmer.Cvb.Image,System.Double,System.Double,System.Int32)">
            <summary>
            Add noise with uniform distribution to an image. Pixel values that
            exceed the image's value range are saturated at the minimum and
            maximum value.
            </summary>
            <param name="img">image to add the noise to</param>
            <param name="lowest">lower bound of the uniform distribution</param>
            <param name="highest">upper bound of the uniform distribution</param>
            <param name="seed">seed value for the pseudo random number generator
            </param>
            <returns>the input image with added noise</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AddNoise.Gauss(Stemmer.Cvb.Image,System.Double,System.Double,System.Int32)">
            <summary>
            Add noise with Gaussian distribution to an image. Pixel values that
            exceed the image's value range are saturated at the minimum and
            maximum value.
            </summary>
            <param name="img">image to add the noise to</param>
            <param name="mean">mean value of the gaussian distribution</param>
            <param name="stdDev">standard deviation of the gaussian distribution
            </param>
            <param name="seed">seed value for the pseudo random number generator
            </param>
            <returns>the input image with added noise</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Analysis">
            <summary>
            Collection of miscellaneous image analysis functions.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Analysis.LocalEigenValuesAndVectors(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.FixedFilterSize,Stemmer.Cvb.Foundation.FixedFilterSize,Stemmer.Cvb.Image@,Stemmer.Cvb.Image@,Stemmer.Cvb.Image@,Stemmer.Cvb.Image@,Stemmer.Cvb.Image@,Stemmer.Cvb.Image@)">
            <summary>
            Calculate the local eigenvalues and eigenvectors of the Hesse matrix
            applied to the pixels of the input image.
            </summary>
            <param name="plane">image plane to work on</param>
            <param name="derivatorSize">size of the derivation operator (Sobel)
            - valid inputs are 3x3 and 5x5</param>
            <param name="blurSize">size fo the blurring operator (valid inputs are
            3x3 and 5x5)</param>
            <param name="lambda1">first eigenvalue for each pixel</param>
            <param name="lambda2">second eigenvalue for each pixel</param>
            <param name="eigenValue1x">x-component of the first eigen vector
            </param>
            <param name="eigenValue1y">y-component of the first eigen vector
            </param>
            <param name="eigenValue2x">x-component of the second eigen
            vector</param>
            <param name="eigenValue2y">y-component of the second eigen
            vector</param>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="plane"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Analysis.LocalMinEigenValues(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.FixedFilterSize,Stemmer.Cvb.Foundation.FixedFilterSize)">
            <summary>
            Calculate the minimum local eigenvalues of the Hesse matrix applied
            to the pixels of the input image. This approach helps identify
            locations inside the image that contain curved edges.
            </summary>
            <param name="plane">image plane to work on</param>
            <param name="derivatorSize">size of the derivation operator (Sobel)
            - valid inputs are 3x3 and 5x5</param>
            <param name="blurSize">size fo the blurring operator (valid inputs are
            3x3 and 5x5)</param>
            <returns>image with the minimal local eigenvalues</returns>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="plane"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Analysis.WangQuality(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane)">
            <summary>
            Calculate the Wang quality for two images. The Wang Quality is a
            measure of similarity between two images as proposed in a publication
            by Z. Wang and A. C. Bovik (IEEE Signal Processing Letters, vol. 9,
            no. 3, pp. 81-84, March 2002).
            </summary>
            <param name="plane1">plane 1 on which to calculate</param>
            <param name="plane2">plane 2 on which to calculate</param>
            <returns>the quality index (ranging from -1 to 1)</returns>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="plane1"/>/<paramref name="plane2"/> have already been
            disposed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.AQS12Piece">
            <summary>
            Aggregates the data that describes the AQS12 calibration piece.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12Piece.#ctor">
            <summary>
            Default ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12Piece.#ctor(Stemmer.Cvb.Point3Dd[],System.Double)">
            <summary>
            Creates a new AQS12 calibration piece from the given
            <paramref name="referencePoints"/> and
            <paramref name="topBasePlaneDistance"/>.
            </summary>
            <param name="referencePoints">The 12 reference points describing the
            AQS12.</param>
            <param name="topBasePlaneDistance">Distance from the top plane to the
            base plane; 0 to assume the base plane is at <i>z</i> == 0.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AQS12Piece.ReferencePoints">
            <summary>
            Gets the reference points describing the corners of the AQS12.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AQS12Piece.TopBasePlaneDistance">
            <summary>
            Gets or sets the distance between the top and base plane.
            </summary>
            <value>
            A value of 0 means the distance is calculated with the base plane
            having a <i>z</i> location of 0.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.PixelOverflow">
            <summary>
            Defines how arithmetic overflows and underflows are handled.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.PixelOverflow.Scale">
            <summary>
            Resulting pixel values are scaled according to the 
            <see cref="T:Stemmer.Cvb.DataType"/>'s range.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.PixelOverflow.Truncate">
            <summary>
            Resulting pixel values are truncated at <see cref="P:Stemmer.Cvb.DataType.MinVal"/>
            and <see cref="P:Stemmer.Cvb.DataType.MaxVal"/>.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.SqrtPixelScaling">
            <summary>
            Defines the post processing of the 
            <see cref="M:Stemmer.Cvb.Foundation.Arithmetic.Sqrt(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.SqrtPixelScaling)"/> method.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.SqrtPixelScaling.AsIs">
            <summary>
            Square root result is stored as is (no scaling).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.SqrtPixelScaling.Yes">
            <summary>
            Square root result is scaled to the <see cref="T:Stemmer.Cvb.DataType"/>'s range.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Arithmetic">
            <summary>
            Collection of arithmetic functions from the Foundation Package.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Add(Stemmer.Cvb.Image,Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.PixelOverflow)">
            <summary>
            Add the pixel values of both input images to obtain the output image. 
            </summary>
            <remarks>
            <para>
            If the parameter <paramref name="overflow"/> is set to 
            <see cref="F:Stemmer.Cvb.Foundation.PixelOverflow.Scale"/>, the resulting pixel values are 
            divided to fit the dynamic range of the image (truncated otherwise). 
            </para><para>
            If the sizes of the two input images differ, the result image will 
            contain the biggest rectangle common to both input images.
            </para>
            </remarks>
            <param name="img1">Input image 1</param>
            <param name="img2">Input image 2</param>
            <param name="overflow">Defines how arithmetic overflow is handled.</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> has already been 
            disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Multiply(Stemmer.Cvb.Image,Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.PixelOverflow)">
            <summary>
            Multiply the pixel values of both input images to obtain the output 
            image. 
            </summary>
            <remarks>
            <para>
            If the parameter <paramref name="overflow"/> is set to 
            <see cref="F:Stemmer.Cvb.Foundation.PixelOverflow.Scale"/>, the resulting pixel values are 
            divided to fit the dynamic range of the image (truncated otherwise). 
            </para><para>
            If the sizes of the two input images differ, the result image will 
            contain the biggest rectangle common to both input images.
            </para>
            </remarks>
            <param name="img1">Input image 1</param>
            <param name="img2">Input image 2</param>
            <param name="overflow">Defines how arithmetic overflow is handled.</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> has already been 
            disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Subtract(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Subtract the pixel values of <paramref name="img2"/> from
            <paramref name="img1"/> to obtain the output image.
            </summary>
            <remarks>
            <para>
            Negative results are saturated at <see cref="P:Stemmer.Cvb.DataType.MinVal"/>.
            </para><para>
            If the sizes of the two input images differ, the result image will 
            contain the biggest rectangle common to both input images.
            </para>
            </remarks>
            <param name="img1">Input image 1</param>
            <param name="img2">Input image 2</param>
            <returns>Result image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> has already been 
            disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.SubtractAbs(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Subtract the pixel values of <paramref name="img2"/> from
            <paramref name="img1"/> to obtain the output image.
            </summary>
            <remarks>
            <para>
            The stored results are the absolute value (see 
            <see cref="M:System.Math.Abs(System.Double)"/>) of the difference of both pixels.
            </para><para>
            If the sizes of the two input images differ, the result image will 
            contain the biggest rectangle common to both input images.
            </para>
            </remarks>
            <param name="img1">Input image 1</param>
            <param name="img2">Input image 2</param>
            <returns>Result image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> has already been 
            disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Divide(Stemmer.Cvb.Image,Stemmer.Cvb.Image,System.Int32)">
            <summary>
            Divide the pixel values of <paramref name="img2"/> by the pixel values
            of <paramref name="img2"/> to obtain the output image and shift them
            up by <paramref name="upShift"/> bits to preserve information.
            </summary>
            <remarks>
            If the sizes of the two input images differ, the result image will 
            contain the biggest rectangle common to both input images.
            </remarks>
            <param name="img1">Input image 1</param>
            <param name="img2">Input image 2</param>
            <param name="upShift">Result shift parameter</param>
            <returns>Result image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> has already been 
            disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Square(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.PixelOverflow)">
            <summary>
            Squares the pixel values of the input image to obtain the output 
            image. 
            </summary>
            <remarks>
            If the parameter <paramref name="overflow"/> is set to 
            <see cref="F:Stemmer.Cvb.Foundation.PixelOverflow.Scale"/>, the resulting pixel values are 
            divided to fit the dynamic range of the image (truncated otherwise). 
            Scaling effectively turns this function into a gamma correction with
            a gamma value of 2.
            </remarks>
            <param name="img">Input image</param>
            <param name="overflow">Defines how arithmetic overflow is handled.</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Sqrt(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.SqrtPixelScaling)">
            <summary>
            Calculates the square roots of pixel values of a source image and 
            writes them into the destination image. 
            </summary>
            <remarks>
            If the parameter <paramref name="scaling"/> is 
            <see cref="F:Stemmer.Cvb.Foundation.SqrtPixelScaling.AsIs"/>, the resulting image has pixel 
            values as they come out of the calculation. If 
            <see cref="F:Stemmer.Cvb.Foundation.SqrtPixelScaling.Yes"/>, the results will be multiplied to 
            fit the dynamic range of the image; effectively turning this function 
            into a gamma correction with a gamma value of 1/2.
            </remarks>
            <param name="img">Input image</param>
            <param name="scaling">Whether or not to scale the result.</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Absolute(Stemmer.Cvb.Image)">
            <summary>
            Determines the absolute values of the pixels in the input image 
            <paramref name="img"/>.
            </summary>
            <remarks>
            Of course calling this function on an image with unsigned pixels will 
            have no effect.
            </remarks>
            <param name="img">Input image</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Add(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Foundation.PixelOverflow)">
            <summary>
            Add constant offsets to the pixel values of the input image.
            </summary>
            <remarks>
            If the parameter <paramref name="overflow"/> is set to 
            <see cref="F:Stemmer.Cvb.Foundation.PixelOverflow.Scale"/>, the resulting pixel values are 
            divided to fit the dynamic range of the image (truncated otherwise). 
            </remarks>
            <param name="img">Input image</param>
            <param name="values">Values to be added (at least one per plane in
            <paramref name="img"/></param>
            <param name="overflow">Defines how arithmetic overflow is handled.</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="values"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Add(Stemmer.Cvb.Image,System.Double,Stemmer.Cvb.Foundation.PixelOverflow)">
            <summary>
            Add constant offsets to the pixel values of the input image.
            </summary>
            <remarks>
            If the parameter <paramref name="overflow"/> is set to 
            <see cref="F:Stemmer.Cvb.Foundation.PixelOverflow.Scale"/>, the resulting pixel values are 
            divided to fit the dynamic range of the image (truncated otherwise). 
            </remarks>
            <param name="img">Input image</param>
            <param name="value">Value to be added to each plane</param>
            <param name="overflow">Defines how arithmetic overflow is handled.</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Multiply(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Foundation.PixelOverflow)">
            <summary>
            Multiply constant values to the pixel values of the input image.
            </summary>
            <remarks>
            If the parameter <paramref name="overflow"/> is set to 
            <see cref="F:Stemmer.Cvb.Foundation.PixelOverflow.Scale"/>, the resulting pixel values are 
            divided to fit the dynamic range of the image (truncated otherwise). 
            </remarks>
            <param name="img">Input image</param>
            <param name="values">Values to be multiplied (at least one per plane 
            in<paramref name="img"/></param>
            <param name="overflow">Defines how arithmetic overflow is handled.</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="values"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Multiply(Stemmer.Cvb.Image,System.Double,Stemmer.Cvb.Foundation.PixelOverflow)">
            <summary>
            Multiply constant values to the pixel values of the input image.
            </summary>
            <remarks>
            If the parameter <paramref name="overflow"/> is set to 
            <see cref="F:Stemmer.Cvb.Foundation.PixelOverflow.Scale"/>, the resulting pixel values are 
            divided to fit the dynamic range of the image (truncated otherwise). 
            </remarks>
            <param name="img">Input image</param>
            <param name="value">Value to be multiplied to each plane</param>
            <param name="overflow">Defines how arithmetic overflow is handled.</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Subtract(Stemmer.Cvb.Image,System.Double[])">
            <summary>
            Subtract constant offsets from the pixel values of the input image.
            </summary>
            <remarks>
            Negative results are saturated at <see cref="P:Stemmer.Cvb.DataType.MinVal"/>.
            </remarks>
            <param name="img">Input image</param>
            <param name="values">Values to be subtracted (at least one per plane
            in<paramref name="img"/></param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="values"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.SubtractAbs(Stemmer.Cvb.Image,System.Double[])">
            <summary>
            Subtract constant offsets from the pixel values of the input image.
            </summary>
            <remarks>
            The stored results are the absolute value (see 
            <see cref="M:System.Math.Abs(System.Double)"/>) of the difference of both pixels.
            </remarks>
            <param name="img">Input image</param>
            <param name="values">Values to be subtracted (at least one per plane
            in<paramref name="img"/></param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="values"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Subtract(Stemmer.Cvb.Image,System.Double)">
            <summary>
            Subtract constant offsets from the pixel values of the input image.
            </summary>
            <remarks>
            Negative results are saturated at <see cref="P:Stemmer.Cvb.DataType.MinVal"/>.
            </remarks>
            <param name="img">Input image</param>
            <param name="value">Value to be subtracted to each plane</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.SubtractAbs(Stemmer.Cvb.Image,System.Double)">
            <summary>
            Subtract constant offsets from the pixel values of the input image.
            </summary>
            <remarks>
            The stored results are the absolute value (see 
            <see cref="M:System.Math.Abs(System.Double)"/>) of the difference of both pixels.
            </remarks>
            <param name="img">Input image</param>
            <param name="value">Value to be subtracted to each plane</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Divide(Stemmer.Cvb.Image,System.Double[])">
            <summary>
            Divide pixel values from the input image by constant values.
            </summary>
            <param name="img">Input image</param>
            <param name="values">Values to divide by (at least one per plane
            in<paramref name="img"/>)</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="values"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="values"/> contains
            less values than the <paramref name="img"/> has planes.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When <paramref name="values"/> contains 0.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Arithmetic.Divide(Stemmer.Cvb.Image,System.Double)">
            <summary>
            Divide pixel values from the input image by a constant value.
            </summary>
            <param name="img">Input image</param>
            <param name="value">Value to divide each plane by</param>
            <returns>Transformed image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When <paramref name="value"/> is 0.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.RgbConversion">
            <summary>
            Available conversion modes from Bayer patterns to RGB images.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.RgbConversion.Linear">
            <summary>
            This method offers the highest accuracy but also the slowest speed.
            Interpolation of the nearest pixels is used to calculate the two
            unknown color values for each position.  Depending on the position of
            the pixel either two or four pixels are used for the interpolation.
            In this mode full spatial resolution is maintained.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.RgbConversion.NearestNeighbor">
            <summary>
            This method offers the fastest speed for a full resolution image, but
            the color accuracy is not as high as the Linear method. The
            color from a neighbor pixel is used for the two unknown color values.
            This makes the conversion faster because there is no need for
            interpolation. In this method full spatial resolution is maintained.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.RgbConversion.HalfResolution">
            <summary>
            This method is provided primarily for display. This method creates an
            RGB image with half the height and half the width of the source
            image, the color accuracy is the same as the NearestNeighbor method but
            half the spacial accuracy is lost. If the user needs a fast display
            for focusing or setup of the camera, then this method will allow higher
            frame rates on a suitable PC.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.BayerPattern">
            <summary>
            Bayer pattern of the sensor used to acquire the image to be converted.
            The enums refer to the top left pixel and the pixel next to
            it.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BayerPattern.GreenBlue">
            <summary>
            left top pixels are green and blue
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BayerPattern.BlueGreen">
            <summary>
            left top pixels are blue and green
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BayerPattern.RedGreen">
            <summary>
            left top pixels are red and green
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BayerPattern.GreenRed">
            <summary>
            left top pixels are green and red
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.GammaCorrection">
            <summary>
            Different gamma corrections that can be applied while converting from
            Bayer pattern to RGB.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.GammaCorrection.Gamma100">
            <summary>
            Correct with Gamma = 1.0 (i.e. no correction).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.GammaCorrection.Gamma060">
            <summary>
            Correct with Gamma = 0.6.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.GammaCorrection.Gamma045">
            <summary>
            Correct with Gamma = 0.45.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.BayerConversion">
            <summary>
            Functions for converting images with a Bayer pattern.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.CreateDestinationImage(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.RgbConversion)">
            <summary>
            Create a destination image for Bayer to RGB conversions.
            </summary>
            <remarks>
            Bayer to RGB conversions are also implemented as in-place operations,
            however the destination image needs to have a suitable width and
            height to be eligible. The destination width and height depend on the
            size of the input image as well as the conversion method.
            </remarks>
            <param name="img">Image to create the destination image for</param>
            <param name="mode">Conversion mode to be used</param>
            <returns>BayerToRGB destination image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.CreateDestinationImage(Stemmer.Cvb.Size2D,Stemmer.Cvb.Foundation.RgbConversion)">
            <summary>
            Create a destination image for Bayer to RGB conversions.
            </summary>
            <remarks>
            Bayer to RGB conversions are also implemented as in-place operations,
            however the destination image needs to have a suitable width and
            height to be eligible. The destination width and height depends on the
            size of the input image as well as the conversion method.
            </remarks>
            <param name="size">Size of the input image to convert for.</param>
            <param name="mode">Conversion mode to be used</param>
            <returns>BayerToRGB destination image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.CreateDestinationImage(System.Int32,System.Int32,Stemmer.Cvb.Foundation.RgbConversion)">
            <summary>
            Create a destination image for Bayer to RGB conversions.
            </summary>
            <remarks>
            Bayer to RGB conversions are also implemented as in-place operations,
            however the destination image needs to have a suitable width and
            height to be eligible. The destination width and height depends on the
            size of the input image as well as the conversion method.
            </remarks>
            <param name="width">Width of the input image to convert for.</param>
            <param name="height">Height of the input image to convert for.</param>
            <param name="mode">Conversion mode to be used</param>
            <returns>BayerToRGB destination image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.ToRgb(Stemmer.Cvb.Image,Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.BayerPattern,Stemmer.Cvb.Foundation.RgbConversion,Stemmer.Cvb.Foundation.GammaCorrection,Stemmer.Cvb.WhiteBalanceFactors)">
            <summary>
            Convert a Bayer-pattern image to an RGB image.
            </summary>
            <param name="imgSrc">Monochrome image with the Bayer pattern to be
            converted</param>
            <param name="imgDst">Destination to receive the conversion results
            (preferable created by
            <see cref="M:Stemmer.Cvb.Foundation.BayerConversion.CreateDestinationImage(Stemmer.Cvb.Size2D,Stemmer.Cvb.Foundation.RgbConversion)"/>).</param>
            <param name="pattern">Pattern in the top left corner of the sensor
            with which <paramref name="imgDst"/> was acquired</param>
            <param name="conversion">Conversion method</param>
            <param name="gamma">Gamma correction</param>
            <param name="whiteBalance">White balance</param>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="imgSrc"/>/<paramref name="imgDst"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="imgSrc"/>/<paramref name="imgDst"/> has already been
            disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.ToRgb(Stemmer.Cvb.Image,Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.BayerPattern,Stemmer.Cvb.Foundation.RgbConversion)">
            <summary>
            Convert a Bayer-pattern image to an RGB image (omitting the gamma
            correction and the white balance).
            </summary>
            <param name="imgSrc">Monochrome image with the Bayer pattern to be
            converted</param>
            <param name="imgDst">Destination to receive the conversion results
            (preferable created by
            <see cref="M:Stemmer.Cvb.Foundation.BayerConversion.CreateDestinationImage(Stemmer.Cvb.Size2D,Stemmer.Cvb.Foundation.RgbConversion)"/>).</param>
            <param name="pattern">Pattern in the top left corner of the sensor
            with which <paramref name="imgDst"/> was acquired</param>
            <param name="conversion">Conversion method</param>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="imgSrc"/>/<paramref name="imgDst"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="imgSrc"/>/<paramref name="imgDst"/> has already been
            disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.ToRgb(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.BayerPattern,Stemmer.Cvb.Foundation.RgbConversion,Stemmer.Cvb.Foundation.GammaCorrection,Stemmer.Cvb.WhiteBalanceFactors)">
            <summary>
            Convert a Bayer-pattern image to an RGB image.
            </summary>
            <param name="imgSrc">Image to be converted</param>
            <param name="pattern">Pattern in the top left corner of the sensor
            with which <paramref name="imgSrc"/> was acquired</param>
            <param name="conversion">Conversion method</param>
            <param name="gamma">Gamma correction</param>
            <param name="whiteBalance">White balance</param>
            <returns>Newly created image that contains the conversion result
            </returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="imgSrc"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="imgSrc"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.ToRgb(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.BayerPattern,Stemmer.Cvb.Foundation.RgbConversion)">
            <summary>
            Convert a Bayer-pattern image to an RGB image (omitting the gamma
            correction and the white balance).
            </summary>
            <param name="imgSrc">Image to be converted</param>
            <param name="pattern">Pattern in the top left corner of the sensor
            with which <paramref name="imgSrc"/> was acquired</param>
            <param name="conversion">Conversion method</param>
            <returns>Newly created image that contains the conversion result
            </returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="imgSrc"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="imgSrc"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.ToMono(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.BayerPattern,Stemmer.Cvb.Foundation.RgbConversion,Stemmer.Cvb.Foundation.GammaCorrection,Stemmer.Cvb.WhiteBalanceFactors)">
            <summary>
            Convert a monochrome image with a Bayer pattern to a proper monochrome
            image.
            </summary>
            <param name="imgSrc">Image to be converted</param>
            <param name="pattern">Pattern in the top left corner of the sensor
            with which <paramref name="imgSrc"/> was acquired</param>
            <param name="conversion">Conversion method</param>
            <param name="gamma">Gamma correction</param>
            <param name="whiteBalance">White balance</param>
            <returns>Newly created image that contains the conversion result
            </returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="imgSrc"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="imgSrc"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.ToBayer(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.BayerPattern)">
            <summary>
            Convert an RGB image to a monochrome image with Bayer pattern.
            </summary>
            <param name="imgSrc">Image to be converted</param>
            <param name="pattern">Bayer pattern to which to convert</param>
            <returns>Converted image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="imgSrc"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="imgSrc"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.GetWhiteBalance(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.BayerPattern,Stemmer.Cvb.Area2D)">
            <summary>
            Determine a suitable white balance from a monochrome image with
            Bayer pattern.
            </summary>
            <param name="img">Monochrome image with Bayer pattern</param>
            <param name="pattern">Pattern in the top left corner of the sensor
            with which the <paramref name="img"/> was acquired</param>
            <param name="aoi">Area in which to determine the white balance factors
            </param>
            <returns>White balance factors</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.GetWhiteBalance(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.BayerPattern)">
            <summary>
            Determine a suitable white balance from a monochrome image with
            Bayer pattern.
            </summary>
            <param name="img">Monochrome image with Bayer pattern</param>
            <param name="pattern">Pattern in the top left corner of the sensor
            with which <paramref name="img"/> was acquired</param>
            <returns>White balance factors</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BayerConversion.ReturnCodeTranslation(System.Int32)">
            <summary>
            Convert the specific return codes from BayerToRGB to something that
            is generally understood by CVB...
            </summary>
            <param name="val">Value to be converted</param>
            <returns>Converted value</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Bitwise">
            <summary>
            Collection of bit-wise operations on images.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.And(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Performs a bit-wise AND operation between the pixels of the two input
            images.
            </summary>
            <remarks>
            If the sizes of the two input images differ, the result image
            will contain the biggest rectangle common to both input images.
            </remarks>
            <param name="img1">Input image 1</param>
            <param name="img2">Input image 2</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> has already been
            disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.Or(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Performs a bit-wise OR operation between the pixels of the two input
            images.
            </summary>
            <remarks>
            If the sizes of the two input images differ, the result image
            will contain the biggest rectangle common to both input images.
            </remarks>
            <param name="img1">Input image 1</param>
            <param name="img2">Input image 2</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> has already been
            disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.Xor(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Performs a bit-wise XOR operation between the pixels of the two input
            images.
            </summary>
            <remarks>
            If the sizes of the two input images differ, the result image
            will contain the biggest rectangle common to both input images.
            </remarks>
            <param name="img1">Input image 1</param>
            <param name="img2">Input image 2</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img1"/>/<paramref name="img2"/> has already been
            disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.Negate(Stemmer.Cvb.Image)">
            <summary>
            Performs a bit-wise NOT operation on the pixels of the input image
            to create the output image.
            </summary>
            <param name="img">Input image</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.And(Stemmer.Cvb.Image,System.Int32)">
            <summary>
            Bit-wise AND operation of the input image with a constant value.
            </summary>
            <param name="img">Input image</param>
            <param name="value">Value to and each plane with</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.And(Stemmer.Cvb.Image,System.Int32[])">
            <summary>
            Bit-wise AND operation on the input image with constant values.
            </summary>
            <param name="img">Input image</param>
            <param name="values">Values to and the image with (at least one per
            plane in<paramref name="img"/>)</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.Or(Stemmer.Cvb.Image,System.Int32)">
            <summary>
            Bit-wise OR operation onthe input image with a constant value.
            </summary>
            <param name="img">Input image</param>
            <param name="value">Value to or each plane with</param>
            <returns>Transformed image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.Or(Stemmer.Cvb.Image,System.Int32[])">
            <summary>
            Bit-wise OR operation on the input image with constant values.
            </summary>
            <param name="img">Input image</param>
            <param name="values">Values to or the image with (at least one per
            plane in<paramref name="img"/>)</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.Xor(Stemmer.Cvb.Image,System.Int32)">
            <summary>
            Bit-wise XOR operation on the input image with constant a value.
            </summary>
            <param name="img">Input image</param>
            <param name="value">Value to xor each plane with</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.Xor(Stemmer.Cvb.Image,System.Int32[])">
            <summary>
            Bit-wise XOR operation on the input image with constant values.
            </summary>
            <param name="img">Input image</param>
            <param name="values">Values to or the image with (at least one per
            plane in<paramref name="img"/>)</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.UpShift(Stemmer.Cvb.Image,System.Int32)">
            <summary>
            Bit-wise shift the input image with constant a value.
            </summary>
            <param name="img">Input image</param>
            <param name="value">Value to shift each plane with</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.UpShift(Stemmer.Cvb.Image,System.Int32[])">
            <summary>
            Bit-wise shift the input image with constant values.
            </summary>
            <param name="img">Input image</param>
            <param name="values">Values to shift the image with (at least one per
            plane in<paramref name="img"/>)</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.DownShift(Stemmer.Cvb.Image,System.Int32)">
            <summary>
            Bit-wise shift the input image with constant a value.
            </summary>
            <param name="img">Input image</param>
            <param name="value">Value to shift each plane with</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Bitwise.DownShift(Stemmer.Cvb.Image,System.Int32[])">
            <summary>
            Bit-wise shift the input image with constant values.
            </summary>
            <param name="img">Input image</param>
            <param name="values">Values to shift the image with (at least one per
            plane in<paramref name="img"/>)</param>
            <returns>Result image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.BlobResult">
            <summary>
            Container for a blob analysis result.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobResult.#ctor(Stemmer.Cvb.Foundation.BlobAnalyzer,System.Int32)">
            <summary>
            Constructor extracting a blob result from a blob analyzer and putting
            it into the managed result object.
            </summary>
            <param name="analyzer">analyzer to extract from</param>
            <param name="index">index of the blob data to extract</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobResult.X">
            <summary>
            Same as <see cref="F:Stemmer.Cvb.Foundation.BlobResult.Center"/><c>.X</c>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobResult.Y">
            <summary>
            Same as <see cref="F:Stemmer.Cvb.Foundation.BlobResult.Center"/><c>.Y</c>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BlobResult.Center">
            <summary>
            Position of the blob's center.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobResult.Size">
            <summary>
            Size (area) of the blob in pixels.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobResult.BoundingBox">
            <summary>
            Bounding box of the blob.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobResult.MinimumMoment">
            <summary>
            Minimum inertial moment (smaller 2nd order moment translated into
            the blob's major/minor axis coordinate system) of the blob.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobResult.MaximumMoment">
            <summary>
            Maximum inertial moment (larger 2nd order moments translated into
            the blob's major/minor axis coordinate system) of the blob.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobResult.MomentRatio">
            <summary>
            Ratio of the <see cref="P:Stemmer.Cvb.Foundation.BlobResult.MinimumMoment"/> and the
            <see cref="P:Stemmer.Cvb.Foundation.BlobResult.MaximumMoment"/> of this blob.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobResult.MomentAngle">
            <summary>
            Angle between major moment axis and the x-axis.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobResult.MinimumMomentPoints">
            <summary>
            Points where the major axis of the blob intersects with the blob's
            bounding box.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobResult.ToString">
            <summary>
            Convert to string.
            </summary>
            <returns>String representation of the blob result.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.BlobAnalyzer">
            <summary>
            Object for extracting blobs and their information from an image.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobAnalyzer.Handle">
            <summary>
            Native non linear transformation handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobAnalyzer.#ctor(Stemmer.Cvb.ImagePlane)">
            <summary>
            Create a blob detector object.
            </summary>
            <param name="plane">image plane the detector should work on</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobAnalyzer.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobAnalyzer.Dispose">
            <summary>
            Dispose method that releases the classifier
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobAnalyzer.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobAnalyzer.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobAnalyzer.AOI">
            <summary>
            Area of interest on which to extract blobs.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobAnalyzer.SkipBinarzation">
            <summary>
            Set if input is a binary image.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobAnalyzer.BorderFilter">
            <summary>
            Set which blobs touching an AOI should be filtered out during blob
            processing.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobAnalyzer.SizeFilter">
            <summary>
            Set the limits for filtering out blob results based on the area
            covered by the blob.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobAnalyzer.WidthFilter">
            <summary>
            Set the limits for filtering out blob results based on the width of the
            blob.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobAnalyzer.HeightFilter">
            <summary>
            Set the limits for filtering out blob results based on the height of
            the blob.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobAnalyzer.BinarizationRange">
            <summary>
            Set the gray value range for finding blobs.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobAnalyzer.Run">
            <summary>
            Perform a blob search using the currently set search and filter
            parameters
            </summary>
            <returns>list of blobs that have been found in the image</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Blob">
            <summary>
            Blob search and binarization methods.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Blob.BinarizeAndSearchAll(Stemmer.Cvb.ImagePlane,System.Int32,System.Int32)">
            <summary>
            Searches for all blobs in the given image <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to process.</param>
            <param name="min">Minimum gray value to be considered as an object
            (inclusive).
            </param>
            <param name="max">Maximum gray value to be considered as an object
            (inclusive).</param>
            <returns>Unordered blob results.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Blob.BinarizeAndSearchAll(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ValueRange{System.Int32})">
            <summary>
            Searches for all blobs in the given image <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to process.</param>
            <param name="binarizationThreshold">Minimum and maximum gray values
            (inclusive) to be considered as an object.</param>
            <returns>Unordered blob results.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Blob.BinarizeAndSearchAllIn(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,System.Int32,System.Int32)">
            <summary>
            Searches for all blobs in the given image <paramref name="plane"/>'s
            <paramref name="aoi"/>.
            </summary>
            <param name="plane">Image plane to process.</param>
            <param name="aoi">Region in which blobs are to be searched.</param>
            <param name="min">Minimum gray value to be considered as an object
            (inclusive).
            </param>
            <param name="max">Maximum gray value to be considered as an object
            (inclusive).</param>
            <returns>Unordered blob results.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Blob.BinarizeAndSearchAllIn(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,Stemmer.Cvb.ValueRange{System.Int32})">
            <summary>
            Searches for all blobs in the given image <paramref name="plane"/>'s
            <paramref name="aoi"/>.
            </summary>
            <param name="plane">Image plane to process.</param>
            <param name="aoi">Region in which blobs are to be searched.</param>
            <param name="binarizationThreshold">Minimum and maximum gray values
            (inclusive) to be considered as an object.</param>
            <returns>Unordered blob results.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Blob.BinarizeAndSearch(Stemmer.Cvb.ImagePlane,System.Int32,System.Int32,Stemmer.Cvb.Foundation.BlobFilter)">
            <summary>
            Searches for all blobs in the given <paramref name="plane"/>
            satisfying the given <paramref name="filter"/>.
            </summary>
            <param name="plane">Image plane to process.</param>
            <param name="min">Minimum gray value to be considered as an object
            (inclusive).
            </param>
            <param name="max">Maximum gray value to be considered as an object
            (inclusive).</param>
            <param name="filter">Filter which blobs are to be returned.</param>
            <returns>Unordered blob results.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Blob.BinarizeAndSearch(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ValueRange{System.Int32},Stemmer.Cvb.Foundation.BlobFilter)">
            <summary>
            Searches for all blobs in the given <paramref name="plane"/>
            satisfying the given <paramref name="filter"/>.
            </summary>
            <param name="plane">Image plane to process.</param>
            <param name="binarizationThreshold">Minimum and maximum gray values
            (inclusive) to be considered as an object.</param>
            <param name="filter">Filter which blobs are to be returned.</param>
            <returns>Unordered blob results.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Blob.BinarizeAndSearchIn(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,Stemmer.Cvb.ValueRange{System.Int32},Stemmer.Cvb.Foundation.BlobFilter)">
            <summary>
            Searches for all blobs in the given <paramref name="plane"/>'s
            <paramref name="aoi"/>
            satisfying the given <paramref name="filter"/>.
            </summary>
            <param name="plane">Image plane to process.</param>
            <param name="aoi">Region in which blobs are to be searched.</param>
            <param name="binarizationThreshold">Minimum and maximum gray values
            (inclusive) to be considered as an object.</param>
            <param name="filter">Filter which blobs are to be returned.</param>
            <returns>Unordered blob results.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Blob.SearchAll(Stemmer.Cvb.Image)">
            <summary>
            Searches for all blobs in the given <paramref name="binarizedImage"/>.
            </summary>
            <remarks>
            The <paramref name="binarizedImage"/> is an
            <see cref="F:Stemmer.Cvb.DataTypes.Int8BppUnsigned"/> image containing pixels with
            values 0 or 255. 255 marks an object.
            </remarks>
            <param name="binarizedImage">Image consisting only of 0 and 255
            values.</param>
            <returns>Unordered blob results.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Blob.Search(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.BlobFilter)">
            <summary>
            Searches for all blobs in the given <paramref name="binarizedImage"/>
            satisfying the given <paramref name="filter"/>.
            </summary>
            <remarks>
            The <paramref name="binarizedImage"/> is an
            <see cref="F:Stemmer.Cvb.DataTypes.Int8BppUnsigned"/> image containing pixels with
            values 0 or 255. 255 marks an object.
            </remarks>
            <param name="binarizedImage">Image consisting only of 0 and 255
            values.</param>
            <param name="filter">Filter which blobs are to be returned.</param>
            <returns>Unordered blob results.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.BlobBorderFilter">
            <summary>
            Enumeration for filtering blobs that touch the boundaries of the
            AOI specified for blob extraction.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BlobBorderFilter.None">
            <summary>
            Do not filter out those blobs that touch a border.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BlobBorderFilter.Right">
            <summary>
            Filter out those blobs that touch the right border.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BlobBorderFilter.Top">
            <summary>
            Filter out those blobs that touch the top border.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BlobBorderFilter.Left">
            <summary>
            Filter out those blobs that touch the left border.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BlobBorderFilter.Bottom">
            <summary>
            Filter out those blobs that touch the bottom border.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BlobBorderFilter.All">
            <summary>
            Filter out those blobs that touch any border.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.RangeFilter">
            <summary>
            Defines the attribute for a Blob Filter.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.RangeFilter.Size">
            <summary>
            Area of the blob in pixels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.RangeFilter.Width">
            <summary>
            Width of the blob in pixels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.RangeFilter.Height">
            <summary>
            Height of the blob in pixels.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.BlobFilter">
            <summary>
            For building filters for the <see cref="M:Stemmer.Cvb.Foundation.Blob.Search(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.BlobFilter)"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.BlobFilter.BorderFilter">
            <summary>
            Gets or sets whether to filter blobs that touch the borders of the image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.BlobFilter.RangeFilters">
            <summary>
            Gets the dictionary containing the <see cref="T:Stemmer.Cvb.Foundation.RangeFilter"/>s.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.BlobFilterBuilder">
            <summary>
            Helper to build filters for a blob search.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobFilterBuilder.#ctor">
            <summary>
            Creates the builder without any filters.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobFilterBuilder.WithBorderFilter(Stemmer.Cvb.Foundation.BlobBorderFilter)">
            <summary>
            Adds a border <paramref name="filter"/>.
            </summary>
            <param name="filter">Borders to filter.</param>
            <returns>Reference to this object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobFilterBuilder.WithSizeFilter(System.Int32,System.Int32)">
            <summary>
            Adds a size (area) filter.
            </summary>
            <param name="min">Minimal area size (inclusive) in pixels.</param>
            <param name="max">Maximal area size (inclusive) in pixels.</param>
            <returns>Reference to this object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobFilterBuilder.WithWidthFilter(System.Int32,System.Int32)">
            <summary>
            Adds a width filter.
            </summary>
            <param name="min">Minimal width (inclusive) in pixels.</param>
            <param name="max">Maximal width (inclusive) in pixels.</param>
            <returns>Reference to this object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobFilterBuilder.WithHeightFilter(System.Int32,System.Int32)">
            <summary>
            Adds a height filter.
            </summary>
            <param name="min">Minimal height (inclusive) in pixels.</param>
            <param name="max">Maximal height (inclusive) in pixels.</param>
            <returns>Reference to this object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.BlobFilterBuilder.Build">
            <summary>
            Builds the filter object.
            </summary>
            <returns>The filter object.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.CalibrationConfiguration">
            <summary>
            Stores the configuration for the calibration.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.CalibrationConfiguration.CalculateHomography">
            <summary>
            Gets/sets if homography should be calculated.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.CalibrationConfiguration.CalculateCorrectionOfLaserPlaneInclination">
            <summary>
            Gets/sets if the correction of the
            laser plane inclination should be calculated.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.CalibrationConfiguration.FromAQS12Piece(Stemmer.Cvb.Foundation.AQS12Piece)">
            <summary>
            Creates a <see cref="T:Stemmer.Cvb.Foundation.CalibrationConfiguration"/>
            from the given <paramref name="piece"/>.
            </summary>
            <param name="piece">AQS12 piece to create configuration from.</param>
            <returns>Created <see cref="T:Stemmer.Cvb.Foundation.CalibrationConfiguration"/>.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="piece"/> is null.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during creation occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.CalibrationConfiguration.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">Native handle.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="handle"/> is <see cref="F:System.IntPtr.Zero"/>.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.CalibrationConfiguration.AQS12Piece">
            <summary>
            Get the <see cref="T:Stemmer.Cvb.Foundation.AQS12Piece"/> from which this configuration was created from.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.CalibrationConfiguration.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.CalibrationConfiguration.Handle">
            <summary>
            Native handle of the calibrator.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.CalibrationConfiguration.IsDisposed">
            <summary>
            Gets if the native handle has been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.CalibrationConfiguration.Dispose(System.Boolean)">
            <summary>
            IDisposable helper function.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.CalibrationConfiguration.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.CalibrationConfiguration.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Calibrator3DExtensions">
            <summary>
            Extension methods for the <see cref="T:Stemmer.Cvb.Calibrator3D"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Calibrator3DExtensions.Save(Stemmer.Cvb.Calibrator3D,System.String)">
            <summary>
            Saves the calibrator to the given <paramref name="fileName"/>.
            </summary>
            <param name="calibrator">Calibrator to save.</param>
            <param name="fileName">File to save the calibrator to.</param>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.AlignmentSettings">
            <summary>
            Settings to configure the <see cref="M:Stemmer.Cvb.Foundation.Curve.Align(Stemmer.Cvb.Point2Dd[],Stemmer.Cvb.Point2Dd[],Stemmer.Cvb.Foundation.AlignmentSettings)"/> method.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AlignmentSettings.MaxIterations">
            <summary>
            Maximum iterations of ICP.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When trying to set smaller 1.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AlignmentSettings.Tolerance">
            <summary>
            Value for early stopping criteria.
            If the norm of alignment falls below this value,
            the alignment is considered successful.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When trying to set smaller or equal 0.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AlignmentSettings.MinImprovement">
            <summary>
            Value for early stopping criteria.
            If the norm of alignment changes less than this value,
            the alignment is considered converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When trying to set smaller or equal 0.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AlignmentSettings.Correspondence">
            <summary>
            Minimum value for correspondence of two points to
            be considered for alignment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When trying to set smaller or equal 0.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AlignmentSettings.Prealign">
            <summary>
            If true the target will be moved to the mean of
            the source set as a first alignment step.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AlignmentSettings.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.AlignmentConfiguration">
            <summary>
            Struct for curve alignment configuration.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AlignmentConfiguration.MaxIterations">
            <summary>
            Maximum iterations of ICP.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When trying to set smaller 1.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AlignmentConfiguration.Tolerance">
            <summary>
            Value for early stopping criteria.
            If the norm of alignment falls below this value,
            the alignment is considered successful.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When trying to set smaller or equal 0.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AlignmentConfiguration.MinImprovement">
            <summary>
            Value for early stopping criteria.
            If the norm of alignment changes less than this value,
            the alignment is considered converged.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When trying to set smaller or equal 0.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AlignmentConfiguration.Correspondence">
            <summary>
            Minimum value for correspondence of two points to
            be considered for alignment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">When trying to set smaller or equal 0.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.AlignmentConfiguration.Prealign">
            <summary>
             If true the target will be prealigned by moving it
             to the mean of the source set as a first alignment step.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.AlignmentConfiguration.Default">
            <summary>
            Gets the default alignment configuration.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Alignment2DResult">
            <summary>
            Result of a curve alignment.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Alignment2DResult.Rotation">
            <summary>
            Estimated rotation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Alignment2DResult.Translation">
            <summary>
            Estimated translation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Alignment2DResult.MeanDistance">
            <summary>
            Mean distance between reference and aligned curve.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Alignment2DResult.NumIterations">
            <summary>
            Number of iterations needed for alignment.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Curve">
            <summary>
            2D curve functions.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Curve.Resample(Stemmer.Cvb.Point2Dd[],System.Int32)">
            <summary>
            Resamples a 2-dimensional curve via linear interpolation assuming that
            the "speed" of the time mapping is constant.
            </summary>
            <remarks>
            The points have to be ordered by ascending x coordinates.
            </remarks>
            <param name="curve">Curve to be resampled.</param>
            <param name="resampledCurveLength">Length of the resulting curve.</param>
            <returns>Resampled curve.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="curve"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="curve"/> is empty.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="resampledCurveLength"/> is > 1.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during resampling occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Curve.IntersectWithLine(Stemmer.Cvb.Point2Dd[],Stemmer.Cvb.Geometry2D.Line)">
             <summary>
             Intersects a 2D curve with a line.
            
             The line is defined by the hessian normal form:
             normal * x = d,
             with normal = 1 and d > 0.
             </summary>
             <remarks>
             The points have to be ordered by ascending x coordinates.
             </remarks>
             <param name="curve">Curve to be intersected.</param>
             <param name="line">Line to interesect with.</param>
             <returns>Intersection points.</returns>
             <exception cref="T:System.ArgumentNullException">When <paramref name="curve"/> is null.</exception>
             <exception cref="T:System.ArgumentException">When <paramref name="curve"/> is empty.</exception>
             <exception cref="T:Stemmer.Cvb.CvbException">When an error during intersecting occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Curve.CalculateSignedDifferences(Stemmer.Cvb.Point2Dd[],Stemmer.Cvb.Point2Dd[])">
            <summary>
            Calculates signed differences along the y axis of given points to
            curve (Curve - Points).
            </summary>
            <remarks>
            The points have to be ordered by ascending x coordinates.
            </remarks>
            <param name="curve">The curve.</param>
            <param name="points">The points.</param>
            <returns>The signed differences.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="curve"/> or <paramref name="points"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="curve"/> contains less than 2 points
            or <paramref name="points"/> contains less than 1 point.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during calculation occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Curve.Align(Stemmer.Cvb.Point2Dd[],Stemmer.Cvb.Point2Dd[],Stemmer.Cvb.Foundation.AlignmentSettings)">
             <summary>
             Aligns two 2D curves via an iterative closest point method
             considering consensus correspondence for better shape alignment.
            
             The method used here is a version of the ICP (closest iterative point)
             method. It uses a consensus metric to find the correspondence between points
             to stabilize the iterations needed in the alignment method. It supports only
             rigid transformations for the alignment.
             If not enough points within a given consens are found a classical ICP step
             is perfomed by finding corresponences soley based on nearest neighbours without
             any feasibility check.
             </summary>
             <param name="curve">Reference curve.</param>
             <param name="curveToBeAligned">Curve to be aligned to <paramref name="curve"/>.</param>
             <param name="config">Configuration of alignment.</param>
             <returns>Alignment result.</returns>
             <exception cref="T:System.ArgumentNullException">When <paramref name="curve"/> or <paramref name="curveToBeAligned"/> is null.</exception>
             <exception cref="T:System.ArgumentException">When <paramref name="curve"/> or <paramref name="curveToBeAligned"/> is empty.</exception>
             <exception cref="T:Stemmer.Cvb.CvbException">When an error during alignment occurs.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.DensePointCloudSegmentor">
            <summary>
            Base class for configuring and computing
            segmentation on dense point clouds.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">Native handle.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="handle"/> is <see cref="F:System.IntPtr.Zero"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.FaceSegmentationFromPiece(Stemmer.Cvb.DensePointCloud)">
            <summary>
            Segments the calibration piece from the given <paramref name="cloud"/>.
            </summary>
            <param name="cloud">Point cloud to work with.</param>
            <returns>Segmentation image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.FaceSegmentationFromPiece(Stemmer.Cvb.DensePointCloud,Stemmer.Cvb.Rect)">
            <summary>
            Segments the calibration piece from the given <paramref name="cloud"/>.
            </summary>
            <param name="cloud">Point cloud to work with.</param>
            <param name="aoi">Area of interest.</param>
            <returns>Segmentation image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.ExtractProjectedPointsFromPiece(Stemmer.Cvb.DensePointCloud)">
            <summary>
            Extracts intersection points of the
            calibration piece from the given <paramref name="cloud"/>.
            </summary>
            <param name="cloud">Point cloud to work with.</param>
            <returns>Extracted points.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.ExtractProjectedPointsFromPiece(Stemmer.Cvb.DensePointCloud,Stemmer.Cvb.Rect)">
            <summary>
            Extracts intersection points of the
            calibration piece from the given <paramref name="cloud"/>.
            </summary>
            <param name="cloud">Point cloud to work with.</param>
            <param name="aoi">Area of interest.</param>
            <returns>Extracted points.</returns>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.Handle">
            <summary>
            Native handle of the calibrator.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.IsDisposed">
            <summary>
            Gets if the native handle has been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.Dispose(System.Boolean)">
            <summary>
            IDisposable helper function.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.DensePointCloudSegmentor.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor">
            <summary>
            Segmentor for face segmentation of an
            AQS12 calibration piece on dense point clouds.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor.#ctor(Stemmer.Cvb.Foundation.SegmentationMethod)">
            <summary>
            Constructor.
            </summary>
            <param name="segmentationMethod">Segmentation method to use.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor.CreateHandle(Stemmer.Cvb.Foundation.SegmentationMethod)">
            <summary>
            Creates the segmentor handle with the
            given <paramref name="segmentationMethod"/>.
            </summary>
            <param name="segmentationMethod">Segmentation method to use.</param>
            <returns>Segmentor handle.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during segmentor creation occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor.FaceSegmentationFromPiece(Stemmer.Cvb.DensePointCloud)">
            <summary>
            Segments the calibration piece from the given <paramref name="cloud"/>.
            </summary>
            <remarks>
            The segmentation is done on the projected xy plane.
            That means that the base plane has to be
            more or less parallel to the xy plane.
            </remarks>
            <param name="cloud">Point cloud to work with.</param>
            <returns>Segmentation image.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="cloud"/> is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor.FaceSegmentationFromPiece(Stemmer.Cvb.DensePointCloud,Stemmer.Cvb.Rect)">
            <summary>
            Segments the calibration piece from the given <paramref name="cloud"/>.
            </summary>
            <remarks>
            The segmentation is done on the projected xy plane.
            That means that the base plane has to be
            more or less parallel to the xy plane.
            </remarks>
            <param name="cloud">Point cloud to work with.</param>
            <param name="aoi">Area of interest.</param>
            <returns>Segmentation image.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="cloud"/> is null.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during segmentation occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor.ExtractProjectedPointsFromPiece(Stemmer.Cvb.DensePointCloud)">
            <summary>
            Extracts intersection points of the
            calibration piece from the given <paramref name="cloud"/>.
            </summary>
            <remarks>Lower roof points are projected to the base plane.</remarks>
            <param name="cloud">Point cloud to work with.</param>
            <returns>Extracted points.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="cloud"/> is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor.ExtractProjectedPointsFromPiece(Stemmer.Cvb.DensePointCloud,Stemmer.Cvb.Rect)">
            <summary>
            Extracts intersection points of the
            calibration piece from the given <paramref name="cloud"/>.
            </summary>
            <remarks>Lower roof points are projected to the base plane.</remarks>
            <param name="cloud">Point cloud to work with.</param>
            <param name="aoi">Area of interest.</param>
            <returns>Extracted points.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="cloud"/> is null.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during point extraction occurs.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Metric">
            <summary>
            Metric calibration routines.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Metric.CalibratorFromAqs12Piece(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.AQS12RangeMapSegmentor,Stemmer.Cvb.Foundation.CalibrationConfiguration,Stemmer.Cvb.Point3Dd[]@)">
            <summary>
            Creates an intrinsic calibrator from the
            given <paramref name="rangeMapPlane"/> of an AQS12 calibration piece.
            </summary>
            <param name="rangeMapPlane">Plane of the range map image to work with.</param>
            <param name="segmentor">The segmentor.</param>
            <param name="config">The calibration config.</param>
            <param name="residuals">Difference between the reference
            points and the result.</param>
            <returns>The created calibrator.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Metric.CalibratorFromAqs12Piece(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.AQS12RangeMapSegmentor,Stemmer.Cvb.Foundation.CalibrationConfiguration,Stemmer.Cvb.Point3Dd[]@,Stemmer.Cvb.Rect)">
            <summary>
            Creates an intrinsic calibrator from the
            given <paramref name="rangeMapPlane"/> of an AQS12 calibration piece.
            </summary>
            <param name="rangeMapPlane">Plane of the range map image to work with.</param>
            <param name="segmentor">The segmentor.</param>
            <param name="config">The calibration config.</param>
            <param name="residuals">Difference between the reference
            points and the result.</param>
            <param name="aoi">The area of interest.</param>
            <returns>The created calibrator.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="segmentor"/>
            or <paramref name="config"/> is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Metric.CalculateCorrectionOfLaserPlaneInclinationFromAqs12Piece(Stemmer.Cvb.DensePointCloud,Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor,Stemmer.Cvb.Foundation.CalibrationConfiguration,Stemmer.Cvb.Point3Dd[]@)">
            <summary>
            Calculates the affine transformation from the
            given <paramref name="cloud"/> of an AQS12
            calibration piece. This transformation corrects
            errors induced by an inclined laser plane.
            </summary>
            <param name="cloud">The point cloud.</param>
            <param name="segmentor">The segmentor.</param>
            <param name="config">The calibration configuration.</param>
            <param name="residuals">Difference between the reference
            points and the result.</param>
            <returns>Affine transformation, which corrects
            errors induced by an inclined laser plane.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="cloud"/> is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Metric.CalculateCorrectionOfLaserPlaneInclinationFromAqs12Piece(Stemmer.Cvb.DensePointCloud,Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor,Stemmer.Cvb.Foundation.CalibrationConfiguration,Stemmer.Cvb.Point3Dd[]@,Stemmer.Cvb.Rect)">
            <summary>
            Calculates the affine transformation from the
            given <paramref name="cloud"/> of an AQS12
            calibration piece. This transformation corrects
            errors induced by an inclined laser plane.
            </summary>
            <param name="cloud">The point cloud.</param>
            <param name="segmentor">The segmentor.</param>
            <param name="config">The calibration configuration.</param>
            <param name="residuals">Difference between the reference
            points and the result.</param>
            <param name="aoi">The area of interest in the <paramref name="cloud"/>.</param>
            <returns>Affine transformation, which corrects
            errors induced by an inclined laser plane.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="cloud"/>,
            <paramref name="segmentor"/> or <paramref name="config"/> is null.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during calculation of
            laser plane inclination occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Metric.CalculateRigidBodyTransformationFromAqs12Piece(Stemmer.Cvb.DensePointCloud,Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor,Stemmer.Cvb.Foundation.AQS12Piece,Stemmer.Cvb.Point3Dd[]@)">
            <summary>
            Calculates the rigid body transformation from
            the given <paramref name="cloud"/> of an AQS12
            calibration piece. The transformation is estimated
            by the Nelder-Mead method. The rigid body transformation
            is part of the extrinsic calibration.
            </summary>
            <param name="cloud">The point cloud.</param>
            <param name="segmentor">The segmentor.</param>
            <param name="piece">The AQS12 piece to use.</param>
            <param name="residuals">Difference between the reference
            points and the result.</param>
            <returns>The rigid body transformation.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="cloud"/> is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Metric.CalculateRigidBodyTransformationFromAqs12Piece(Stemmer.Cvb.DensePointCloud,Stemmer.Cvb.Foundation.AQS12DensePointCloudSegmentor,Stemmer.Cvb.Foundation.AQS12Piece,Stemmer.Cvb.Point3Dd[]@,Stemmer.Cvb.Rect)">
            <summary>
            Calculates the rigid body transformation from
            the given <paramref name="cloud"/> of an AQS12
            calibration piece. The transformation is estimated
            by the Nelder-Mead method. The rigid body transformation
            is part of the extrinsic calibration.
            </summary>
            <param name="cloud">The point cloud.</param>
            <param name="segmentor">The segmentor.</param>
            <param name="piece">The AQS12 piece to use.</param>
            <param name="residuals"></param>
            <param name="aoi">Area of interest in the <paramref name="cloud"/>.</param>
            <returns>The rigid body transformation.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="cloud"/>,
            <paramref name="segmentor"/> or <paramref name="piece"/> is null.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during rigid body transformation
            calculation occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Metric.CalculateRigidBodyTransformation(Stemmer.Cvb.Point3Dd[],Stemmer.Cvb.Point3Dd[])">
            <summary>
            Calculates a rigid body transformation (rotation matrix and translation)
            from given <paramref name="referencePoints"/> and <paramref name="measuredPoints"/>.
            The transformation is estimated by the Nelder-Mead method.
            </summary>
            <param name="referencePoints">Reference points of the body. (At least 4)</param>
            <param name="measuredPoints">Corresponding measured points of the body. (At least 4)</param>
            <returns>Affine matrix containing the rotation
            matrix elements and translation.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="measuredPoints"/>
            or <paramref name="referencePoints"/> is null.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during rigid body
            calculation occurs.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="measuredPoints"/> or
            <paramref name="referencePoints"/> have less than 3 points, or not the same
            amount of points.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Metric.CalculateAffineTransformation(Stemmer.Cvb.Point3Dd[],Stemmer.Cvb.Point3Dd[])">
            <summary>
            Calculates an affine transformation from the given
            <paramref name="referencePoints"/> and <paramref name="measuredPoints"/>.
            The transformation is calculated by a singular
            value decomposition.
            </summary>
            <param name="referencePoints">Reference points of the body. (At least 4)</param>
            <param name="measuredPoints">Corresponding measured points of the body. (At least 4)</param>
            <returns>Affine matrix containing the rotation
            matrix elements and translation.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="measuredPoints"/>
            or <paramref name="referencePoints"/> is null.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during rigid body
            calculation occurs.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="measuredPoints"/> or
            <paramref name="referencePoints"/> have less than 4 points, or not the same
            amount of points.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.NamespaceDoc">
            <summary>
            The namespace and assembly <c>Stemmer.Cvb.Foundation</c> holds all 
            classes and definitions that expose functionality of the 
            Common Vision Blox Foundation Package. The Foundation Package comprises
            the following DLLs:
            <list type="bullet">
              <item>Arithmetic.dll</item>
              <item>etBayerToRGB.dll</item>
              <item>CVCEdge.dll</item>
              <item>CVFoundation.dll</item>
              <item>DrawGraph.dll (not covered here)</item>
              <item>LightMeter.dll</item>
              <item>TextOut.dll</item>
              <item>ZXBarcode.dll</item>
            </list>
            Note that a valid Common Vision Blox Foundation Package license is 
            required to use this functionality unrestricted. If no license is 
            available, function-specific restrictions apply.
            </summary>  
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ReferenceType">
            <summary>
            Type of reference to browse.
            </summary>
            <remarks>
            The default is <see cref="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.Hierarchical"/>.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.Any">
            <summary>
            Browse any references (simply REFERENCES in OPC/UA spec).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.Hierarchical">
            <summary>
            Browse hierarchical references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.NonHierarchical">
            <summary>
            Browse non-hierarchical references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasChild">
            <summary>
            Browse child references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.Organizes">
            <summary>
            Browse organize references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasEventSource">
            <summary>
            Browse event source references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasModelingRule">
            <summary>
            Browse modeling rule references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasEncoding">
            <summary>
            Browse encoding references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasDescription">
            <summary>
            Browse description references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasTypeDefinition">
            <summary>
            Browse type definition references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.GeneratesEvent">
            <summary>
            Browse generate event references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.Aggregates">
            <summary>
            Browse aggregate references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasSubType">
            <summary>
            Browse sub type references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasProperty">
            <summary>
            Browse property refernces.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasComponent">
            <summary>
            Browse component references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasOrderedComponent">
            <summary>
            Browse ordered component references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasNotifier">
            <summary>
            Browse notifier references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasModelParent">
            <summary>
            Browse model parent references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.FromState">
            <summary>
            Browse from state references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.ToState">
            <summary>
            Browse to state references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasCause">
            <summary>
            Browse cause references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasEffect">
            <summary>
            Browse effect references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasHistoricalConfiguration">
            <summary>
            Browse historical configuration references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasSubStateMachine">
            <summary>
            Browse sub-state machine references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.AlwaysGeneratesEvent">
            <summary>
            Browse always generate event references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasTrueSubState">
            <summary>
            Browse <see langword="true"/> sub-state references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasFalseSubState">
            <summary>
            Browse <see langword="false"/> sub-state references.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.HasCondition">
            <summary>
            Browse condition references.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.BrowseFilter">
            <summary>
            Option object to filter <see cref="M:Stemmer.Cvb.Foundation.OpcUa.IClientNode.Browse(Stemmer.Cvb.Foundation.OpcUa.BrowseFilter)"/> results.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.BrowseFilter.Data">
            <summary>
            Native data type used for marshaling.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.BrowseFilter.#ctor">
            <summary>
            Default filter.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.BrowseFilter.Default">
            <summary>
            Gets the default filter for hierarchical reference including all data.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.BrowseFilter.IncludeSubTypes">
            <summary>
            Defines whether derived node types are also included.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.BrowseFilter.NodeClasses">
            <summary>
            Gets/sets the node classes to browse.
            </summary>
            <value>
            Default is <see cref="F:Stemmer.Cvb.Foundation.OpcUa.NodeClass.Unspecified"/> which means all node
            classes are put into the <see cref="M:Stemmer.Cvb.Foundation.OpcUa.IClientNode.Browse(Stemmer.Cvb.Foundation.OpcUa.BrowseFilter)"/> result.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.BrowseFilter.ReferenceType">
            <summary>
            Gets/set the type of reference to be browsed for.
            </summary>
            <remarks>
            See <see cref="T:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId"/> for possible browsable
            references.
            </remarks>
            <value>
            Default is <see cref="F:Stemmer.Cvb.Foundation.OpcUa.ReferenceType.Hierarchical"/>. 
            </value>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IServerMethodParameterCollection">
            <summary>
            Parameter collection for <see cref="T:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode"/> 
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode.InputParameters"/> and 
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode.OutputParameters"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.IServerMethodParameterCollection.Add(System.String,Stemmer.Cvb.Foundation.OpcUa.DataType)">
            <summary>
            Helper to easily add a new method parameter.
            </summary>
            <param name="name">Name of the parameter.</param>
            <param name="dataType">Data type of the parameter</param>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientState">
            <summary>
            Connection state of the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ClientState.Connected">
            <summary>
            The client is connected to a server.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ClientState.Faulted">
            <summary>
            Recoverable communication error.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ClientState.Error">
            <summary>
            Unrecoverable error: try to recreate the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/>.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient">
            <summary>
            OPC/UA client to enumerate and access OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeBase"/>s.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.#ctor(System.String)">
            <summary>
            Creates a new <b>Client</b> object connected to the given 
            <paramref name="url"/>.
            </summary>
            <param name="url">URL of OPC/UA server to open.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.Handle">
            <summary>
            Native CVB OPCCLT handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.IsDisposed">
            <summary>
            Tests whether the native handle has been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.Dispose">
            <summary>
            Disposes the native object wrapped by this object immediately.
            </summary>
            <remark>Call this method to release the resources allocated by this
            node immediately. Remember that after calling Dispose, any subsequent
            access to references to this image will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.ServerUrl">
            <summary>
            The URL this client is associated with.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.Reconnect">
            <summary>
            Reconnects to a server when this <see cref="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.State"/> is equal to
            <see cref="F:Stemmer.Cvb.Foundation.OpcUa.ClientState.Faulted"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.TryReconnect">
            <summary>
            Tries to reconnect to a server when this <see cref="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.State"/> is equal
            to <see cref="F:Stemmer.Cvb.Foundation.OpcUa.ClientState.Faulted"/>.
            </summary>
            <returns><see langword="true"/> on success; <see langword="false"/> on
            failure.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.State">
            <summary>
            Gets the current connection state of this object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient.Nodes">
            <summary>
            Access to the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode"/>s made available by the server.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientFloatNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> floating point variable node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientFloatNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> object.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientFloatNode.Value">
            <summary>
            Gets/sets the variable's value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientFloatNode.ToString">
            <summary>
            Gets the <see langword="string"/> representation of this node.
            </summary>
            <returns><see cref="P:Stemmer.Cvb.Foundation.OpcUa.ClientFloatNode.Value"/> as <see langword="string"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientIntegerNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> integer variable node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientIntegerNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> object.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientIntegerNode.Value">
            <summary>
            Gets/sets the variable's value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientIntegerNode.ToString">
            <summary>
            Gets the <see langword="string"/> representation of this node.
            </summary>
            <returns><see cref="P:Stemmer.Cvb.Foundation.OpcUa.ClientIntegerNode.Value"/> as <see langword="string"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientMethodNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> method node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientMethodNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">The native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> object.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientMethodNode.InputParameters">
            <summary>
            The read-only collection of input parameters.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientMethodNode.OutputParameters">
            <summary>
            The read-only collection of output parameters.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientMethodNode.Execute(System.Object[])">
            <summary>
            Calls the method.
            </summary>
            <remarks>
            <para>
            The input parameters must match what is defined in 
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.InputParameters"/>. 
            </para><para>
            The output parameters are returned as defined in
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.OutputParameters"/>. To make your life simpler
            all integer types are stored as <see langword="long"/> or 
            <see langword="ulong"/>, floating point values as 
            <see langword="double"/> and all strings as <see langword="string"/>s.
            Other parameter types are not supported and set to 
            <see langword="null"/>.
            </para>
            </remarks>
            <param name="args">The input arguments as defined in
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.InputParameters"/>.</param>
            <returns>The output values as defined in the 
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.OutputParameters"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientNodeBase">
            <summary>
            OPC/UA node created by a <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientNodeBase.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Creates a new client <b>Node</b> from the given 
            <paramref name="handle"/>.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientNodeBase.FromHandle(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Creates a new <b>Node</b> object from the given 
            <paramref name="handle"/>.
            </summary>
            <remarks>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="handle"/>
            parameter will most likely lead to severe problems in your
            application.</remarks>
            <param name="handle">Native node handle.</param>
            <param name="parent">The parent object.</param>
            <returns>Concrete <b>Node</b> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientNodeBase.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Creates a new <b>Node</b> object from the given 
            <paramref name="handle"/>.
            </summary>
            <remarks>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="handle"/>
            parameter will most likely lead to severe problems in your
            application.</remarks>
            <param name="handle">Native node handle.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if you want to 
            share ownership; <see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.No"/> if you want to adopt the
            lifetime (e.g. after getting the handle from a classic API function.)
            </param>
            <param name="parent">The parent object.</param>
            <returns>Concrete <b>Node</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientNodeBase.Client">
            <summary>
            Gets the parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> object.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientNodeBase.BrowseChildren">
            <summary>
            Browse all hierarchical children of this <b>Node</b>.
            </summary>
            <returns>Enumerable to enumerate all children.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientNodeBase.Browse(Stemmer.Cvb.Foundation.OpcUa.BrowseFilter)">
            <summary>
            Browse references of this node as defined by the 
            <paramref name="filter"/>.
            </summary>
            <param name="filter">Defines which kind of nodes to browse. See
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.BrowseFilter"/> for details.</param>
            <returns>Enumerable to enumerate found <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode"/>s</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientNodes">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode"/> access.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientNodes.#ctor(Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Creates the browser from the parent.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientNodes.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientNodes.Dispose">
            <summary>
            Disposes of the native resources.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientNodes.RootFolder">
            <summary>
            Gets the root folder node which is the parent of all nodes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientNodes.Item(System.Int32,System.String)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode"/> with the given 
            <paramref name="namespaceIndex"/> and <paramref name="identifier"/>.
            </summary>
            <param name="namespaceIndex">Namespace index for 
            <paramref name="identifier"/>.</param>
            <param name="identifier">Node identifier of node to get.</param>
            <returns>The <b>IClientNode</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientNodes.Item(System.Int32,System.Int64)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode"/> with the given 
            <paramref name="namespaceIndex"/> and <paramref name="identifier"/>.
            </summary>
            <param name="namespaceIndex">Namespace index for 
            <paramref name="identifier"/>.</param>
            <param name="identifier">Node identifier of node to get.</param>
            <returns>The <b>IClientNode</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientNodes.Item(System.Int32,System.Guid)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode"/> with the given 
            <paramref name="namespaceIndex"/> and <paramref name="identifier"/>.
            </summary>
            <param name="namespaceIndex">Namespace index for 
            <paramref name="identifier"/>.</param>
            <param name="identifier">Node identifier of node to get.</param>
            <returns>The <b>IClientNode</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientNodes.Item(System.Int32,System.Byte[])">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode"/> with the given 
            <paramref name="namespaceIndex"/> and <paramref name="identifier"/>.
            </summary>
            <param name="namespaceIndex">Namespace index for 
            <paramref name="identifier"/>.</param>
            <param name="identifier">Node identifier of node to get.</param>
            <returns>The <b>IClientNode</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientNodes.Item(Stemmer.Cvb.Foundation.OpcUa.NodeId)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode"/> with the given <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> 
            <paramref name="key"/>.
            </summary>
            <param name="key">Identifier of <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode"/> to retrieve.
            </param>
            <returns>The <b>IClientNode</b> object.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientObjectNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> object node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientObjectNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">The parent client object.</param>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientObjectTypeNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> ObjectType node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientObjectTypeNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">The parent client object.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientObjectTypeNode.IsAbstract">
            <summary>
            Gets whether the ObjectType is an abstract type.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientStringNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> string variable node.
            </summary>  
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientStringNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> object.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientStringNode.Value">
            <summary>
            Gets/sets the variable's value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientStringNode.ToString">
            <summary>
            Gets the <see langword="string"/> representation of this node.
            </summary>
            <returns><see cref="P:Stemmer.Cvb.Foundation.OpcUa.ClientStringNode.Value"/> as <see langword="string"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientVariableNodeBase">
            <summary>
            Base class of OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> variable nodes.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientVariableNodeBase.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Creates a new variable node.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">The parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientVariableNodeBase.DataTypeFromHandle(System.IntPtr)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.DataType"/> from the given 
            <paramref name="handle"/>.
            </summary>
            <param name="handle">Native variable node handle.</param>
            <returns>The <see cref="T:Stemmer.Cvb.Foundation.OpcUa.DataType"/> of the variable node.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ClientVariableTypeNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> VariableType node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ClientVariableTypeNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">The parent client object.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ClientVariableTypeNode.IsAbstract">
            <summary>
            Gets whether this VariableType is an abstract type.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.GenericClientNode">
            <summary>
            Dummy implementation for unwrapped node types.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.GenericClientNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaClient)">
            <summary>
            Ctor creating the generic <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> node.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent object.</param>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.GenericServerNode">
            <summary>
            Dummy implementation for unwrapped node types.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.GenericServerNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Ctor creating the generic <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> node.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent object.</param>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.GuidNodeId">
            <summary>
            A <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> with a <see cref="T:System.Guid"/> identifier.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.GuidNodeId.#ctor(System.Int32,System.Guid)">
            <summary>
            Creates a new string <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> <paramref name="identifier"/> 
            in the given <paramref name="namespaceIndex"/>.
            </summary>
            <param name="namespaceIndex">Custom, positive (non 0) index.</param>
            <param name="identifier">Non <see langword="null"/> and not empty identifier.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.GuidNodeId.#ctor(System.IntPtr)">
            <summary>
            For <see cref="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.FromHandle(System.IntPtr)"/>.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.GuidNodeId.GetHashCode">
            <summary>
            Gets the hash code of this identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.GuidNodeId.Equals(Stemmer.Cvb.Foundation.OpcUa.NodeId)">
            <summary>
            Equality-compares this <b>StringNodeId</b> with the 
            <paramref name="other"/> one.
            </summary>
            <remarks>
            Two <b>NodeId</b>s are equal if they have the same identifier type and
            value and reside in the same namespace.
            </remarks>
            <param name="other">Other <b>NodeId</b> to compare with.</param>
            <returns><see langword="true"/> if this and the <paramref name="other"/>
            object are equal.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.GuidNodeId.Identifier">
            <summary>
            Gets the identifier value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.GuidNodeId.ToDebugString">
            <summary>
            Gets the debugger representation of this node id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IClientMethodNode">
            <summary>
            Callable OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> method node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.IClientMethodNode.Execute(System.Object[])">
            <summary>
            Calls the method.
            </summary>
            <remarks>
            <para>
            The input parameters must match what is defined in 
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.InputParameters"/>. 
            </para><para>
            The output parameters are returned as defined in
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.OutputParameters"/>. To make your life simpler
            all integer types are stored as <see langword="long"/> or 
            <see langword="ulong"/>, floating point values as 
            <see langword="double"/> and all strings as <see langword="string"/>s.
            Other parameter types are not supported and set to 
            <see langword="null"/>.
            </para>
            </remarks>
            <param name="args">The input arguments as defined in
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.InputParameters"/>.</param>
            <returns>The output values as defined in the 
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.OutputParameters"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.IClientNode.BrowseChildren">
            <summary>
            Browse all hierarchical children of this <b>Node</b>.
            </summary>
            <returns>Enumerable to enumerate all children.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.IClientNode.Browse(Stemmer.Cvb.Foundation.OpcUa.BrowseFilter)">
            <summary>
            Browse references of this node as defined by the 
            <paramref name="filter"/>.
            </summary>
            <param name="filter">Defines which kind of nodes to browse. See
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.BrowseFilter"/> for details.</param>
            <returns>Enumerable to enumerate found <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IClientNode"/>s</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IClientVariableNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> variable node.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IFloatNode">
            <summary>
            OPC/UA floating point variable.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IFloatNode.Value">
            <summary>
            Gets/sets the variable's value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IIntegerNode">
            <summary>
            OPC/UA integer variable node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IIntegerNode.Value">
            <summary>
            Gets/sets the variable's value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IMethodParameter">
            <summary>
            One input or output parameter of an <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IMethodNode"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IMethodParameter.Name">
            <summary>
            Gets the parameter name; <see langword="null"/> if unknown.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IMethodParameter.DataType">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.DataType"/> of the parameter.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.MethodParameter">
            <summary>
            One input or output parameter.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.MethodParameter.Name">
            <summary>
            Gets/sets the parameter name.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.MethodParameter.DataType">
            <summary>
            Gets/sets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.DataType"/> of the parameter.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ParameterType">
            <summary>
            Defines whether a method parameter is <see cref="F:Stemmer.Cvb.Foundation.OpcUa.ParameterType.Input"/> or 
            <see cref="F:Stemmer.Cvb.Foundation.OpcUa.ParameterType.Output"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ParameterType.Input">
            <summary>
            Parameter is used for input.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ParameterType.Output">
            <summary>
            Parameter is used for output.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IMethodNode">
            <summary>
            An OPC/UA callable node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.InputParameters">
            <summary>
            The collection of input parameters.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.OutputParameters">
            <summary>
            The collection of output parameters.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.NodeClass">
            <summary>
            Identifier for the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeBase"/>'s actual class.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.NodeClass.Unspecified">
            <summary>
            Used as default value or don't care/any.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.NodeClass.Object">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IObjectNode"/> 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.NodeClass.Variable">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IVariableNode"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.NodeClass.Method">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IMethodNode"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.NodeClass.ObjectType">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IObjectTypeNode"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.NodeClass.VariableType">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IVariableTypeNode"/>.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.INode">
            <summary>
            Interface for all OPC/UA nodes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.INode.NodeId">
            <summary>
            Gets the <see cref="P:Stemmer.Cvb.Foundation.OpcUa.INode.NodeId"/> uniquely identifying this <b>INode</b>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.INode.BrowseName">
            <summary>
            Gets string node identifier (especially for browsing).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.INode.DisplayName">
            <summary>
            Node name for displaying it in a user interface.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.INode.Description">
            <summary>
            Optional description of this node's role and behavior.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IObjectNode">
            <summary>
            OPC/UA object node.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IObjectTypeNode">
            <summary>
            OPC/UA ObjectType node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IObjectTypeNode.IsAbstract">
            <summary>
            Gets whether this ObjectType is an abstract type.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.MethodCalledEventArgs">
            <summary>
            Event arguments for a called OPC/UA MethodObject.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.MethodCalledEventArgs.#ctor(System.Object[],System.Object[])">
            <summary>
            Creates the argument event args.
            </summary>
            <param name="inputArguments">Input arguments.</param>
            <param name="outputArguments">Output arguments.</param>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.MethodCalledEventArgs.InputArguments">
            <summary>
            The input arguments set by the client. The data types are as defined in
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.InputParameters"/>. For simplicity all integer 
            types are mapped to <see langword="long"/>/<see langword="ulong"/>, all
            floating point types as <see langword="double"/> and strings as
            <see langword="string"/>. Unsupported values are set to 
            <see langword="null"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.MethodCalledEventArgs.OutputArguments">
            <summary>
            Set these to the return values as defined in 
            <see cref="P:Stemmer.Cvb.Foundation.OpcUa.IMethodNode.OutputParameters"/>.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IServerMethodNode">
            <summary>
            Callable OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> method node.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.OpcUa.IServerMethodNode.Called">
            <summary>
            Event that is fired when the client executes this method.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IServerMethodNode.InputParameters">
            <summary>
            The collection of input parameters.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IServerMethodNode.OutputParameters">
            <summary>
            The collection of output parameters.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IServerNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> node.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IServerVariableNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> variable node.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.OpcUa.IServerVariableNode.Read">
            <summary>
            Event that is signaled when the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> reads a value.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.OpcUa.IServerVariableNode.Written">
            <summary>
            Event that is signaled when the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> has written a 
            value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IStringNode">
            <summary>
            OPC/UA string variable.
            </summary>  
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IStringNode.Value">
            <summary>
            Gets/sets the variable's value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IVariableTypeNode">
            <summary>
            OPC/UA VariableType node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.IVariableTypeNode.IsAbstract">
            <summary>
            Gets whether this VariableType is an abstract type.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.NamespaceHelper">
            <summary>
            OPC/UA namespace concept.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId">
            <summary>
            ReferenceType <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/>s.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.References">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse any references.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HierarchicalReferences">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse hierarchical 
            references.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.NonHierarchicalReferences">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse non-hierarchical 
            references.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasChild">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have 
            children.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.Organizes">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that organize
            others.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasEventSource">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            event sources.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasModelingRule">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            modeling rules.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasEncoding">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            an encoding.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasDescription">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            a description.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasTypeDefinition">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            a type definition.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.GeneratesEvent">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that generates
            events.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.Aggregates">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that 
            aggregates nodes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasSubType">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            sub type nodes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasProperty">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            property nodes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasComponent">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            components.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasOrderedComponent">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            ordered components.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasNotifier">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            notifiers.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasModelParent">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            model parents.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.FromState">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            from state references.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.ToState">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            to state references.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasCause">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            a cause.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasEffect">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            an effect.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasHistoricalConfiguration">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            historical configurations.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasSubStateMachine">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            sub-state machines.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.AlwaysGeneratesEvent">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            sub-state machines.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasTrueSubState">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            <see langword="true"/> sub-states.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasFalseSubState">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            <see langword="false"/> sub-states.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ReferenceTypeId.HasCondition">
            <summary>
            Gets a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> to browse nodes that have
            conditions.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.Namespace0.FolderObjectId">
            <summary>
            Folder <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IObjectNode"/> <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/>s.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.FolderObjectId.Root">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the Root folder.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.FolderObjectId.Objects">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the Objects folder.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.FolderObjectId.ObjectTypes">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ObjectTypes folder.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.FolderObjectId.Types">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the Types folder.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.FolderObjectId.Views">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the Views folder.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.FolderObjectId.VariabelTypes">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the VariableTypes folder.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.FolderObjectId.DatayTypes">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the DataTypes folder.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.FolderObjectId.ReferenceTypes">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ReferenceTypes folder.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.FolderObjectId.EventTypes">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the EventTypes folder.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IObjectTypeNode"/> types <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/>s.
            </summary>
            <remarks>
            You can use some of them like <see cref="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.BaseObject"/> as a parent
            for creating <see cref="T:Stemmer.Cvb.Foundation.OpcUa.ServerObjectTypeNode"/>s.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.BaseObject">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the BaseObject type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.Folder">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the Folder type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.DataTypeSystem">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the DataTypeSystem type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.DatyTypeEncoding">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the DatyTypeEncoding type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ModelingRule">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ModelingRule type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.Server">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the Server type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ServerCapabilities">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ServerCapabilities type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ServerDiagnostics">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ServerDiagnostics type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.SessionsDiagnosticsSummary">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            SessionsDiagnosticsSummary type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.SessionDiagnosticsObject">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the SessionDiagnosticsObject 
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.VendorServerInfo">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the VendorServerInfo type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ServerRedundancy">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ServerRedundancy type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.TransparentRedundancy">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the TransparentRedundancy
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.NonTransparentRedundancy">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the NonTransparentRedundancy
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.BaseEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the BaseEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditSecurityEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditSecurityEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditChannelEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditChannelEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditOpenSecureChannelEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditOpenSecureChannelEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditSessionEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditSessionEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditCreateSessionEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditCreateSessionEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditActivateSessionEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditActivateSessionEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditCancelEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditCancelEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditCertificateEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditCertificateEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditCertificateDataMismatchEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditCertificateDataMismatchEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditCertificateExpiredEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditCertificateExpiredEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditCertificateInvalidEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditCertificateInvalidEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditCertificateUntrustedEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditCertificateUntrustedEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditCertificateRevokedEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditCertificateRevokedEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditCertificateMismatchEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditCertificateMismatchEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditNodeManagementEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditNodeManagementEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditAddNodesEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditAddNodesEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditDeleteNodesEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditDeleteNodesEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditAddReferenceEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditAddReferenceEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditDeleteReferenceEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditDeleteReferenceEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditUpdateEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditUpdateEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditWriteUpdateEventType">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditWriteUpdateEventType type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditHistoryUpdateEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditHistoryUpdateEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditUpdateMethodEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditUpdateMethodEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.SystemEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the SystemEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.DeviceFailureEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the DeviceFailureEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.BaseModelChangeEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the BaseModelChangeEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.GeneralModelChangeEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the GeneralModelChangeEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.StateMachine">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the StateMachine type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.State">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the FolderType type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.InitialState">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the InitialState type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.Transition">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the Transition type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.TransitionEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the TransitionEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditUpdateStateEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditUpdateStateEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.HistoricalDataConfiguration">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            HistoricalDataConfiguration type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.HistoryServerCapabilities">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the HistoryServerCapabilities
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AggregateFunction">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AggregateFunction type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ProgramTransitionEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ProgramTransitionEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ProgramStateMachine">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ProgramStateMachine type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.SemanticChangeEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the SemanticChangeEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditUrlMismatchEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditUrlMismatchEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.FiniteStateMachine">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the FiniteStateMachine type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.Condition">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the Condition type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.RefreshStartEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the RefreshStartEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.RefreshEndEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the RefreshEndEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.RefreshRequiredEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the RefreshRequiredEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditConditionEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditConditionEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditConditionEnableEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditConditionEnableEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditConditionCommentEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditConditionCommentEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.DialogCondition">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the DialogCondition type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AcknowledgeableCondition">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the FolderType type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AlarmCondition">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AlarmCondition type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ShelvedStateMachine">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ShelvedStateMachine type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.LimitedAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the LimitedAlarm type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditHistoryEventUpdateEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditHistoryEventUpdateEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditHistoryValueUpdateEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditHistoryValueUpdateEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditHistoryDeleteEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditHistoryDeleteEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditHistoryRawModifyDeleteEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditHistoryRawModifyDeleteEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditHistoryAtTimeDeleteEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditHistoryAtTimeDeleteEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditHistoryEventDeleteEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditHistoryEventDeleteEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.EventQueueOverflowEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the EventQueueOverflowEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ProgramTransitionAuditEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            ProgramTransitionAuditEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditConditionRespondEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditConditionRespondEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditConditionAcknowledgeEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditConditionAcknowledgeEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditConditionConfirmEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AuditConditionConfirmEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ExclusiveLimitStateMachine">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ExclusiveLimitStateMachine type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ExclusiveLimitAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ExclusiveLimitAlarm type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ExclusiveLevelAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ExclusiveLevelAlarm type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ExclusiveRateOfChangeAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            ExclusiveRateOfChangeAlarm type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ExclusiveDeviationAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ExclusiveDeviationAlarm
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.NonExclusiveLimitAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the NonExclusiveLimitAlarm
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.NonExclusiveLevelAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the NonExclusiveLevelAlarm
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.NonExclusiveRateOfChangeAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            NonExclusiveRateOfChangeAlarm type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.NonExclusiveDeviationAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            NonExclusiveDeviationAlarm type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.DiscreteAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the FolderType type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.OffNormalAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the OffNormalAlarm type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.TripAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the TripAlarm type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditConditionShelvingEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditConditionShelvingEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.BaseConditionClass">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the BaseConditionClass type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ProcessConditionClass">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ProcessConditionClass
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.MaintenanceConditionClass">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the MaintenanceConditionClass
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.SystemConditionClass">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the SystemConditionClass type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AggregateConfiguration">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AggregateConfiguration
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ProgressEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ProgressEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.SystemStatusChangeEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the FolderTypeSystemStatusChangeEvent
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.OperationLimits">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the OperationLimits type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.File">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the File type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AddressSpaceFile">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AddressSpaceFile type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.NamespaceMetadata">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the NamespaceMetadata type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.Namespace">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the FolderTypeNamespace type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.SystemOffNormalAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the SystemOffNormalAlarm type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.AuditProgramTransitionEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            AuditProgramTransitionEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.NonTransparentNetworkRedundancy">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            NonTransparentNetworkRedundancy type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.TrustList">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the TrustList type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.CertificateGroup">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the CertificateGroup type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.Certificate">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the Certificate type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ApplicationCertificate">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ApplicationCertificate
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.HttpCertificate">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the HttpCertificate type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.RsaMinApplicationCertificate">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            RsaMinApplicationCertificate type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.RsaSha256ApplicationCertificate">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            RsaSha256ApplicationCertificate type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.TrustListUpdatedAuditEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            TrustListUpdatedAuditEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.UpdateCertificateMethod">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the UpdateCertificateMethod
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.ServerConfiguration">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ServerConfiguration type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.CertificateUpdatedAuditEvent">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            CertificateUpdatedAuditEvent type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.CertificateExpirationAlarm">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            CertificateExpirationAlarm type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.FileDirectory">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the FileDirectory type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.ObjectTypeId.CertificateGroupFolder">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the CertificateGroupFolder
            type.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IVariableTypeNode"/> types <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/>s.
            </summary>
            <remarks>
            You can use some of them like <see cref="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.BaseVariable"/> as a parent
            for creating <see cref="T:Stemmer.Cvb.Foundation.OpcUa.ServerVariableTypeNode"/>s.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.BaseVariable">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the BaseVariable type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.BaseDataVariable">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the BaseDataVariable type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.Property">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the Property type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.DataTypeDescription">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the DataTypeDescription type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.DataTypeDictionary">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the DataTypeDictionary type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.ServerVendorCapability">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ServerVendorCapability type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.ServerStatus">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ServerStatus type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.ServerDiagnosticsSummary">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ServerDiagnosticsSummary
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.SamplingIntervalDiagnosticsArray">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            SamplingIntervalDiagnosticsArray type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.SamplingIntervalDiagnostics">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            SamplingIntervalDiagnostics type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.SubscriptionDiagnosticsArray">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            SubscriptionDiagnosticsArray type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.SubscriptionDiagnostics">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            SubscriptionDiagnostics type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.SessionDiagnosticsArray">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            SessionDiagnosticsArray type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.SessionDiagnosticsVariable">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            SessionDiagnosticsVariable type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.SessionSecurityDiagnosticsArray">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            SessionSecurityDiagnosticsArray type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.SessionSecurityDiagnostics">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the 
            SessionSecurityDiagnostics type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.DataItem">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the DataItem type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.AnalogItem">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the AnalogItem type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.DescreteItem">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the DescreteItem type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.TwoStateDescrete">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the TwoStateDescrete type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.MultiStateDescrete">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the MultiStateDescrete type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.ProgramDiagnostic">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ProgramDiagnostic type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.StateVariable">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the StateVariable type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.FiniteStateVaribale">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the FiniteStateVaribale type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.TransitionVariable">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the TransitionVariable type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.FiniteTransitionVariable">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the FiniteTransitionVariable
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.BuildInfo">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the BuildInfo type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.TwoStateVariable">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the TwoStateVariable type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.ConditionVariable">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ConditionVariable type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.MultistateValueDiscrete">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the MultistateValueDiscrete
            type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.OptionSet">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the OptionSet type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.ArrayItem">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ArrayItem type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.YArrayItem">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the YArrayItem type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.XYArrayItem">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the XArrayItem type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.ImageItem">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ImageItem type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.CubeItem">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the ImageItem type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.Namespace0.VaribleTypeId.NDimensionArrayItem">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId"/> of the NDimensionArrayItem type.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.NativeExtensions">
            <summary>
            Helper for native calls to the OPC/UA library.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NativeExtensions.NativeCall(Stemmer.Cvb.INativeHandle,Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionVoid)">
            <summary>
            Do a native call with automatic error handling.
            </summary>
            <param name="wrapper">The object on which to perform the 
            <paramref name="action"/>.</param>
            <param name="action">Native action to perform.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NativeExtensions.NativeCall``1(Stemmer.Cvb.INativeHandle,Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunction1{``0})">
            <summary>
            Do a native call with automatic error handling.
            </summary>
            <typeparam name="TOut">Return type.</typeparam>
            <param name="wrapper">The object on which to perform the 
            <paramref name="action"/>.</param>
            <param name="action">Native action to perform.</param>
            <returns>The result of the <paramref name="action"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.NodeBase">
            <summary>
            Base class for all OPC/UA nodes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.NodeBase.LockAnchor">
            <summary>
            Enables thread safety for "transparent" .Net side operations.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeBase.#ctor(System.IntPtr)">
            <summary>
            Creates a new <b>Node</b> object from the given 
            <paramref name="handle"/>.
            </summary>
            <param name="handle">Native CVOPCNODE handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.NodeBase.Handle">
            <summary>
            Native CVB CVOPCNODE handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.NodeBase.IsDisposed">
            <summary>
            Tests whether the native handle has been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.OpcUa.NodeBase.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeBase.Dispose">
            <summary>
            Disposes the native object wrapped by this object immediately.
            </summary>
            <remark>Call this method to release the resources allocated by this
            node immediately. Remember that after calling Dispose, any subsequent
            access to references to this image will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeBase.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.NodeBase.NodeId">
            <summary>
            Gets the <b>NodeId</b> identifying this <b>Node</b>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.NodeBase.BrowseName">
            <summary>
            Gets string node identifier (especially for browsing).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.NodeBase.DisplayName">
            <summary>
            Node name for displaying it in a user interface.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.NodeBase.Description">
            <summary>
            Optional description of this node's role and behavior.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeBase.NodeClassFromHandle(System.IntPtr)">
            <summary>
            Gets the node class of the given OPC/UA native node handle.
            </summary>
            <param name="handle">Native node handle.</param>
            <returns><see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeClass"/> of the given <paramref name="handle"/>.
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.NodeId">
            <summary>
            Unique identifier for a single <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeBase"/>.
            </summary>
            <remarks>
            These IDs can have different types. To create one use one of these (like
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.StringNodeId"/>.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.#ctor(System.IntPtr)">
            <summary>
            Creates a new node id from the given <paramref name="handle"/>.
            </summary>
            <param name="handle">Native node id handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.FromHandle(System.IntPtr)">
            <summary>
            Creates a new <b>NodeId</b> object from the given 
            <paramref name="handle"/>.
            </summary>
            <remarks>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="handle"/>
            parameter will most likely lead to severe problems in your
            application.</remarks>
            <param name="handle">Native node ID handle.</param>
            <returns>Concrete <b>NodeId</b> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Creates a new <b>NodeId</b> object from the given 
            <paramref name="handle"/>.
            </summary>
            <remarks>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="handle"/>
            parameter will most likely lead to severe problems in your
            application.</remarks>
            <param name="handle">Native node ID handle.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if you want to 
            share ownership; <see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.No"/> if you want to adopt the
            lifetime (e.g. after getting the handle from a classic API function.)
            </param>
            <returns>Concrete <b>NodeId</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.NodeId.Handle">
            <summary>
            Native CVB OPCNID handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.NodeId.IsDisposed">
            <summary>
            Tests whether the native handle has been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.OpcUa.NodeId.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.Dispose">
            <summary>
            Disposes the native object wrapped by this object immediately.
            </summary>
            <remark>Call this method to release the resources allocated by this
            node immediately. Remember that after calling Dispose, any subsequent
            access to references to this image will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.NodeId.NamespaceIndex">
            <summary>
            Gets the namespace index (or page) this identifier belongs to.
            </summary>
            <remarks>
            Only index 0 is standardized by the OPC/UA.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.ToString">
            <summary>
            Gets the string representation of this <b>NodeId</b>.
            </summary>
            <returns>Text containing the ID type, namespace and value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.ToDebugString">
            <summary>
            Debugger representation of NodeID identifiers.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.Equals(Stemmer.Cvb.Foundation.OpcUa.NodeId)">
            <summary>
            Equality-compares this <b>NodeId</b> with the <paramref name="other"/> 
            one.
            </summary>
            <remarks>
            Two <b>NodeId</b>s are equal if they have the same identifier type and
            value and reside in the same namespace.
            </remarks>
            <param name="other">Other <b>NodeId</b> to compare with.</param>
            <returns><see langword="true"/> if this and the <paramref name="other"/>
            object are equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.Equals(System.Object)">
            <summary>
            Equality-compares this <b>NodeId</b> with the <paramref name="other"/> 
            one.
            </summary>
            <remarks>
            Two <b>NodeId</b>s are equal if they have the same identifier type and
            value and reside in the same namespace.
            </remarks>
            <param name="other">Other <b>NodeId</b> to compare with.</param>
            <returns><see langword="true"/> if this and the <paramref name="other"/>
            object are equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.GetHashCode">
            <summary>
            Gets the hash code for this <b>NodeId</b>.
            </summary>
            <returns>Hash considering the <see cref="P:Stemmer.Cvb.Foundation.OpcUa.NodeId.NamespaceIndex"/> and 
            <i>Identifier</i>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId">
            <summary>
            A <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> with an integer identifier.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId.#ctor(Stemmer.Cvb.Foundation.OpcUa.NativeNamespace0NodeIDs)">
            <summary>
            Creates a new numeric <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> <paramref name="identifier"/> 
            in 0 namespace
            </summary>
            <param name="identifier">Standardized node id constant.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId.#ctor(System.Int32,System.Int64)">
            <summary>
            Creates a new numeric <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> <paramref name="identifier"/> 
            in the given <paramref name="namespaceIndex"/>.
            </summary>
            <param name="namespaceIndex">Custom, positive (possibly 0) index.</param>
            <param name="identifier">Identifier in the range of 0 and 
            <see cref="F:System.UInt32.MaxValue"/>.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId.#ctor(System.IntPtr)">
            <summary>
            For <see cref="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.FromHandle(System.IntPtr)"/>.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId.GetHashCode">
            <summary>
            Gets the hash code of this identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId.Equals(Stemmer.Cvb.Foundation.OpcUa.NodeId)">
            <summary>
            Equality-compares this <b>NumericNodeId</b> with the 
            <paramref name="other"/> one.
            </summary>
            <remarks>
            Two <b>NodeId</b>s are equal if they have the same identifier type and
            value and reside in the same namespace.
            </remarks>
            <param name="other">Other <b>NodeId</b> to compare with.</param>
            <returns><see langword="true"/> if this and the <paramref name="other"/>
            object are equal.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId.Identifier">
            <summary>
            Gets the identifier value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.NumericNodeId.ToDebugString">
            <summary>
            Debug visualization of this node id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.OpaqueNodeId">
            <summary>
            A <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> with a <see langword="byte"/> array identifier.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpaqueNodeId.#ctor(System.Int32,System.Byte[])">
            <summary>
            Creates a new string <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> <paramref name="identifier"/> 
            in the given <paramref name="namespaceIndex"/>.
            </summary>
            <param name="namespaceIndex">Custom, positive (non 0) index.</param>
            <param name="identifier">Non <see langword="null"/> and not empty identifier.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpaqueNodeId.#ctor(System.IntPtr)">
            <summary>
            For <see cref="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.FromHandle(System.IntPtr)"/>.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpaqueNodeId.ToDebugString">
            <summary>
            Gets the debugger representation of this node id.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpaqueNodeId.GetHashCode">
            <summary>
            Gets the hash code of this identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpaqueNodeId.Equals(Stemmer.Cvb.Foundation.OpcUa.NodeId)">
            <summary>
            Equality-compares this <b>StringNodeId</b> with the 
            <paramref name="other"/> one.
            </summary>
            <remarks>
            Two <b>NodeId</b>s are equal if they have the same identifier type and
            value and reside in the same namespace.
            </remarks>
            <param name="other">Other <b>NodeId</b> to compare with.</param>
            <returns><see langword="true"/> if this and the <paramref name="other"/>
            object are equal.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpaqueNodeId.Identifier">
            <summary>
            Gets the identifier value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerState">
            <summary>
            States the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> can be in.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ServerState.Running">
            <summary>
            The <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> is running.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ServerState.Faulted">
            <summary>
            A recoverable error occurred.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ServerState.NoConfiguration">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ServerState.Suspended">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ServerState.Shutdown">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ServerState.Test">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ServerState.CommunicationFault">
            <summary>
            
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.ServerState.Unknown">
            <summary>
            Default value for initialization.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer">
            <summary>
            OPC/UA server to provide access to <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeBase"/>s for clients.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.#ctor">
            <summary>
            Starts the OPC/UA on some IP address with the default port 4840.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.#ctor(System.Int32)">
            <summary>
            Starts the OPC/UA server on some IP address on the given 
            <paramref name="port"/>.
            </summary>
            <param name="port">Default is 4840; use a port higher than 1024 if a 
            custom one is wanted.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.Handle">
            <summary>
            Native CVB CVOPCNODE handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.IsDisposed">
            <summary>
            Tests whether the native handle has been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.Dispose">
            <summary>
            Disposes the native object wrapped by this object immediately.
            </summary>
            <remark>Call this method to release the resources allocated by this
            node immediately. Remember that after calling Dispose, any subsequent
            access to references to this image will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.State">
            <summary>
            Gets the current state of this object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.Url">
            <summary>
            Gets the <b>Server</b> URL that a <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> needs to open
            a connection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.Namespaces">
            <summary>
            Gets the list of all registered namespaces.
            </summary>
            <remarks>
            The <see cref="T:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList"/> can also use to register a new
            namespace via its <see cref="M:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList.Add(System.String)"/> method.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.Nodes">
            <summary>
            Access to the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IServerNode"/>s made available by the server.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.Start">
            <summary>
            Starts this <b>Server</b> object.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer.Stop">
            <summary>
            Stops this server.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerFloatNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> float variable node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerFloatNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerFloatNode.#ctor(System.Int32,System.String,Stemmer.Cvb.Foundation.OpcUa.VariableType,Stemmer.Cvb.Foundation.OpcUa.IServerNode)">
            <summary>
            Creates a new float node that is connected to a <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/>.
            at the <paramref name="parent"/> node.
            </summary>
            <param name="namespaceIndex">Namespace in which to create this node.
            </param>
            <param name="identifier">Unique identifier of the Object node.</param>
            <param name="variableType">Specifies whether this is a 
            <see cref="F:Stemmer.Cvb.Foundation.OpcUa.VariableType.DataVariable"/> or 
            <see cref="F:Stemmer.Cvb.Foundation.OpcUa.VariableType.Property"/>.</param>
            <param name="parent">The parent node to add this node to.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerFloatNode.Value">
            <summary>
            Gets/sets the variable's value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerFloatNode.ToString">
            <summary>
            Gets the <see langword="string"/> representation of this node.
            </summary>
            <returns><see cref="P:Stemmer.Cvb.Foundation.OpcUa.ServerFloatNode.Value"/> as <see langword="string"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerIntegerNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> integer variable node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerIntegerNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerIntegerNode.#ctor(System.Int32,System.String,Stemmer.Cvb.Foundation.OpcUa.VariableType,Stemmer.Cvb.Foundation.OpcUa.IServerNode)">
            <summary>
            Creates a new integer node that is connected to a <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/>.
            at the <paramref name="parent"/> node.
            </summary>
            <param name="namespaceIndex">Namespace in which to create this node.
            </param>
            <param name="identifier">Unique identifier of the Object node.</param>
            <param name="variableType">Specifies whether this is a 
            <see cref="F:Stemmer.Cvb.Foundation.OpcUa.VariableType.DataVariable"/> or 
            <see cref="F:Stemmer.Cvb.Foundation.OpcUa.VariableType.Property"/>.</param>
            <param name="parent">The parent node to add this node to.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerIntegerNode.Value">
            <summary>
            Gets/sets the variable's value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerIntegerNode.ToString">
            <summary>
            Gets the <see langword="string"/> representation of this node.
            </summary>
            <returns><see cref="P:Stemmer.Cvb.Foundation.OpcUa.ServerIntegerNode.Value"/> as <see langword="string"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> method node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">The native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode.#ctor(System.Int32,System.String,Stemmer.Cvb.Foundation.OpcUa.IServerNode)">
            <summary>
            Creates a new method node that is connected to a 
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> at the <paramref name="parent"/> node.
            </summary>
            <param name="namespaceIndex">Namespace in which to create this node.
            </param>
            <param name="identifier">Unique identifier of the Object node.</param>
            <param name="parent">The parent node to add this node to.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode.Dispose(System.Boolean)">
            <summary>
            Disposes of the native callback reference.
            </summary>
            <param name="disposing"><see langword="true"/> if called from 
            <see cref="M:System.IDisposable.Dispose"/>; <see langword="false"/> if called
            from finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode.Server">
            <summary>
            Gets the parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode.InputParameters">
            <summary>
            The collection of input parameters.
            </summary>
            <remarks>
            <b>Attention:</b> add parameters before adding this <b>Node</b> to the
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/>. Otherwise the parameters are not visible to
            a <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> .
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode.OutputParameters">
            <summary>
            The collection of output parameters.
            </summary>
            <remarks>
            <b>Attention:</b> add parameters before adding this <b>Node</b> to the
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/>. Otherwise the parameters are not visible to
            a <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> .
            </remarks>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.OpcUa.ServerMethodNode.Called">
            <summary>
            Event that is fired when the client executes this method.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList">
            <summary>
            Manages the OPC/UA namespaces of the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList.#ctor(Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Creates a new namespace list for the given <paramref name="parent"/>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/>.
            </summary>
            <param name="parent">The parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/>.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList.Item(System.Int32)">
            <summary>
            Gets the name of the namespace with the given <paramref name="index"/>.
            </summary>
            <param name="index">Namespace index to get the name for.</param>
            <returns>The name of the namespace</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList.Count">
            <summary>
            Gets the number of registered namespaces.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList.Add(System.String)">
            <summary>
            Adds a new namespace (registers it with the server).
            </summary>
            <param name="name">The name of the namespace to register.</param>
            <returns>The namespace index of the added <paramref name="name"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList.Contains(System.String)">
            <summary>
            Checks whether the given <paramref name="name"/> is present in this
            list.
            </summary>
            <param name="name">Name to check for.</param>
            <returns><see langword="true"/> if <paramref name="name"/> is inside
            this list.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the content of this array to the target <paramref name="array"/>
            starting at the given <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">Array to copy to.</param>
            <param name="arrayIndex">Starting index in the target 
            <paramref name="array"/>.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList.GetEnumerator">
            <summary>
            Gets the enumerator to enumerate all namespaces.
            </summary>
            <returns>The enumerator for the namespace names.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNamespaceList.IndexOf(System.String)">
            <summary>
            Finds the index of the given namespace <paramref name="name"/>.
            </summary>
            <param name="name">Name to find.</param>
            <returns>Index of the <paramref name="name"/>; -1 if not found.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerNodeBase">
            <summary>
            OPC/UA nodes created on a <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNodeBase.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Creates a new client <b>Node</b> from the given 
            <paramref name="handle"/>.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNodeBase.FromHandle(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Creates a new <b>Node</b> object from the given 
            <paramref name="handle"/>.
            </summary>
            <remarks>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="handle"/>
            parameter will most likely lead to severe problems in your
            application.</remarks>
            <param name="handle">Native node handle.</param>
            <param name="parent">The parent object.</param>
            <returns>Concrete <b>Node</b> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNodeBase.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Creates a new <b>Node</b> object from the given 
            <paramref name="handle"/>.
            </summary>
            <remarks>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="handle"/>
            parameter will most likely lead to severe problems in your
            application.</remarks>
            <param name="handle">Native node handle.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if you want to 
            share ownership; <see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.No"/> if you want to adopt the
            lifetime (e.g. after getting the handle from a classic API function.)
            </param>
            <param name="parent">The parent object.</param>
            <returns>Concrete <b>Node</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerNodeBase.Server">
            <summary>
            Gets the parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> object.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNodeBase.EnsureNonNull``1(``0,System.String)">
            <summary>
            Ensures that the given <paramref name="value"/> is not 
            <see langword="null"/>.
            </summary>
            <typeparam name="T">Type to check.</typeparam>
            <param name="value">Value to check</param>
            <param name="name">Optional name to report in 
            <see cref="T:System.ArgumentNullException"/>.</param>
            <returns>The <paramref name="value"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerNodes">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IServerNode"/> access
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.#ctor(Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Creates the browser from the parent.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.Dispose">
            <summary>
            Disposes of the native resources.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.RootFolder">
            <summary>
            Gets the root folder node which is the parent of all nodes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.Item(System.Int32,System.String)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IServerNode"/> with the given 
            <paramref name="namespaceIndex"/> and <paramref name="identifier"/>.
            </summary>
            <param name="namespaceIndex">Namespace index for 
            <paramref name="identifier"/>.</param>
            <param name="identifier">Node identifier of node to get.</param>
            <returns>The <b>IServerNode</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.Item(System.Int32,System.Int64)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IServerNode"/> with the given 
            <paramref name="namespaceIndex"/> and <paramref name="identifier"/>.
            </summary>
            <param name="namespaceIndex">Namespace index for 
            <paramref name="identifier"/>.</param>
            <param name="identifier">Node identifier of node to get.</param>
            <returns>The <b>IServerNode</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.Item(System.Int32,System.Guid)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IServerNode"/> with the given 
            <paramref name="namespaceIndex"/> and <paramref name="identifier"/>.
            </summary>
            <param name="namespaceIndex">Namespace index for 
            <paramref name="identifier"/>.</param>
            <param name="identifier">Node identifier of node to get.</param>
            <returns>The <b>IServerNode</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.Item(System.Int32,System.Byte[])">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IServerNode"/> with the given 
            <paramref name="namespaceIndex"/> and <paramref name="identifier"/>.
            </summary>
            <param name="namespaceIndex">Namespace index for 
            <paramref name="identifier"/>.</param>
            <param name="identifier">Node identifier of node to get.</param>
            <returns>The <b>IServerNode</b> object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.Item(Stemmer.Cvb.Foundation.OpcUa.NodeId)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IServerNode"/> with the given <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> 
            <paramref name="key"/>.
            </summary>
            <param name="key">Identifier of <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IServerNode"/> to retrieve.
            </param>
            <returns>The <b>IServerNode</b> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.Add(Stemmer.Cvb.Foundation.OpcUa.IServerNode)">
            <summary>
            Adds the given <paramref name="node"/> to the <see cref="F:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.Parent"/> 
            server.
            </summary>
            <param name="node">Node to register.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerNodes.Remove(Stemmer.Cvb.Foundation.OpcUa.IServerNode)">
            <summary>
            Removes the given <paramref name="node"/> from the <b>Server</b>.
            </summary>
            <param name="node">Node to remove from the server.</param>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerObjectNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> object node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerObjectNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">The parent server object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerObjectNode.#ctor(System.Int32,System.String,Stemmer.Cvb.Foundation.OpcUa.IServerNode)">
            <summary>
            Creates a new Object node that is connected to a 
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> at the <paramref name="parent"/> node.
            </summary>
            <param name="namespaceIndex">Namespace in which to create this node.
            </param>
            <param name="identifier">Unique identifier of the Object node.</param>
            <param name="parent">The parent node to add this node to.</param>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerObjectTypeNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> ObjectType node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerObjectTypeNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">The parent server object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerObjectTypeNode.#ctor(System.Int32,System.String,Stemmer.Cvb.Foundation.OpcUa.IServerNode)">
            <summary>
            Creates a new ObjectType node that is connected to a 
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> at the <paramref name="parent"/> node.
            </summary>
            <param name="namespaceIndex">Namespace in which to create this node.
            </param>
            <param name="identifier">Unique identifier of the Object node.</param>
            <param name="parent">The parent node to add this node to.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerObjectTypeNode.IsAbstract">
            <summary>
            Gets or sets whether this ObjectType is an abstract type.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerStringNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> string variable node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerStringNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerStringNode.#ctor(System.Int32,System.String,Stemmer.Cvb.Foundation.OpcUa.VariableType,Stemmer.Cvb.Foundation.OpcUa.IServerNode)">
            <summary>
            Creates a new string node that is connected to a <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/>.
            at the <paramref name="parent"/> node.
            </summary>
            <param name="namespaceIndex">Namespace in which to create this node.
            </param>
            <param name="identifier">Unique identifier of the Object node.</param>
            <param name="variableType">Specifies whether this is a 
            <see cref="F:Stemmer.Cvb.Foundation.OpcUa.VariableType.DataVariable"/> or 
            <see cref="F:Stemmer.Cvb.Foundation.OpcUa.VariableType.Property"/>.</param>
            <param name="parent">The parent node to add this node to.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerStringNode.Value">
            <summary>
            Gets/sets the variable's value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerStringNode.ToString">
            <summary>
            Gets the <see langword="string"/> representation of this node.
            </summary>
            <returns><see cref="P:Stemmer.Cvb.Foundation.OpcUa.ServerStringNode.Value"/> as <see langword="string"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerVariableNodeBase">
            <summary>
            Base class for OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> variable nodes.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerVariableNodeBase.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Creates a new <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> variable node.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">Parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerVariableNodeBase.DataTypeFromHandle(System.IntPtr)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.DataType"/> from the given 
            <paramref name="handle"/>.
            </summary>
            <param name="handle">Native variable node handle.</param>
            <returns>The <see cref="T:Stemmer.Cvb.Foundation.OpcUa.DataType"/> of the variable node.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerVariableNodeBase.Dispose(System.Boolean)">
            <summary>
            Disposes of the native callback reference.
            </summary>
            <param name="disposing"><see langword="true"/> if called from 
            <see cref="M:System.IDisposable.Dispose"/>; <see langword="false"/> if called
            from finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerVariableNodeBase.Server">
            <summary>
            Gets the parent <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> object.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.OpcUa.ServerVariableNodeBase.Read">
            <summary>
            Event that is signaled when the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> reads a value.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.OpcUa.ServerVariableNodeBase.Written">
            <summary>
            Event that is signaled when the <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaClient"/> has written a 
            value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.ServerVariableTypeNode">
            <summary>
            OPC/UA <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> VariableType node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerVariableTypeNode.#ctor(System.IntPtr,Stemmer.Cvb.Foundation.OpcUa.OpcUaServer)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Native node handle.</param>
            <param name="parent">The parent server object.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.ServerVariableTypeNode.#ctor(System.Int32,System.String,Stemmer.Cvb.Foundation.OpcUa.IServerNode)">
            <summary>
            Creates a new VariableType node that is connected to a 
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.OpcUaServer"/> at the <paramref name="parent"/> node.
            </summary>
            <param name="namespaceIndex">Namespace in which to create this node.
            </param>
            <param name="identifier">Unique identifier of the Object node.</param>
            <param name="parent">The parent node to add this node to.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.ServerVariableTypeNode.IsAbstract">
            <summary>
            Gets or sets whether this ObjectType is an abstract type.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.StringNodeId">
            <summary>
            A <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> with a <see langword="string"/> identifier.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.StringNodeId.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new string <see cref="T:Stemmer.Cvb.Foundation.OpcUa.NodeId"/> <paramref name="identifier"/> 
            in the given <paramref name="namespaceIndex"/>.
            </summary>
            <param name="namespaceIndex">Custom, positive (non 0) index.</param>
            <param name="identifier">Non <see langword="null"/> and not empty identifier.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.StringNodeId.#ctor(System.IntPtr)">
            <summary>
            For <see cref="M:Stemmer.Cvb.Foundation.OpcUa.NodeId.FromHandle(System.IntPtr)"/>.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.StringNodeId.GetHashCode">
            <summary>
            Gets the hash code of this identifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.StringNodeId.Equals(Stemmer.Cvb.Foundation.OpcUa.NodeId)">
            <summary>
            Equality-compares this <b>StringNodeId</b> with the 
            <paramref name="other"/> one.
            </summary>
            <remarks>
            Two <b>NodeId</b>s are equal if they have the same identifier type and
            value and reside in the same namespace.
            </remarks>
            <param name="other">Other <b>NodeId</b> to compare with.</param>
            <returns><see langword="true"/> if this and the <paramref name="other"/>
            object are equal.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.OpcUa.StringNodeId.Identifier">
            <summary>
            Gets the identifier value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.OpcUa.StringNodeId.ToDebugString">
            <summary>
            Gets the debugger representation of this node id.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.VariableType">
            <summary>
            Defines whether a variable is a simple data variable or an object 
            property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.VariableType.DataVariable">
            <summary>
            Variables store values. 
            </summary>
            <remarks>
            A variable can be put in a folder like in classic OPC Data Access or 
            define a content value on an object.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.VariableType.Property">
            <summary>
            Variable is a property on an <see cref="T:Stemmer.Cvb.Foundation.OpcUa.INode"/> object.
            </summary>
            <remarks>
            Properties define user created meta data to objects like a unit.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.DataType">
            <summary>
            The data type of a <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IVariableNode"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.Unknown">
            <summary>
            Unknown data type, e.g. for initialization.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.Boolean">
            <summary>
            <b>BooleanVariableNode</b> (not supported).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.SByte">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IIntegerNode"/> storing a <see langword="sbyte"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.Byte">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IIntegerNode"/> storing a <see langword="byte"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.Int16">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IIntegerNode"/> storing a <see langword="short"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.UInt16">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IIntegerNode"/> storing a <see langword="ushort"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.Int32">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IIntegerNode"/> storing a <see langword="int"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.UInt32">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IIntegerNode"/> storing a <see langword="uint"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.Int64">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IIntegerNode"/> storing a <see langword="long"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.UInt64">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IIntegerNode"/> storing a <see langword="ulong"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.Float">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IFloatNode"/> storing a <see langword="float"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.Double">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IFloatNode"/> storing a <see langword="double"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.String">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IStringNode"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.DateTime">
            <summary>
            <b>IDateTimeNode</b> (not supported).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.Guid">
            <summary>
            <b>IGuidNode</b> (not supported).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.ByteString">
            <summary>
            <see cref="T:Stemmer.Cvb.Foundation.OpcUa.IStringNode"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.XMLElement">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.OpcUa.DataType.NodeId">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.OpcUa.IVariableNode">
            <summary>
            OPC/UA variable nodes that store data.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Polarization">
            <summary>
            Functions and type definitions of the CVPolarization library.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Polarization.ImageResolution">
            <summary>
            Possible up sampling modes for extracted polarization planes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.ImageResolution.Half">
            <summary>
            When extracting the polarization angles as planes of
            a raw polarization image, the planes are not up sampled and
            therefore only half the size of the raw image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.ImageResolution.Full">
            <summary>
            When extracting the polarization angles as planes of
            a raw polarization image, the planes are interpolated via up sampling
            to smooth the image and better represent the real scene.
            The resulting image will be the same size as the raw image.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Polarization.PseudoColorMode">
            <summary>
            Available colorization modes to visualize polarization.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.PseudoColorMode.Hsv1">
            <summary>
            RGB image from:
            <list type="bullet">
              <item>
                <term>Hue</term>
                <description>angle of polarization</description>
              </item>
              <item>
                <term>Saturation</term>
                <description>full</description>
              </item>
              <item>
                <term>Value</term>
                <description>degree of polarization</description>
              </item>
            </list>
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.PseudoColorMode.Hsv2">
            <summary>
            RGB image from:
            <list type="bullet">
              <item>
                <term>Hue</term>
                <description>angle of polarization</description>
              </item>
              <item>
                <term>Saturation</term>
                <description>degree of polarization</description>
              </item>
              <item>
                <term>Value</term>
                <description>stokes 0</description>
              </item>
            </list>
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.PseudoColorMode.Degree">
            <summary>
            Mono image with:
            <list type="bullet">
              <item>
                <term>Intensity</term>
                <description>degree of polarization</description>
              </item>
            </list>
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.PseudoColorMode.AngleMono">
            <summary>
            Mono image with:
            <list type="bullet">
              <item>
                <term>Intensity</term>
                <description>angle of polarization</description>
              </item>
            </list>
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.PseudoColorMode.AngleRgb">
            <summary>
            RGB image from:
            <list type="bullet">
              <item>
                <term>Hue</term>
                <description>angle of polarization</description>
              </item>
              <item>
                <term>Saturation</term>
                <description>full</description>
              </item>
              <item>
                <term>Value</term>
                <description>full</description>
              </item>
            </list>
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Polarization.Pattern">
            <summary>
            Possible patterns of raw polarization images.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.Pattern.Square_90_45_135_0">
            <summary>
            The standard pattern for 2D polarization cameras.
            <list type="table">
              <item>
                <description>90°</description>
                <description>45°</description>
              </item>
              <item>
                <description>135°</description>
                <description>0°</description>
              </item>
            </list>
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.Pattern.Line_0_90_135">
            <summary>
            A line scanner pattern found in Piranha4 cameras.
            <list type="table">
              <listheader>
                <term>Planes</term>
              </listheader>
              <item>
               <description>0° line</description>
              </item>
              <item>
                <description>90° line</description>
              </item>
              <item>
               <description>135° line</description>
              </item>
            </list>
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.Pattern.BayerGreenBlue">
            <summary>
            A flag to add if the polarization plane is additionally color-encoded with a bayer pattern.
            Only supported with <see cref="F:Stemmer.Cvb.Foundation.Polarization.Pattern.Square_90_45_135_0" />.
            The bayer-pattern is assumed to be:
            <list type="table">
              <item>
                <description>GG</description>
                <description>BB</description>
              </item>
              <item>
                <description>GG</description>
                <description>BB</description>
              </item>
              <item>
                <description>RR</description>
                <description>GG</description>
              </item>
              <item>
                <description>RR</description>
                <description>GG</description>
              </item>
            </list>
            Therefore a polarization pattern group is \em within one color group.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.Pattern.BayerBlueGreen">
            <summary>
            A flag to add if the polarization plane is additionally color-encoded with a bayer pattern.
            Only supported with <see cref="F:Stemmer.Cvb.Foundation.Polarization.Pattern.Square_90_45_135_0" />.
            The bayer-pattern is assumed to be:
            <list type="table">
              <item>
                <description>BB</description>
                <description>GG</description>
              </item>
              <item>
                <description>BB</description>
                <description>GG</description>
              </item>
              <item>
                <description>GG</description>
                <description>RR</description>
              </item>
              <item>
                <description>GG</description>
                <description>RR</description>
              </item>
            </list>
            Therefore a polarization pattern group is \em within one color group.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.Pattern.BayerRedGreen">
            <summary>
            A flag to add if the polarization plane is additionally color-encoded with a bayer pattern.
            Only supported with <see cref="F:Stemmer.Cvb.Foundation.Polarization.Pattern.Square_90_45_135_0" />.
            The bayer-pattern is assumed to be:
            <list type="table">
              <item>
                <description>RR</description>
                <description>GG</description>
              </item>
              <item>
                <description>RR</description>
                <description>GG</description>
              </item>
              <item>
                <description>GG</description>
                <description>BB</description>
              </item>
              <item>
                <description>GG</description>
                <description>BB</description>
              </item>
            </list>
            Therefore a polarization pattern group is \em within one color group.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Polarization.Pattern.BayerGreenRed">
            <summary>
            A flag to add if the polarization plane is additionally color-encoded with a bayer pattern.
            Only supported with <see cref="F:Stemmer.Cvb.Foundation.Polarization.Pattern.Square_90_45_135_0" />.
            The bayer-pattern is assumed to be:
            <list type="table">
              <item>
                <description>GG</description>
                <description>RR</description>
              </item>
              <item>
                <description>GG</description>
                <description>RR</description>
              </item>
              <item>
                <description>BB</description>
                <description>GG</description>
              </item>
              <item>
                <description>BB</description>
                <description>GG</description>
              </item>
            </list>
            Therefore a polarization pattern group is \em within one color group.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Polarization.ConvertToPlanes(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.Polarization.Pattern,Stemmer.Cvb.Foundation.Polarization.ImageResolution)">
            <summary>
            Extracts the four polarization angles from a raw image to a four plane image.
            </summary>
            <remarks>
            From a raw polarization image this function extracts the polarization angles to outImage.
            The returned image holds the polarization data as 4 planes sorted by increasing angle:
            0°, 45°, 90°, 135°<para/>
            The expected pattern of the raw image with <see cref="F:Stemmer.Cvb.Foundation.Polarization.Pattern.Square_90_45_135_0"/> for example
            is a 2x2 pattern with:
            Top-left: 90°, Top-right: 45°, Bottom-left: 135°, Bottom-right: 0°.<para/>
            If resolution is set to CVPOL_RESOLUTION_FULL the image is interpolated and has the same
            size as rawImage, otherwise it will be half the size.
            </remarks>
            <param name="rawImage">Input image with raw polarization data.</param>
            <param name="pattern">Indicates in which pattern the polarization angles are ordered in \a rawImage.</param>
            <param name="resolution">Resolution of outImage. If set to CVPOL_RESOLUTION_FULL the image
            is interpolated and will equal the size of rawImage, otherwise it will be half the size.</param>
            <returns>The resulting image with 4 planes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Polarization.CalculateStokesImage(Stemmer.Cvb.Image)">
            <summary>
            From an extracted <paramref name="polarizationImage"/> a new image is returned with the Stokes 0 to 2 as planes.
            </summary>
            <remarks>
            From a extracted polarization image the three first Stokes are calculated and returned in outImage.
            Stokes 0 is calculated as <c>(0° + 45° + 90° + 135°) * 0.25</c>.
            The index of the plane represents the Stokes' number.
            </remarks>
            <param name="polarizationImage">Input image with extracted polarization data. Usually from <see cref="M:Stemmer.Cvb.Foundation.Polarization.ConvertToPlanes(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.Polarization.Pattern,Stemmer.Cvb.Foundation.Polarization.ImageResolution)"/>.</param>
            <param>The resulting image with 3 planes.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Polarization.CalculateStokes0(Stemmer.Cvb.Image)">
            <summary>
            From an extracted <paramref name="polarizationImage"/> a new image is returned with the Stokes 0 as content.
            </summary>
            <remarks>
            From an extracted polarization image Stokes 0 is calculated and returned in outImage.
            Stokes 0 is calculated as <c>(0° + 45° + 90° + 135°) * 0.25</c>.
            </remarks>
            <param name="polarizationImage">Input image with extracted polarization data. Usually from <see cref="M:Stemmer.Cvb.Foundation.Polarization.ConvertToPlanes(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.Polarization.Pattern,Stemmer.Cvb.Foundation.Polarization.ImageResolution)"/>.</param>
            <returns>The resulting image with one plane.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Polarization.CalculateStokes1(Stemmer.Cvb.Image)">
            <summary>
            From an extracted <paramref name="polarizationImage"/> a new image is returned with the Stokes 1 as content.
            </summary>
            <remarks>
            From an extracted polarization image Stokes 1 is calculated and returned in outImage.
            </remarks>
            <param name="polarizationImage">Input image with extracted polarization data. Usually from <see cref="M:Stemmer.Cvb.Foundation.Polarization.ConvertToPlanes(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.Polarization.Pattern,Stemmer.Cvb.Foundation.Polarization.ImageResolution)"/>.</param>
            <returns>The resulting image with one plane.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Polarization.CalculateStokes2(Stemmer.Cvb.Image)">
            <summary>
            From an extracted <paramref name="polarizationImage"/> a new image is returned with the Stokes 2 as content.
            </summary>
            <remarks>
            From an extracted polarization image Stokes 2 is calculated and returned in outImage.
            </remarks>
            <param name="polarizationImage">Input image with extracted polarization data. Usually from <see cref="M:Stemmer.Cvb.Foundation.Polarization.ConvertToPlanes(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.Polarization.Pattern,Stemmer.Cvb.Foundation.Polarization.ImageResolution)"/>.</param>
            <returns>The resulting image with one plane.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Polarization.CalculateMinReflectionImage(Stemmer.Cvb.Image)">
            <summary>
            From an extracted <paramref name="polarizationImage"/> the minimum reflection image is calculated and returned.
            </summary>
            <remarks>
            The minimum reflection image is calculated by taking the minimum value of all the polarization
            angles that are contained in the input image.
            </remarks>
            <param name="polarizationImage">Input image with extracted polarization data. Usually from <see cref="M:Stemmer.Cvb.Foundation.Polarization.ConvertToPlanes(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.Polarization.Pattern,Stemmer.Cvb.Foundation.Polarization.ImageResolution)"/>.</param>
            <returns>The resulting image with one plane.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Polarization.Colorize(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.Polarization.PseudoColorMode)">
            <summary>
            An extracted <paramref name="stokesImage"/> is colorized in a chosen way to visualize the polarization.
            </summary>
            <remarks>
            Depending on the <paramref name="colorMode"/> the polarization of the input image is visualized in different ways.
            See the comments for <see cref="T:Stemmer.Cvb.Foundation.Polarization.PseudoColorMode"/> on information what colorization modes are available
            </remarks>
            <param name="stokesImage">Input image with calculated stokes from a polarization image
            Usually from <see cref="M:Stemmer.Cvb.Foundation.Polarization.CalculateStokesImage(Stemmer.Cvb.Image)"/>.</param>
            <param name="colorMode">The <see cref="T:Stemmer.Cvb.Foundation.Polarization.PseudoColorMode"/> that will be used to colorize the image.</param>
            <returns>The resulting image is a mono or rgb image, 
            depending on the selected <paramref name="colorMode"/></returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.SegmentationMethod">
            <summary>
            The segmentation method for labeling
            the faces of the calibration piece.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.SegmentationMethod.KmeansClustering">
            <summary>
            Clustering top, base and faces using kmeans.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.RangeMapSegmentor">
            <summary>
            Base class for configuring and computing
            segmentation on range maps.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.RangeMapSegmentor.RangeMapIgnoreValue">
            <summary>
            Gets/sets the ignore value for range maps.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.RangeMapSegmentor.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.RangeMapSegmentor.FaceSegmentationFromPiece(Stemmer.Cvb.ImagePlane)">
            <summary>
            Segments the calibration piece from the given <paramref name="rangeMapPlane"/>.
            </summary>
            <param name="rangeMapPlane">Plane of the range map image to work with.</param>
            <returns>Segmentation image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.RangeMapSegmentor.FaceSegmentationFromPiece(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect)">
            <summary>
            Segments the calibration piece from the given <paramref name="rangeMapPlane"/>.
            </summary>
            <param name="rangeMapPlane">Plane of the range map image to work with.</param>
            <param name="aoi">Area of interest.</param>
            <returns>Segmentation image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.RangeMapSegmentor.ExtractProjectedPointsFromPiece(Stemmer.Cvb.ImagePlane)">
            <summary>
            Extracts intersection points of the
            calibration piece from the given <paramref name="rangeMapPlane"/>.
            </summary>
            <param name="rangeMapPlane">Plane of the range map image to work with.</param>
            <returns>Extracted points.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.RangeMapSegmentor.ExtractProjectedPointsFromPiece(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect)">
            <summary>
            Extracts intersection points of the
            calibration piece from the given <paramref name="rangeMapPlane"/>.
            </summary>
            <param name="rangeMapPlane">Plane of the range map image to work with.</param>
            <param name="aoi">Area of interest.</param>
            <returns>Extracted points.</returns>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.RangeMapSegmentor.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.RangeMapSegmentor.Handle">
            <summary>
            Native handle of the calibrator.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.RangeMapSegmentor.IsDisposed">
            <summary>
            Gets if the native handle has been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.RangeMapSegmentor.Dispose(System.Boolean)">
            <summary>
            IDisposable helper function.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.RangeMapSegmentor.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.RangeMapSegmentor.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.AQS12RangeMapSegmentor">
            <summary>
            Segmentor for face segmentation of an
            AQS12 calibration piece on range maps.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12RangeMapSegmentor.#ctor(Stemmer.Cvb.Foundation.SegmentationMethod)">
            <summary>
            Constructor.
            The AQS12 calibration piece is segmented
            into top, base and 10 faces.
            </summary>
            <param name="segmentationMethod">Segmentation method to use.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12RangeMapSegmentor.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">Native handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12RangeMapSegmentor.CreateHandle(Stemmer.Cvb.Foundation.SegmentationMethod)">
            <summary>
            Creates the segmentor handle with the
            given <paramref name="segmentationMethod"/>.
            </summary>
            <param name="segmentationMethod">Segmentation method to use.</param>
            <returns>Segmentor handle.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12RangeMapSegmentor.FaceSegmentationFromPiece(Stemmer.Cvb.ImagePlane)">
            <summary>
            Segments the calibration piece from the given <paramref name="rangeMapPlane"/>.
            </summary>
            <param name="rangeMapPlane">Plane of the range map image to work with.</param>
            <returns>Segmentation image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12RangeMapSegmentor.FaceSegmentationFromPiece(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect)">
            <summary>
            Segments the calibration piece from the given <paramref name="rangeMapPlane"/>.
            </summary>
            <param name="rangeMapPlane">Plane of the range map image to work with.</param>
            <param name="aoi">Area of interest.</param>
            <returns>Segmentation image.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during the segmentation occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12RangeMapSegmentor.ExtractProjectedPointsFromPiece(Stemmer.Cvb.ImagePlane)">
            <summary>
            Extracts intersection points of the
            calibration piece from the given <paramref name="rangeMapPlane"/>.
            </summary>
            <remarks>Lower roof points are projected to the base plane.</remarks>
            <param name="rangeMapPlane">Plane of the range map image to work with.</param>
            <returns>Extracted points.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.AQS12RangeMapSegmentor.ExtractProjectedPointsFromPiece(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect)">
            <summary>
            Extracts intersection points of the
            calibration piece from the given <paramref name="rangeMapPlane"/>.
            </summary>
            <remarks>Lower roof points are projected to the base plane.</remarks>
            <param name="rangeMapPlane">Plane of the range map image to work with.</param>
            <param name="aoi">Area of interest.</param>
            <returns>Extracted points.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during point extraction occurs.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Regression">
            <summary>
            Various regression functions.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Regression.Circle(System.Collections.Generic.ICollection{Stemmer.Cvb.IPosition})">
            <summary>
            Create a circle, that fits best into a collection of points.
            </summary>
            <param name="points">Points to fit circle in.</param>
            <returns>Circle object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="points"/>
            is <c>null</c>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Regression.Ellipse(System.Collections.Generic.ICollection{Stemmer.Cvb.IPosition})">
            <summary>
            Create an ellipse, that fits best into a collection of points.
            </summary>
            <param name="points">Points to fit the ellipse in.</param>
            <returns>Ellipse object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="points"/>
            is <see langword="null"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Regression.Line(System.Collections.Generic.ICollection{Stemmer.Cvb.IPosition})">
            <summary>
            Create a line, that fits best into a collection of points.
            </summary>
            <param name="points">Points to fit the line in.</param>
            <returns>Line object.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="points"/>
            is <see langword="null"/>.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ImageExtensions">
            <summary>
            Extension methods the Foundation Package adds to <see cref="T:Stemmer.Cvb.Image"/>
            objects.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageExtensions.Init(Stemmer.Cvb.Image,System.Double)">
            <summary>
            Initialize the planes of this image to a value.
            </summary>
            <param name="img">Image to be initialized.</param>
            <param name="value">Values to which the various planes are to be initialized.</param>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageExtensions.Init(Stemmer.Cvb.Image,System.Double[])">
            <summary>
            Initialize the planes of this image to different values.
            </summary>
            <param name="img">Image to be initialized.</param>
            <param name="values">Values to which the various planes are to be initialized (needs at least one value per plane).</param>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageExtensions.Init(Stemmer.Cvb.Image,Stemmer.Cvb.Rect,System.Double)">
            <summary>
            Initialize the planes of this image to a value.
            </summary>
            <param name="img">Image to be initialized.</param>
            <param name="aoi">Rect to initialize.</param>
            <param name="value">Values to which the various planes are to be initialized.</param>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageExtensions.Init(Stemmer.Cvb.Image,Stemmer.Cvb.Rect,System.Double[])">
            <summary>
            Initialize the planes of this image to different values.
            </summary>
            <param name="img">Image to be initialized.</param>
            <param name="aoi">Area of interest to initialize.</param>
            <param name="values">Values to which the various planes are to be initialized (needs at least one value per plane).</param>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageExtensions.SubImage(Stemmer.Cvb.Image,Stemmer.Cvb.Area2D)">
            <summary>
            Extract the content of an <paramref name="aoi"/> (area of interest) into a new image
            using linear interpolation.
            </summary>
            <param name="img">Image to work from.</param>
            <param name="aoi">Area of interest to be extracted.</param>
            <returns>New image of the subregion.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageExtensions.SubImage(Stemmer.Cvb.Image,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.Interpolation)">
            <summary>
            Extract the content of an <paramref name="aoi"/> (area of interest) into a new image.
            </summary>
            <param name="img">Image to work from.</param>
            <param name="aoi">Area of interest to be extracted.</param>
            <param name="interpolation">Interpolation mode to be used.</param>
            <returns>New image of the subregion.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.EdgeSearchMode">
            <summary>
            Determines the algorithm for finding an edge.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeSearchMode.Intensity">
            <summary>
            Find edges based on absolute intensities in the image. In this mode,
            the edge quality directly corresponds to the difference in intensity
            across the edge.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeSearchMode.IntensitySubPixel">
            <summary>
            Like <see cref="F:Stemmer.Cvb.Foundation.EdgeSearchMode.Intensity"/>, but with sub pixel accuracy.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeSearchMode.Contrast">
            <summary>
            Find edges based on the contrasts in the image (1st derivative of the
            gray values).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeSearchMode.ContrastSubPixel">
            <summary>
            Like <see cref="F:Stemmer.Cvb.Foundation.EdgeSearchMode.Contrast"/>, but with sub pixel accuracy.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeSearchMode.SecondDerivativeSubPixel">
            <summary>
            Find edges based on the 2nd derivative of the intensities with sub
            pixel accuracy. Note that in this mode edge qualities are usually
            much lower than 10.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.EdgeType">
            <summary>
            Type of the edges to be searched.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeType.Ignore">
            <summary>
            Used for <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/> and with the 2nd derivative
            edge detection functions.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeType.Positive">
            <summary>
            Intensities increase along the scan direction.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeType.Negative">
            <summary>
            Intensities decrease along the scan direction.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.EdgeResult">
            <summary>
            Edge Search result
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeResult.Empty">
            <summary>
            The edge result returned when nothing has been found.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.EdgeResult.X">
            <summary>
            x-position relative to the last line processed (see Area).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.EdgeResult.Y">
            <summary>
            y-position relative to the last line processed (see Area).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.EdgeResult.Quality">
            <summary>
            Quality of detection, depending on the method used.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.EdgeResult.Type">
            <summary>
            Type of the edge.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.EdgeResult.op_Inequality(Stemmer.Cvb.Foundation.EdgeResult,Stemmer.Cvb.Foundation.EdgeResult)">
            <summary>
            Comparison operator for Rect structs.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>true lhs != rhs, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.EdgeResult.op_Equality(Stemmer.Cvb.Foundation.EdgeResult,Stemmer.Cvb.Foundation.EdgeResult)">
            <summary>
            Comparison operator for Rect structs.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>true lhs == rhs, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.EdgeResult.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is an <see cref="T:Stemmer.Cvb.Foundation.EdgeResult"/>
            structure with the same content as this <see cref="T:Stemmer.Cvb.Foundation.EdgeResult"/>
            structure.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns><c>true</c> of the object referred to by
            <paramref name="obj"/> and this object are identical, <c>false</c>
            otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.EdgeResult.GetHashCode">
            <summary>
            Returns the hash code for this Rectangle
            </summary>
            <returns>Hash code for this <see cref="T:Stemmer.Cvb.Foundation.EdgeResult"/> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.EdgeResult.#ctor(System.Double,System.Double,System.Double,Stemmer.Cvb.Foundation.EdgeType)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-position relative to the last line processed (see Area).</param>
            <param name="y">Y-position relative to the last line processed (see Area).</param>
            <param name="quality">Quality of detection, depending on the method used.</param>
            <param name="type">Type of result.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.EdgeResult.#ctor(Stemmer.Cvb.Foundation.EdgeResultInternal,Stemmer.Cvb.Foundation.EdgeType)">
            <summary>
            Constructor.
            </summary>
            <param name="nativeResult">Native result to construct this result from.</param>
            <param name="type">Type of result.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.EdgeResult.ToString">
            <summary>
            Gets the string representation of this edge result.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.EdgeResultPair">
            <summary>
            A pair of found edges.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeResultPair.First">
            <summary>
            First found edge.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeResultPair.Second">
            <summary>
            Second found edge.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.EdgeResultInternal">
            <summary>
            Search result for internal use (when arrays are being passed back
            and forth).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeResultInternal.X">
            <summary>
            x-position relative to the last line processed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeResultInternal.Y">
            <summary>
            y-position relative to the last line processed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeResultInternal.Quality">
            <summary>
            Quality of detection, depending on the method used.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Edge">
            <summary>
            Collection of functions for Edge detection.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Edge.OutAction`1">
            <summary>
            Standard look of the processing functions in the edge tool
            </summary>
            <typeparam name="TOut">Type of output.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindFirst(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double)">
            <summary>
            Find the first edge (as specified) in the whole
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to search in.</param>
            <param name="mode">Search mode.</param>
            <param name="type">Type of edge to be searched for.</param>
            <param name="threshold">Edge threshold to apply.</param>
            <returns>Found edge (or <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/> if no edge
            was found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindFirst(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double,System.Double)">
            <summary>
            Find the first edge (as specified) in the whole
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to search in.</param>
            <param name="mode">Search mode.</param>
            <param name="type">Type of edge to be searched for.</param>
            <param name="threshold">Edge threshold to apply.</param>
            <param name="density">Density at which to scan the </param>
            <returns>Found edge (or <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/> if no edge
            was found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindFirst(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double)">
            <summary>
            Find the first edge (as specified) in the <paramref name="aoi"/>.
            </summary>
            <param name="plane">Plane to search in.</param>
            <param name="aoi">Area to scan.</param>
            <param name="mode">Search mode.</param>
            <param name="type">Type of edge to be searched for.</param>
            <param name="threshold">Edge threshold to apply.</param>
            <returns>Found edge (or <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/> if no edge
            was found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindFirst(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double,System.Double)">
            <summary>
            Find the first edge (as specified) in the <paramref name="aoi"/>.
            </summary>
            <param name="plane">Plane to search in.</param>
            <param name="aoi">Area to scan.</param>
            <param name="mode">Search mode.</param>
            <param name="type">Type of edge to be searched for.</param>
            <param name="threshold">Edge threshold to apply.</param>
            <param name="density">Density at which to scan the
            <paramref name="aoi"/> where 1.0 means scanning all pixels.</param>
            <returns>Found edge (or <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/> if no edge
            was found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindPair(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,Stemmer.Cvb.Foundation.EdgeType,System.Double)">
            <summary>
            Find an edge pair (as specified) in the image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to search in</param>
            <param name="mode">Search mode</param>
            <param name="type1">Type of edge to be searched for.</param>
            <param name="type2">Type of edge to be searched for.</param>
            <param name="threshold">Threshold to apply when looking for both edges
            </param>
            <returns>Search results (containing <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/>
            if not found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindPair(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,Stemmer.Cvb.Foundation.EdgeType,System.Double,System.Double)">
            <summary>
            Find an edge pair (as specified) in the image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to search in</param>
            <param name="mode">Search mode</param>
            <param name="type1">Type of edge to be searched for.</param>
            <param name="type2">Type of edge to be searched for.</param>
            <param name="threshold">Threshold to apply when looking for both edges
            </param>
            <param name="density">density at which to scan the image
            <paramref name="plane"/>.</param>
            <returns>Search results (containing <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/>
            if not found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindPair(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,Stemmer.Cvb.Foundation.EdgeType,System.Double)">
            <summary>
            Find an edge pair (as specified) in the image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to search in</param>
            <param name="aoi">Area to scan</param>
            <param name="mode">Search mode</param>
            <param name="type1">Type of edge to be searched for.</param>
            <param name="type2">Type of edge to be searched for.</param>
            <param name="threshold">Threshold to apply when looking for both edges
            </param>
            <returns>Search results (containing <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/>
            if not found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindPair(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,Stemmer.Cvb.Foundation.EdgeType,System.Double,System.Double)">
            <summary>
            Find an edge pair (as specified) in the image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to search in</param>
            <param name="aoi">Area to scan</param>
            <param name="mode">Search mode</param>
            <param name="type1">Type of edge to be searched for.</param>
            <param name="type2">Type of edge to be searched for.</param>
            <param name="threshold">Threshold to apply when looking for both edges
            </param>
            <param name="density">density at which to scan the image
            <paramref name="plane"/>.</param>
            <returns>Search results (containing <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/>
            if not found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindPair(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double,Stemmer.Cvb.Foundation.EdgeType,System.Double)">
            <summary>
            Find an edge pair (as specified) in the image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to search in</param>
            <param name="mode">search mode</param>
            <param name="type1">Type of edge to be searched for.</param>
            <param name="threshold1">threshold to apply when looking for the first
            edge (left to right in the <paramref name="plane"/>)</param>
            <param name="type2">Type of edge to be searched for.</param>
            <param name="threshold2">threshold to apply when looking for the
            second edge (right to left in the <paramref name="plane"/>)</param>
            <returns>Search results (containing <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/>
            if not found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindPair(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double,Stemmer.Cvb.Foundation.EdgeType,System.Double,System.Double)">
            <summary>
            Find an edge pair (as specified) in the image <paramref name="plane"/>.
            </summary>
            <param name="plane">plane to search in</param>
            <param name="mode">search mode</param>
            <param name="type1">Type of edge to be searched for.</param>
            <param name="threshold1">threshold to apply when looking for the first
            edge (left to right in the image <paramref name="plane"/>)</param>
            <param name="type2">Type of edge to be searched for.</param>
            <param name="threshold2">threshold to apply when looking for the
            second edge (right to left in the <paramref name="plane"/>)</param>
            <param name="density">density at which to scan the image
            <paramref name="plane"/>.</param>
            <returns>Search results (containing <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/>
            if not found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindPair(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double,Stemmer.Cvb.Foundation.EdgeType,System.Double)">
            <summary>
            Find an edge pair (as specified) in the <paramref name="aoi"/>.
            </summary>
            <param name="plane">plane to search in</param>
            <param name="aoi">area to scan</param>
            <param name="mode">search mode</param>
            <param name="type1">Type of edge to be searched for.</param>
            <param name="threshold1">threshold to apply when looking for the first
            edge (left to right in the <paramref name="aoi"/>)</param>
            <param name="type2">Type of edge to be searched for.</param>
            <param name="threshold2">threshold to apply when looking for the
            second edge (right to left in the <paramref name="aoi"/>)</param>
            <returns>Search results (containing <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/>
            if not found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindPair(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double,Stemmer.Cvb.Foundation.EdgeType,System.Double,System.Double)">
            <summary>
            Find an edge pair (as specified) in the <paramref name="aoi"/>.
            </summary>
            <param name="plane">plane to search in</param>
            <param name="aoi">area to scan</param>
            <param name="mode">search mode</param>
            <param name="type1">Type of edge to be searched for.</param>
            <param name="threshold1">threshold to apply when looking for the first
            edge (left to right in the <paramref name="aoi"/>)</param>
            <param name="type2">Type of edge to be searched for.</param>
            <param name="threshold2">threshold to apply when looking for the
            second edge (right to left in the <paramref name="aoi"/>)</param>
            <param name="density">density at which to scan the
            <paramref name="aoi"/></param>
            <returns>Search results (containing <see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/>
            if not found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindAll(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double)">
            <summary>
            Find all edges inside an <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane in which to search.</param>
            <param name="mode">Search mode to use.</param>
            <param name="type">Type of edge to be searched for.</param>
            <param name="threshold">Threshold to apply.</param>
            <returns>Found edges.</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindAll(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double,System.Double)">
            <summary>
            Find all edges inside an <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane in which to search.</param>
            <param name="mode">Search mode to use.</param>
            <param name="type">Type of edge to be searched for.</param>
            <param name="threshold">Threshold to apply.</param>
            <param name="density">Search density to use.</param>
            <returns>Found edges.</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindAll(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double)">
            <summary>
            Find all edges inside an <paramref name="aoi"/>.
            </summary>
            <param name="plane">Plane in which to search.</param>
            <param name="aoi">Area to search.</param>
            <param name="mode">Search mode to use.</param>
            <param name="type">Type of edge to be searched for.</param>
            <param name="threshold">Threshold to apply.</param>
            <returns>Found edges.</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindAll(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.EdgeSearchMode,Stemmer.Cvb.Foundation.EdgeType,System.Double,System.Double)">
            <summary>
            Find all edges inside an <paramref name="aoi"/>.
            </summary>
            <param name="plane">Plane in which to search.</param>
            <param name="aoi">Area to search.</param>
            <param name="mode">Search mode to use.</param>
            <param name="type">Type of edge to be searched for.</param>
            <param name="threshold">Threshold to apply.</param>
            <param name="density">Search density to use.</param>
            <returns>Found edges.</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.EdgeResultsToArray(System.IntPtr,Stemmer.Cvb.Foundation.EdgeType)">
            <summary>
            Convert an edge results collection to an edge list.
            </summary>
            <param name="p">unmanaged list to convert</param>
            <param name="type">edge type contained in that list</param>
            <returns>Results array.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindBest(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeType)">
            <summary>
            Use the 2nd derivative method to find the edge with the highest
            intensity in the <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to scan</param>
            <param name="type">Type of edge to be searched for.</param>
            <returns>The best result (or EdgeResult.Nothing if nothing was found
            e.g. because the area is outside the image)</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindBest(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeType,System.Double)">
            <summary>
            Use the 2nd derivative method to find the edge with the highest
            intensity in the <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to scan</param>
            <param name="type">Type of edge to be searched for.</param>
            <param name="density">Density at which to scan</param>
            <returns>The best result (or EdgeResult.Nothing if nothing was found
            e.g. because the area is outside the image)</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindBest(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.EdgeType)">
            <summary>
            Use the 2nd derivative method to find the edge with the highest
            intensity in the area of interest.
            </summary>
            <param name="plane">Plane to scan</param>
            <param name="aoi">Area to scan</param>
            <param name="type">Type of edge to be searched for.</param>
            <returns>The best result (or EdgeResult.Nothing if nothing was found
            e.g. because the area is outside the image)</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.FindBest(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.EdgeType,System.Double)">
            <summary>
            Use the 2nd derivative method to find the edge with the highest
            intensity in the area of interest.
            </summary>
            <param name="plane">Plane to scan</param>
            <param name="aoi">Area to scan</param>
            <param name="type">Type of edge to be searched for.</param>
            <param name="density">Density at which to scan</param>
            <returns>The best result (or EdgeResult.Nothing if nothing was found
            e.g. because the area is outside the image)</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.WriteProjection(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D)">
            <summary>
            Write the projection that Edge is using internally as the basis for
            its calculations into an image plane (might be useful for debugging
            purposes).
            </summary>
            <param name="plane">plane to write the projection to</param>
            <param name="aoi">area of interest to project</param>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.WriteProjection(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,System.Double)">
            <summary>
            Write the projection that Edge is using internally as the basis for
            its calculations into an image plane (might be useful for debugging
            purposes).
            </summary>
            <param name="plane">plane to write the projection to</param>
            <param name="density">density at which to scan</param>
            <param name="aoi">area of interest to project</param>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.EdgeProcessing``1(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.Edge.OutAction{``0})">
            <summary>
            Edge processing cannot use Stemmer.Cvb.Processing (see
            the description of EdgeProcessingFunction1 for details).
            </summary>
            <param name="plane">image plane to work on</param>
            <param name="fn">function to invoke</param>
            <returns>edge result (<see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/> if nothing
            was found)</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.EdgeProcessing(Stemmer.Cvb.ImagePlane,System.Func{System.Boolean})">
            <summary>
            Edge processing cannot use Stemmer.Cvb.Processing (as it handles it
            differently).
            </summary>
            <param name="plane">Image plane to work on.</param>
            <param name="fn">Function to invoke.</param>
            <returns>Edge result (<see cref="F:Stemmer.Cvb.Foundation.EdgeResult.Empty"/> if nothing
            was found).</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Edge.ThrowOnInvalidInput(Stemmer.Cvb.ImagePlane)">
            <summary>
            Perform the generic tests on the input parameters.
            </summary>
            <param name="plane">Input parameters to test</param>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ProjectionMode">
            <summary>
            Options affecting the result of the projection.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ProjectionMode.Average">
            <summary>
            Projection value is the average value per projection line.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ProjectionMode.Sum">
            <summary>
            Projection value is the sum of all gray values per projection line.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ProjectionValue">
            <summary>
            Single projection value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ProjectionValue.X">
            <summary>
            x coordinate of the projection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ProjectionValue.Y">
            <summary>
            y coordinate of the projection (y coordinate is located on the bottom
            edge of the area of interest for which the project has been
            calculated).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ProjectionValue.Value">
            <summary>
            Projection value (as determined by the <see cref="T:Stemmer.Cvb.Foundation.ProjectionMode"/>).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ProjectionValue.ToString">
            <summary>
            String conversion.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Projection">
            <summary>
            Projection that the Edge analysis of Common Vision Blox is using.
            </summary>
            <remarks>
            The projections are what is being used internally inside the Edge
            finding algorithms and the Projection object may in fact be used to
            build a customized edge detection.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Projection.#ctor(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D)">
            <summary>
            Create an <see cref="F:Stemmer.Cvb.Foundation.ProjectionMode.Sum"/> projection object.
            </summary>
            <param name="plane">Image plane to create the projection from.</param>
            <param name="aoi">Area of interest to scan.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Projection.#ctor(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.ProjectionMode)">
            <summary>
            Create a projection object.
            </summary>
            <param name="plane">Image plane to create the projection from.</param>
            <param name="aoi">Area of interest to scan.</param>
            <param name="mode">Mode to use.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Projection.#ctor(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.ProjectionMode,System.Double)">
            <summary>
            Create a projection object.
            </summary>
            <param name="plane">Image plane to create the projection from.</param>
            <param name="aoi">Area of interest to scan.</param>
            <param name="mode">Mode to use.</param>
            <param name="density">
            <para>
            Density at which to scan.
            </para><para>
            This is a percentage value how many pixels to process: 0.0 means 0%
            and 1.0 means 100%.
            </para></param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Projection.CalculateZeroCrossings">
            <summary>
            Get all the zero crossings, that are in the projection.
            </summary>
            <returns>Array containing the zero crossings as
            <see cref="T:Stemmer.Cvb.Foundation.EdgeResult"/>s.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Projection.Derive">
            <summary>
            Create derivative of this projection.
            </summary>
            <returns>
            New projection containing the derivative of this projection.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Projection.Filter(System.Int32[])">
            <summary>
            Filter this projection using a 1D filter kernel.
            </summary>
            <param name="kernel">Filter kernel to use</param>
            <returns>
            New projection containing the filtered projection.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Projection.ToAverageProjection">
            <summary>
            Create a new averaged projection from this one.
            </summary>
            <returns>The averaged projection object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Projection.Mode">
            <summary>
            Defines the result of the projection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Projection.Values">
            <summary>
            Retrieve the values of the projection.
            </summary>
            <value>Double array with the projection values.</value>
            <exception cref="T:System.ObjectDisposedException">if the
            <see cref="T:Stemmer.Cvb.Foundation.Projection"/> object has already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Projection.Length">
            <summary>
            The length (= number of values) of the projection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Projection.Handle">
            <summary>
            Native non projection handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Projection.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Projection.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Projection.Dispose">
            <summary>
            Dispose method that releases the classifier
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Projection.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.Projection.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.CorrelationMethod">
            <summary>
            Correlation calculation methods.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CorrelationMethod.SumOfSquareDistances">
            <summary>
            Normalized sum of square Distances.
            </summary>
            <remarks>
            Strictly speaking, this is not a correlation, but the inverse of it
            (i.e. when looking at the resulting accumulator, dark spots indicate a
            close match between the image and the template, whereas bright areas
            indicate image regions, where there is little to no similarity between
            image and template).
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CorrelationMethod.CorrelationCoefficients">
            <summary>
            Calculate the normalized correlation coefficients between image and
            template.
            </summary>
            <remarks>
            These can be considered a measure of similarity between the input
            image and the template. Wherever the correlation coefficient is high
            (maximum is 1.0), image and template are very similar. Where the
            correlation coefficient approaches zero, the similarities vanish.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CorrelationMethod.CrossCorrelation">
            <summary>
            Calculate the cross correlations between image and template.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Correlation">
            <summary>
            Collection of functions that calculate different kinds of correlation
            values.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Correlation.Calculate(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,Stemmer.Cvb.Foundation.CorrelationMethod)">
            <summary>
            Calculate the correlation between an <paramref name="plane"/> and a
            <paramref name="template"/> using a selectable calculation
            <paramref name="method"/>.
            </summary>
            <remarks>
            <para>
            The result of the correlation will be an accumulator image with 32 bit
            floating point pixels containing the results.
            </para><para>
            Note that the accumulator will be smaller than the input
            <paramref name="aoi"/>, the difference being width (or height) of
            the <paramref name="template"/> - 1. The template will be anchored
            at its central pixel (fractional positions cut off).
            </para><para>
            In other words: The pixel (0, 0) of the accumulator corresponds to
            image position (int)(template width / 2, template height / 2) and its
            value will be a representation of the correlation between the input
            image and the template, centered around this very pixel.
            </para>
            </remarks>
            <param name="plane">Image plane to perform the correlation on.</param>
            <param name="template">Template plane to perform the correlation with.
            </param>
            <param name="aoi">Area of interest to perform the correlation on.
            </param>
            <param name="method">Correlation method to use.</param>
            <returns>Accumulator image (<see cref="F:Stemmer.Cvb.DataTypes.Float32Bpp"/>).
            </returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <paramref name="method"/> is unknown.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Correlation.Calculate(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.CorrelationMethod)">
            <summary>
            Calculate the correlation between an <paramref name="plane"/> and a
            <paramref name="template"/> using a selectable calculation
            <paramref name="method"/>.
            </summary>
            <remarks>
            <para>
            The result of the correlation will be an accumulator image with 32 bit
            floating point pixels containing the results.
            The pixel (0, 0) of the accumulator corresponds to
            image position (int)(template width / 2, template height / 2) and its
            value will be a representation of the correlation between the input
            image and the template, centered around this very pixel.
            </para>
            </remarks>
            <param name="plane">Image plane to perform the correlation on.</param>
            <param name="template">Template plane to perform the correlation with.
            </param>
            <param name="method">Correlation method to use.</param>
            <returns>Accumulator image (<see cref="F:Stemmer.Cvb.DataTypes.Float32Bpp"/>).
            </returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Correlation.Calculate(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect)">
            <summary>
            Calculate the correlation coefficients between an
            <paramref name="plane"/> and a <paramref name="template"/>.
            </summary>
            <remarks>
            <para>
            The result of the correlation will be an accumulator image with 32 bit
            floating point pixels containing the results.
            </para><para>
            Note that the accumulator will be smaller than the input
            <paramref name="aoi"/>, the difference being width (or height) of
            the <paramref name="template"/> - 1. The template will be anchored
            at its central pixel (fractional positions cut off).
            </para><para>
            In other words: The pixel (0, 0) of the accumulator corresponds to
            image position (int)(template width / 2, template height / 2) and its
            value will be a representation of the correlation between the input
            image and the template, centered around this very pixel.
            </para>
            </remarks>
            <param name="plane">Image plane to perform the correlation on.</param>
            <param name="template">Template plane to perform the correlation with.
            </param>
            <param name="aoi">Area of interest to perform the correlation on.
            </param>
            <returns>Accumulator image (<see cref="F:Stemmer.Cvb.DataTypes.Float32Bpp"/>).
            </returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Correlation.Calculate(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane)">
            <summary>
            Calculate the correlation coefficients between an
            <paramref name="plane"/> and a <paramref name="template"/>.
            </summary>
            <remarks>
            <para>
            The result of the correlation will be an accumulator image with 32 bit
            floating point pixels containing the results.
            The pixel (0, 0) of the accumulator corresponds to
            image position (int)(template width / 2, template height / 2) and its
            value will be a representation of the correlation between the input
            image and the template, centered around this very pixel.
            </para>
            </remarks>
            <param name="plane">Image plane to perform the correlation on.</param>
            <param name="template">Template plane to perform the correlation with.
            </param>
            <returns>Accumulator image (<see cref="F:Stemmer.Cvb.DataTypes.Float32Bpp"/>).
            </returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Correlation.FindMatches(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,System.Double,System.Int32)">
            <summary>
            Use the correlation coefficient calculation method to find locations
            in the input image <paramref name="plane"/> that match the given
            <paramref name="template"/>.
            </summary>
            <remarks>
            <para>
            If the matches fall within the <paramref name="locality"/> distance
            (measured using the L1 norm), the one with the lower correlation
            coefficient will be removed from the result list.
            </para><para>
            This uses <see cref="F:Stemmer.Cvb.SubPixelMode.ParabolicFast"/> and thus
            <see cref="F:Stemmer.Cvb.Neighborhood.Use3x3"/>.
            </para>
            </remarks>
            <param name="plane">Image plane in which to look for matches.</param>
            <param name="template">Template to match.</param>
            <param name="locality">Minimum distance between two valid matches
            (measured using the L1 norm).</param>
            <param name="threshold">Minimum correlation coefficient to look for
            (valid values range from 0 to 1).</param>
            <returns>List of the local maxima that have been found.</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Correlation.FindMatches(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.SubPixelMode,Stemmer.Cvb.Neighborhood)">
            <summary>
            Use the correlation coefficient calculation method to find locations
            in the input image <paramref name="plane"/> that match the given
            <paramref name="template"/>.
            </summary>
            <remarks>
            If the matches fall within the <paramref name="locality"/> distance
            (measured using the L1 norm), the one with the lower correlation
            coefficient will be removed from the result list.
            </remarks>
            <param name="plane">Image plane in which to look for matches.</param>
            <param name="template">Template to match.</param>
            <param name="locality">Minimum distance between two valid matches
            (measured using the L1 norm).</param>
            <param name="threshold">Minimum correlation coefficient to look for
            (valid values range from 0 to 1).</param>
            <param name="subPixMode">Mode to be used for determining sub pixel
            accuracy (see description of <see cref="T:Stemmer.Cvb.SubPixelMode"/> values).
            </param>
            <param name="subPixRadius">Neighborhood to take account in the sub
            pixel calculation (see description of <see cref="T:Stemmer.Cvb.Neighborhood"/>
            values).
            </param>
            <returns>List of the local maxima that have been found.</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Correlation.FindMatches(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,System.Double,System.Int32)">
            <summary>
            Use the correlation coefficient calculation method to find locations
            in the input image <paramref name="plane"/> that match the given
            <paramref name="template"/>.
            </summary>
            <remarks>
            <para>
            If the matches fall within the <paramref name="locality"/> distance
            (measured using the L1 norm), the one with the lower correlation
            coefficient will be removed from the result list.
            </para><para>
            This uses <see cref="F:Stemmer.Cvb.SubPixelMode.ParabolicFast"/> and thus
            <see cref="F:Stemmer.Cvb.Neighborhood.Use3x3"/>.
            </para>
            </remarks>
            <param name="plane">Image plane in which to look for matches.</param>
            <param name="template">Template to match.</param>
            <param name="aoi">Region of interest in which to look for matches.
            </param>
            <param name="locality">Minimum distance between two valid matches
            (measured using the L1 norm).</param>
            <param name="threshold">Minimum correlation coefficient to look for
            (valid values range from 0 to 1).</param>
            <returns>List of the local maxima that have been found.</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Correlation.FindMatches(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,System.Double,System.Int32,Stemmer.Cvb.SubPixelMode,Stemmer.Cvb.Neighborhood)">
            <summary>
            Use the correlation coefficient calculation method to find locations
            in the input image <paramref name="plane"/> that match the given
            <paramref name="template"/>.
            </summary>
            <remarks>
            If the matches fall within the <paramref name="locality"/> distance
            (measured using the L1 norm), the one with the lower correlation
            coefficient will be removed from the result list.
            </remarks>
            <param name="plane">Image plane in which to look for matches.</param>
            <param name="template">Template to match.</param>
            <param name="aoi">Region of interest in which to look for matches.
            </param>
            <param name="locality">Minimum distance between two valid matches
            (measured using the L1 norm).</param>
            <param name="threshold">Minimum correlation coefficient to look for
            (valid values range from 0 to 1).</param>
            <param name="subPixMode">Mode to be used for determining sub pixel
            accuracy (see description of <see cref="T:Stemmer.Cvb.SubPixelMode"/> values).
            </param>
            <param name="subPixRadius">Neighborhood to take account in the sub
            pixel calculation (see description of <see cref="T:Stemmer.Cvb.Neighborhood"/>
            values).
            </param>
            <returns>List of the local maxima that have been found.</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed.
            </exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Convert">
            <summary>
            Class with various image conversion functions.
            </summary>
            <remarks>
            Conversion means that when converting to a data type with higher value 
            range, the image data will simply be padded with zeros but the actual 
            values will be conserved. When converting to lower value ranges, the 
            pixel values from the source image will be saturated at the value limits 
            of the target format where necessary.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Convert.To8BppUnsigned(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to an image with 8 bits per pixel unsigned
            data.
            </summary>
            <param name="img">Image to be converted</param>
            <returns>Converted image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Convert.To16BppUnsigned(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to an image with 16 bits per pixel unsigned
            data.
            </summary>
            <param name="img">Image to be converted</param>
            <returns>Converted image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Convert.To16BppSigned(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to an image with 16 bits per pixel signed
            data.
            </summary>
            <param name="img">Image to be converted</param>
            <returns>Converted image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Convert.To32BppSigned(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to an image with 32 bits per pixel signed
            data.
            </summary>
            <param name="img">Image to be converted</param>
            <returns>Converted image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Convert.To32BppFloat(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to an image with 32 bits per pixel float
            data.
            </summary>
            <param name="img">Image to be converted</param>
            <returns>Converted image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ConvertColorSpace">
            <summary>
            Color space conversions supported by the Foundation Package.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix">
            <summary>
            Matrix defining color transformations.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A11">
            <summary>
            Coefficient 1,1 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A12">
            <summary>
            Coefficient 1,2 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A13">
            <summary>
            Coefficient 1,3 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A14">
            <summary>
            Coefficient 1,4 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A21">
            <summary>
            Coefficient 2,1 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A22">
            <summary>
            Coefficient 2,2 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A23">
            <summary>
            Coefficient 2,3 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A24">
            <summary>
            Coefficient 2,4 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A31">
            <summary>
            Coefficient 3,1 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A32">
            <summary>
            Coefficient 3,2 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A33">
            <summary>
            Coefficient 3,3 of the matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix.A34">
            <summary>
            Coefficient 3,4 of the matrix.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.TwistColors(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.ConvertColorSpace.ColorTwistMatrix)">
            <summary>
            Apply the given <paramref name="matrix"/> to the given <paramref name="img"/>.
            </summary>
            <param name="img">Image to apply the matrix to</param>
            <param name="matrix">Matrix defining the color twist transformation.</param>
            <returns>Transformed image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToRGB(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to RGB.
            </summary>
            <param name="img">Input image.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.InvalidCastException">If the input image has an
            unknown/inconvertible color model</exception>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToRGBFrom(Stemmer.Cvb.Image,Stemmer.Cvb.ColorModel)">
            <summary>
            Convert the input image to RGB.
            </summary>
            <remarks>
            <para>
            This method differs from <see cref="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToRGB(Stemmer.Cvb.Image)"/> in that if the
            color model is <see cref="F:Stemmer.Cvb.ColorModel.RGBGuess"/> instead
            <paramref name="assumedColorModel"/> is used.
            </para><para>
            With that you can build your own images consisting of the desired
            color space and convert it to RGB.
            </para>
            </remarks>
            <param name="img">Input image.</param>
            <param name="assumedColorModel">In cases where the color model of the
            input image is not known (indicated by the value
            <see cref="F:Stemmer.Cvb.ColorModel.RGBGuess"/>), the source image's color model
            should be assumed to be the one provided in
            <paramref name="assumedColorModel"/>.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.InvalidCastException">If the input image has an
            unknown/inconvertible color model</exception>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToYUV(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to YUV.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToYCbCr(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to YCbCr.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToCieXYZ(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to CIE XYZ.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToCieLUV(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to CIE LUV.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToCieLab16(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to CIE Lab with
            <see cref="F:Stemmer.Cvb.DataTypes.Int16BppUnsigned"/> for better precision.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToCieLab8(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to CIE Lab with
            <see cref="F:Stemmer.Cvb.DataTypes.Int8BppUnsigned"/>.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToYCC(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to YCC.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToHLS(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to HLS.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToHSV(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to HSV.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToMono(Stemmer.Cvb.Image,Stemmer.Cvb.MonochromeConversion)">
            <summary>
            Convert the input image to mono.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <param name="conversion">Weighting method to apply</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToMono(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to mono.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.ToMono(Stemmer.Cvb.Image,System.Double,System.Double,System.Double)">
            <summary>
            Convert the input image to mono.
            </summary>
            <remarks>
            If the input image is something other than RGB, an internal conversion
            to RGB happens, increasing the processing time accordingly.
            </remarks>
            <param name="img">Image to be converted.</param>
            <param name="weightR">Weight (multiplier) for the red channel</param>
            <param name="weightG">Weight (multiplier) for the green channel</param>
            <param name="weightB">Weight (multiplier) for the blue channel</param>
            <returns>New converted image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ConvertColorSpace.SwapChannels(Stemmer.Cvb.Image,System.Int32[])">
            <summary>
            Create a new image by rearranging the planes of the input image.
            </summary>
            <remarks>
            This method differs from
            <see cref="M:Stemmer.Cvb.ImagePlaneCollection.Map(System.Collections.Generic.IEnumerable{System.Int32})"/> in that this
            creates a new interleaved image buffer instead of just giving a new
            view on the data.
            </remarks>
            <param name="img">Input image.</param>
            <param name="newArrangement">
            <para>
            Array that defines the new plane arrangement.
            </para><para>
            For example for an RGB image, the array [2,1,0] would cause the image
            planes to be rearranged to BGR plane order.
            </para>
            </param>
            <returns>New transformed image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.FftImage">
            <summary>
            Cvb Image representation in the Fourier domain. 
            </summary>
            <remarks>
            <para>
            This image type is not a full-fledged frequency-domain representation of 
            the image data - it makes use of the symmetries induced by the fact that 
            the source data we are working on is practically always real-valued, 
            which allows for a more compact storage and faster computation of the 
            frequency domain operations.
            </para><para>
            However, this also means that it is not possible to simply manipulate 
            the amplitude and phase information in the frequency domain with this
            image type. You should think of it as a buffer rather than a real image
            (although it is in fact possible to display it).
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.FftImage.#ctor(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject,System.Int64,Stemmer.Cvb.Foundation.FftNormalization)">
            <summary>
            Construct an FFT image. Note that we do not really want consumers to
            do that...
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.FftImage.#ctor(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject,Stemmer.Cvb.Foundation.FftNormalization)">
            <summary>
            Construct an FFT image. Note that we do not really want consumers to
            do that...
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.FftImage.Normalization">
            <summary>
            Gets the normalization that has been used for generation of this 
            <c>FftImage</c>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.FftImage.ToPhaseImage">
            <summary>
            Calculate the phase image of this FFT image.
            </summary>
            <returns>Phase image (as <see cref="F:Stemmer.Cvb.DataTypes.Float32Bpp"/>).</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.FftImage.ToAmplitudeImage">
            <summary>
            Calculate the amplitude image of this FFT image.
            </summary>
            <returns>Amplitude image (as <see cref="F:Stemmer.Cvb.DataTypes.Float32Bpp"/>).</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.FftImage.ToImage">
            <summary>
            Transform this compressed FFT image into a regular CVB image with a
            real and imaginary part.
            </summary>
            <remarks>
            Plane 0 contains the real values of all the pixels and plane 1 the
            imaginary ones.
            </remarks>
            <returns>Two planar image (as <see cref="F:Stemmer.Cvb.DataTypes.Float32Bpp"/>).
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.FftImage.FromImage(Stemmer.Cvb.Image)">
            <summary>
            Transform a CVB image into a compressed FFT image. 
            </summary>
            <remarks>
            The input image is required to have two
            <see cref="F:Stemmer.Cvb.DataTypes.Float32Bpp"/> planes, otherwise the conversion 
            will fail.
            </remarks>
            <param name="img">Image to be converted.</param>
            <returns>New compressed <see cref="T:Stemmer.Cvb.Foundation.FftImage"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.FftNormalization">
            <summary>
            Normalization modes that can be applied when calculating the Fourier
            transform or its inverse. 
            </summary>
            <remarks>
            <para>
            Effectively this is the factor before the transformation integral.
            </para><para>
            Typically the same factor should be applied in forward and inverse 
            transform, otherwise the absolute pixel values of a transformation round 
            trip will differ from the original pixel values.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FftNormalization.Forward">
            <summary>
            Apply a factor 1/N in forward transformation, but not in inverse
            transformation.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FftNormalization.Inverse">
            <summary>
            Apply a factor 1/N in the inverse transformation but not in forward
            transformation.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FftNormalization.Sqrt">
            <summary>
            Apply a factor 1/sqrt(N) in inverse and forward transformation alike.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FftNormalization.None">
            <summary>
            No or unknown normalization.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.FftWindow">
            <summary>
            Window function to apply when calculating a Fourier transform.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FftWindow.None">
            <summary>
            Do not apply a Window function.
            </summary>
            <remarks>
            This will allow Fourier transformation artifacts caused by the abrupt 
            ending of the image data at the image borders to creep into the 
            Fourier transform; these artifacts will become visible as high 
            frequency oscillations in the back transformed image.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FftWindow.Hamming">
            <summary>
            Apply a Hamming window function.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FftWindow.Bartlett">
            <summary>
            Apply a Bartlett window function.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FftWindow.SeparateBartlett">
            <summary>
            Apply a Bartlett window function successively to individual rows and
            columns of the image.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Fft">
            <summary>
            Collection of FFT functions.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Forward(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.FftNormalization,Stemmer.Cvb.Foundation.FftWindow)">
            <summary>
            Calculate the Fourier transformation of an image.
            </summary>
            <param name="plane">image to be transformed</param>
            <param name="normalization">normalization to apply</param>
            <param name="window">window to apply</param>
            <returns>transformed image</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="plane"/> to work on has already been disposed.
            </exception>    
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Forward(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,Stemmer.Cvb.Foundation.FftNormalization,Stemmer.Cvb.Foundation.FftWindow)">
            <summary>
            Calculate the Fourier transformation of an image.
            </summary>
            <param name="plane">Image plane to be transformed.</param>
            <param name="aoi">Image region to be transformed.</param>
            <param name="normalization">Normalization to apply.</param>
            <param name="window">Window to apply.</param>
            <returns>Transformed image.</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="plane"/> to work on has already been disposed.
            </exception>    
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Inverse(Stemmer.Cvb.Foundation.FftImage)">
            <summary>
            Calculate the inverse Fourier transformation.
            </summary>
            <param name="fftImg">Fourier transformed image</param>
            <returns>Image in space domain</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="fftImg"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="fftImg"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Inverse(Stemmer.Cvb.Foundation.FftImage,Stemmer.Cvb.Foundation.FftNormalization)">
            <summary>
            Calculate the inverse Fourier transformation.
            </summary>
            <remarks>
            Only set a different <paramref name="normalization"/> than 
            <see cref="P:Stemmer.Cvb.Foundation.FftImage.Normalization"/> if appropriate as otherise 
            the calculations result in erroneous values.
            </remarks>
            <param name="fftImg">Fourier transformed image.</param>
            <param name="normalization">Normalization to apply.</param>
            <returns>Image in space domain.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="fftImg"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="fftImg"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Multiply(Stemmer.Cvb.Foundation.FftImage,Stemmer.Cvb.Foundation.FftImage)">
            <summary>
            Multiply two compressed FFT images.
            </summary>
            <param name="img1">Image 1 to multiply.</param>
            <param name="img2">Image 2 to multiply.</param>
            <returns>Multiplication result.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img1"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img1"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img2"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img2"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.MultiplyConjugated(Stemmer.Cvb.Foundation.FftImage,Stemmer.Cvb.Foundation.FftImage)">
            <summary>
            Multiply a compressed FFT image with the complex conjugate of another
            compressed FFT image.
            </summary>
            <remarks>
            Note: the complex conjugate of <paramref name="img2"/> will be taken 
            before multiplying.
            </remarks>
            <param name="img1">Image 1 to multiply</param>
            <param name="img2">Image 2 to multiply</param>
            <returns>Multiplication result</returns>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img1"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img2"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img2"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Fft.Filter">
            <summary>
            Creation functions for FFT filters.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Filter.CreateBandStop(Stemmer.Cvb.Foundation.FftImage,System.Single,System.Single)">
            <summary>
            Create a Fourier space representation of a band stop filter with a 
            default width of 10%.
            </summary>
            <remarks>
            Such a filter can be applied to an image by multiplying the image's
            Fourier transform with this filter image and then transforming the 
            result back to Cartesian space.
            </remarks>
            <param name="img"><para>Image to apply the filter on.</para>
            <para>
            This input image will not directly be processed - it is required to 
            determine the necessary size of the result image only.
            </para></param>
            <param name="center1">Lower cutoff position of the filter relative 
            to the frequency range (range [0...1]).</param>
            <param name="center2">Upper cutoff position of the filter relative 
            to the frequency range (range [0...1]).</param>
            <returns>Filter's Fourier representation</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Filter.CreateBandStop(Stemmer.Cvb.Foundation.FftImage,System.Single,System.Single,System.Single)">
            <summary>
            Create a Fourier space representation of a band stop filter.
            </summary>
            <remarks>
            Such a filter can be applied to an image by multiplying the image's
            Fourier transform with this filter image and then transforming the 
            result back to Cartesian space.
            </remarks>
            <param name="img"><para>Image to apply the filter on.</para>
            <para>
            This input image will not directly be processed - it is required to 
            determine the necessary size of the result image only.
            </para></param>
            <param name="center1">Lower cutoff position of the filter relative 
            to the frequency range (range [0...1]).</param>
            <param name="center2">Upper cutoff position of the filter relative 
            to the frequency range (range [0...1]).</param>
            <param name="width">Width of the filter cutoff region (range 
            [0...1]). Helps to reduce ring artifacts.</param>
            <returns>Filter's Fourier representation</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Filter.CreateBandPass(Stemmer.Cvb.Foundation.FftImage,System.Single,System.Single)">
            <summary>
            Create a Fourier space representation of a band pass filter.
            </summary>
            <remarks>
            Such a filter can be applied to an image by multiplying the image's
            Fourier transform with this filter image and then transforming the 
            result back to Cartesian space.
            </remarks>
            <param name="img"><para>Image to apply the filter on.</para>
            <para>
            This input image will not directly be processed - it is required to 
            determine the necessary size of the result image only.
            </para></param>
            <param name="center1">Lower cutoff position of the filter relative 
            to the frequency range (range [0...1]).</param>
            <param name="center2">Upper cutoff position of the filter relative 
            to the frequency range (range [0...1]).</param>
            <returns>Filter's Fourier representation</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Filter.CreateBandPass(Stemmer.Cvb.Foundation.FftImage,System.Single,System.Single,System.Single)">
            <summary>
            Create a Fourier space representation of a band pass filter.
            </summary>
            <remarks>
            Such a filter can be applied to an image by multiplying the image's
            Fourier transform with this filter image and then transforming the 
            result back to Cartesian space.
            </remarks>
            <param name="img"><para>Image to apply the filter on.</para>
            <para>
            This input image will not directly be processed - it is required to 
            determine the necessary size of the result image only.
            </para></param>
            <param name="center1">Lower cutoff position of the filter relative 
            to the frequency range (range [0...1]).</param>
            <param name="center2">Upper cutoff position of the filter relative 
            to the frequency range (range [0...1]).</param>
            <param name="width">Width of the filter cutoff region (range 
            [0...1]). Helps to reduce ring artifacts.</param>
            <returns>Filter's Fourier representation</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Filter.CreateHighPass(Stemmer.Cvb.Foundation.FftImage,System.Single)">
            <summary>
            Create a Fourier space representation of a high pass filter. 
            </summary>
            <remarks>
            Such a filter can be applied to an image by multiplying the image's
            Fourier transform with this filter image and then transforming the 
            result back to Cartesian space.
            </remarks>
            <param name="img"><para>Image to apply the filter on.</para>
            <para>
            This input image will not directly be processed - it is required to 
            determine the necessary size of the result image only.
            </para></param>
            <param name="center">Cutoff position of the filter relative to the
            frequency range (range [0...1]).
            </param>
            <returns>Filter's Fourier representation</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Filter.CreateHighPass(Stemmer.Cvb.Foundation.FftImage,System.Single,System.Single)">
            <summary>
            Create a Fourier space representation of a high pass filter. 
            </summary>
            <remarks>
            Such a filter can be applied to an image by multiplying the image's
            Fourier transform with this filter image and then transforming the 
            result back to Cartesian space.
            </remarks>
            <param name="img"><para>Image to apply the filter on.</para>
            <para>
            This input image will not directly be processed - it is required to 
            determine the necessary size of the result image only.
            </para></param>
            <param name="center">Cutoff position of the filter relative to the
            frequency range (range [0...1]).
            </param>
            <param name="width">Width of the filter cutoff region (range 
            [0...1]). Helps to reduce ring artifacts.</param>
            <returns>Filter's Fourier representation</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Filter.CreateLowPass(Stemmer.Cvb.Foundation.FftImage,System.Single)">
            <summary>
            Create a Fourier space representation of a low pass filter. 
            </summary>
            <remarks>
            Such a filter can be applied to an image by multiplying the image's
            Fourier transform with this filter image and then transforming the 
            result back to Cartesian space.
            </remarks>
            <param name="img"><para>Image to apply the filter on.</para>
            <para>
            This input image will not directly be processed - it is required to 
            determine the necessary size of the result image only.
            </para></param>
            <param name="center">Cutoff position of the filter relative to the
            frequency range (range [0...1]).
            </param>
            <returns>Filter's Fourier representation</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Fft.Filter.CreateLowPass(Stemmer.Cvb.Foundation.FftImage,System.Single,System.Single)">
            <summary>
            Create a Fourier space representation of a low pass filter. 
            </summary>
            <remarks>
            Such a filter can be applied to an image by multiplying the image's
            Fourier transform with this filter image and then transforming the 
            result back to Cartesian space.
            </remarks>
            <param name="img"><para>Image to apply the filter on.</para>
            <para>
            This input image will not directly be processed - it is required to 
            determine the necessary size of the result image only.
            </para></param>
            <param name="center">Cutoff position of the filter relative to the
            frequency range (range [0...1]).
            </param>
            <param name="width">Width of the filter cutoff region (range 
            [0...1]). Helps to reduce ring artifacts.</param>
            <returns>Filter's Fourier representation</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Histogram">
            <summary>
            A single histogram result.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.#ctor(Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer,System.Int32)">
            <summary>
            Construct a histogram result.
            </summary>
            <param name="analyzer">analyzer object from which the results came
            </param>
            <param name="plane">image plane from which the results came</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.NumPixels">
            <summary>
            Total number of pixels taken into account.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.Median">
            <summary>
            The median (gray value at which roughly 50% of the pixels are darker
            and 50% of the pixels are brighter than this gray value).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.Mean">
            <summary>
            Mean value of all pixels.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.Mode">
            <summary>
            Gets the mode (the most common gray value) of the histogram.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.Min">
            <summary>
            Get the minimum gray value of the histogram.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.Max">
            <summary>
            Get the maximum gray value of the histogram.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.Variance">
            <summary>
            Get the variance of the histogram.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.StandardDeviation">
            <summary>
            Get the standard deviation of the histogram.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.Count">
            <summary>
            Gets the number of elements in this histogram.
            </summary>
            <remarks>
            The number of elements corresponds to the number of possible gray
            values.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.Item(System.Int32)">
            <summary>
            The indexer for accessing the histogram data itself.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Histogram.IsReadOnly">
            <summary>
            The histogram data is read-only.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.IndexOf(System.Int64)">
            <summary>
            Gets the index of the first found <paramref name="count"/>.
            </summary>
            <param name="count">Count of gray value to find.</param>
            <returns>Index of <paramref name="count"/>; negative if not found.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.Insert(System.Int32,System.Int64)">
            <summary>
            Not supported as the histogram is read-only.
            </summary>
            <param name="index">Ignored.</param>
            <param name="count">Ignored.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown as this is
            a read-only collection.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.RemoveAt(System.Int32)">
            <summary>
            Not supported as the histogram is read-only.
            </summary>
            <param name="index">Ignored.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown as this is
            a read-only collection.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.Add(System.Int64)">
            <summary>
            Not supported as the histogram is read-only.
            </summary>
            <param name="count">Ignored.</param>
            <exception cref="T:System.InvalidOperationException">Always thrown as this is
            a read-only collection.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.Clear">
            <summary>
            Not supported as the histogram is read-only.
            </summary>
            <exception cref="T:System.InvalidOperationException">Always thrown as this is
            a read-only collection.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.Contains(System.Int64)">
            <summary>
            Gets whether the <paramref name="count"/> is inside this histogram.
            </summary>
            <param name="count">Numeric count of gray value to test.</param>
            <returns><c>true</c> if the count is present; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.CopyTo(System.Int64[],System.Int32)">
            <summary>
            Copies the elements of this histogram to the given 
            <paramref name="array"/> starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">Zero based index in <paramref name="array"/>
            at which copying begins.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.Remove(System.Int64)">
            <summary>
            Not supported as the histogram is read-only.
            </summary>
            <param name="count">Ignored.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.InvalidOperationException">Always thrown as this is
            a read-only collection.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.GetEnumerator">
            <summary>
            Gets the enumerator enumerating this histogram.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Histogram.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator enumerating this histogram.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.HistogramAnalyzer">
            <summary>
            Functionality for analyzing the Histogram of images (previously found
            in the LightMeter tool).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.ImagePlane)">
            <summary>
            Create a histogram for the whole <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to create histogram for.</param>
            <returns>Histogram for the given <paramref name="plane"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.ImagePlane,System.Double)">
            <summary>
            Create a histogram for the whole <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to create histogram for.</param>
            <param name="density">Percentage of pixels to process where 0 is 0% 
            and 1.0 is 100%.</param>
            <returns>Histogram for the given <paramref name="plane"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="density"/> is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect)">
            <summary>
            Creates a histogram for the <paramref name="aoi"/> in the given 
            <paramref name="plane"/>.
            </summary>
            <remarks>
            Using the <see cref="T:Stemmer.Cvb.Rect"/> as an overlay uses the 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>.
            </remarks>
            <param name="plane">Image plane to create histogram for.</param>
            <param name="aoi">Area of interest in 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>.</param>
            <returns>Histogram for the given <paramref name="plane"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,System.Double)">
            <summary>
            Creates a histogram for the <paramref name="aoi"/> in the given 
            <paramref name="plane"/>.
            </summary>
            <remarks>
            Using the <see cref="T:Stemmer.Cvb.Rect"/> as an overlay uses the 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>.
            </remarks>
            <param name="plane">Image plane to create histogram for.</param>
            <param name="aoi">Area of interest in 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>.</param>
            <param name="density">Percentage of pixels to process where 0 is 0% 
            and 1.0 is 100%.</param>
            <returns>Histogram for the given <paramref name="plane"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="density"/> is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D)">
            <summary>
            Creates a histogram for the <paramref name="aoi"/> in the given 
            <paramref name="plane"/>.
            </summary>
            <remarks>
            Using the <see cref="T:Stemmer.Cvb.Area2D"/> as an overlay uses the 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.ImageCoordinates"/>.
            </remarks>
            <param name="plane">Image plane to create histogram for.</param>
            <param name="aoi">Area of interest in 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.ImageCoordinates"/>.</param>
            <returns>Histogram for the given <paramref name="plane"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,System.Double)">
            <summary>
            Creates a histogram for the <paramref name="aoi"/> in the given 
            <paramref name="plane"/>.
            </summary>
            <remarks>
            Using the <see cref="T:Stemmer.Cvb.Area2D"/> as an overlay uses the 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.ImageCoordinates"/>.
            </remarks>
            <param name="plane">Image plane to create histogram for.</param>
            <param name="aoi">Area of interest in 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.ImageCoordinates"/>.</param>
            <param name="density">Percentage of pixels to process where 0 is 0% 
            and 1.0 is 100%.</param>
            <returns>Histogram for the given <paramref name="plane"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="density"/> is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.Image)">
            <summary>
            Creates a histogram for each plane of the whole 
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to create histograms for.</param>
            <returns>Array containing the histograms for each 
            <see cref="T:Stemmer.Cvb.ImagePlane"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.Image,System.Double)">
            <summary>
            Creates a histogram for each plane of the whole 
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to create histograms for.</param>
            <param name="density">Percentage of pixels to process where 0 is 0% 
            and 1.0 is 100%.</param>
            <returns>Array containing the histograms for each 
            <see cref="T:Stemmer.Cvb.ImagePlane"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="density"/> is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.Image,Stemmer.Cvb.Rect)">
            <summary>
            Creates a histogram for each plane of the <paramref name="aoi"/> in 
            the given <paramref name="image"/>.
            </summary>
            <remarks>
            Using the <see cref="T:Stemmer.Cvb.Rect"/> as an overlay uses the 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>.
            </remarks>
            <param name="image">Image to create histograms for.</param>
            <param name="aoi">Area of interest in 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>.</param>
            <returns>Array containing the histograms for each 
            <see cref="T:Stemmer.Cvb.ImagePlane"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.Image,Stemmer.Cvb.Rect,System.Double)">
            <summary>
            Creates a histogram for each plane of the <paramref name="aoi"/> in 
            the given <paramref name="image"/>.
            </summary>
            <remarks>
            Using the <see cref="T:Stemmer.Cvb.Rect"/> as an overlay uses the 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>.
            </remarks>
            <param name="image">Image to create histograms for.</param>
            <param name="aoi">Area of interest in 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>.</param>
            <param name="density">Percentage of pixels to process where 0 is 0% 
            and 1.0 is 100%.</param>
            <returns>Array containing the histograms for each 
            <see cref="T:Stemmer.Cvb.ImagePlane"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="density"/> is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.Image,Stemmer.Cvb.Area2D)">
            <summary>
            Creates a histogram for each plane of the <paramref name="aoi"/> in 
            the given <paramref name="image"/>.
            </summary>
            <remarks>
            Using the <see cref="T:Stemmer.Cvb.Area2D"/> as an overlay uses the 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.ImageCoordinates"/>.
            </remarks>
            <param name="image">Image to create histograms for.</param>
            <param name="aoi">Area of interest in 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.ImageCoordinates"/>.</param>
            <returns>Array containing the histograms for each 
            <see cref="T:Stemmer.Cvb.ImagePlane"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Create(Stemmer.Cvb.Image,Stemmer.Cvb.Area2D,System.Double)">
            <summary>
            Creates a histogram for each plane of the <paramref name="aoi"/> in 
            the given <paramref name="image"/>.
            </summary>
            <remarks>
            Using the <see cref="T:Stemmer.Cvb.Area2D"/> as an overlay uses the 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.ImageCoordinates"/>.
            </remarks>
            <param name="image">Image to create histograms for.</param>
            <param name="aoi">Area of interest in 
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.ImageCoordinates"/>.</param>
            <param name="density">Percentage of pixels to process where 0 is 0% 
            and 1.0 is 100%.</param>
            <returns>Array containing the histograms for each 
            <see cref="T:Stemmer.Cvb.ImagePlane"/>.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            has been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="density"/> is out of range.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer">
            <summary>
            Lightmeter wrapper.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Handle">
            <summary>
            Native non linear transformation handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in 
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.#ctor">
            <summary>
            Construct a histogram analyzer object.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Dispose">
            <summary>
            Dispose method that releases the classifier
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via 
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Image">
            <summary>
            The image this HistogramAnalyzer is working on.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If this object has already
            been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Run(Stemmer.Cvb.Area2D,System.Double,System.Boolean)">
            <summary>
            Execute the histogram analyzer on an area of interest.
            </summary>
            <param name="aoi">area of interest to work on</param>
            <param name="density">density at which to traverse the area of 
            interest</param>
            <param name="ignoreImageCs">ignore the coordinate system of the image
            </param>
            <exception cref="T:System.ObjectDisposedException">If this object has already
            been disposed.</exception>
            <returns>Histogram for each plane of the image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Run(Stemmer.Cvb.Area2D,System.Double)">
            <summary>
            Execute the histogram analyzer on an area of interest.
            </summary>
            <param name="aoi">area of interest to work on</param>
            <param name="density">density at which to traverse the area of 
            interest</param>
            <exception cref="T:System.ObjectDisposedException">If this object has already
            been disposed.</exception>
            <returns>Histogram for each plane of the image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Run(Stemmer.Cvb.Rect,System.Double)">
            <summary>
            Execute the histogram analyzer on an area of interest.
            </summary>
            <param name="aoi">area of interest to work on.</param>
            <param name="density">density...</param>
            <returns>Histogram for each plane of the image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Run(Stemmer.Cvb.Rect)">
            <summary>
            Execute the histogram analyzer on an area of interest.
            </summary>
            <param name="aoi">area of interest to work on.</param>
            <returns>Histogram for each plane of the image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Run(Stemmer.Cvb.Area2D)">
            <summary>
            Execute the histogram analyzer on an area of interest.
            </summary>
            <param name="aoi">area of interest to work on</param>
            <exception cref="T:System.ObjectDisposedException">If this object has already
            been disposed.</exception>
            <returns>Histogram for each plane of the image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Run">
            <summary>
            Execute the histogram analyzer on an area of interest.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If this object has already
            been disposed.</exception>
            <returns>Histogram for each plane of the image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramAnalyzer.Analyzer.Run(System.Double)">
            <summary>
            Execute the histogram analyzer on an area of interest.
            </summary>
            <param name="density">density at which to traverse the area of 
            interest</param>
            <exception cref="T:System.ObjectDisposedException">If this object has already
            been disposed.</exception>
            <returns>Histogram for each plane of the image.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.HistogramExtensions">
            <summary>
            extends the long[] class by methods that help analyze a histogram.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramExtensions.PeakData.#ctor(System.Int32,System.Double)">
            <summary>
            ctor
            </summary>
            <param name="grayValue">peak's grey value</param>
            <param name="quality">peak's quality</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramExtensions.FindPeaks(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Find peaks in the histogram identified by the supplied criteria.
            </summary>
            <param name="histogram">Histogram to analyze.</param>
            <param name="blurSize">Averaging window size (must be >= 1).</param>
            <param name="minDiff">Minimum grey value difference between two
            peaks.</param>
            <returns>Peak positions in the histogram.</returns>
            <exception cref="T:System.ArgumentNullException">If 
            <paramref name="histogram"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="blurSize"/> or <paramref name="minDiff"/> are out of
            rang.e</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramExtensions.FindPeaks(System.Collections.Generic.IList{System.Int64},System.Int32,System.Int32)">
            <summary>
            Find peaks in the histogram identified by the supplied criteria.
            </summary>
            <param name="histogram">Histogram to analyze.</param>
            <param name="blurSize">Averaging window size (must be >= 1).</param>
            <param name="minDiff">Minimum grey value difference between two
            peaks.</param>
            <returns>Peak positions in the histogram.</returns>
            <exception cref="T:System.ArgumentNullException">If 
            <paramref name="histogram"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="blurSize"/> or <paramref name="minDiff"/> are out of
            rang.e</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramExtensions.Filter(System.Collections.Generic.IList{System.Int32},System.Double[])">
            <summary>
            Filter a histogram array with the given <paramref name="kernel"/>.
            At the beginning and end of the histogram, the histogram uses constant
            extension
            </summary>
            <param name="histogram">Histogram to be filtered.</param>
            <param name="kernel">Kernel to be used</param>
            <returns>Filter result.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramExtensions.Filter(System.Collections.Generic.IList{System.Int64},System.Double[])">
            <summary>
            Filter a histogram array with the given <paramref name="kernel"/>.
            At the beginning and end of the histogram, the histogram uses constant
            extension
            </summary>
            <param name="histogram">Histogram to be filtered.</param>
            <param name="kernel">Kernel to be used</param>
            <returns>Filter result.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramExtensions.Filter(System.Collections.Generic.IList{System.Double},System.Double[])">
            <summary>
            Filter a histogram array with the given <paramref name="kernel"/>.
            At the beginning and end of the histogram, the histogram uses constant
            extension
            </summary>
            <param name="histogram">Histogram to be filtered.</param>
            <param name="kernel">Kernel to be used</param>
            <returns>Filter result.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramExtensions.SumBetween(System.Collections.Generic.IList{System.Int32},System.Int32,System.Int32)">
            <summary>
            Count the number of pixels that lie between two limits in the
            histogram.
            </summary>
            <param name="histogram">The histogram to calculate the sum on.</param>
            <param name="lowerLimit">Lower limit to count from.</param>
            <param name="upperLimit">Upper limit to count to (including).</param>
            <returns>Number of pixels with a gray value between
            <paramref name="lowerLimit"/> and <paramref name="upperLimit"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="lowerLimit"/> is smaller than zero or 
            <paramref name="upperLimit"/> is larger or equal to the number of 
            entries in the <see cref="T:Stemmer.Cvb.Foundation.Histogram"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HistogramExtensions.SumBetween(System.Collections.Generic.IList{System.Int64},System.Int32,System.Int32)">
            <summary>
            Count the number of pixels that lie between two limits in the
            histogram.
            </summary>
            <param name="histogram">The histogram to calculate the sum on.</param>
            <param name="lowerLimit">Lower limit to count from.</param>
            <param name="upperLimit">Upper limit to count to (including).</param>
            <returns>Number of pixels with a gray value between
            <paramref name="lowerLimit"/> and <paramref name="upperLimit"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="lowerLimit"/> is smaller than zero or 
            <paramref name="upperLimit"/> is larger or equal to the number of 
            entries in the <see cref="T:Stemmer.Cvb.Foundation.Histogram"/>.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.LutInterpolation">
            <summary>
            Different approaches for interpolating between lookup table values and
            levels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.LutInterpolation.Constant">
            <summary>
            LUT values are constant between two LUT levels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.LutInterpolation.Linear">
            <summary>
            Linear interpolation between two adjacent LUT levels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.LutInterpolation.Cubic">
            <summary>
            Cubic interpolation between two adjacent LUT levels.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.LutLevel">
            <summary>
            Struct that pairs a LUT level and the value assigned to this level.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.LutLevel.#ctor(System.Double,System.Double)">
            <summary>
            Constructor for a <c>LutLevel</c>.
            </summary>
            <param name="level">gray value level at which the value applies
            </param>
            <param name="value">value to be applied</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.LutLevel.Level">
            <summary>
            Gray value level at which the <see cref="P:Stemmer.Cvb.Foundation.LutLevel.Value"/> applies.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.LutLevel.Value">
            <summary>
            Transformed gray value that applies to the associated gray
            <see cref="P:Stemmer.Cvb.Foundation.LutLevel.Level"/>
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Lut">
            <summary>
            Lookup table functions.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Lut.Apply(Stemmer.Cvb.ImagePlane,System.Byte[])">
            <summary>
            Apply a lookup table to an 8 bit per pixel input image plane.
            </summary>
            <param name="plane">Plane to which the lookup table is to be applied.</param>
            <param name="values">The lookup table (must have at least 256
            entries). Exceed is ignored.</param>
            <returns>The result image.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
            <exception cref="T:System.FormatException">If the <paramref name="plane"/>
            has not 8 bits per pixel.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="values"/>
            has less than 256 entries.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Lut.Apply(Stemmer.Cvb.ImagePlane,System.Int32[])">
            <summary>
            Apply a lookup table to an 8 bit per pixel input image plane.
            </summary>
            <param name="plane">Plane to which the lookup table is to be applied.</param>
            <param name="values">The lookup table (must have at least 256
            entries). Exceed is ignored.</param>
            <returns>The result image.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
            <exception cref="T:System.FormatException">If the <paramref name="plane"/>
            has not 8 bits per pixel.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="values"/>
            has less than 256 entries.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Lut.Apply(Stemmer.Cvb.ImagePlane,System.Collections.Generic.IEnumerable{Stemmer.Cvb.Foundation.LutLevel},Stemmer.Cvb.Foundation.LutInterpolation)">
            <summary>
            Apply a lookup table that is the result of interpolation between a
            series of levels and values to an input image.
            </summary>
            <param name="plane">Plane to which the lookup table is to be applied.</param>
            <param name="levels">Levels defining the lookup table.</param>
            <param name="interpolation">Interpolation mode between the
            <paramref name="levels"/>.</param>
            <returns>The result image.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="levels"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If
            <paramref name="interpolation"/> is invalid.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Lut.Apply(Stemmer.Cvb.ImagePlane,System.Collections.Generic.IList{Stemmer.Cvb.Foundation.LutLevel},Stemmer.Cvb.Foundation.LutInterpolation)">
            <summary>
            Apply a lookup table that is the result of interpolation between a
            series of levels and values to an input image.
            </summary>
            <param name="plane">Plane to which the lookup table is to be applied.</param>
            <param name="levels">Levels defining the lookup table.</param>
            <param name="interpolation">Interpolation mode between the
            <paramref name="levels"/>.</param>
            <returns>The result image.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="levels"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If
            <paramref name="interpolation"/> is invalid.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.MomentsCalculation">
            <summary>
            Choose between speed and accuracy during image moment calculation.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MomentsCalculation.FavorNone">
            <summary>
            Favor neither speed nor accuracy.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MomentsCalculation.FavorSpeed">
            <summary>
            Favor speed over accuracy during moments calculation.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MomentsCalculation.FavorAccuracy">
            <summary>
            Favor accuracy over speed during moments calculation.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.MomentsOrder">
            <summary>
            Enumerated order for x and y central or spatial moments.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MomentsOrder.Order0">
            <summary>
            0th order
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MomentsOrder.Order1">
            <summary>
            1st order
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MomentsOrder.Order2">
            <summary>
            2nd order
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MomentsOrder.Order3">
            <summary>
            3rd order
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.MomentsNormalization">
            <summary>
            Available normalization modes for calculations.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MomentsNormalization.Unnormalized">
            <summary>
            Report moments unnormalized.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MomentsNormalization.Normalized">
            <summary>
            Report moments normalized.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.HuMoments">
            <summary>
            Results of Hu Moment calculation.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.HuMoments.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.HuMoments.M1">
            <summary>
            Hu Moment M1
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.HuMoments.M2">
            <summary>
            Hu Moment M2
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.HuMoments.M3">
            <summary>
            Hu Moment M3
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.HuMoments.M4">
            <summary>
            Hu Moment M4
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.HuMoments.M5">
            <summary>
            Hu Moment M5
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.HuMoments.M6">
            <summary>
            Hu Moment M6
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.HuMoments.M7">
            <summary>
            Hu Moment M7
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ImageMoments">
            <summary>
            State object for calculating various image moments.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ImageMoments.Handle">
            <summary>
            Native non linear transformation handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ImageMoments.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.ImageMoments.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.Dispose">
            <summary>
            Dispose method that releases the classifier
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.#ctor(Stemmer.Cvb.Foundation.MomentsCalculation)">
            <summary>
            Create a moments calculator object that can be used to determine
            several different kinds of gray value moments from an image.
            </summary>
            <param name="calculationPreference">preference of speed or accuracy</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ImageMoments.CalculationPreference">
            <summary>
            The preference of speed versus accuracy chosen when this object was
            created.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.Calculate(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,Stemmer.Cvb.Foundation.MomentsCalculation)">
            <summary>
            Calculate the moments on the input <paramref name="imgPlane"/> and
            <paramref name="aoi"/> (area of interest).
            </summary>
            <param name="imgPlane">Plane to calculate the moments.</param>
            <param name="aoi">Area of interest to calculate the moments in.</param>
            <param name="preference">Speed or accuracy.</param>
            <returns>Moments object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.Calculate(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect)">
            <summary>
            Calculate the moments on the input <paramref name="imgPlane"/> and
            <paramref name="aoi"/> favoring neither speed nor accuracy.
            </summary>
            <param name="imgPlane">Plane to calculate the moments on.</param>
            <param name="aoi">Area of interest to calculate the moments in.</param>
            <returns>Moments object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.Calculate(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.MomentsCalculation)">
            <summary>
            Calculate the moments on the input <paramref name="imgPlane"/>.
            </summary>
            <param name="imgPlane">Plane to calculate the moments on</param>
            <param name="preference">Speed or accuracy.</param>
            <returns>Moments object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.Calculate(Stemmer.Cvb.ImagePlane)">
            <summary>
            Calculate the moments on the input <paramref name="imgPlane"/>
            favoring neither speed nor accuracy.
            </summary>
            <param name="imgPlane">Plane to calculate the moments on</param>
            <returns>Moments object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.CalculateSpatialMoment(Stemmer.Cvb.Foundation.MomentsOrder,Stemmer.Cvb.Foundation.MomentsOrder,Stemmer.Cvb.Point2D,Stemmer.Cvb.Foundation.MomentsNormalization)">
            <summary>
            Get one of the spatial image moments.
            </summary>
            <param name="xOrder">X order of the moment to retrieve</param>
            <param name="yOrder">Y order of the moment to retrieve</param>
            <param name="offset">Offset of the moments.</param>
            <param name="normalization">Whether or not to normalize.</param>
            <returns>The spatial moment.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.CalculateGetSpatialMoment(Stemmer.Cvb.Foundation.MomentsOrder,Stemmer.Cvb.Foundation.MomentsOrder,Stemmer.Cvb.Foundation.MomentsNormalization)">
            <summary>
            Get one of the spatial image moments.
            </summary>
            <remarks>
            This overload automatically uses the offset used in creating this
            object.
            </remarks>
            <param name="xOrder">X order of the moment to retrieve</param>
            <param name="yOrder">Y order of the moment to retrieve</param>
            <param name="normalization">Whether or not to normalize.</param>
            <returns>The spatial moment.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.CalculateCentralMoment(Stemmer.Cvb.Foundation.MomentsOrder,Stemmer.Cvb.Foundation.MomentsOrder,Stemmer.Cvb.Foundation.MomentsNormalization)">
            <summary>
            Get one of the central image moments.
            </summary>
            <param name="xOrder">X order of the moment to retrieve</param>
            <param name="yOrder">Y order of the moment to retrieve</param>
            <param name="normalization">Whether or not to normalize.</param>
            <returns>The central moment.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ImageMoments.CaltulateHuMoments">
            <summary>
            Get the seven Hu moments of the image.
            </summary>
            <returns>Hu moments.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.MorphologyMask">
            <summary>
            Available morphology masks.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MorphologyMask.Rectangular">
            <summary>
            rectangular morphology mask
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MorphologyMask.Cross">
            <summary>
            Cross-shaped morphology mask
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.MorphologyMask.Elliptic">
            <summary>
            elliptic morphology mask
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.DistanceNorm">
            <summary>
            Norm for calculating distances.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.DistanceNorm.LInfinity">
            <summary>
            Infinity norm (a.k.a maximum norm).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.DistanceNorm.L1">
            <summary>
            L1 norm (a.k.a. absolute norm).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.DistanceNorm.L2">
            <summary>
            L2 norm (a.k.a. euclidean norm).
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Morphology">
            <summary>
            Morphological filter operations available from the Common Vision Blox
            foundation package.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Erode(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.MorphologyMask,Stemmer.Cvb.Size2D)">
            <summary>
            Perform an erosion operation with a selectable filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="maskType">Type of erosion mask to be used.</param>
            <param name="maskSize">Size of the erosion mask.</param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Erode(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.MorphologyMask,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            Perform an erosion operation with a selectable filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="maskType">Type of erosion mask to be used.</param>
            <param name="maskSize">Size of the erosion mask.</param>
            <param name="maskOffset">Offset of the mask reference point relative
            to the top left pixel of the mask; must lie within the defined
            <paramref name="maskSize"/>.</param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Erode(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Performs an erosion operation with a custom filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="mask"><para>Custom filter mask to use.</para>
            <para>
            The custom filter mask effective is a CVB image of up to 256x256
            pixels where irrelevant pixels have been set to black and pixels that
            are part of the filter mask have been set to white (255)
            </para></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="mask"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> or <paramref name="mask"/> have been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Erode(Stemmer.Cvb.Image,Stemmer.Cvb.Image,Stemmer.Cvb.Point2D)">
            <summary>
            Performs an erosion operation with a custom filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="mask"><para>Custom filter mask to use.</para>
            <para>
            The custom filter mask effective is a CVB image of up to 256x256
            pixels, where irrelevant pixels have been set to black and pixels that
            are part of the filter mask have been set to white (255)
            </para></param>
            <param name="maskOffset">Offset of the mask reference point relative
            to the top left pixel of the mask; must lie within the
            <paramref name="mask"/></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="mask"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> or <paramref name="mask"/> have been disposed.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Dilate(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.MorphologyMask,Stemmer.Cvb.Size2D)">
            <summary>
            Perform an dilation operation with a selectable filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="maskType">Type of erosion mask to be used</param>
            <param name="maskSize">Size of the erosion mask</param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Dilate(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.MorphologyMask,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            Perform an dilation operation with a selectable filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="maskType">Type of erosion mask to be used</param>
            <param name="maskSize">Size of the erosion mask</param>
            <param name="maskOffset">Offset of the mask reference point relative
            to the top left pixel of the mask; must lie within the defined
            <paramref name="maskSize"/></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Dilate(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Perform an dilation operation with a custom filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="mask"><para>Custom filter mask to use.</para>
            <para>
            The custom filter mask effective is a CVB image of up to 256x256
            pixels where irrelevant pixels have been set to black and pixels that
            are part of the filter mask have been set to white (255)
            </para></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="mask"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> or <paramref name="mask"/> have been disposed
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Dilate(Stemmer.Cvb.Image,Stemmer.Cvb.Image,Stemmer.Cvb.Point2D)">
            <summary>
            Perform an dilation operation with a custom filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="mask"><para>Custom filter mask to use.</para>
            <para>
            The custom filter mask effective is a CVB image of up to 256x256
            pixels where irrelevant pixels have been set to black and pixels that
            are part of the filter mask have been set to white (255)
            </para></param>
            <param name="maskOffset">offset of the mask reference point relative
            to the top left pixel of the mask; must lie within the
            <paramref name="mask"/></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="mask"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> or <paramref name="mask"/> have been disposed
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Open(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.MorphologyMask,Stemmer.Cvb.Size2D)">
            <summary>
            Perform an open operation with a selectable filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="maskType">Type of erosion mask to be used</param>
            <param name="maskSize">Size of the erosion mask</param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Open(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.MorphologyMask,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            Perform an open operation with a selectable filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="maskType">Type of erosion mask to be used</param>
            <param name="maskSize">Size of the erosion mask</param>
            <param name="maskOffset">Offset of the mask reference point relative
            to the top left pixel of the mask; must lie within the defined
            <paramref name="maskSize"/></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Open(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Perform an open operation with a custom filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="mask"><para>Custom filter mask to use.</para>
            <para>
            The custom filter mask effective is a CVB image of up to 256x256
            pixels where irrelevant pixels have been set to black and pixels that
            are part of the filter mask have been set to white (255)
            </para></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="mask"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> or <paramref name="mask"/> have been disposed
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Open(Stemmer.Cvb.Image,Stemmer.Cvb.Image,Stemmer.Cvb.Point2D)">
            <summary>
            Perform an open operation with a custom filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="mask"><para>Custom filter mask to use.</para>
            <para>
            The custom filter mask effective is a CVB image of up to 256x256
            pixels where irrelevant pixels have been set to black and pixels that
            are part of the filter mask have been set to white (255)
            </para></param>
            <param name="maskOffset">Offset of the mask reference point relative
            to the top left pixel of the mask; must lie within the
            <paramref name="mask"/></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="mask"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> or <paramref name="mask"/> have been disposed
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Close(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.MorphologyMask,Stemmer.Cvb.Size2D)">
            <summary>
            Perform a close operation with a selectable filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="maskType">Type of erosion mask to be used</param>
            <param name="maskSize">Size of the erosion mask</param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Close(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.MorphologyMask,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            Perform a close operation with a selectable filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="maskType">Type of erosion mask to be used</param>
            <param name="maskSize">Size of the erosion mask</param>
            <param name="maskOffset">Offset of the mask reference point relative
            to the top left pixel of the mask; must lie within the defined
            <paramref name="maskSize"/></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Close(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Perform a close operation with a custom filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="mask"><para>Custom filter mask to use.</para>
            <para>
            The custom filter mask effective is a CVB image of up to 256x256
            pixels where irrelevant pixels have been set to black and pixels that
            are part of the filter mask have been set to white (255)
            </para></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="mask"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> or <paramref name="mask"/> have been disposed
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.Close(Stemmer.Cvb.Image,Stemmer.Cvb.Image,Stemmer.Cvb.Point2D)">
            <summary>
            Perform a close operation with a custom filter mask.
            </summary>
            <param name="img">Image on which the operation is to be executed.</param>
            <param name="mask"><para>Custom filter mask to use.</para>
            <para>
            The custom filter mask effective is a CVB image of up to 256x256
            pixels where irrelevant pixels have been set to black and pixels that
            are part of the filter mask have been set to white (255)
            </para></param>
            <param name="maskOffset">Offset of the mask reference point relative
            to the top left pixel of the mask; must lie within the
            <paramref name="mask"/></param>
            <returns>The filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="mask"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> or <paramref name="mask"/> have been disposed
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Morphology.DistanceTransform(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.FixedFilterSize,Stemmer.Cvb.Foundation.DistanceNorm)">
            <summary>
            This function calculates (and writes into the output image) the
            distance to the closest pixel in the source image with the value
            zero for all nonzero pixels in the input image. Distance is calculated
            approximatively using a set of principal distances, that is governed
            by the MaskSize parameter and the distance norm.
            </summary>
            <param name="plane">Image plane on which to calculate.</param>
            <param name="maskSize">Mask size to use for the approximator (only
            3x3 and 5x5 are acceptable)</param>
            <param name="norm">Distance calculation norm to be used</param>
            <returns>The transformed image.</returns>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="plane"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ValueNormalization">
            <summary>
            Available normalization modes for calculations.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ValueNormalization.Unnormalized">
            <summary>
            Report values unnormalized.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ValueNormalization.Normalized">
            <summary>
            Report values normalized.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Norm">
            <summary>
            Functions for calculating different norms over the gray values of an
            image.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Norm.L1(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ValueNormalization)">
            <summary>
            Calculate and return the L1 norm (sum of absolute values) over all the
            pixels inside the <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to calculate the norm on.</param>
            <param name="normalize">Normalize results to [0...1] or not.</param>
            <returns>The calculated norm.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Norm.L1(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ValueNormalization,Stemmer.Cvb.Rect)">
            <summary>
            Calculate and return the L1 norm (sum of absolute values) over all the
            pixels inside the <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to calculate the norm on.</param>
            <param name="normalize">Normalize results to [0...1] or not.</param>
            <param name="aoi">Area to calculate the norm in.</param>
            <returns>The calculated norm.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Norm.L2(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ValueNormalization)">
            <summary>
            Calculate and return the L2 norm (euclidean norm) over the
            pixels inside the <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to calculate the norm on.</param>
            <param name="normalize">Normalize results to [0...1] or not.</param>
            <returns>The calculated norm.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Norm.L2(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ValueNormalization,Stemmer.Cvb.Rect)">
            <summary>
            Calculate and return the L2 norm (euclidean norm) over the
            pixels inside the <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to calculate the norm on.</param>
            <param name="aoi">Area to calculate the norm in.</param>
            <param name="normalize">Normalize results to [0...1] or not.</param>
            <returns>The calculated norm.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Norm.LInf(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ValueNormalization)">
            <summary>
            Calculate and return the L infinity norm (maximum norm) over the
            pixels inside the <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to calculate the norm on.</param>
            <param name="normalize">Normalize results to [0...1] or not.</param>
            <returns>The calculated norm.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Norm.LInf(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ValueNormalization,Stemmer.Cvb.Rect)">
            <summary>
            Calculate and return the L infinity norm (maximum norm) over the
            pixels inside the <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to calculate the norm on.</param>
            <param name="normalize">Normalize results to [0...1] or not.</param>
            <param name="aoi">Area to calculate the norm in.</param>
            <returns>The calculated norm.</returns>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            has been disposed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Scale">
            <summary>
            Class with various image scaling functions.
            </summary>
            <remarks>
            When scaling, the value range from the source image is adapted to that
            of the target image as good as possible.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Scale.To8BppUnsigned(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to an image with 8 bits per pixel unsigned
            data.
            </summary>
            <param name="img">Image to be scaled.</param>
            <returns>The scaled image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Scale.To16BppUnsigned(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to an image with 16 bits per pixel unsigned
            data.
            </summary>
            <param name="img">Image to be scaled.</param>
            <returns>The scaled image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Scale.To16BppSigned(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to an image with 16 bits per pixel signed
            data.
            </summary>
            <param name="img">Image to be scaled.</param>
            <returns>The scaled image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Scale.To32BppSigned(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to an image with 32 bits per pixel signed
            data.
            </summary>
            <param name="img">Image to be scaled.</param>
            <returns>The scaled image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Scale.To32BppFloat(Stemmer.Cvb.Image,System.Double,System.Double)">
            <summary>
            Convert the input image to an image with 32 bits per pixel float
            data.
            </summary>
            <param name="img">Image to be scaled.</param>
            <param name="minVal">Minimum value to occur in the output image
            </param>
            <param name="maxVal">Maximum value to occur in the output image
            </param>
            <returns>The scaled image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.TestImageDataType">
            <summary>
            Data types usable for test image generation.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.TestImageDataType.Unsigned8">
            <summary>
            Unsigned 8 bits per pixel integer data
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.TestImageDataType.Unsigned16">
            <summary>
            Unsigned 16 bits per pixel integer data
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.TestImageDataType.Signed16">
            <summary>
            Signed 16 bits per pixel integer data
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.TestImageDataType.Signed32">
            <summary>
            Signed 32 bits per pixel integer data
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.TestImageDataType.Float32">
            <summary>
            32 bits per pixel floating point data
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.TestImages">
            <summary>
            Functions for test image generation.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.TestImages.Jaehne(Stemmer.Cvb.Size2D,System.Int32,Stemmer.Cvb.Foundation.TestImageDataType)">
            <summary>
            Create a filter test image as suggested by Prof. Jaehne, suitable for
            investigating the isotropy characteristics of a filter.
            </summary>
            <param name="size">Size of the image to be generated.</param>
            <param name="numPlanes">Number of planes the image should have.</param>
            <param name="dataType">Data type the image should have.</param>
            <returns>The test image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.TestImages.Ramp(Stemmer.Cvb.Size2D,System.Int32,Stemmer.Cvb.Foundation.TestImageDataType,Stemmer.Cvb.Foundation.Axis)">
            <summary>
            Create a gray ramp test image with offset 0 and slope 1.
            </summary>
            <param name="size">Size of the image to be generated.</param>
            <param name="numPlanes">Number of planes the image should have.</param>
            <param name="dataType">Data type the image should have.</param>
            <param name="axis">Axis along which the ramp should run.</param>
            <returns>The test image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.TestImages.Ramp(Stemmer.Cvb.Size2D,System.Int32,Stemmer.Cvb.Foundation.TestImageDataType,Stemmer.Cvb.Foundation.Axis,System.Double,System.Double)">
            <summary>
            Create a gray ramp test image.
            </summary>
            <param name="size">Size of the image to be generated.</param>
            <param name="numPlanes">Number of planes the image should have.</param>
            <param name="dataType">Data type the image should have.</param>
            <param name="axis">Axis along which the ramp should run.</param>
            <param name="offset">Offset the ramp should have.</param>
            <param name="slope">Slope the ramp should have.</param>
            <returns>The test image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.TestImages.DecomposeTestImageDataType(Stemmer.Cvb.Foundation.TestImageDataType,System.Int32@,System.Boolean@,System.Boolean@)">
            <summary>
            Decompose the enumerated test image data types into something we can
            pass on to the unmanaged function.
            </summary>
            <param name="dt">Data type to be decomposed.</param>
            <param name="bitsPerPixel">Bits per pixel</param>
            <param name="isSigned">Signed?</param>
            <param name="isFloat">Floating point?</param>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.StaticThresholding">
            <summary>
            Comparisons for static thresholding.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.StaticThresholding.LessThan">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.StaticThresholding.LessThanOrEqual">
            <summary>
            Less than or Equal
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.StaticThresholding.Equal">
            <summary>
            Equal
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.StaticThresholding.GreaterOrEqual">
            <summary>
            Greater or Equal
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.StaticThresholding.Greater">
            <summary>
            Greater
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.DynamicThresholdNorm">
            <summary>
            Norm calculation approaches for dynamic thresholding.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.DynamicThresholdNorm.Mean">
            <summary>
            Dynamic thresholding compares versus the mean value of the threshold
            mask (default).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.DynamicThresholdNorm.MinMax">
            <summary>
            Dynamic thresholding compares versus the middle between the minimum
            and the maximum value inside the threshold mask.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Threshold">
            <summary>
            Thresholding functions in the Common Vision Blox Foundation Package.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Threshold.Static(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Foundation.StaticThresholding)">
            <summary>
            Create an output image that is the result of static thresholding.
            </summary>
            <param name="img">Image to apply static thresholding to.</param>
            <param name="values">Threshold values - the array must contain at
            least one threshold per plane available in the image.</param>
            <param name="comparison">Comparison method.</param>
            <returns>The thresholded image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null or the <paramref name="values"/> array
            is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentException">If the <paramref name="values"/>
            array does not contain enough values</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Threshold.Static(Stemmer.Cvb.Image,Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.StaticThresholding)">
            <summary>
            This function performs thresholding of an input image with
            pixel-by-pixel thresholds stored in the pixels of a
            <paramref name="thresholds"/> image.
            </summary>
            <remarks>
            Both images should be identical in size. However, if they are not, the
            smallest common rectangle (located at the top left pixel) of both
            images will be the size of the result image. Both input images should
            have identical dimensions (either 1 or 3 planes per image) and
            identical data types.
            </remarks>
            <param name="img">Image to be thresholded.</param>
            <param name="thresholds">Image containing the threshold values for
            the pixels of the input <paramref name="img"/>.</param>
            <param name="comparison">Comparison to apply</param>
            <returns>The thresholded image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="thresholds"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> or <paramref name="thresholds"/> has already
            been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Threshold.Dynamic(Stemmer.Cvb.Image,System.Int32,System.Int32)">
            <summary>
            This function performs dynamic thresholding on the input image with
            the <see cref="F:Stemmer.Cvb.Foundation.DynamicThresholdNorm.Mean"/> norm.
            </summary>
            <remarks>
            <para>
            Dynamic thresholding works such that for each pixel of the input
            image, the average gray value over a mask with given size (centered
            around the pixel in question) is calculated. If the difference between
            this average and the pixel that is currently being looked at is above
            the specified threshold, then the corresponding pixel in the output
            image is set to white, otherwise it is black.
            </para><para>
            This function is particularly useful when dealing with images that
            have a non-uniform illumination.
            </para>
            </remarks>
            <param name="img">Image to be thresholded.</param>
            <param name="windowSize"><para>Window size to be for calculating the
            dynamic threshold.</para>
            <para>
            Bigger window sizes will lead to higher processing times.
            </para></param>
            <param name="threshold">Threshold offset to use</param>
            <returns>The thresholded image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Threshold.Dynamic(Stemmer.Cvb.Image,System.Int32,System.Int32,Stemmer.Cvb.Foundation.DynamicThresholdNorm)">
            <summary>
            This function performs dynamic thresholding on the input image.
            </summary>
            <remarks>
            <para>
            Dynamic thresholding works by calculating the average gray value over a
            mask with given size(centered around the pixel in question) for each
            input pixel. If the difference between
            this average and the pixel, that is currently being looked at, is above
            the specified threshold, then the corresponding pixel in the output
            image is set to white, otherwise it is black.
            </para><para>
            This function is particularly useful, when dealing with images, that
            have a non-uniform illumination.
            </para>
            </remarks>
            <param name="img">Image to be thresholded.</param>
            <param name="windowSize"><para>Window size to calculate the
            dynamic threshold.</para>
            <para>
            Bigger window sizes will lead to higher processing times.
            </para></param>
            <param name="threshold">Threshold offset to use</param>
            <param name="norm">Either <see cref="F:Stemmer.Cvb.Foundation.DynamicThresholdNorm.Mean"/> or
            <see cref="F:Stemmer.Cvb.Foundation.DynamicThresholdNorm.MinMax"/>.</param>
            <returns>The thresholded image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Threshold.StaticTransparent(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.StaticThresholding,System.Double[])">
            <summary>
            Create a thresholded image using a transparency approach.
            </summary>
            <remarks>
            In the result image every pixel, that violates the comparison to its
            threshold, will be assigned the threshold value. All others will be
            assigned the same value, they had in the input image.
            </remarks>
            <param name="img">Input image</param>
            <param name="thresholds">Thresholds to apply (one per plane).</param>
            <param name="comparison">Thresholding condition.</param>
            <returns>The thresholded image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="img"/>,
            or <paramref name="thresholds"/> is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="img"/>
            has been disposed.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="thresholds"/>
            has too few elements.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Threshold.StaticTransparent(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.StaticThresholding,System.Double[],System.Double[])">
            <summary>
            Create a thresholded image using a transparency approach.
            </summary>
            <remarks>
            In the result image every pixel, that violates the comparison to its
            threshold, will be assigned the specified value. All others will be
            assigned the same value, they had in the input image.
            </remarks>
            <param name="img">Input image</param>
            <param name="thresholds">Thresholds to apply (one per plane).</param>
            <param name="values">Value to set for pixels, that violate the
            thresholding condition (one per plane required).</param>
            <param name="comparison">Thresholding condition.</param>
            <returns>The thresholded image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="img"/>,
            <paramref name="thresholds"/> or <paramref name="values"/> is
            <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="img"/>
            has been disposed.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="thresholds"/>
            or <paramref name="values"/> have too few elements.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Threshold.RangeThresholdToDst(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ValueRange{System.Int32},Stemmer.Cvb.Image,Stemmer.Cvb.Rect)">
            <summary>
            Apply the blob analyzer's binarization algorithm to the given input
            <paramref name="plane"/>.
            </summary>
            <remarks>
            Please note that despite the fact that it is possible to specify an
            area of interest, the binarized data will always be located in the top
            left corner of the image.
            </remarks>
            <param name="plane">Image plane to binarize</param>
            <param name="range">The gray value range for binarization.</param>
            <param name="dst">
            <param name="aoi">Area of interest to binarize.</param>
            <para>
            Destination image to receive the binarization result.
            </para><para>
            This image must have one plane only with 8 bits per pixel and be
            compatible with the input <paramref name="aoi"/> in terms of size.
            </para>
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Threshold.RangeThresholdToDst(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ValueRange{System.Int32},Stemmer.Cvb.Image)">
            <summary>
            Apply the blob analyzer's binarization algorithm to the given input
            <paramref name="plane"/>.
            /// </summary>
            <param name="plane">Image plane to binarize</param>
            <param name="range">The gray value range for binarization.</param>
            <param name="dst">
            <para>
            Destination image to receive the binarization result.
            </para><para>
            This image must have one plane only with 8 bits per pixel and be
            compatible with the input <paramref name="plane"/> in terms of size.
            </para>
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Threshold.RangeThreshold(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ValueRange{System.Int32},Stemmer.Cvb.Rect)">
            <summary>
            Apply the blob analyzer's binarization algorithm to the given input
            <paramref name="plane"/> and returns a new binarized image.
            </summary>
            <param name="plane">Image plane to binarize</param>
            <param name="range">The gray value range for binarization.</param>
            <param name="aoi">Area of interest to binarize.</param>
            <returns>Resulting binarized image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Threshold.RangeThreshold(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ValueRange{System.Int32})">
            <summary>
            Apply the blob analyzer's binarization algorithm to the given input
            <paramref name="plane"/> and returns a new binarized image.
            </summary>
            <param name="plane">Image plane to binarize</param>
            <param name="range">The gray value range for binarization.</param>
            <returns>Resulting binarized image.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.GaussianPyramid">
            <summary>
            Functions implementing a Gaussian pyramid approach.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.GaussianPyramid.Down(Stemmer.Cvb.Image)">
            <summary>
            This function down samples an image in the sense of a Gaussian 
            pyramid.
            </summary>
            <remarks>
            It applies a Gaussian <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel5x5"/> to the 
            image, then down samples the image by omitting every odd row and 
            column, producing an output image whose size is halved in each 
            dimension.
            </remarks>
            <param name="img">Image to be down sampled.</param>
            <returns>Down-sampled image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.GaussianPyramid.Up(Stemmer.Cvb.Image)">
            <summary>
            This function up samples an image in the sense of a Gaussian pyramid.
            </summary>
            <remarks>
            It inserts odd columns and rows filled with 0, then applies a Gaussian
            <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel5x5"/> multiplied by 4 to the image.
            </remarks>
            <param name="img">Image to be up sampled</param>
            <returns>Up-sampled image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.FixedFilterSize">
            <summary>
            Filter size values for filters using a fixed or discrete sized kernel.
            </summary>
            <remarks>
            Please refer to the respective Filter's documentation, as not all
            filters support all filter kernel sizes. Functions, that used fixed size
            filter masks, are implicitly always assuming the mask to be centered
            around the center pixel.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel3x3">
            <summary>
            Filter mask 3x3 pixels
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel5x5">
            <summary>
            Filter mask 5x5 pixels
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel7x7">
            <summary>
            Filter mask 7x7 pixels
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.FilterOrientation">
            <summary>
            Orientation options for edge filters.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FilterOrientation.Horizontal">
            <summary>
            Horizontal.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.FilterOrientation.Vertical">
            <summary>
            Vertical.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.EdgeFilter">
            <summary>
            Edge filter modes. Currently only used by
            <see cref="M:Stemmer.Cvb.Foundation.Filter.Canny(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeFilter,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeFilter.Scharr">
            <summary>
            Scharr edge detection.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeFilter.Sobel">
            <summary>
            1st order Sobel filter.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.EdgeFilter.Sobel2nd">
            <summary>
            2nd order Sobel filter.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.RobertsDirection">
            <summary>
            Directions of the Roberts edge filter.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.RobertsDirection.Up">
            <summary>
            Filter for edges, that are positive when looking from the top right
            corner.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.RobertsDirection.Down">
            <summary>
            Filter for edges, that are positive when looking from the top left
            corner.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Filter">
            <summary>
            Collection of Filter methods supported by the Common Vision Blox
            Foundation Package.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Canny(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.EdgeFilter,System.Int32,System.Int32)">
            <summary>
            Edge filter using the Canny algorithm.
            </summary>
            <remarks>
            The algorithm uses three stages:
            <list type="number">
            <item>
            <description><paramref name="imgPlane"/> is differentiated in x and y
            direction using the <paramref name="edgeFilter"/>. From the two
            derivatives the direction and magnitude is computed.</description>
            </item>
            <item>
            <description>The directional information is simplified and then the
            local maximum along an edge contour is determined that lies above the
            <paramref name="upperThreshold"/>.</description>
            </item>
            <item>
            <description>The contours are then traced starting from the local
            maximum using hysteresis thresholding with the
            <paramref name="lowerThreshold"/> to counter broken edges.</description>
            </item>
            </list>
            </remarks>
            <param name="imgPlane">Image plane to be filtered.</param>
            <param name="edgeFilter">Edge filter method to be used.</param>
            <param name="lowerThreshold">Lower threshold for hysteresis
            thresholding.</param>
            <param name="upperThreshold">Upper threshold for edge detection and
            hysteresis thresholding.</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="imgPlane"/> has already been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Laplace(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FixedFilterSize)">
            <summary>
            This function applies a square high pass Laplace filter to an image.
            </summary>
            <param name="img">Image to be filtered.</param>
            <param name="size">Either <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel3x3"/> or
            <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel5x5"/>.</param>
            <returns>the filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentException">If the
            <paramref name="size"/> parameter is invalid (only 3x3 and 5x5 filter
            masks are supported</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Sharpen(Stemmer.Cvb.Image)">
            <summary>
            This function applies a <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel3x3"/>
            sharpen filter to an image.
            </summary>
            <param name="img">Image to be filtered</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.LowPass(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FixedFilterSize)">
            <summary>
            This function applies a square low pass filter to an image.
            </summary>
            <param name="img">Image to be filtered.</param>
            <param name="size">Either <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel3x3"/> or
            <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel5x5"/>.</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentException">If the
            <paramref name="size"/> parameter is invalid (only 3x3 and 5x5 filter
            masks are supported</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.HighPass(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FixedFilterSize)">
            <summary>
            This function applies a square high pass filter to an image.
            </summary>
            <param name="img">Image to be filtered.</param>
            <param name="size">Either <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel3x3"/> or
            <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel5x5"/>.</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentException">If the
            <paramref name="size"/> parameter is invalid (only 3x3 and 5x5 filter
            masks are supported</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Gauss(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FixedFilterSize)">
            <summary>
            This function applies a low high pass Gaussian filter to an image.
            </summary>
            <param name="img">Image to be filtered.</param>
            <param name="size">Either <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel3x3"/> or
            <see cref="F:Stemmer.Cvb.Foundation.FixedFilterSize.Kernel5x5"/>.</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentException">If the
            <paramref name="size"/> parameter is invalid (only 3x3 and 5x5 filter
            masks are supported</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.BoxMean(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D)">
            <summary>
            This function sets each pixel in the output image to the average of
            all the input image pixels in the rectangular neighborhood defined by
            the <paramref name="maskSize"/> parameter.
            </summary>
            <remarks>
            This has the effect of smoothing or blurring the input image. Mask
            offset is automatically set to the center of the image.
            </remarks>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.BoxMean(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            This function sets each pixel in the output image to the average of
            all the input image pixels in the rectangular neighborhood defined by
            the <paramref name="maskSize"/> and the <paramref name="maskOffset"/>
            parameters. This has the effect of smoothing or blurring the input
            image.
            </summary>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <param name="maskOffset">Mask center pixel location</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.BoxMin(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D)">
            <summary>
            This function sets each pixel in the output image to the minimum value
            all the input image pixels in the rectangular neighborhood defined by
            the <paramref name="maskSize"/> parameter.
            </summary>
            <remarks>
            Mask offset is automatically set to the center of the image.
            </remarks>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.BoxMin(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            This function sets each pixel in the output image to the minimum value
            all the input image pixels in the rectangular neighborhood defined by
            the <paramref name="maskSize"/> and the <paramref name="maskOffset"/>
            parameters.
            </summary>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <param name="maskOffset">Mask center pixel location</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.BoxMax(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D)">
            <summary>
            This function sets each pixel in the output image to the maximum value
            all the input image pixels in the rectangular neighborhood defined by
            the <paramref name="maskSize"/> parameter
            </summary>
            <remarks>
            Mask offset is automatically set to the center of the image.
            </remarks>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.BoxMax(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            This function sets each pixel in the output image to the maximum value
            all the input image pixels in the rectangular neighborhood defined by
            the <paramref name="maskSize"/> and the <paramref name="maskOffset"/>
            parameters.
            </summary>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <param name="maskOffset">Mask center pixel location</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.BoxMedian(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D)">
            <summary>
            This function sets each pixel in the output image to the median value
            all the input image pixels in the rectangular neighborhood defined by
            the <paramref name="maskSize"/> parameters.
            </summary>
            <remarks>
            Mask offset is automatically set to the center of the image.
            </remarks>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.BoxMedian(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            This function sets each pixel in the output image to the median value
            all the input image pixels in the rectangular neighborhood defined by
            the <paramref name="maskSize"/> and the <paramref name="maskOffset"/>
            parameters.
            </summary>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <param name="maskOffset">Mask center pixel location</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.ColorMedian(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FixedFilterSize)">
            <summary>
            Apply a color-correct box median filter to an RGB image.
            </summary>
            <remarks>
            The input image must have an RGB color model.
            </remarks>
            <param name="img">Image to apply the filter to.</param>
            <param name="maskType">Mask size to use.</param>
            <returns>Filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Wiener(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D)">
            <summary>
            This function performs adaptive filtering of an image degraded by
            constant power additive noise.
            </summary>
            <remarks>
            <para>
            For each pixel of the input image, the function determines the local
            image mean and variance in the rectangular neighborhood (mask) defined
            by <paramref name="maskSize"/>. The deviation from the local average
            is then diminished according to the local variance and the noise
            threshold parameters. The noise threshold parameter may be zero, in
            which case the function tries to determine itself what local noise
            threshold to apply. This normally yields the best results.
            </para><para>
            Mask offset is automatically set to the center of the image.
            </para>
            </remarks>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Wiener(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            This function performs adaptive filtering of an image degraded by
            constant power additive noise.
            </summary>
            <remarks>
            For each pixel of the input image, the function determines the local
            image mean and variance in the rectangular neighborhood (mask) defined
            by <paramref name="maskSize"/> and <paramref name="maskOffset"/>. The
            deviation from the local average is then diminished according to the
            local variance and the noise threshold parameters. The noise threshold
            parameter may be zero, in which case the function tries to determine
            itself what local noise threshold to apply. This normally yields the
            best results.
            </remarks>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <param name="maskOffset">Mask center pixel location</param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Wiener(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D,System.Double)">
            <summary>
            This function performs adaptive filtering of an image degraded by
            constant power additive noise.
            </summary>
            <remarks>
            <para>
            For each pixel of the input image, the function determines the local
            image mean and variance in the rectangular neighborhood (mask) defined
            by <paramref name="maskSize"/>. The deviation from the local average
            is then diminished according to the local variance and the noise
            threshold parameters. The noise threshold parameter may be zero, in
            which case the function tries to determine itself what local noise
            threshold to apply. This normally yields the best results.
            </para><para>
            Mask offset is automatically set to the center of the image.
            </para>
            </remarks>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <param name="noiseThreshold"><para>Noise suppression threshold.</para>
            <para>
            Valid input ranges from 0 to 1; with 0 causing the function to
            determine the threshold automatically.
            </para></param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception name="ArgumentOutOfRangeException">If the
            <paramref name="noiseThreshold"/> is outside its range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Wiener(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D,System.Double)">
            <summary>
            This function performs adaptive filtering of an image degraded by
            constant power additive noise.
            </summary>
            <remarks>
            For each pixel of the input image, the function determines the local
            image mean and variance in the rectangular neighborhood (mask) defined
            by <paramref name="maskSize"/> and <paramref name="maskOffset"/>. The
            deviation from the local average is then diminished according to the
            local variance and the noise threshold parameters. The noise threshold
            parameter may be zero, in which case the function tries to determine
            itself what local noise threshold to apply. This normally yields the
            best results.
            </remarks>
            <param name="img">Image to be filtered</param>
            <param name="maskSize">Filter mask to be used</param>
            <param name="maskOffset">Mask center pixel location</param>
            <param name="noiseThreshold"><para>Noise suppression threshold.</para>
            <para>
            Valid input ranges from 0 to 1; with 0 causing the function to
            determine the threshold automatically.
            </para></param>
            <returns>The filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception name="ArgumentOutOfRangeException">If the
            <paramref name="noiseThreshold"/> is outside its range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Prewitt(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FilterOrientation)">
            <summary>
            Applies a Prewitt edge filter to the input image.
            </summary>
            <remarks>
            Note that the Prewitt filter zeros out negative edges - if you want to
            use a filter that preserves the negative edges, please use
            <see cref="M:Stemmer.Cvb.Foundation.Filter.Sobel(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FilterOrientation,Stemmer.Cvb.Foundation.FixedFilterSize)"/> or <see cref="M:Stemmer.Cvb.Foundation.Filter.Scharr(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FilterOrientation)"/> instead.
            </remarks>
            <param name="img">Image to filter.</param>
            <param name="orientation">Orientation of the filter.</param>
            <returns>Filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Scharr(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FilterOrientation)">
            <summary>
            Applies a Scharr edge filter to the input image.
            </summary>
            <remarks>
            The Scharr filter's output, in case of an 8 bit monochrome input
            image, will be scaled to the range 0...255, with 128 corresponding to
            a filter result of zero.
            </remarks>
            <param name="img">Image to filter</param>
            <param name="orientation">Orientation of the filter</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Sobel(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FilterOrientation,Stemmer.Cvb.Foundation.FixedFilterSize)">
            <summary>
            Applies a Sobel edge filter to the input image.
            </summary>
            <remarks>
            The Sobel filter's output, in case of an 8 bit monochrome input image,
            will be scaled to the range 0...255, with 128 corresponding to a
            filter result of zero.
            </remarks>
            <param name="img">Image to filter</param>
            <param name="orientation">Orientation of the filter</param>
            <param name="maskSize">Mask size (3x3 or 5x5)</param>
            <returns>Filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Sobel2nd(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FilterOrientation,Stemmer.Cvb.Foundation.FixedFilterSize)">
            <summary>
            Applies a 2nd order Sobel edge filter to the input image.
            </summary>
            <remarks>
            The Sobel filter's output, in case of an 8 bit monochrome input image,
            will be scaled to the range 0...255, with 128 corresponding to a
            filter result of zero.
            </remarks>
            <param name="img">Image to filter</param>
            <param name="orientation">Orientation of the filter</param>
            <param name="maskSize">Mask size (3x3 or 5x5)</param>
            <returns>Filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Sobel2ndCross(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.FixedFilterSize)">
            <summary>
            Applies a 2nd order Sobel cross edge filter to the input image.
            </summary>
            <remarks>
            The Sobel filter's output, in case of an 8 bit monochrome input image,
            will be scaled to the range 0...255, with 128 corresponding to a
            filter result of zero.
            </remarks>
            <param name="img">Image to filter</param>
            <param name="maskSize">Mask size (3x3 or 5x5)</param>
            <returns>Filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.Roberts(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.RobertsDirection)">
            <summary>
            Apply a Roberts edge detector to the input image.
            </summary>
            <remarks>
            Result values of the Roberts filter that are less than zero will be
            zeroed out.
            </remarks>
            <param name="img">Image to be filtered.</param>
            <param name="direction">Filter direction.</param>
            <returns>Filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.User(Stemmer.Cvb.Image,System.Double[0:,0:])">
            <summary>
            Apply a user-defined linear convolution filter to an image.
            </summary>
            <param name="img">Image to apply the filter to.</param>
            <param name="kernel">Coefficients of the filter kernel; must be a
            two-dimensional array.</param>
            <returns>Filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception cref="T:System.InvalidOperationException">If the user kernel has
            a rank != 2.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.User(Stemmer.Cvb.Image,System.Double[0:,0:],Stemmer.Cvb.Point2D)">
            <summary>
            Apply a user-defined linear convolution filter to an image.
            </summary>
            <param name="img">Image to apply the filter to.</param>
            <param name="kernel">Coefficients of the filter kernel; must be a
            two-dimensional array.</param>
            <param name="maskOffset">reference point of the filter mask, relative
            to the top left cell of the mask</param>
            <returns>Filtered image.</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> or <paramref name="kernel"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
            <exception cref="T:System.InvalidOperationException">If the user kernel has
            a rank != 2.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Filter.User(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            Apply a user-defined linear convolution filter to an image.
            </summary>
            <param name="img">Image to apply the filter to</param>
            <param name="kernel">Coefficients of the filter kernel</param>
            <param name="maskOffset">Reference point of the filter mask, relative
            to the top left cell of the mask</param>
            <param name="maskSize">Size of the kernel stored in
            <paramref name="kernel"/></param>
            <returns>Filtered image</returns>
            <exception cref="T:System.InvalidOperationException">If the user kernel has
            a rank != 2</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Properties.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.CollectionReadOnly">
            <summary>
              Looks up a localized string similar to Collection is read-only..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.FileNotFound">
            <summary>
              Looks up a localized string similar to The {0} file &apos;{1}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.GenericObjectDisposed">
            <summary>
              Looks up a localized string similar to The {0} object has already been disposed of and may not be used any longer..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.ImplementationError">
            <summary>
              Looks up a localized string similar to An internal error occurred. Please report this to support@stemmer-imaging.de along with the call stack if possible..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.InsufficientData">
            <summary>
              Looks up a localized string similar to Not enough data for {0}..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.InvalidCombination">
            <summary>
              Looks up a localized string similar to Value {0} can only be used with [{1}]..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.InvalidFilterMask">
            <summary>
              Looks up a localized string similar to The filter mask {0} is not supported by this function..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.LoadFailure">
            <summary>
              Looks up a localized string similar to Loading the {0} from file {1} failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.SaveFailure">
            <summary>
              Looks up a localized string similar to Saving the {0} to file {1} failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.UnsupportedValue">
            <summary>
              Looks up a localized string similar to {0} is not in the supported range [{1}]..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.Properties.Messages.ValueOutOfRange">
            <summary>
              Looks up a localized string similar to Value is out of range ({0} &lt;= {1} &lt; {2})..
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Interpolation">
            <summary>
            Interpolation modes available inside the Foundation Package.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Interpolation.NearestNeighbor">
            <summary>
            Simple nearest neighbor interpolation. May result in a less pleasant
            output image, but yields the fastest results.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Interpolation.Linear">
            <summary>
            Linear interpolation in x and y. Good trade off between visual
            quality and speed. Default interpolation mode in CVB.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Interpolation.Cubic">
            <summary>
            Cubic interpolation in x and y. Slower than linear interpolation, but
            better in terms of results.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Interpolation.Lanczos">
            <summary>
            Interpolation using a 3-lobed Lanczos window function.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Interpolation.Supersample">
            <summary>
            Interpolation through super sampling and averaging of the target
            position from sub pixel positions.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Axis">
            <summary>
            Axis enumeration.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Axis.None">
            <summary>
            No axis
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Axis.X">
            <summary>
            X axis
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.Axis.Y">
            <summary>
            Y axis
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.PerspectiveTransformation">
            <summary>
            Perspective transformation coefficients.
            </summary>
            <remarks>
            <para>Performed calculation is:</para>
            <list type="table">
            <item>
            <term>X = (<see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C00"/>*X' + <see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C01"/>*Y' + <see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C02"/>) / (<see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C20"/>*X' + <see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C21"/>*Y' + <see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C22"/>)</term>
            </item>
            <item>
            <term>Y = (<see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C10"/>*X' + <see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C11"/>*Y' + <see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C12"/>) / (<see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C21"/>*X' + <see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C21"/>*Y' + <see cref="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C22"/>)</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.PerspectiveTransformation.#ctor(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Rect)">
            <summary>
            Calculate the defining coefficients for the perspective
            transformation.
            </summary>
            <param name="leftTop">Left top corner's coordinate in the source
            image.</param>
            <param name="rightTop">Right top corner's coordiante in the source
            image.</param>
            <param name="rightBottom">Right bottom corner's coordinate in the
            source image.</param>
            <param name="leftBottom">Left bottom corner's coordinate in the source
            image.</param>
            <param name="destRect">Rectangle containing the positions into which
            the input points are to be converted.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.PerspectiveTransformation.#ctor(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd,Stemmer.Cvb.RectD)">
            <summary>
            Calculate the defining coefficients for the perspective
            transformation.
            </summary>
            <param name="leftTop">Left top corner's coordinate in the source
            image.</param>
            <param name="rightTop">Right top corner's coordiante in the source
            image.</param>
            <param name="rightBottom">Right bottom corner's coordinate in the
            source image.</param>
            <param name="leftBottom">Left bottom corner's coordinate in the source
            image.</param>
            <param name="destRect">Rectangle containing the locations the input
            points are to be transformed to.</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C00">
            <summary>
            Defining coefficient for the transformation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C01">
            <summary>
            Defining coefficient for the transformation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C02">
            <summary>
            Defining coefficient for the transformation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C10">
            <summary>
            Defining coefficient for the transformation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C11">
            <summary>
            Defining coefficient for the transformation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C12">
            <summary>
            Defining coefficient for the transformation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C20">
            <summary>
            Defining coefficient for the transformation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C21">
            <summary>
            Defining coefficient for the transformation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.PerspectiveTransformation.C22">
            <summary>
            Defining coefficient for the transformation.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Transform2D">
            <summary>
            Collection of 2D transformation functions (most of them linear).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Matrix(Stemmer.Cvb.Image,Stemmer.Cvb.Matrix2D)">
            <summary>
            Use a matrix to transform an <paramref name="image"/>
            using <see cref="F:Stemmer.Cvb.Foundation.Interpolation.Linear"/> interpolation.
            </summary>
            <param name="image">Image to transform.</param>
            <param name="matrix">Matrix with which the image is to be transformed.</param>
            <returns>The transformed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Matrix(Stemmer.Cvb.Image,Stemmer.Cvb.Matrix2D,Stemmer.Cvb.Foundation.Interpolation)">
            <summary>
            Use a matrix to transform an <paramref name="image"/>.
            </summary>
            <param name="image">Image to transform.</param>
            <param name="matrix">Matrix with which the image is to be transformed.</param>
            <param name="interpolation">Interpolation to use.</param>
            <returns>The transformed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Mirror(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.Axis)">
            <summary>
            Mirror the input <paramref name="image"/> on the x and/or y axis.
            </summary>
            <param name="image">Image to mirror.</param>
            <param name="axis">Axis(es) around which it is to be flipped.</param>
            <returns>The mirrored image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Perspective(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.PerspectiveTransformation,Stemmer.Cvb.Size2D)">
            <summary>
            Apply the perspective transformation <paramref name="coeffs"/> to
            the <paramref name="image"/> using <see cref="F:Stemmer.Cvb.Foundation.Interpolation.Linear"/>
            interpolation.
            </summary>
            <param name="image">Image to transform.</param>
            <param name="coeffs">Perspective transformaton coefficients.</param>
            <param name="targetSize">Size of the destination image.</param>
            <returns>The transformed image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Perspective(Stemmer.Cvb.Image,Stemmer.Cvb.Foundation.PerspectiveTransformation,Stemmer.Cvb.Size2D,Stemmer.Cvb.Foundation.Interpolation)">
            <summary>
            Apply the perspective transformation <paramref name="coeffs"/> to
            the <paramref name="image"/>.
            </summary>
            <param name="image">Image to transform.</param>
            <param name="coeffs">Perspective transformaton coefficients.</param>
            <param name="targetSize">Size of the destination image.</param>
            <param name="interpolation">Interpolation to use.</param>
            <returns>The transformed image.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Resize(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D)">
            <summary>
            Resize the input <paramref name="image"/> using
            <see cref="F:Stemmer.Cvb.Foundation.Interpolation.Linear"/> interpolation.
            </summary>
            <param name="image">Image to resize.</param>
            <param name="targetSize">Size to go with it.</param>
            <returns>The resized image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Resize(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D,Stemmer.Cvb.Foundation.Interpolation)">
            <summary>
            Resize the input <paramref name="image"/>.
            </summary>
            <param name="image">Image to resize.</param>
            <param name="targetSize">Size to go with it.</param>
            <param name="interpolation">Interpolation to use.</param>
            <returns>The resized image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Rotate(Stemmer.Cvb.Image,Stemmer.Cvb.Angle)">
            <summary>
            Rotate the input <paramref name="image"/> by the given
            <paramref name="angle"/> using <see cref="F:Stemmer.Cvb.Foundation.Interpolation.Linear"/>
            interpolation.
            </summary>
            <param name="image">Image to rotate.</param>
            <param name="angle">Angle by which it is to be rotated.</param>
            <returns>Rotated image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Rotate(Stemmer.Cvb.Image,Stemmer.Cvb.Angle,Stemmer.Cvb.Foundation.Interpolation)">
            <summary>
            Rotate the input <paramref name="image"/> by the given
            <paramref name="angle"/>.
            </summary>
            <param name="image">Image to rotate.</param>
            <param name="angle">Angle by which it is to be rotated.</param>
            <param name="interpolation">Interpolation to use (may be
            <see cref="F:Stemmer.Cvb.Foundation.Interpolation.Linear"/> or
            <see cref="F:Stemmer.Cvb.Foundation.Interpolation.Cubic"/>).
            </param>
            <returns>Rotated image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Shear(Stemmer.Cvb.Image,System.Double,System.Double)">
            <summary>
            Shear the input <paramref name="image"/> using
            <see cref="F:Stemmer.Cvb.Foundation.Interpolation.Linear"/> interpolation.
            </summary>
            <param name="image">Image to shear.</param>
            <param name="shearX">Shear factor in x-direction.</param>
            <param name="shearY">Shear factor in y-direction.</param>
            <returns>The sheared image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Transform2D.Shear(Stemmer.Cvb.Image,System.Double,System.Double,Stemmer.Cvb.Foundation.Interpolation)">
            <summary>
            Shear the input image.
            </summary>
            <param name="image">Image to shear.</param>
            <param name="shearX">Shear factor in x-direction.</param>
            <param name="shearY">Shear factor in y-direction.</param>
            <param name="interpolation">Interpolation to use.</param>
            <returns>The sheared image.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.CalibrationPatternContrast">
            <summary>
            Definition of the contrast of the pattern used for automatic
            calibration.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.BlackOnWhite">
            <summary>
            Black objects on white background.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.WhiteOnBlack">
            <summary>
            White objects on black background.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.CalibrationPatternStyle">
            <summary>
            Definition of the calibration pattern style used for automatic
            calibration.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CalibrationPatternStyle.UniformDots">
            <summary>
            Symmetric grid of uniformly sized, circle-shaped dots. With this
            pattern it is <c>not</c> possible to determine origin and/or
            orientation of the calibration pattern!
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CalibrationPatternStyle.AsymmetricDots">
            <summary>
            Symmetric grid of dots. Four dots are bigger than the others and
            define the pattern's origin and orientation.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.CalibrationPatternFormat">
            <summary>
            Definition of the paper format used for printing calibration patterns.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CalibrationPatternFormat.A4">
            <summary>
            A4 paper size (210 x 297 mm).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CalibrationPatternFormat.Letter">
            <summary>
            Letter sized paper (8.5 x 11 inches).
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.CalibrationPatternOrientation">
            <summary>
            Format orientation for the <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternFormat"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CalibrationPatternOrientation.Portrait">
            <summary>
            Portrait has the long side vertically.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.CalibrationPatternOrientation.Landscape">
            <summary>
            Landscape has the long side horizontally.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.NonLinearTransformation">
            <summary>
            Object implementing the non linear polynomially approximated transform
            implemented in the CVB Foundation Package.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.NonLinearTransformation.CreationProgress">
            <summary>
            Delegate type of the progress callbacks that can be passed to some
            constructors of <see cref="T:Stemmer.Cvb.Foundation.NonLinearTransformation"/> for progress
            reporting.
            </summary>
            <param name="stepsTotal">Total number of calculation steps.</param>
            <param name="stepsDone">Calculation steps that have already been done.
            </param>
            <returns>Return <c>true</c> to continue calculation; <c>false</c> to
            cancel the process.
            </returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.NonLinearTransformation.Handle">
            <summary>
            Native non linear transformation handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.NonLinearTransformation.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.Dispose">
            <summary>
            Dispose method that releases the classifier
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="E:Stemmer.Cvb.Foundation.NonLinearTransformation.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.#ctor(System.String)">
            <summary>
            Load a saved transformation from a file.
            </summary>
            <param name="fileName">Name of the file to be loaded</param>
            <exception cref="T:System.IO.FileNotFoundException">If the transformation file
            does not exist</exception>
            <exception cref="T:System.IO.FileLoadException">If loading an existing
            transformation file failed</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fileName"/>
            is null</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.#ctor(System.IntPtr)">
            <summary>
            Initialize from handle.
            </summary>
            <param name="handle">Unmanaged object handle</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.FromCalibrationPattern(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Double,System.Int32,System.Double@)">
            <summary>
            Create a new transformation object by automatically extracting the
            pixel lists required for creating a
            <see cref="T:Stemmer.Cvb.Foundation.NonLinearTransformation"/> object.
            </summary>
            <remarks>
            <para>
            The image <paramref name="plane"/> given to this method needs to
            contain a calibration pattern as generated by the method
            <see cref="M:Stemmer.Cvb.Foundation.CalibrationPattern.Create(Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Int32,System.Int32)"/>: 
            A regularly spaced matrix of
            dots, the distance between the dots in x- and y-direction should be 2.5
            times the diameter of the dots, if an asymmetric pattern was used, the
            bigger dots should have 2.5 times the area of the smaller dots
            (meaning that their radius is sqrt(2.5) times the radius of the small
            dots).
            </para><para>
            To avoid misunderstandings and complications in the interpretation of
            the image content, it is recommended to use a default coordinate
            system on the input image.
            </para>
            </remarks>
            <param name="plane">Image plane to work on.</param>
            <param name="style">Calibration pattern style visible in the image.
            (see <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternStyle"/>)</param>
            <param name="contrast">Selects whether the image shows
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.BlackOnWhite"/> or
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.WhiteOnBlack"/> dots.</param>
            <param name="gridSpacing"><para>Spacing of the calibration dot grid in
            the target image.</para>
            <para>Defines the distance of the points that will end up in the
            transformed pixels.
            </para></param>
            <param name="minContrast"><para>Minimum gray value contrast between
            the object and the background of the calibration target pattern.
            </para><para>
            Value to be set depends on the quality of the image taken from the
            pattern, but in a typical situation this contrast should not drop
            below 64 gray values, otherwise it might become difficult to extract
            the calibration points.
            </para></param>
            <param name="maxRatio"><para>Maximum ratio between the biggest and the
            smallest calibration dot.</para>
            <para>
            This value will be used to identify outliers when looking for
            calibration dots. It should be set high enough to allow for the area
            variations to be expected due to perspective distortions and small
            enough to eliminate the candidates that are either too big or too
            small to be valid calibration pattern dots.
            </para><para>
            Typically, values of about 3.0 to 5.0 are big enough - even if there
            is notable perspective distortion visible in the images. If an
            asymmetric calibration pattern has been selected, the ratio used for
            calculation will be adapted accordingly.
            </para></param>
            <param name="order">Polynomial order of the transformation to be
            generated.</param>
            <param name="quality"><para>Quality feedback.</para>
            <para>
            Derived by correlating the application of the resulting transformation
            to the set of the calibration pattern.
            </para></param>
            <returns>Newly created calibration object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.FromCalibrationPattern(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Double,System.Int32,System.Double@)">
            <summary>
            Create a new transformation object by automatically extracting the
            pixel lists required for creating a
            <see cref="T:Stemmer.Cvb.Foundation.NonLinearTransformation"/> object.
            </summary>
            <remarks>
            <para>
            The image <paramref name="plane"/> given to this method needs to
            contain a calibration pattern as generated by the method
            <see cref="M:Stemmer.Cvb.Foundation.CalibrationPattern.Create(Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Int32,System.Int32)"/>: 
            A regularly spaced matrix of
            dots, the distance between the dots in x- and y-direction should be 2.5
            times the diameter of the dots, if an asymmetric pattern was used, the
            bigger dots should have 2.5 times the area of the smaller dots
            (meaning that their radius is sqrt(2.5) times the radius of the small
            dots).
            </para><para>
            Note that, although the area of interest is given as a
            <see cref="T:Stemmer.Cvb.Area2D"/> here (and in the processing of the <c>Area2D</c>
            the image's coordinate system will be respected), the actual output of
            this method uses <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>!
            This seemingly inconsistent mix in this case is in fact useful,
            because a <c>Area2D</c> will better capture the actual location of a
            calibration pattern, especially if the image has been rotated, than a
            <see cref="T:Stemmer.Cvb.Rect"/> style area of interest. But the calibration
            functions working on the output of <c>ExtractCalibrationLists</c>
            usually assume that the pixel lists are given in pixel coordinates.
            </para><para>
            To avoid misunderstandings and complications in the interpretation of
            the image content, it is recommended to use a default coordinate
            system on the input image.
            </para>
            </remarks>
            <param name="plane">Image plane to work on.</param>
            <param name="aoi">Area of interest in which to look for the
            calibration pattern's dots.</param>
            <param name="style">Calibration pattern style visible in the image.
            (see <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternStyle"/>)</param>
            <param name="contrast">Selects whether the image shows
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.BlackOnWhite"/> or
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.WhiteOnBlack"/> dots.</param>
            <param name="gridSpacing"><para>Spacing of the calibration dot grid in
            the target image.</para>
            <para>Defines the distance of the points that will end up in the
            transformed pixels.
            </para></param>
            <param name="minContrast"><para>Minimum gray value contrast between
            the object and the background of the calibration target pattern.
            </para><para>
            Value to be set depends on the quality of the image taken from the
            pattern, but in a typical situation this contrast should not drop
            below 64 gray values, otherwise it might become difficult to extract
            the calibration points.
            </para></param>
            <param name="maxRatio"><para>Maximum ratio between the biggest and the
            smallest calibration dot.</para>
            <para>
            This value will be used to identify outliers when looking for
            calibration dots. It should be set high enough to allow for the area
            variations to be expected due to perspective distortions and small
            enough to eliminate the candidates that are either too big or too
            small to be valid calibration pattern dots.
            </para><para>
            Typically, values of about 3.0 to 5.0 are big enough - even if there
            is notable perspective distortion visible in the images. If an
            asymmetric calibration pattern has been selected, the ratio used for
            calculation will be adapted accordingly.
            </para></param>
            <param name="order">Polynomial order of the transformation to be
            generated.</param>
            <param name="quality"><para>Quality feedback.</para>
            <para>
            Derived by correlating the application of the resulting transformation
            to the set of the calibration pattern.
            </para></param>
            <returns>Newly created calibration object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.FromCalibrationPattern(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Double,System.Int32,Stemmer.Cvb.Foundation.NonLinearTransformation.CreationProgress,System.Double@)">
            <summary>
            Create a new transformation object by automatically extracting the
            pixel lists required for creating a
            <see cref="T:Stemmer.Cvb.Foundation.NonLinearTransformation"/> object.
            </summary>
            <remarks>
            <para>
            The image <paramref name="plane"/> given to this method needs to
            contain a calibration pattern as generated by the method
            <see cref="M:Stemmer.Cvb.Foundation.CalibrationPattern.Create(Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Int32,System.Int32)"/>: 
            A regularly spaced matrix of
            dots, the distance between the dots in x- and y-direction should be 2.5
            times the diameter of the dots, if an asymmetric pattern was used, the
            bigger dots should have 2.5 times the area of the smaller dots
            (meaning that their radius is sqrt(2.5) times the radius of the small
            dots).
            </para><para>
            Note that, although the area of interest is given as a
            <see cref="T:Stemmer.Cvb.Area2D"/> here (and in the processing of the <c>Area2D</c>
            the image's coordinate system will be respected), the actual output of
            this method uses <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>!
            This seemingly inconsistent mix in this case is in fact useful,
            because a <c>Area2D</c> will better capture the actual location of a
            calibration pattern, especially if the image has been rotated, than a
            <see cref="T:Stemmer.Cvb.Rect"/> style area of interest. But the calibration
            functions working on the output of <c>ExtractCalibrationLists</c>
            usually assume that the pixel lists are given in pixel coordinates.
            </para><para>
            To avoid misunderstandings and complications in the interpretation of
            the image content, it is recommended to use a default coordinate
            system on the input image.
            </para>
            </remarks>
            <param name="plane">Image plane to work on.</param>
            <param name="style">Calibration pattern style visible in the image.
            (see <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternStyle"/>)</param>
            <param name="contrast">Selects whether the image shows
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.BlackOnWhite"/> or
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.WhiteOnBlack"/> dots.</param>
            <param name="gridSpacing"><para>Spacing of the calibration dot grid in
            the target image.</para>
            <para>Defines the distance of the points that will end up in the
            transformed pixels.
            </para></param>
            <param name="minContrast"><para>Minimum gray value contrast between
            the object and the background of the calibration target pattern.
            </para><para>
            Value to be set depends on the quality of the image taken from the
            pattern, but in a typical situation this contrast should not drop
            below 64 gray values, otherwise it might become difficult to extract
            the calibration points.
            </para></param>
            <param name="maxRatio"><para>Maximum ratio between the biggest and the
            smallest calibration dot.</para>
            <para>
            This value will be used to identify outliers when looking for
            calibration dots. It should be set high enough to allow for the area
            variations to be expected due to perspective distortions and small
            enough to eliminate the candidates that are either too big or too
            small to be valid calibration pattern dots.
            </para><para>
            Typically, values of about 3.0 to 5.0 are big enough - even if there
            is notable perspective distortion visible in the images. If an
            asymmetric calibration pattern has been selected, the ratio used for
            calculation will be adapted accordingly.
            </para></param>
            <param name="order">Polynomial order of the transformation to be
            generated.</param>
            <param name="progressDelegate">delegate to be used for passing
            progress information back to the caller</param>
            <param name="quality"><para>Quality feedback.</para>
            <para>
            Derived by correlating the application of the resulting transformation
            to the set of the calibration pattern.
            </para></param>
            <returns>Newly created calibration object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.FromCalibrationPattern(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Double,System.Int32,Stemmer.Cvb.Foundation.NonLinearTransformation.CreationProgress,System.Double@)">
            <summary>
            Create a new transformation object by automatically extracting the
            pixel lists required for creating a
            <see cref="T:Stemmer.Cvb.Foundation.NonLinearTransformation"/> object.
            </summary>
            <remarks>
            <para>
            The image <paramref name="plane"/> given to this method needs to
            contain a calibration pattern as generated by the method
            <see cref="M:Stemmer.Cvb.Foundation.CalibrationPattern.Create(Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Int32,System.Int32)"/>: 
            A regularly spaced matrix of
            dots, the distance between the dots in x- and y-direction should be 2.5
            times the diameter of the dots, if an asymmetric pattern was used, the
            bigger dots should have 2.5 times the area of the smaller dots
            (meaning that their radius is sqrt(2.5) times the radius of the small
            dots).
            </para><para>
            Note that, although the area of interest is given as a
            <see cref="T:Stemmer.Cvb.Area2D"/> here (and in the processing of the <c>Area2D</c>
            the image's coordinate system will be respected), the actual output of
            this method uses <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>!
            This seemingly inconsistent mix in this case is in fact useful,
            because a <c>Area2D</c> will better capture the actual location of a
            calibration pattern, especially if the image has been rotated, than a
            <see cref="T:Stemmer.Cvb.Rect"/> style area of interest. But the calibration
            functions working on the output of <c>ExtractCalibrationLists</c>
            usually assume that the pixel lists are given in pixel coordinates.
            </para><para>
            To avoid misunderstandings and complications in the interpretation of
            the image content, it is recommended to use a default coordinate
            system on the input image.
            </para>
            </remarks>
            <param name="plane">Image plane to work on.</param>
            <param name="aoi">Area of interest in which to look for the
            calibration pattern's dots.</param>
            <param name="style">Calibration pattern style visible in the image.
            (see <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternStyle"/>)</param>
            <param name="contrast">Selects whether the image shows
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.BlackOnWhite"/> or
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.WhiteOnBlack"/> dots.</param>
            <param name="gridSpacing"><para>Spacing of the calibration dot grid in
            the target image.</para>
            <para>Defines the distance of the points that will end up in the
            transformed pixels.
            </para></param>
            <param name="minContrast"><para>Minimum gray value contrast between
            the object and the background of the calibration target pattern.
            </para><para>
            Value to be set depends on the quality of the image taken from the
            pattern, but in a typical situation this contrast should not drop
            below 64 gray values, otherwise it might become difficult to extract
            the calibration points.
            </para></param>
            <param name="maxRatio"><para>Maximum ratio between the biggest and the
            smallest calibration dot.</para>
            <para>
            This value will be used to identify outliers when looking for
            calibration dots. It should be set high enough to allow for the area
            variations to be expected due to perspective distortions and small
            enough to eliminate the candidates that are either too big or too
            small to be valid calibration pattern dots.
            </para><para>
            Typically, values of about 3.0 to 5.0 are big enough - even if there
            is notable perspective distortion visible in the images. If an
            asymmetric calibration pattern has been selected, the ratio used for
            calculation will be adapted accordingly.
            </para></param>
            <param name="order">Polynomial order of the transformation to be
            generated.</param>
            <param name="progressDelegate">delegate to be used for passing
            progress information back to the caller</param>
            <param name="quality"><para>Quality feedback.</para>
            <para>
            Derived by correlating the application of the resulting transformation
            to the set of the calibration pattern.
            </para></param>
            <returns>Newly created calibration object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.FromPositionLists``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Int32,System.Double@)">
            <summary>
            Create a non linear transformation that - approximately - matches the
            set of <paramref name="originalPixels"/> to the set of
            <paramref name="transformedPixels"/>.
            </summary>
            <param name="originalPixels"><para>Originial pixel locations.</para>
            <para>
            The pixels as measured from an image.
            </para></param>
            <param name="transformedPixels"><para>Transformed pixels.</para>
            <para>
            The locations the corresponding pixels from
            <paramref name="originalPixels"/> should ideally have.
            </para></param>
            <param name="order">Polynomial order of the transformation to be
            generated.</param>
            <param name="quality"><para>Quality feedback.</para>
            <para>
            Derived by correlating the application of the resulting transformation
            to the set of <paramref name="originalPixels"/> to the set of
            <paramref name="transformedPixels"/>.
            </para></param>
            <returns>Transformation object.</returns>
            <typeparam name="T">Type of the defining pixel information. May be
            any type derived from the <see cref="T:Stemmer.Cvb.IPosition"/> interface, i.e.
            search or blob results are directly eligible.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.FromPositionLists``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0},System.Int32,Stemmer.Cvb.Foundation.NonLinearTransformation.CreationProgress,System.Double@)">
            <summary>
            Create a non linear transformation that - approximately - matches the
            set of <paramref name="originalPixels"/> to the set of
            <paramref name="transformedPixels"/>.
            </summary>
            <param name="originalPixels"><para>Originial pixel locations.</para>
            <para>
            The pixels as measured from an image.
            </para></param>
            <param name="transformedPixels"><para>Transformed pixels.</para>
            <para>
            The locations the corresponding pixels from
            <paramref name="originalPixels"/> should ideally have.
            </para></param>
            <param name="order">Polynomial order of the transformation to be
            generated.</param>
            <param name="progressDelegate">Delegate to be used for passing
            progress information back to the caller.</param>
            <param name="quality"><para>Quality feedback.</para>
            <para>
            Derived by correlating the application of the resulting transformation
            to the set of <paramref name="originalPixels"/> to the set of
            <paramref name="transformedPixels"/>.
            </para></param>
            <returns>Transformation object.</returns>
            <exception cref="T:System.ArgumentNullException">If
            <paramref name="originalPixels"/> or
            <paramref name="transformedPixels"/> are <c>null</c>.</exception>
            <typeparam name="T">Type of the defining pixel information. May be
            any type derived from the <see cref="T:Stemmer.Cvb.IPosition"/> interface, i.e.
            search or blob results are directly eligible.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.CreationProgressInvoker(Stemmer.Cvb.Foundation.NonLinearTransformation.CreationProgress,System.Int32,System.Int32)">
            <summary>
            Utility function that invokes the real progress callback
            </summary>
            <param name="progressDelegate">real callback to be invoked</param>
            <param name="stepsTotal">total number of calculation steps</param>
            <param name="stepsDone">calculation steps that have already been done.
            </param>
            <returns>true if the calculation should continue, false otherwise
            </returns>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.NonLinearTransformation.Order">
            <summary>
            Transformation order.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.NonLinearTransformation.CoefficientsX">
            <summary>
            Return a read only array of the coefficients used for the
            transformation of x-coordinates.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.NonLinearTransformation.CoefficientsY">
            <summary>
            Return a read only array of the coefficients used for the
            transformation of y-coordinates.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.NonLinearTransformation.CoefficientsXInverse">
            <summary>
            Return a read only array of the coefficients used for the
            inverse transformation of x-coordinates.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.NonLinearTransformation.CoefficientsYInverse">
            <summary>
            Return a read only array of the coefficients used for the
            inverse transformation of y-coordinates.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.Save(System.String)">
            <summary>
            Write the transformation to a file.
            </summary>
            <param name="fileName">Path to save to.</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">If the classifier has
            already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">when
            <paramref name="fileName"/> is null</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.Transform(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            Transform an image with this nonlinear transformation.
            </summary>
            <param name="img">Image to be transformed</param>
            <param name="targetSize">Target size of the transformed image.</param>
            <param name="targetOffset">Origin offset of the transformed image.</param>
            <returns>The transformed image.</returns>
            <exception cref="T:System.ObjectDisposedException">If this object or the
            <paramref name="img"/> has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="img"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.Transform(System.Collections.Generic.ICollection{Stemmer.Cvb.IPosition})">
            <summary>
            Transform a sequence of points with this nonlinear transformation.
            </summary>
            <param name="points">Points to transform.</param>
            <returns>The transformed point.</returns>
            <exception cref="T:System.ObjectDisposedException">If this object or the has
            been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="points"/>
            is <c>null</c>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.Transform(Stemmer.Cvb.IPosition)">
            <summary>
            Transform a point with this nonlinear transformation.
            </summary>
            <param name="pt">Points to transform.</param>
            <returns>The transformed point.</returns>
            <exception cref="T:System.ObjectDisposedException">If this object or the has
            been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.InverseTransform(Stemmer.Cvb.Image,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            Back-transform an image with this nonlinear transformation.
            </summary>
            <param name="img">Image to transform</param>
            <param name="targetSize">Target size of the transformed image</param>
            <param name="targetOffset">Origin offset of the transformed image</param>
            <returns>The transformed image.</returns>
            <exception cref="T:System.ObjectDisposedException">If this object or the
            <paramref name="img"/> has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="img"/> is
            <c>null</c>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.InverseTransform(System.Collections.Generic.ICollection{Stemmer.Cvb.IPosition})">
            <summary>
            Back transform a sequence of points with this nonlinear transformation.
            </summary>
            <param name="points">Point to transform.</param>
            <returns>The transformed point.</returns>
            <exception cref="T:System.ObjectDisposedException">If this object or the has
            been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="points"/>
            is <c>null</c>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.NonLinearTransformation.InverseTransform(Stemmer.Cvb.IPosition)">
            <summary>
            Back-Transform a point with this nonlinear transformation.
            </summary>
            <param name="pt">Point to transform.</param>
            <returns>The transformed point.</returns>
            <exception cref="T:System.ObjectDisposedException">If this object or the has
            been disposed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.CalibrationPattern">
            <summary>
            Methods for CVB calibration pattern handling.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.CalibrationPattern.Create(Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a user-definable calibration pattern.
            </summary>
            <remarks>
            <para>
            The calibration pattern will consist of a regular spaced matrix of
            dots, the size of which will be determined by the input parameters.
            The distance between the dots in x- and y-direction will be 2.5 times
            the diameter of the dots.
            </para><para>
            If an asymmetric pattern was selected, the bigger dots will have 2.5
            times the area of the smaller dots (meaning that their radius is
            sqrt(2.5) times the radius of the small dots).
            </para>
            </remarks>
            <param name="style">Dot style to use (see
            <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternStyle"/>).</param>
            <param name="contrast">Selects whether to use white on black or black
            on white dots (see <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternContrast"/>).</param>
            <param name="width">Width of the output image in pixels.</param>
            <param name="height">Height of the output image in pixels.</param>
            <param name="numColumns">Number of dot columns in the image.</param>
            <param name="numRows">Number of dot rows in the image.</param>
            <returns>Calibration pattern image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.CalibrationPattern.Create(Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,Stemmer.Cvb.Foundation.CalibrationPatternFormat,Stemmer.Cvb.Foundation.CalibrationPatternOrientation,System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Create a user-definable calibration pattern suitable for printing on a
            sheet of paper. The calibration pattern will consist of a regularly
            spaced matrix of dots, the size of which will be determined by the
            input parameters. The size of the pattern image will be suitable for
            printing it on an piece of paper defined by the
            <paramref name="paperSize"/> parameter.
            The calibration pattern will consist of a regular rectangular grid of
            dots. The distance between the dots in x- and y-direction will be 2.5
            times the diameter of the dots. If an asymmetric pattern was selected,
            the bigger dots will have 2.5 times the area of the smaller dots
            (meaning that their radius is sqrt(2.5) times the radius of the small
            dots).
            </summary>
            <param name="style">Dot style to use (see
            <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternStyle"/>).</param>
            <param name="contrast">Selects whether to use white on black or black
            on white dots (see <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternContrast"/>).</param>
            <param name="paperSize">size of the paper on which to print the
            calibration pattern later on (see
            <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternFormat"/>).</param>
            <param name="orientation">Choose orientation; only relevant for
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternStyle.AsymmetricDots"/>.</param>
            <param name="numColumns">Number of dot columns in the image.</param>
            <param name="numRows">Number of dot rows in the image.</param>
            <param name="horizontalBorder"><para>Horizontal borders to be applied
            (in inches).</para>
            <para>
            This value should match the setting that is going to be used for
            printing the resulting image. Must not be negative. The meaning of
            horizontal refers to the paper size definition and is independent of
            the <paramref name="orientation"/> setting.
            </para></param>
            <param name="verticalBorder"><para>Vertical borders to be applied (in
            inches).</para>
            <para>
            This value should match the setting that is going to be used for
            printing  the resulting image. Must not be negative. The meaning of
            vertical refers to the paper size definition and is independent of the
            <paramref name="orientation"/> setting.
            </para></param>
            <param name="dpi"><para>Dot density to be used (in dots per inch).</para>
            <para>
            It usually makes sense to set this parameter to the printer's physical
            dot density or half or quarter of that. Minimum value is 150.
            </para></param>
            <returns>Calibration pattern image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.CalibrationPattern.ExtractCalibrationLists(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Double,Stemmer.Cvb.Point2Dd[]@,Stemmer.Cvb.Point2Dd[]@)">
            <summary>
            Automatically extracts the pixel lists required for creating a
            <see cref="T:Stemmer.Cvb.Foundation.NonLinearTransformation"/> object.
            </summary>
            <remarks>
            <para>
            Note that a more convenient alternative is to call the method
            <c>NonLinearTransformation.FromCalibrationPattern</c>. It will do the
            list extraction and the generation of the transformation object in a
            single function call.
            </para><para>
            The image <paramref name="plane"/> given to this method needs to
            contain a calibration pattern as generated by the method
            <see cref="M:Stemmer.Cvb.Foundation.CalibrationPattern.Create(Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Int32,System.Int32)"/>: 
            A regularly spaced matrix of
            dots, the distance between the dots in x- and y-direction should be 2.5
            times the diameter of the dots, if an asymmetric pattern was used, the
            bigger dots should have 2.5 times the area of the smaller dots
            (meaning that their radius is sqrt(2.5) times the radius of the small
            dots).
            </para><para>
            Note that, although the area of interest is given as a
            <see cref="T:Stemmer.Cvb.Area2D"/> here (and in the processing of the <c>Area2D</c>
            the image's coordinate system will be respected), the actual output of
            this method uses <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>!
            This seemingly inconsistent mix in this case is in fact useful,
            because a <c>Area2D</c> will better capture the actual location of a
            calibration pattern, especially if the image has been rotated, than a
            <see cref="T:Stemmer.Cvb.Rect"/> style area of interest. But the calibration
            functions usually assume that the pixel lists are given in pixel
            coordinates.
            </para><para>
            To avoid misunderstandings and complications in the interpretation of
            the image content, it is recommended to use a default coordinate
            system on the input image.
            </para>
            </remarks>
            <param name="plane">Image plane to work on.</param>
            <param name="style">Calibration pattern style visible in the image.
            (see <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternStyle"/>)</param>
            <param name="contrast">Selects whether the image shows
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.BlackOnWhite"/> or
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.WhiteOnBlack"/> dots.</param>
            <param name="gridSpacing"><para>Spacing of the calibration dot grid in
            the target image.</para>
            <para>Defines the distance of the points that will end up in the
            <paramref name="transformedPixels"/> list.
            </para></param>
            <param name="minContrast"><para>Minimum gray value contrast between
            the object and the background of the calibration target pattern.
            </para><para>
            Value to be set depends on the quality of the image taken from the
            pattern, but in a typical situation this contrast should not drop
            below 64 gray values, otherwise it might become difficult to extract
            the calibration points.
            </para></param>
            <param name="maxRatio"><para>Maximum ratio between the biggest and the
            smallest calibration dot.</para>
            <para>
            This value will be used to identify outliers when looking for
            calibration dots. It should be set high enough to allow for the area
            variations to be expected due to perspective distortions and small
            enough to eliminate the candidates that are either too big or too
            small to be valid calibration pattern dots.
            </para><para>
            Typically, values of about 3.0 to 5.0 are big enough - even if there
            is notable perspective distortion visible in the images. If an
            asymmetric calibration pattern has been selected, the ratio used for
            calculation will be adapted accordingly.
            </para></param>
            <param name="originalPixels">Point list to contain the locations of
            the calibration dots in the input image in pixel coordinates.</param>
            <param name="transformedPixels">Pixel list to contain the appropriate
            locations of the calibration dots in the target image of the
            calibration.</param>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.CalibrationPattern.ExtractCalibrationLists(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Double,Stemmer.Cvb.Point2Dd[]@,Stemmer.Cvb.Point2Dd[]@)">
            <summary>
            Automatically extracts the pixel lists required for creating a
            <see cref="T:Stemmer.Cvb.Foundation.NonLinearTransformation"/> object.
            </summary>
            <remarks>
            <para>
            Note that a more convenient alternative is to call the method
            <c>NonLinearTransformation.FromCalibrationPattern</c>. It will do the
            list extraction and the generation of the transformation object in a
            single function call.
            </para><para>
            The image <paramref name="plane"/> given to this method needs to
            contain a calibration pattern as generated by the method
            <see cref="M:Stemmer.Cvb.Foundation.CalibrationPattern.Create(Stemmer.Cvb.Foundation.CalibrationPatternStyle,Stemmer.Cvb.Foundation.CalibrationPatternContrast,System.Int32,System.Int32,System.Int32,System.Int32)"/>: 
            A regularly spaced matrix of
            dots, the distance between the dots in x- and y-direction should be 2.5
            times the diameter of the dots, if an asymmetric pattern was used, the
            bigger dots should have 2.5 times the area of the smaller dots
            (meaning that their radius is sqrt(2.5) times the radius of the small
            dots).
            </para><para>
            Note that, although the area of interest is given as a
            <see cref="T:Stemmer.Cvb.Area2D"/> here (and in the processing of the <c>Area2D</c>
            the image's coordinate system will be respected), the actual output of
            this method uses <see cref="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates"/>!
            This seemingly inconsistent mix in this case is in fact useful,
            because a <c>Area2D</c> will better capture the actual location of a
            calibration pattern, especially if the image has been rotated, than a
            <see cref="T:Stemmer.Cvb.Rect"/> style area of interest. But the calibration
            functions usually assume that the pixel lists are given in pixel
            coordinates.
            </para><para>
            To avoid misunderstandings and complications in the interpretation of
            the image content, it is recommended to use a default coordinate
            system on the input image.
            </para>
            </remarks>
            <param name="plane">Image plane to work on.</param>
            <param name="aoi">Area of interest in which to look for the
            calibration pattern's dots.</param>
            <param name="style">Calibration pattern style visible in the image.
            (see <see cref="T:Stemmer.Cvb.Foundation.CalibrationPatternStyle"/>)</param>
            <param name="contrast">Selects whether the image shows
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.BlackOnWhite"/> or
            <see cref="F:Stemmer.Cvb.Foundation.CalibrationPatternContrast.WhiteOnBlack"/> dots.</param>
            <param name="gridSpacing"><para>Spacing of the calibration dot grid in
            the target image.</para>
            <para>Defines the distance of the points that will end up in the
            <paramref name="transformedPixels"/> list.
            </para></param>
            <param name="minContrast"><para>Minimum gray value contrast between
            the object and the background of the calibration target pattern.
            </para><para>
            Value to be set depends on the quality of the image taken from the
            pattern, but in a typical situation this contrast should not drop
            below 64 gray values, otherwise it might become difficult to extract
            the calibration points.
            </para></param>
            <param name="maxRatio"><para>Maximum ratio between the biggest and the
            smallest calibration dot.</para>
            <para>
            This value will be used to identify outliers when looking for
            calibration dots. It should be set high enough to allow for the area
            variations to be expected due to perspective distortions and small
            enough to eliminate the candidates that are either too big or too
            small to be valid calibration pattern dots.
            </para><para>
            Typically, values of about 3.0 to 5.0 are big enough - even if there
            is notable perspective distortion visible in the images. If an
            asymmetric calibration pattern has been selected, the ratio used for
            calculation will be adapted accordingly.
            </para></param>
            <param name="originalPixels">Point list to contain the locations of
            the calibration dots in the input image in pixel coordinates.</param>
            <param name="transformedPixels">Pixel list to contain the appropriate
            locations of the calibration dots in the target image of the
            calibration.</param>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.Utilities.InternalExtensions">
            <summary>
            Collection of extension methods used internally.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Utilities.InternalExtensions.ToUnmanagedPixelList``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Convert a collection of PointD structs to an unmanaged PixelList 
            object like CVB is using it.
            </summary>
            <param name="managedCollection">collection of PointD structs</param>
            <param name="pixelListDimension">dimension of the unmanaged pixel
            list</param>
            <returns>Handle to the unmanaged PIXELLIST object; don't forget to
            release this handle once it is no longer needed</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.Utilities.InternalExtensions.ToUnmanagedPixelList``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Convert a collection of PointD structs to an unmanaged PixelList 
            object like CVB is using it.
            </summary>
            <param name="managedCollection">collection of PointD structs</param>
            <returns>Handle to the unmanaged PIXELLIST object; don't forget to
            release this handle once it is no longer needed</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode">
            <summary>
            Binarization modes usable with the methods of the 
            <see cref="T:Stemmer.Cvb.Foundation.ZxBarcode"/> static class.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode.Histogram">
            <summary>
            Binarization mode in which a global threshold is being applied to the
            image. The global threshold is automatically calculated based on the
            area of interest's histogram. This binarization mode is not as 
            flexible as <see cref="F:Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode.Hybrid"/> in that it cannot cope with 
            inhomogeneous illumination. However the processing time of the
            histogram based binarization is much lower than that of the hybrid 
            binarization mode.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode.Hybrid">
            <summary>
            Binarization mode that uses a local thresholding algorithm. The Hybrid
            binarization mode yields much better result than the global histogram
            mode if the illumination in the image is not homogeneous, but it also
            requires more CPU time.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ZxBarcodeThoroughness">
            <summary>
            Reader modes for the methods of the <see cref="T:Stemmer.Cvb.Foundation.ZxBarcode"/> static 
            class.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeThoroughness.Default">
            <summary>
            Use the regular default reader configuration for ZXing.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeThoroughness.TryHarder">
            <summary>
            Use a more thorough reader configuration for ZXing. Using this mode
            effectively calls a <code>setTryHarder(true)</code> on the ZXing 
            <code>DecodeHints</code> object that is being used internally.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ZxBarcodeSymbology">
            <summary>
            Possible code symbologies for the <see cref="T:Stemmer.Cvb.Foundation.ZxBarcode"/> reader 
            functions <see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.Read(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/>
            /<see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/> 
            to be recognized. If <b>Read"</b>/<b>>ReadMultiple</b>
            should be capable of reading different codes, then concatenate the
            respective enum flags.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.None">
            <summary>
            No code symbology defined.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Codabar">
            <summary>
            Codabar 1D code (see https://en.wikipedia.org/wiki/Codabar).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Code39">
            <summary>
            Code 39 1D code (see https://en.wikipedia.org/wiki/Code_39).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Code93">
            <summary>
            Code 93 1D code (see https://en.wikipedia.org/wiki/Code_93).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Code128">
            <summary>
            Code 128 1D code (see https://en.wikipedia.org/wiki/Code_128).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Ean8">
            <summary>
            EAN 8 1D code (see https://en.wikipedia.org/wiki/EAN-8).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Ean13">
            <summary>
            EAN 13 1D code (see https://en.wikipedia.org/wiki/International_Article_Number).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Interleaved2of5">
            <summary>
            Interleaved 2 of 5 (ITF) 1D code (see https://en.wikipedia.org/wiki/Interleaved_2_of_5).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Rss14">
            <summary>
            RSS 14 1D code.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.RssExpanded">
            <summary>
            RSS Expanded 1D code.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.UpcA">
            <summary>
            Universal Product Code (UPC-A) 1D code (see https://en.wikipedia.org/wiki/Universal_Product_Code).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.UpcE">
            <summary>
            Universal Product Code (UPC-E) 1D code (see https://en.wikipedia.org/wiki/Universal_Product_Code).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.UpcEanExtension">
            <summary>
            Extended Universal Product 1D Code.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.All1D">
            <summary>
            Combine all known 1D codes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Aztec">
            <summary>
            Aztec 2D code (see https://en.wikipedia.org/wiki/Aztec_Code).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Datamatrix">
            <summary>
            Data Matrix 2D code (see https://en.wikipedia.org/wiki/Data_Matrix).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Maxicode">
            <summary>
            Maxicode 2D code (see https://en.wikipedia.org/wiki/MaxiCode).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Pdf417">
            <summary>
            PDF417 2D code (see https://en.wikipedia.org/wiki/PDF417).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.Qr">
            <summary>
            Quick Response (QR) code (see https://en.wikipedia.org/wiki/QR_code).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.All2D">
            <summary>
            Combine all known 2D codes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcodeSymbology.All">
            <summary>
            Combine all known codes.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ZxBarcode">
            <summary>
            Functionality of the ZXBarcode.dll.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcode.MaxNumCharacters">
            <summary>
            Maximum length of a read result returned by zxing.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcode.FormatMaxNumCharacters">
            <summary>
            Maximum length of the result format string name.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ZxBarcode.NativeResult">
            <summary>
            ZXBarcode native read result.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcode.NativeResult.PositionX">
            <summary>
            X coordinates of the up to four corner points of the code.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcode.NativeResult.PositionY">
            <summary>
            Y coordinates of the up to four corner points of the code.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Foundation.ZxBarcode.NativeResult.Format">
            <summary>
            Format of the code.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ZxBarcode.Binarize(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode)">
            <summary>
            This function applies the binarization that the function
            <see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/>
            / <see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/>
            is going to use internally. This can be useful for judging whether which
            binarization will be good enough for reading the code(s). Note that
            it is not necessary to apply binarization to an image prior
            <b>Read</b>/<b>ReadMultiple</b> as these
            methods will always automatically binarize the image passed to it. 
            </summary>
            <remarks>
            <para>Please note that this function is not guaranteed to be
            thread-safe and we strongly advise against calling it simultaneously
            from different threads.</para>
            <para>This function uses the zxing-cpp library (see 
            https://github.com/glassechidna/zxing-cpp). zxing-cpp is a fork of
            the zxing project and is published under the Apache v2.0 license which
            requires applications and libraries that make use of this function to
            declare in their license information that they are using the zxing-cpp
            library. This may be done e.g. by adding a link to the zxing-cpp 
            project page and the Apache v2.0 license terms
            (https://github.com/glassechidna/zxing-cpp/blob/master/COPYING) e.g. 
            to a "Help" or "About" screen. In Common Vision Blox the respective 
            links have been added to the document \a OpenSourceLicenses.chm.
            </para>
            </remarks>
            <param name="plane">Input plane to work on. The plane 
            needs to have 8 bits per pixel, otherwise an error will be returned.
            Note that ZXing Barcode can only process luminance information. If the
            input image uses a color format, either select a suitable plane or 
            convert it to luminance information before processing it in ZXBarcode.
            </param>
            <param name="aoi">Area of interest to be binarized.</param>
            <param name="binarization">Selects the binarization algorithm to use.
            see <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode"/> for eligible values.
            </param>
            <returns>Binarization result image.</returns>
            <exception cref="T:System.ObjectDisposedException">if the image to which the
            input plane belongs has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">if the input plane does not have
            8 bits per pixel unsigned integer format or if the 
            <paramref name="aoi"/> is invalid.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ZxBarcode.Binarize(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode)">
            <summary>
            This function applies the binarization that the function
            <see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/> 
            / <see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/> 
            is going to use internally. This can be useful for judging whether which
            binarization will be good enough for reading the code(s). Note that
            it is not necessary to apply binarization to an image prior
            <b>Read</b>/<b>ReadMultiple</b> as these
            methods will always automatically binarize the image passed to it. 
            <para>Please note that this function is not guaranteed to be
            thread-safe and we strongly advise against calling it simultaneously
            from different threads.</para>
            <para>This function uses the zxing-cpp library (see 
            https://github.com/glassechidna/zxing-cpp). zxing-cpp is a fork of
            the zxing project and is published under the Apache v2.0 license which
            requires applications and libraries that make use of this function to
            declare in their license information that they are using the zxing-cpp
            library. This may be done e.g. by adding a link to the zxing-cpp 
            project page and the Apache v2.0 license terms
            (https://github.com/glassechidna/zxing-cpp/blob/master/COPYING) e.g. 
            to a "Help" or "About" screen. In Common Vision Blox the respective 
            links have been added to the document \a OpenSourceLicenses.chm.
            </para>
            </summary>
            <param name="plane">Input plane to work on. The plane 
            needs to have 8 bits per pixel, otherwise an error will be returned.
            Note that ZXing Barcode can only process luminance information. If the
            input image uses a color format, either select a suitable plane or 
            convert it to luminance information before processing it in ZXBarcode.
            </param>
            <param name="binarization">Selects the binarization algorithm to use.
            see <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode"/> for eligible values.
            </param>
            <returns>Binarization result image.</returns>
            <exception cref="T:System.ObjectDisposedException">if the image to which the
            input plane belongs has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">if the input plane does not have
            8 bits per pixel unsigned integer format.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ZxBarcode.Read(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)">
            <summary>
            Read a bar code in an image. Unlike its counterpart, 
            <see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/>, 
            this function only reads one
            code. For an image with more than one code of the selected symbology
            it is undefined which code will be returned.
            </summary>
            <remarks>
            <para>Please note that this function is not guaranteed to be
            thread-safe and we strongly advise against calling it simultaneously
            from different threads.
            </para>
            <para> When calling this function without a valid Common Vision Blox
            Foundation Package license, the results returned by the function call
            will be partly garbled: Any '0' in the result will be replaced by a 
            '5' and any 'e' or 'E' will be replaced by an 'x' or 'X' respectively.
            </para>
            <para>This function uses the zxing-cpp library (see 
            https://github.com/glassechidna/zxing-cpp). zxing-cpp is a fork of
            the zxing project and is published under the Apache v2.0 license which
            requires applications and libraries that make use of this function to
            declare in their license information that they are using the zxing-cpp
            library. This may be done e.g. by adding a link to the zxing-cpp 
            project page and the Apache v2.0 license terms
            (https://github.com/glassechidna/zxing-cpp/blob/master/COPYING) e.g. 
            to a "Help" or "About" screen. In Common Vision Blox the respective 
            links have been added to the document \a OpenSourceLicenses.chm.
            </para>
            </remarks>
            <param name="plane">Input plane to work on. The plane 
            needs to have 8 bits per pixel, otherwise an error will be returned.
            Note that ZXing Barcode can only process luminance information. If the
            input image uses a color format, either select a suitable plane or 
            convert it to luminance information before processing it in ZXBarcode.
            </param>
            <param name="aoi">Area of interest to be searched for a readable code.
            </param>
            <param name="binarization">Selects the binarization algorithm to use.
            see <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode"/> for eligible values.
            </param>
            <param name="thoroughness">Thoroughness to be applied when searching for
            codes. See <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeThoroughness"/> for possible values.
            </param>
            <param name="formatsToLookFor">Flags that provide a hint at what 
            barcode formats are to be expected in the image. This hint does not 
            limit the reading of codes - if the hint points toward e.g. Code 128 
            and/or QR codes and the image contains a DataMatrix code, the code 
            will be read nevertheless. However, providing the reader with the 
            information what code(s) might be visible in the image may speed up 
            reading slightly. This value can be a combination of the flags in the 
            <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeSymbology"/> enumeration if more than one 
            symbology is to be expected (remember, however, that even if multiple 
            symbologies were specified, this function will still read one code;
            for reading multiple codes please use 
            <see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/>.
            </param>
            <exception cref="T:System.ObjectDisposedException">if the image to which the
            input plane belongs has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">if the input plane does not have
            8 bits per pixel unsigned integer format or if the 
            <paramref name="aoi"/> is invalid.</exception>
            <returns>Single read result if a code has been read successfully,
            otherwise <code>null</code>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ZxBarcode.Read(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)">
            <summary>
            Read a bar code in an image. Unlike its counterpart, 
            <see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/>, 
            this function only reads one
            code. For an image with more than one code of the selected symbology
            it is undefined which code will be returned.
            </summary>
            <remarks>
            <para>Please note that this function is not guaranteed to be
            thread-safe and we strongly advise against calling it simultaneously
            from different threads.
            </para>
            <para> When calling this function without a valid Common Vision Blox
            Foundation Package license, the results returned by the function call
            will be partly garbled: Any '0' in the result will be replaced by a 
            '5' and any 'e' or 'E' will be replaced by an 'x' or 'X' respectively.
            </para>
            <para>This function uses the zxing-cpp library (see 
            https://github.com/glassechidna/zxing-cpp). zxing-cpp is a fork of
            the zxing project and is published under the Apache v2.0 license which
            requires applications and libraries that make use of this function to
            declare in their license information that they are using the zxing-cpp
            library. This may be done e.g. by adding a link to the zxing-cpp 
            project page and the Apache v2.0 license terms
            (https://github.com/glassechidna/zxing-cpp/blob/master/COPYING) e.g. 
            to a "Help" or "About" screen. In Common Vision Blox the respective 
            links have been added to the document \a OpenSourceLicenses.chm.
            </para>
            </remarks>
            <param name="plane">Input plane to work on. The plane 
            needs to have 8 bits per pixel, otherwise an error will be returned.
            Note that ZXing Barcode can only process luminance information. If the
            input image uses a color format, either select a suitable plane or 
            convert it to luminance information before processing it in ZXBarcode.
            </param>
            <param name="binarization">Selects the binarization algorithm to use.
            see <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode"/> for eligible values.
            </param>
            <param name="thoroughness">Thoroughness to be applied when searching for
            codes. See <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeThoroughness"/> for possible values.
            </param>
            <param name="formatsToLookFor">Flags that provide a hint at what 
            barcode formats are to be expected in the image. This hint does not 
            limit the reading of codes - if the hint points toward e.g. Code 128 
            and/or QR codes and the image contains a DataMatrix code, the code 
            will be read nevertheless. However, providing the reader with the 
            information what code(s) might be visible in the image may speed up 
            reading slightly. This value can be a combination of the flags in the 
            <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeSymbology"/> enumeration if more than one 
            symbology is to be expected (remember, however, that even if multiple 
            symbologies were specified, this function will still read one code;
            for reading multiple codes please use <b>ReadMultiple</b>.
            </param>
            <exception cref="T:System.ObjectDisposedException">if the image to which the
            input plane belongs has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">if the input plane does not have
            8 bits per pixel unsigned integer format.</exception>
            <returns>Single read result if a code has been read successfully,
            otherwise <code>null</code>.</returns>    
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)">
            <summary>
            Read multiple barcodes in an image. Unlike its counterpart
            <see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/>, this function reads up to 256 recognizable
            codes of the selected symbologies in an image.
            </summary>
            <remarks>
            <para>Please note that this function is not guaranteed to be
            thread-safe and we strongly advise against calling it simultaneously
            from different threads.
            </para>
            <para> When calling this function without a valid Common Vision Blox
            Foundation Package license, the results returned by the function call
            will be partly garbled: Any '0' in the result will be replaced by a 
            '5' and any 'e' or 'E' will be replaced by an 'x' or 'X' respectively.
            </para>
            <para>This function uses the zxing-cpp library (see 
            https://github.com/glassechidna/zxing-cpp). zxing-cpp is a fork of
            the zxing project and is published under the Apache v2.0 license which
            requires applications and libraries that make use of this function to
            declare in their license information that they are using the zxing-cpp
            library. This may be done e.g. by adding a link to the zxing-cpp 
            project page and the Apache v2.0 license terms
            (https://github.com/glassechidna/zxing-cpp/blob/master/COPYING) e.g. 
            to a "Help" or "About" screen. In Common Vision Blox the respective 
            links have been added to the document \a OpenSourceLicenses.chm.
            </para>
            </remarks>
            <param name="plane">Input plane to work on. The plane 
            needs to have 8 bits per pixel, otherwise an error will be returned.
            Note that ZXing Barcode can only process luminance information. If the
            input image uses a color format, either select a suitable plane or 
            convert it to luminance information before processing it in ZXBarcode.
            </param>
            <param name="aoi">Area of interest to be searched for a readable code.
            </param>
            <param name="binarization">Selects the binarization algorithm to use.
            see <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode"/> for eligible values.
            </param>
            <param name="thoroughness">Thoroughness to be applied when searching for
            codes. See <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeThoroughness"/> for possible values.
            </param>
            <param name="formatsToLookFor">Flags that provide a hint at what 
            bar code formats are to be expected in the image. This hint does not 
            limit the reading of codes - if the hint points toward e.g. Code 128 
            and/or QR codes and the image contains a DataMatrix code, the code 
            will be read nevertheless. However, providing the reader with the 
            information what code(s) might be visible in the image may speed up 
            reading slightly. This value can be a combination of the flags in the 
            <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeSymbology"/> enumeration if more than one 
            symbology is to be expected.
            </param>
            <exception cref="T:System.ObjectDisposedException">if the image to which the
            input plane belongs has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">if the input plane does not have
            8 bits per pixel unsigned integer format or if the 
            <paramref name="aoi"/> is invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">if the image to which the
            input plane belongs has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">if the input plane does not have
            8 bits per pixel unsigned integer format or if the 
            <paramref name="aoi"/> is invalid.</exception>
            <returns>Array of read results if at least one code has been read 
            successfully, otherwise <code>null</code>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)">
            <summary>
            Read multiple barcodes in an image. Unlike its counterpart
            <see cref="M:Stemmer.Cvb.Foundation.ZxBarcode.ReadMultiple(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode,Stemmer.Cvb.Foundation.ZxBarcodeThoroughness,Stemmer.Cvb.Foundation.ZxBarcodeSymbology)"/>, this function reads up to 256 recognizable
            codes of the selected symbologies in an image.
            </summary>
            <remarks>
            <para>Please note that this function is not guaranteed to be
            thread-safe and we strongly advise against calling it simultaneously
            from different threads.
            </para>
            <para> When calling this function without a valid Common Vision Blox
            Foundation Package license, the results returned by the function call
            will be partly garbled: Any '0' in the result will be replaced by a 
            '5' and any 'e' or 'E' will be replaced by an 'x' or 'X' respectively.
            </para>
            <para>This function uses the zxing-cpp library (see 
            https://github.com/glassechidna/zxing-cpp). zxing-cpp is a fork of
            the zxing project and is published under the Apache v2.0 license which
            requires applications and libraries that make use of this function to
            declare in their license information that they are using the zxing-cpp
            library. This may be done e.g. by adding a link to the zxing-cpp 
            project page and the Apache v2.0 license terms
            (https://github.com/glassechidna/zxing-cpp/blob/master/COPYING) e.g. 
            to a "Help" or "About" screen. In Common Vision Blox the respective 
            links have been added to the document \a OpenSourceLicenses.chm.
            </para>
            </remarks>
            <param name="plane">Input plane to work on. The plane 
            needs to have 8 bits per pixel, otherwise an error will be returned.
            Note that ZXing Barcode can only process luminance information. If the
            input image uses a color format, either select a suitable plane or 
            convert it to luminance information before processing it in ZXBarcode.
            </param>
            <param name="binarization">Selects the binarization algorithm to use.
            see <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeBinarizationMode"/> for eligible values.
            </param>
            <param name="thoroughness">Thoroughness to be applied when searching for
            codes. See <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeThoroughness"/> for possible values.
            </param>
            <param name="formatsToLookFor">Flags that provide a hint at what 
            bar code formats are to be expected in the image. This hint does not 
            limit the reading of codes - if the hint points toward e.g. Code 128 
            and/or QR codes and the image contains a DataMatrix code, the code 
            will be read nevertheless. However, providing the reader with the 
            information what code(s) might be visible in the image may speed up 
            reading slightly. This value can be a combination of the flags in the 
            <see cref="T:Stemmer.Cvb.Foundation.ZxBarcodeSymbology"/> enumeration if more than one 
            symbology is to be expected.
            </param>
            <exception cref="T:System.ObjectDisposedException">if the image to which the
            input plane belongs has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">if the input plane does not have
            8 bits per pixel unsigned integer format.</exception>
            <exception cref="T:System.ObjectDisposedException">if the image to which the
            input plane belongs has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">if the input plane does not have
            8 bits per pixel unsigned integer format.</exception>
            <returns>Array of read results if at least one code has been read 
            successfully, otherwise <code>null</code>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Foundation.ZxBarcodeReadResult">
            <summary>
            ZXing bar code read result.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Foundation.ZxBarcodeReadResult.#ctor(Stemmer.Cvb.Foundation.ZxBarcode.NativeResult)">
            <summary>
            ctor (internal)
            </summary>
            <param name="res">native result to initialize from</param>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ZxBarcodeReadResult.Text">
            <summary>
            Text string decoded from the bar code.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ZxBarcodeReadResult.Format">
            <summary>
            Format of the code that has been decoded.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Foundation.ZxBarcodeReadResult.Location">
            <summary>
            Location of the code (2 entries for 1D codes, 
            up to 4 entries for 2D codes).
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeProjectionHandle">
            <summary>
            Safe-destruct handle wrapper for IntPtr-based resources that are Manto
            Classifiers (which never were proper IUnknown objects)
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeProjectionHandle.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">native handle for which to create the handle 
            object</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeProjectionHandle.ReleaseHandle">
            <summary>
            Release internally memorized handle.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeFoundationHandle">
            <summary>
            Safe-destruct handle wrapper for IntPtr-based resources that are Manto
            Classifiers (which never were proper IUnknown objects)
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeFoundationHandle.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">native handle for which to create the handle 
            object</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeFoundationHandle.ReleaseHandle">
            <summary>
            Release internally memorized handle.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeLightMeterHandle">
            <summary>
            Safe-destruct handle wrapper for IntPtr-based resources that are Manto
            Classifiers (which never were proper IUnknown objects)
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeLightMeterHandle.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">native handle for which to create the handle 
            object</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeLightMeterHandle.ReleaseHandle">
            <summary>
            Release internally memorized handle.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.ArithmeticLib">
            <summary>
            Arithmetic and logical operators to images.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.BayerToRGBLib">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.EdgeLib">
            <summary>
            imports of CVCEdge
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.LightMeterLib">
            <summary>
            LightMeter Tool provides a convenient and straightforward way of 
            generating a histogram of intensity values of an AOI (Area Of Interest) 
            in an image, as well it obtains a number of common statistical measures 
            from the values.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.TextOutLib">
            <summary>
            Import class for the DllImport functions of TextOut
            </summary>
        </member>
    </members>
</doc>
