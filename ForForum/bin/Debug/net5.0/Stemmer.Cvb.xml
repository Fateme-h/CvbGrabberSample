<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stemmer.Cvb</name>
    </assembly>
    <members>
        <member name="T:Stemmer.Cvb.AffineMatrix2D">
            <summary>
            Compacted affine matrix for 2D operations. 
            </summary>
            <remarks>
            The third line is assumed to be 0, 0, 1.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.AffineMatrix2D.Translation">
            <summary>
            The translation part of the affine matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.AffineMatrix2D.Matrix">
            <summary>
            The transformation part of the affine matrix.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.AffineMatrix2D.Item(System.Int32,System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The row, or "Y" index to get.</param>
            <param name="column">The column, or "X" index to get.</param>
            <returns>Value at the specified position.</returns>
        </member>
        <member name="M:Stemmer.Cvb.AffineMatrix2D.#ctor(Stemmer.Cvb.Matrix2D,Stemmer.Cvb.Point2Dd)">
            <summary>
            Define an affine matrix.
            </summary>
            <param name="m">transformation part</param>
            <param name="p">translation part</param>
        </member>
        <member name="M:Stemmer.Cvb.AffineMatrix2D.Invert">
            <summary>
            Invert this affine matrix if possible.
            </summary>
            <exception cref="T:System.DivideByZeroException">If the matrix cannot be
            inverted.</exception>
        </member>
        <member name="P:Stemmer.Cvb.AffineMatrix2D.IsTranslation">
            <summary>
            True if this affine matrix corresponds to a pure translation, false
            otherwise.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.AffineMatrix2D.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this affine matrix</returns>
        </member>
        <member name="F:Stemmer.Cvb.AffineMatrix2D.Identity">
            <summary>
            The identity element.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.AffineMatrix2D.op_Multiply(Stemmer.Cvb.AffineMatrix2D,Stemmer.Cvb.AffineMatrix2D)">
            <summary>
            Compose two affine matrices by multiplying them.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>composed AffineMatrix struct</returns>
        </member>
        <member name="T:Stemmer.Cvb.SubPixelMode">
            <summary>
            Method for determining sub pixel accuracy when working with the
            FindLocalMaxima functions.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SubPixelMode.ParabolicFast">
            <summary>
            An approximate parabolic fit. Results similar to the exact parabolic fit
            as long as the maximum is steep enough (i.e.
            not plateau shaped). Only usable with a 3x3 neighborhood.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SubPixelMode.ParabolicAccurate">
            <summary>
            A full parabolic least squares fit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SubPixelMode.Gaussian">
            <summary>
            A Gaussian least squares fit.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Neighborhood">
            <summary>
            Neighborhood to use in sub pixel calculation of local maxima. The bigger
            the neighborhood for calculation is, the longer the sub pixel fit will
            take.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Neighborhood.Use3x3">
            <summary>
            3x3 environment around the pixel-accurate result.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Neighborhood.Use5x5">
            <summary>
            5x5 environment around the pixel-accurate result.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Neighborhood.Use7x7">
            <summary>
            7x7 environment around the pixel-accurate result.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Neighborhood.Use9x9">
            <summary>
            9x9 environment around the pixel-accurate result.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Analyze">
            <summary>
            A collection functions available in the Common Vision Blox Image
            Manager for analyzing image content.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Analyze.Histogram(Stemmer.Cvb.ImagePlane)">
            <summary>
            Gather and return the histogram from an 8 bits per pixel unsigned
            image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to gather the histogram from.</param>
            <returns>Histogram as an array of 256 integer values</returns>
            <exception cref="T:System.ObjectDisposedException">If the Parent of
            <paramref name="plane"/> has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when calling this method on an image
            <paramref name="plane"/> of inappropriate data type</exception>
        </member>
        <member name="M:Stemmer.Cvb.Analyze.Histogram(Stemmer.Cvb.ImagePlane,System.Double)">
            <summary>
            Gather and return the histogram from an 8 bits per pixel unsigned
            image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to gather the histogram from</param>
            <param name="density">Scan density to generate the histogram. It must
            be in the range [0...1]. Lower densities result in higher processing
            speed, but will also yield histograms, which are notably jagged due
            to the poor statistics.</param>
            <returns>Histogram as an array of 256 integer values</returns>
            <exception cref="T:System.ObjectDisposedException">If the Parent of
            <paramref name="plane"/> has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when calling this method on an image
            <paramref name="plane"/> of inappropriate data type</exception>
        </member>
        <member name="M:Stemmer.Cvb.Analyze.Histogram(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D)">
            <summary>
            Gather and return the histogram from an 8 bits per pixel unsigned
            image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to gather the histogram from</param>
            <param name="aoi">Area in which to gather the histogram</param>
            <returns>Histogram as an array of 256 integer values</returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the Parent of
            <paramref name="plane"/> has already been disposed</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when calling this method on an image
            <paramref name="plane"/> of inappropriate data type</exception>
        </member>
        <member name="M:Stemmer.Cvb.Analyze.Histogram(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,System.Double)">
            <summary>
            Gather and return the histogram from an 8 bits per pixel unsigned
            image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to gather the histogram from</param>
            <param name="density">Scan density to gather the histogram with; must
            be in the range [0...1]; lower densities result in higher processing
            speed, but will also yield histograms which are notably jagged due
            to the poor statistics</param>
            <param name="aoi">Area in which to gather the histogram</param>
            <returns>Histogram as an array of 256 integer values</returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the Parent of
            <paramref name="plane"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the
            <paramref name="density"/> parameter exceeds the range [0...1]
            </exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when calling this method on an image
            <paramref name="plane"/> of inappropriate data type</exception>
        </member>
        <member name="M:Stemmer.Cvb.Analyze.FindLocalMaxima(Stemmer.Cvb.ImagePlane,System.Int32,System.Double,Stemmer.Cvb.Rect)">
            <summary>
            Find local maxima in the input image <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane in which to look for maxima</param>
            <param name="aoi">Region of interest in which to look for maxima
            </param>
            <param name="locality">Minimum distance between two valid maxima; if
            two maxima fall within this distance (measured using the L1 norm),
            the one with the lower gray value will be removed from the result
            list</param>
            <param name="threshold">Minimum gray value a local maximum must have
            for being reported.  Note that the minimal possible value for the
            image's pixel type is never eligible to be a local maximum
            (e.g. if the image uses 8 bits per pixel unsigned, pixels
            with value 0 will never be a local maximum even if the
            threshold has been set to 0.</param>
            <returns>List of the local maxima that have been found</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Analyze.FindLocalMaxima(Stemmer.Cvb.ImagePlane,System.Int32,System.Double)">
            <summary>
            Find local maxima in the input image <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane in which to look for maxima</param>
            <param name="locality">Minimum distance between two valid maxima; if
            two maxima fall within this distance (measured using the L1 norm),
            the one with the lower gray value will be removed from the result
            list</param>
            <param name="threshold">Minimum gray value a local maximum must have
            for being reported.  Note that the minimal possible value for the
            image's pixel type is never eligible to be a local maximum
            (e.g. if the image uses 8 bits per pixel unsigned, pixels
            with value 0 will never be a local maximum even if the
            threshold has been set to 0.</param>
            <returns>List of the local maxima that have been found</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Analyze.FindLocalMaxima(Stemmer.Cvb.ImagePlane,System.Int32,System.Double,Stemmer.Cvb.Rect,Stemmer.Cvb.SubPixelMode,Stemmer.Cvb.Neighborhood)">
            <summary>
            Find sub pixel accurate local maxima in the input image
            <paramref name="plane"/>. Sub pixel accuracy is achieved by assuming
            a Gaussian or parabolic gray value distribution around a local maximum
            that can be fitted into the image data.
            </summary>
            <param name="plane">Image plane in which to look for maxima</param>
            <param name="aoi">Region of interest in which to look for maxima
            </param>
            <param name="locality">Minimum distance between two valid maxima; if
            two maxima fall within this distance (measured using the L1 norm),
            the one with the lower gray value will be removed from the result
            list</param>
            <param name="threshold">Minimum gray value a local maximum must have
            for being reported. Note that the minimal possible value for the
            image's pixel type is never eligible to be a local maximum
            (e.g. if the image uses 8 bits per pixel unsigned, pixels
            with value 0 will never be a local maximum even if the
            threshold has been set to 0.</param>
            <param name="mode">Mode to be used for determining sub pixel accuracy
            (see description of <see cref="T:Stemmer.Cvb.SubPixelMode"/> values)</param>
            <param name="radius">Neighborhood to take account in the sub pixel
            calculation (see description of <see cref="T:Stemmer.Cvb.Neighborhood"/> values)
            </param>
            <returns>List of the local maxima that have been found</returns>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed
            </exception>
            <exception cref="T:System.InvalidOperationException">when trying to combine
            <see cref="F:Stemmer.Cvb.SubPixelMode.ParabolicFast"/> with a neighborhood other
            than <see cref="F:Stemmer.Cvb.Neighborhood.Use3x3"/></exception>
        </member>
        <member name="M:Stemmer.Cvb.Analyze.FindLocalMaxima(Stemmer.Cvb.ImagePlane,System.Int32,System.Double,Stemmer.Cvb.SubPixelMode,Stemmer.Cvb.Neighborhood)">
            <summary>
            Find sub pixel accurate local maxima in the input image
            <paramref name="plane"/>. Sub pixel accuracy is achieved by assuming
            a Gaussian or parabolic gray value distribution around a local maximum
            that can be fitted into the image data.
            </summary>
            <param name="plane">Image plane in which to look for maxima</param>
            <param name="locality">Minimum distance between two valid maxima; if
            two maxima fall within this distance (measured using the L1 norm),
            the one with the lower gray value will be removed from the result
            list</param>
            <param name="threshold">Minimum gray value a local maximum must have
            for being reported. Note that the minimal possible value for the
            image's pixel type is never eligible to be a local maximum
            (e.g. if the image uses 8 bits per pixel unsigned, pixels
            with value 0 will never be a local maximum even if the
            threshold has been set to 0.</param>
            <param name="mode">Mode to be used for determining sub pixel accuracy
            (see description of <see cref="T:Stemmer.Cvb.SubPixelMode"/> values)</param>
            <param name="radius">Neighborhood to take account in the sub pixel
            calculation (see description of <see cref="T:Stemmer.Cvb.Neighborhood"/> values)
            </param>
            <returns>List of the local maxima that have been found</returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the
            <paramref name="plane"/> to work on has already been disposed
            </exception>
            <exception cref="T:System.InvalidOperationException">when trying to combine
            <see cref="F:Stemmer.Cvb.SubPixelMode.ParabolicFast"/> with a neighborhood other
            than <see cref="F:Stemmer.Cvb.Neighborhood.Use3x3"/></exception>
        </member>
        <member name="T:Stemmer.Cvb.Angle">
            <summary>
            Object for convenient and type-safe handling of angles.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Angle.TrimDefault">
            <summary>
            Default value for trim (unless otherwise specified)
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Angle.#ctor(System.Boolean)">
            <summary>
            Generate a 0° angle.
            </summary>
            <param name="trim">trimming</param>
        </member>
        <member name="M:Stemmer.Cvb.Angle.FromDegrees(System.Double,System.Boolean)">
            <summary>
            Create an angle in degrees.
            </summary>
            <param name="deg">Angle value</param>
            <param name="trim">Trimming</param>
            <returns>A new <see cref="T:Stemmer.Cvb.Angle"/> object representing the input value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.FromDegrees(System.Double)">
            <summary>
            Create an angle in degrees.
            </summary>
            <param name="deg">Angle value</param>
            <returns>A new <see cref="T:Stemmer.Cvb.Angle"/> object representing the input value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.FromRadians(System.Double,System.Boolean)">
            <summary>
            Create an angle in radians.
            </summary>
            <param name="rad">Angle value</param>
            <param name="trim">Trimming</param>
            <returns>A new <see cref="T:Stemmer.Cvb.Angle"/> object representing the input value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.FromRadians(System.Double)">
            <summary>
            Create an angle in radians.
            </summary>
            <param name="rad">Angle value</param>
            <returns>A new <see cref="T:Stemmer.Cvb.Angle"/> object representing the input value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.op_LessThan(Stemmer.Cvb.Angle,Stemmer.Cvb.Angle)">
            <summary>
            Comparison of two angles.
            </summary>
            <param name="lhs">Angle</param>
            <param name="rhs">Angle</param>
            <returns><c>true</c> if <paramref name="lhs"/> is bigger than
            <paramref name="rhs"/>, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.op_GreaterThan(Stemmer.Cvb.Angle,Stemmer.Cvb.Angle)">
            <summary>
            Comparison of two angles.
            </summary>
            <param name="lhs">Angle</param>
            <param name="rhs">Angle</param>
            <returns><c>true</c> if <paramref name="lhs"/> is bigger than
            <paramref name="rhs"/>, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.op_Addition(Stemmer.Cvb.Angle,Stemmer.Cvb.Angle)">
            <summary>
            Add two angles.
            </summary>
            <param name="lhs">Angle</param>
            <param name="rhs">Angle</param>
            <returns>Result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.op_Subtraction(Stemmer.Cvb.Angle,Stemmer.Cvb.Angle)">
            <summary>
            Subtract two angles.
            </summary>
            <param name="lhs">Angle</param>
            <param name="rhs">Angle</param>
            <returns>Result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.op_Multiply(System.Double,Stemmer.Cvb.Angle)">
            <summary>
            Multiply an angle with a number.
            </summary>
            <param name="lhs">Number</param>
            <param name="rhs">Angle</param>
            <returns>Result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.op_Division(Stemmer.Cvb.Angle,System.Double)">
            <summary>
            Divide an angle by a number.
            </summary>
            <param name="lhs">Angle</param>
            <param name="rhs">Number</param>
            <returns>Result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.op_Multiply(Stemmer.Cvb.Angle,System.Double)">
            <summary>
            Multiply an angle with a number.
            </summary>
            <param name="rhs">Number</param>
            <param name="lhs">Angle</param>
            <returns>Result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.op_Equality(Stemmer.Cvb.Angle,Stemmer.Cvb.Angle)">
            <summary>
            Compare two angles for equality.
            </summary>
            <param name="lhs">Angle</param>
            <param name="rhs">Angle</param>
            <returns>Result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.op_Inequality(Stemmer.Cvb.Angle,Stemmer.Cvb.Angle)">
            <summary>
            Compare two angles for inequality.
            </summary>
            <param name="lhs">Angle</param>
            <param name="rhs">Angle</param>
            <returns>Result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.ToString">
            <summary>
            Convert the angle to a string. Although Radians is the predominantly
            used unit for angles, the angle will be output as a degree string as
            this is easier humanly readable.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.Equals(System.Object)">
            <summary>
            Equality comparison.
            </summary>
            <param name="obj">Object to compare to</param>
            <returns><c>true</c> if equal; <c>false</c> if not.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.GetHashCode">
            <summary>
            Hash code generation.
            </summary>
            <returns>Hash code as generated by the base class.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Angle.Trim">
            <summary>
            Utility function that trims the angle to the range -PI...PI
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Angle.Deg">
            <summary>
            Get/set the value in degrees. Setting this property will automatically
            update the <see cref="P:Stemmer.Cvb.Angle.Rad"/> property accordingly. Also, the value
            will be trimmed if enabled.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Angle.Rad">
            <summary>
            Get/set the value in Radians. Setting this property will automatically
            update the <see cref="P:Stemmer.Cvb.Angle.Deg"/> property accordingly. Also, the value will
            be trimmed if enabled.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Angle.IsTrimmed">
            <summary>
            Turn trimming of the value of the angle to the range -PI...PI on or off.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Angle.CompareTo(Stemmer.Cvb.Angle)">
            <summary>
            Implementation of the IComparable function
            </summary>
            <param name="other">Angle to compare to</param>
            <returns>Comparison result (see IComparable documentation)</returns>
        </member>
        <member name="F:Stemmer.Cvb.Angle.Zero">
            <summary>
            Zero element.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.AngleMath">
            <summary>
            Provides trigonometry functions that work with Angle objects.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Abs(Stemmer.Cvb.Angle)">
            <summary>
            Absolute value of an angle
            </summary>
            <param name="a">Angle</param>
            <returns>Absolute value</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Acos(System.Double)">
            <summary>
            Returns the angle whose cosine is the specified number.
            </summary>
            <param name="d">Cosine</param>
            <returns>Angle</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Asin(System.Double)">
            <summary>
            Returns the angle whose sine is the specified number.
            </summary>
            <param name="d">Sine</param>
            <returns>Angle</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Atan(System.Double)">
            <summary>
            Returns the angle whose tangent is the specified number.
            </summary>
            <param name="d">Tangent</param>
            <returns>Angle</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Atan2(System.Double,System.Double)">
            <summary>
            Returns the angle whose tangent is the quotient of two specified
            numbers.
            </summary>
            <param name="x">X parameter</param>
            <param name="y">Y parameter</param>
            <returns>Angle</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Cos(Stemmer.Cvb.Angle)">
            <summary>
            Returns the cosine of an angle.
            </summary>
            <param name="a">Angle</param>
            <returns>Cosine</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Cosh(Stemmer.Cvb.Angle)">
            <summary>
            Returns the hyperbolic cosine of an angle.
            </summary>
            <param name="a">Angle</param>
            <returns>Cosine</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Max(Stemmer.Cvb.Angle,Stemmer.Cvb.Angle)">
            <summary>
            Returns the bigger of two angles.
            </summary>
            <param name="a">Angle</param>
            <param name="b">Angle</param>
            <returns>Biggest angle</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Min(Stemmer.Cvb.Angle,Stemmer.Cvb.Angle)">
            <summary>
            Returns the smaller of two angles.
            </summary>
            <param name="a">Angle</param>
            <param name="b">Angle</param>
            <returns>Smallest angle</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Sign(Stemmer.Cvb.Angle)">
            <summary>
            Returns a value indicating the sign of an Angle.
            </summary>
            <param name="a">Sngle</param>
            <returns>-1 if angle is less than zero, 0 if angle is zero, 1 if
            angle is greater than zero.</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Sin(Stemmer.Cvb.Angle)">
            <summary>
            Returns the sine of an angle.
            </summary>
            <param name="a">Angle</param>
            <returns>Sine</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Sinh(Stemmer.Cvb.Angle)">
            <summary>
            Returns the hyperbolic sine of an angle.
            </summary>
            <param name="a">Angle</param>
            <returns>Sine</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Tan(Stemmer.Cvb.Angle)">
            <summary>
            Returns the tangent of an angle.
            </summary>
            <param name="a">Angle</param>
            <returns>Tangent</returns>
        </member>
        <member name="M:Stemmer.Cvb.AngleMath.Tanh(Stemmer.Cvb.Angle)">
            <summary>
            Returns the hyperbolic tangent of an angle.
            </summary>
            <param name="a">Angle</param>
            <returns>Tangent</returns>
        </member>
        <member name="T:Stemmer.Cvb.CoordinateSystemType">
            <summary>
            Enumeration of the different available coordinate systems that an Area
            of interest may be defined in.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.CoordinateSystemType.PixelCoordinates">
            <summary>
            Pixel coordinates are defined as follows:
            <list type="bullet">
            <item>The distance from one pixel to the next in horizontal or 
            vertical direction has a length of 1</item>
            <item>The origin (0,0) is located in the top left corner of the image
            </item>
            <item>The positive x axis points right, the positive y axis points 
            down</item>
            </list>
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.CoordinateSystemType.ImageCoordinates">
            <summary>
            The image coordinate system is defined by the 
            <see cref="P:Stemmer.Cvb.Image.CoordinateSystem"/> property of the image and 
            specifies an affine linear transformation from the pixel coordinate 
            system to the image coordinate system. It is a right handed coordinate 
            system: the positive y axis points "down", the  positive x axis points 
            right.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.IAreaOfInterest">
            <summary>
            Base Interface for all areas of interest
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.IAreaOfInterest.CoordinateSystem">
            <summary>
            Implementers of this interface should specify here inside which 
            coordinate system their Area of interest is to operate. 
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.IAreaOfInterest.Area">
            <summary>
            Size (in pixels) of the Area of interest
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Async.AcquisitionExtensions">
            <summary>
            Async wrapper methods for <see cref="T:Stemmer.Cvb.Driver.IAcquisition"/> objects.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Async.AcquisitionExtensions.Manager">
            <summary>
            The task pool for CVB input wait methods.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.#cctor">
            <summary>
            Initializes the async manger to manage async operations.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.GetSnapshotAsync(Stemmer.Cvb.Driver.IAcquisition)">
            <summary>
            Acquires a single image and returns it.
            </summary>
            <remarks>
            <para>
            The task waits infinitely for the image to be taken.
            </para><para>
            <c>Attention:</c> it is generally not possible to call this method
            while the acquisition has been started by 
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Start"/>.
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.GetSnapshot"/> directly.
            </para>
            </remarks>
            <param name="acq">Stream to work on.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.GetTimedSnapshotAsync(Stemmer.Cvb.Driver.IAcquisition,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Acquires a single image and returns it.
            </summary>
            <remarks>
            <para>
            Waits for the given <paramref name="timeSpan"/> for the image to be 
            taken.
            </para><para>
            <c>Attention:</c> it is generally not possible to call this method
            while the acquisition has been started by 
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Start"/>.
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.GetTimedSnapshot(Stemmer.Cvb.Utilities.UsTimeSpan)"/> directly.
            </para>
            </remarks>
            <param name="acq">Stream to work on.</param>
            <param name="timeSpan">Time span to wait for (millisecond granularity).
            </param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitAsync(Stemmer.Cvb.Driver.IAcquisition)">
            <summary>
            Waits infinitely for the next acquired image and returns it.
            </summary>
            <remarks>
            <para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> directly.
            </para>
            </remarks>
            <param name="acq">Stream to work on.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitAsync(Stemmer.Cvb.Driver.ImageStream)">
            <summary>
            Waits infinitely for the next acquired image and returns it.
            </summary>
            <remarks>
            <para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Driver.MultiPartImage"/> when not needed anymore!
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.ImageStream.Wait"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitAsync(Stemmer.Cvb.Driver.ImageStream,System.Threading.CancellationToken)">
            <summary>
            Waits for the next acquired image and returns it, abortable by the cancellation token.
            </summary>
            <remarks>
            <para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Driver.MultiPartImage"/> when not needed anymore!
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.ImageStream.Wait"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <param name="cancellationToken">Token to cancel the wait.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitAsync(Stemmer.Cvb.Driver.PointCloudStream)">
            <summary>
            Waits infinitely for the next acquired point cloud and returns it.
            </summary>
            <remarks>
            <para>
            Dispose the returned <see cref="T:Stemmer.Cvb.PointCloud"/> when not needed anymore!
            </para><para>
            The returned point cloud is not necessary the newest. If more point clouds where
            acquired since the last call to this method, the content is the oldest
            not collected point cloud buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.PointCloudStream.Wait"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitAsync(Stemmer.Cvb.Driver.PointCloudStream,System.Threading.CancellationToken)">
            <summary>
            Waits for the next acquired point cloud and returns it, abortable by the cancellation token.
            </summary>
            <remarks>
            <para>
            Dispose the returned <see cref="T:Stemmer.Cvb.PointCloud"/> when not needed anymore!
            </para><para>
            The returned point cloud is not necessary the newest. If more point clouds where
            acquired since the last call to this method, the content is the oldest
            not collected point cloud buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.PointCloudStream.Wait"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <param name="cancellationToken">Token to cancel the wait.</param>
            <returns>Task to contain the grabbed point cloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitAsync(Stemmer.Cvb.Driver.CompositeStream)">
            <summary>
            Waits infinitely for the next acquired composite and returns it.
            </summary>
            <remarks>
            <para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Composite"/> when not needed anymore!
            </para><para>
            The returned composite is not necessary the newest. If more point clouds where
            acquired since the last call to this method, the content is the oldest
            not collected composite buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.CompositeStream.Wait"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitAsync(Stemmer.Cvb.Driver.CompositeStream,System.Threading.CancellationToken)">
            <summary>
            Waits for the next acquired composite and returns it, abortable by the cancellation token.
            </summary>
            <remarks>
            <para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Composite"/> when not needed anymore!
            </para><para>
            The returned composite is not necessary the newest. If more point clouds where
            acquired since the last call to this method, the content is the oldest
            not collected composite buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.CompositeStream.Wait"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <param name="cancellationToken">Token to cancel the wait.</param>
            <returns>Task to contain the grabbed composite.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitForAsync(Stemmer.Cvb.Driver.IAcquisition,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Waits for the given <paramref name="timeSpan"/> for the next acquired
            image.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)"/> directly.
            </para>
            </remarks>
            <param name="acq">Stream to work on.</param>
            <param name="timeSpan">Time span to wait for (millisecond granularity).
            </param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitForAsync(Stemmer.Cvb.Driver.ImageStream,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Waits for the given <paramref name="timeout"/> for the next acquired
            image.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Driver.MultiPartImage"/> when not needed anymore!
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.ImageStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <param name="timeout">Time to wait before timeout.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitForAsync(Stemmer.Cvb.Driver.ImageStream,Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits for the given <paramref name="timeout"/> for the next acquired
            image.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Driver.MultiPartImage"/> when not needed anymore!
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.ImageStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="cancellationToken">Token to cancel the wait.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitForAsync(Stemmer.Cvb.Driver.PointCloudStream,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Waits for the given <paramref name="timeout"/> for the next acquired
            point cloud.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.PointCloud"/> when not needed anymore!
            </para><para>
            The returned point cloud is not necessary the newest. If more point clouds where
            acquired since the last call to this method, the content is the oldest
            not collected point cloud buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.PointCloudStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <param name="timeout">Time to wait before timeout.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitForAsync(Stemmer.Cvb.Driver.PointCloudStream,Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits for the given <paramref name="timeout"/> for the next acquired
            point cloud.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.PointCloud"/> when not needed anymore!
            </para><para>
            The returned point cloud is not necessary the newest. If more point clouds where
            acquired since the last call to this method, the content is the oldest
            not collected point cloud buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.PointCloudStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="cancellationToken">Token to cancel the wait.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitForAsync(Stemmer.Cvb.Driver.CompositeStream,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Waits for the given <paramref name="timeout"/> for the next acquired
            composite.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Composite"/> when not needed anymore!
            </para><para>
            The returned composite is not necessary the newest. If more point clouds where
            acquired since the last call to this method, the content is the oldest
            not collected composite buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.CompositeStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <param name="timeout">Time to wait before timeout.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.WaitForAsync(Stemmer.Cvb.Driver.CompositeStream,Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits for the given <paramref name="timeout"/> for the next acquired
            composite.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Composite"/> when not needed anymore!
            </para><para>
            The returned composite is not necessary the newest. If more point clouds where
            acquired since the last call to this method, the content is the oldest
            not collected composite buffer by default.
            </para><para>
            This method uses an asynchronous wrapper to make asynchronous handling 
            easier with the CVB acquisition engine. As a side effect using this
            interface is not as efficient as calling 
            <see cref="M:Stemmer.Cvb.Driver.CompositeStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)"/> directly.
            </para>
            </remarks>
            <param name="stream">Stream to work on.</param>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="cancellationToken">Token to cancel the wait.</param>
            <returns>Task to contain the grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.RunAsync``1(System.Func{``0})">
            Strategy method to report back on calling thread if possible
        </member>
        <member name="M:Stemmer.Cvb.Async.AcquisitionExtensions.RunAsync``1(System.Func{Stemmer.Cvb.Ref{System.Boolean},``0})">
            Strategy method to report back on calling thread if possible and 
            supporting cancellation
        </member>
        <member name="T:Stemmer.Cvb.Async.NamespaceDoc">
             <summary>
             The namespace <c>Stemmer.Cvb.Async</c> contains extension methods for
             <see cref="T:Stemmer.Cvb.Driver.IAcquisition"/> types (like <see cref="T:Stemmer.Cvb.Device"/>
             <see cref="T:Stemmer.Cvb.Driver.Stream"/>s) to use it with 
             <see langword="async"/>/<see langword="await"/>.
             </summary>
             <example>
             To be able to use the async variants you need to use the this namespace:
             <code>
             using Stemmer.Cvb;
             using Stemmer.Cvb.Driver
            
             using Stemmer.Cvb.Async;
              
             static class Example
             {
               public static async Task Acquire10Images(Stream stream)
               {
                 stream.Start();
                 try
                 {
                   for (int i = 0; i &lt; 10; i++)
                   {
                     using (StreamImage image = await stream.WaitAsync())
                     {
                       // do processing...
                     }
                   }
                 }
                 finally
                 {
                   stream.Abort(); // ensure state after leaving method
                 }
               }
             }
             </code>
             </example>
        </member>
        <member name="T:Stemmer.Cvb.AtCalibrator3D">
            <summary>
            Calibrator to create point clouds from Automation Technologies cameras.
            </summary>
            <remarks>
            Can only be created via <see cref="M:Stemmer.Cvb.Calibrator3D.FromFile(System.String)"/>.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.AtCalibrator3D.SensorRoi">
            <summary>
            Sensor ROI.
            </summary>
            <remarks>
            Parameter sensor size must be available in this calibrator in order to 
            check the validity of the sensor ROI. A valid sensor ROI has to meet
            the following constraints:
            <list type="bullet">
            <item>left and top must be equal or greater zero</item>
            <item>left and top must be smaller than the sensor size</item>
            <item>difference between width and left must be equal or smaller than 
            the width of the sensor(same for height and top</item>
            </list>
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.AtCalibrator3D.YFactor">
            <summary>
            Factor that is multiplied to the Y component.
            </summary>
            <remarks>Is stored under cx3d.extrinsic.Sy in the xml file.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.AtCalibrator3D.ZFactor">
            <summary>
            Factor that is multiplied to the Z component.
            </summary>
            <remarks>
            Is stored under cx3d.intrinsic.rangeScale in the xml file.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.SortDirection">
            <summary>
            Sort directions as used by the IResultSortable interface.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.SortDirection.Ascending">
            <summary>
            Sort from smallest to largest.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.SortDirection.Descending">
            <summary>
            Sort from largest to smallest
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.SortStatus">
            <summary>
            Sort status of a collection.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.SortStatus.Sorted">
            <summary>
            Collection is sorted.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.SortStatus.Unsorted">
            <summary>
            Collection is not sorted.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.CollectionExtensions">
            <summary>
            Extension methods for use with generic collections
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.CollectionExtensions.INamedSortDirectionDefault">
            <summary>
            Default sort direction commonly used for INamed objects.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.CollectionExtensions.IQualifiedSortDirectionDefault">
            <summary>
            Default sort direction commonly used for IQualified objects.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.CollectionExtensions.ISizedSortDirectionDefault">
            <summary>
            Default sort direction commonly used for ISized objects.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.CollectionExtensions.IScaledSortDirectionDefault">
            <summary>
            Default sort direction commonly used for IScaled objects.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.CollectionExtensions.IRotatedSortDirectionDefault">
            <summary>
            Default sort direction commonly used for IRotated objects.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.CollectionExtensions.ByDistanceSortDirectionDefault">
            <summary>
            Default sort direction commonly used for IPosition objects.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByName``1(System.Collections.Generic.IEnumerable{``0},Stemmer.Cvb.Collections.Generic.SortDirection)">
            <summary>
            Sort a list of named objects by the objects names.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">collection to be sorted</param>
            <param name="direction">sort order</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByName``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sort a list of named objects by the objects names.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">list to be sorted</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.AsString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert a list of named object into a string (useful for example with
            the Minos classifier's 'Read' method).
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="coll"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.Threshold``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Remove all values in a collection that lies below a threshold.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">list to be thresholded</param>
            <param name="threshold">threshold to apply</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.ThresholdAbsolute``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Remove all values in a collection that lies below a threshold.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">list to be thresholded</param>
            <param name="threshold">threshold to apply</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByQuality``1(System.Collections.Generic.IEnumerable{``0},Stemmer.Cvb.Collections.Generic.SortDirection)">
            <summary>
            Sort a list of qualified objects by the objects qualities.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">collection to be sorted</param>
            <param name="direction">sort order</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByQuality``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sort a list of qualified objects by the objects qualities.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">collection to be sorted</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByAbsoluteQuality``1(System.Collections.Generic.IEnumerable{``0},Stemmer.Cvb.Collections.Generic.SortDirection)">
            <summary>
            Sort by absolute quality values (may be useful where qualities can
            be negative like e.g. with the Edge tool, where in some search modes
            the sign of the quality indicates the edge polarity).
            </summary>
            <typeparam name="TObject">object tyle</typeparam>
            <param name="coll">collection to be sorted</param>
            <param name="direction">sort order</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByAbsoluteQuality``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sort a list of qualified objects by the objects qualities.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">collection to be sorted</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortBySize``1(System.Collections.Generic.IEnumerable{``0},Stemmer.Cvb.Collections.Generic.SortDirection)">
            <summary>
            Sort a list of sized objects by the objects qualities.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">collection to be sorted</param>
            <param name="direction">sort order</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortBySize``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sort a list of sized objects by the objects qualities.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">collection to be sorted</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByRotation``1(System.Collections.Generic.IEnumerable{``0},Stemmer.Cvb.Collections.Generic.SortDirection)">
            <summary>
            Sort a list of rotated objects by the objects qualities.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">collection to be sorted</param>
            <param name="direction">sort order</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByRotation``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sort a list of rotated objects by the objects qualities.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">collection to be sorted</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByScale``1(System.Collections.Generic.IEnumerable{``0},Stemmer.Cvb.Collections.Generic.SortDirection)">
            <summary>
            Sort a list of scaled objects by the objects qualities.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">collection to be sorted</param>
            <param name="direction">sort order</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByScale``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sort a list of scaled objects by the objects qualities.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="coll">collection to be sorted</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.GetCenter``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calculate the center of gravity over a list of position objects.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="list">list to calculate on</param>
            <returns>the list's center position</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByPosition``1(System.Collections.Generic.IEnumerable{``0},Stemmer.Cvb.IPosition)">
            <summary>
            Sort a list of position objects by their sortDirection to a sort 
            direction.
            </summary>
            <typeparam name="TObject">object type</typeparam>
            <param name="list">list to be sorted</param>
            <param name="sortDirection">vector that gives the direction in which
            to order the objects</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByDistance``1(System.Collections.Generic.IEnumerable{``0},Stemmer.Cvb.IPosition,Stemmer.Cvb.Collections.Generic.SortDirection)">
            <summary>
            Sort a list of positions according to their distances from a sort
            center.
            </summary>
            <typeparam name="TObject">type of object to be sorted</typeparam>
            <param name="coll">collection to be sorted</param>
            <param name="sortCenter">center around which to sort</param>
            <param name="sortDirection">sort direction</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SortByDistance``1(System.Collections.Generic.IEnumerable{``0},Stemmer.Cvb.IPosition)">
            <summary>
            Sort a list of position according to their distances form a sort 
            center.
            </summary>
            <typeparam name="TObject">type of object to be sorted</typeparam>
            <param name="coll">collection to be sorted</param>
            <param name="sortCenter">center around which to sort</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SeparateByQuality``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Makes sure the results in this list are separated by at least 
            <paramref name="locality"/> pixels (measured using the L1 norm). The
            separations is being carried out as follows:
            <list type="number">
            <item>First of all the list of results will be sorted by descending
            quality</item>
            <item>Then the list will iterated from the element with the highest
            quality to the element with the lowest quality</item>
            <item>For each element being iterated the distance to all subsequent
            list elements (i.e. those list elements with a lower quality) will
            be calculated; if it is less than the locality parameter, the element
            with the lower quality will be eliminated from the list</item>
            </list>
            </summary>
            <typeparam name="TObject">type of the result comparable objects to
            be separated</typeparam>
            <param name="coll">collection to which to apply the separation</param>
            <param name="locality">minimum distance between two results
            (must be > 0)</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SeparatePositions``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Makes sure the results in this list are separated by at least 
            <paramref name="locality"/> pixels (measured using the L1 norm). The
            separations is being carried out as follows:
            <list type="number">
            <item>It is assumed that the list is already sorted "best to worst"
            according to whatever criterion is suitable</item>
            <item>Then the list will iterated from the first element 
            to the last element </item>
            <item>For each element being iterated the distance to all subsequent
            list elements (i.e. those list elements with a lower quality) will
            be calculated; if it is less than the locality parameter, the element
            that came last will be eliminated from the list</item>
            </list>
            </summary>
            <typeparam name="TObject">type of the result comparable objects to
            be separated</typeparam>
            <param name="coll">collection to which to apply the separation</param>
            <param name="locality">minimum distance between two results
            (must be > 0)</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.SeparateBySize``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Makes sure the results in this list are separated by at least 
            <paramref name="locality"/> pixels (measured using the L1 norm). The
            separations is being carried out as follows:
            <list type="number">
            <item>First of all the list of results will be sorted by descending
            quality</item>
            <item>Then the list will iterated from the element with the highest
            quality to the element with the lowest quality</item>
            <item>For each element being iterated the distance to all subsequent
            list elements (i.e. those list elements with a lower quality) will
            be calculated; if it is less than the locality parameter, the element
            with the lower quality will be eliminated from the list</item>
            </list>
            </summary>
            <typeparam name="TObject">type of the result comparable objects to
            be separated</typeparam>
            <param name="coll">collection to which to apply the separation</param>
            <param name="locality">minimum distance between two results
            (must be > 0)</param>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.FindQuantil(System.Collections.Generic.IEnumerable{System.Double},System.Double)">
            <summary>
            Find the Quantile defined by <paramref name="p"/>.
            </summary>
            <param name="en">Collection on which to find.</param>
            <param name="p">quantile to find</param>
            <returns>quantil</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.FindQuantil(System.Collections.Generic.IEnumerable{System.Double},System.Double,Stemmer.Cvb.Collections.Generic.SortStatus)">
            <summary>
            Find the Quantile defined by <paramref name="p"/>.
            </summary>
            <param name="en">Collection on which to find.</param>
            <param name="p">quantile to find</param>
            <param name="sorted">Specifies whether <paramref name="en"/> is
            sorted.</param>
            <returns>quantil</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CollectionExtensions.Swap``1(``0[],System.Int32,System.Int32)">
            <summary>
            Swap two elements of an array
            </summary>
            <typeparam name="TValue">type of the elements stored in the array
            </typeparam>
            <param name="arr">the array to attach the extension method to</param>
            <param name="index1">element one to swap</param>
            <param name="index2">element two to swap</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="index1"/> or <paramref name="index2"/> is either less
            than 0 or greater than the length of the array</exception>
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.CompareByPosition">
            <summary>
            Sorter object that sorts collections of <see cref="T:Stemmer.Cvb.IPosition"/> objects
            based on the projection of their position onto a sort direction. By
            modifying the sort direction you can effectively e.g. sort left to 
            right (1, 0) or top to bottom (0, 1), etc...
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CompareByPosition.#ctor(Stemmer.Cvb.IPosition)">
            <summary>
            Constructor for a directional sorting comparer.
            </summary>
            <param name="sortDirection">sort direction for projection</param>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.CompareByPosition.SortDirection">
            <summary>
            Sort direction to be used for projecting the objects to be sorted.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.CompareByPosition.Compare(Stemmer.Cvb.IPosition,Stemmer.Cvb.IPosition)">
            <summary>
            IComparer implementation.
            </summary>
            <param name="a">fist object for comparison</param>
            <param name="b">second object for comparison</param>
            <returns>
            <list type="table">
              <listheader>
                <term>value</term>
                <description>meaning</description>
              </listheader>
              <item>
                <term>1</term>
                <description>if the projection (inner product) of
                (<paramref name="a"/> - <paramref name="b"/>) on the 
                <see cref="P:Stemmer.Cvb.Collections.Generic.CompareByPosition.SortDirection"/></description> is positive.
              </item>
              <item>
                <term>0</term>
                <description>if the projection (inner product) of
                (<paramref name="a"/> - <paramref name="b"/>) on the 
                <see cref="P:Stemmer.Cvb.Collections.Generic.CompareByPosition.SortDirection"/></description> is zero.
              </item>
              <item>
                <term>-1</term>
                <description>if the projection (inner product) of
                (<paramref name="a"/> - <paramref name="b"/>) on the 
                <see cref="P:Stemmer.Cvb.Collections.Generic.CompareByPosition.SortDirection"/></description> is negative.
              </item>
            </list>
            </returns>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.CompareByPosition.LeftToRight">
            <summary>
            Sort direction that sorts left to right.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.CompareByPosition.RightToLeft">
            <summary>
            Sort direction that sorts right to left.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.CompareByPosition.TopToBottom">
            <summary>
            Sort direction that sorts top to bottom.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.CompareByPosition.BottomToTop">
            <summary>
            Sort direction that sorts bottom to top.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.LicenseCollectionExtensions">
            <summary>
            Extension methods for use with generic collections of license 
            information.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.LicenseCollectionExtensions.IsSerialNumberAvailable(System.Collections.Generic.ICollection{Stemmer.Cvb.Utilities.LicenseInfo},System.Int32)">
            <summary>
            Check whether at least one license with the given
            <paramref name="serialNumber"/> is available on this system.
            </summary>
            <param name="list">collection to check</param>
            <param name="serialNumber">serial number to check for</param>
            <returns><code>true</code> if the given <paramref name="serialNumber"/> is 
            available, <code>false</code> otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.LicenseCollectionExtensions.IsFoundationLicenseAvailable(System.Collections.Generic.ICollection{Stemmer.Cvb.Utilities.LicenseInfo})">
            <summary>
            Check whether at least one license for the foundation package
            is available on this system.
            </summary>
            <param name="list">collection to check</param>
            <returns><code>true</code> if the collection contains at least one
            license for the Foundation package</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.LicenseCollectionExtensions.IsMagicNumberAvailable(System.Collections.Generic.ICollection{Stemmer.Cvb.Utilities.MagicNumberEntry},System.String,System.Boolean)">
            <summary>
            Check whether at least one Magic Number is available for the given
            <paramref name="toolID"/>.
            </summary>
            <param name="list">collection to check</param>
            <param name="toolID">tool ID to check for</param>
            <param name="ignoreTrialLicenses">set to <code>true</code> to 
            ignore all Magic Numbers that are reported for serial number 999
            (which corresponds to the trial licenses; Magic Numbers for the
            trial licenses are always available if the tool is provided by
            STEMMER IMAGING).</param>
            <returns><code>true</code> if at least one Magic Number entry was 
            found that matches the criteria, <code>false</code> otherwise
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.LicenseCollectionExtensions.IsMagicNumberAvailable(System.Collections.Generic.ICollection{Stemmer.Cvb.Utilities.MagicNumberEntry},System.String)">
            <summary>
            Check whether at least one Magic Number is available for the given
            <paramref name="toolID"/>.
            </summary>
            <param name="list">collection to check</param>
            <param name="toolID">tool ID to check for</param>
            <returns><code>true</code> if at least one Magic Number entry was 
            found that matches the criteria, <code>false</code> otherwise
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.ReadOnlyCollection`1">
            <summary>
            Read-only, generic collection of elements.
            </summary>
            <remarks>
            <para>
            This class wraps another collection as a read-only view on it.
            </para><para>
            This implementation is needed as this is only present in .Net 4.5 and
            above.
            </para>
            </remarks>
            <typeparam name="T">Type of elements in this collection.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Creates a new <b>ReadOnlyCollection</b> wrapping the given 
            <paramref name="collection"/>.
            </summary>
            <param name="collection">Collection to wrap.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="collection"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.ReadOnlyCollection`1.Items">
            <summary>
            Gets the collection this <b>ReadOnlyCollection</b> wraps.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.ReadOnlyCollection`1.Count">
            <summary>
            Gets the number of items in this collection.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyCollection`1.Contains(`0)">
            <summary>
            Determines whether the <paramref name="item"/> is in this collection.
            </summary>
            <param name="item">Item to locate; may be <see langword="null"/>.</param>
            <returns><b>true</b> if <paramref name="item"/> could be located;
            <b>false</b> if not.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional 
            <paramref name="array"/>, starting at the specified 
            <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">Zero-based index at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in this collection is greater than the available
            space in <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionary`2">
            <summary>
            Read-only, generic collection of key/value pairs.
            </summary>
            <remarks>
            <para>
            This class wraps another dictionary as a read-only view on it.
            </para>
            </remarks>
            <typeparam name="TKey">Type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">Type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a new <b>ReadOnlyDictionary</b> wrapping the given 
            <paramref name="dictionary"/>.
            </summary>
            <param name="dictionary">Dictionary to wrap.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionary`2.Dictionary">
            <summary>
            Gets the wrapped dictionary.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2">
            <summary>
            Base class for read-only, generic collection of key/value pairs.
            </summary>
            <remarks>
            <para>
            This class wraps another dictionary as a read-only view on it.
            </para>
            </remarks>
            <typeparam name="TKey">Type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">Type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Creates a new <b>ReadOnlyDictionary</b> wrapping the given 
            <paramref name="dictionary"/>.
            </summary>
            <param name="dictionary">Dictionary to wrap.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="dictionary"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.Dictionary">
            <summary>
            Gets the wrapped dictionary.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.Item(`0)">
            <summary>
            Gets the element that has the specified <paramref name="key"/>.
            </summary>
            <param name="key">Key of element to get.</param>
            <returns>
            Element that has the specified <paramref name="key"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="key"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            <paramref name="key"/> is not found.
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.Count">
            <summary>
            Gets the number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.Keys">
            <summary>
            Gets a read-only collection of all keys in this dictionary.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.Values">
            <summary>
            Gets a read-only collection of all values in this dictionary.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.ContainsKey(`0)">
            <summary>
            Determines whether the <paramref name="key"/> is in this collection.
            </summary>
            <param name="key">Key of element to locate.</param>
            <returns><b>true</b> if <paramref name="key"/> could be located;
            <b>false</b> if not.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            Retrieves the value that is associated with the specific 
            <paramref name="key"/>.
            </summary>
            <param name="key">Key whose value will be retrieved.</param>
            <param name="value">Variable to be assigned with the object of the
            specified <paramref name="key"/>, if the <paramref name="key"/> is 
            found. Otherwise the default value of <c>TValue</c> is assigned.
            </param>
            <returns><b>true</b> if this collection contains the specified 
            <paramref name="key"/>; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <paramref name="item"/> is in this collection.
            </summary>
            <param name="item">Key/value pair to locate.</param>
            <returns><b>true</b> if <paramref name="item"/> could be located;
            <b>false</b> if not.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional 
            <paramref name="array"/>, starting at the specified 
            <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">Destination array.</param>
            <param name="arrayIndex">Zero-based index at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in this collection is greater than the available
            space in <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.ReadOnlyDictionaryBase`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns>Enumerator object.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Collections.Generic</c> contains type
            definitions that make working with generic containers from 
            <c>System.Collections.Generic</c> that hold objects specific to 
            Common Vision Blox easier.
            </summary>  
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.InformationCollectionDebugView`1">
            <summary>
            Debug view for the information collection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.InformationCollectionDebugView`1._enumerable">
            <summary>
            Reference to the collection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.InformationCollectionDebugView`1.Items">
            <summary>
            This items of the collection as an array.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.InformationCollectionDebugView`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Ctor.
            </summary>
            <param name="collection">Collection to view.</param>
        </member>
        <member name="T:Stemmer.Cvb.Collections.Generic.InfoCollection`2">
            <summary>
            Generic collection of information objects.
            </summary>
            <typeparam name="TInfo">Type of the information container.</typeparam>
            <typeparam name="TParent">Type of the collection parent.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.InfoCollection`2.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The parent object.</param>
        </member>
        <member name="P:Stemmer.Cvb.Collections.Generic.InfoCollection`2.Count">
            <summary>
            Number of elements in the collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent object has 
            already been disposed of</exception>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.InfoCollection`2.GetCount">
            <summary>
            Function with which the collection queries the number of elements
            </summary>
            <returns>The number of entries in the collection.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.InfoCollection`2.GetInfo(System.Int32)">
            <summary>
            Function with which the collection retrieves the information object 
            with the given index.
            </summary>
            <param name="index">Index at which to retrieve</param>
            <returns>retrieved object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the index exceeds the
            range [0...Count[.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.InfoCollection`2.ToArray">
            <summary>
            Converts this collection into an array.
            </summary>
            <returns>Array containing the members of this collection.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.InfoCollection`2.System#Collections#Generic#IEnumerable{TInfo}#GetEnumerator">
            <summary>
            Provides the enumerator for plane information access.
            </summary>
            <returns>Enumerator</returns>
            <exception cref="T:System.ObjectDisposedException">If the parent image has 
            already been disposed of</exception>
            <returns><see cref="T:System.Collections.Generic.IEnumerator`1"/> for this collection.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Collections.Generic.InfoCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provides the enumerator for type-unsafe information access.
            </summary>
            <returns><see cref="T:System.Collections.IEnumerator"/> for this collection.</returns>
        </member>
        <member name="F:Stemmer.Cvb.Collections.Generic.InfoCollection`2.Parent">
            <summary>
            Parent image reference helps keeping track of the lifetime and 
            provides the information basis for index access
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.CompositePurpose">
            <summary>
            Purpose of a <see cref="T:Stemmer.Cvb.Composite"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.CompositePurpose.Custom">
            <summary>
            Custom composite.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.CompositePurpose.Image">
            <summary>
            One image with extra data.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.CompositePurpose.ImageList">
            <summary>
            Multiple images grouped together.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.CompositePurpose.MultiAoi">
            <summary>
            Multiple images that represent multiple AOIs in one frame.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.CompositePurpose.RangeMap">
            <summary>
            A 2 1/2d image with extra data.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.CompositePurpose.PointCloud">
            <summary>
            3D data with possible extra data.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.CompositePurpose.ImageCube">
            <summary>
            A(n) (hyper spectral) image cube.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.CompositeDebugView">
            <summary>
            Debug view on composite.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.CompositeDebugView.#ctor(Stemmer.Cvb.Composite)">
            <summary>
            Wraps the composite.
            </summary>
            <param name="composite"></param>
        </member>
        <member name="P:Stemmer.Cvb.CompositeDebugView.Purpose">
            <summary>
            Gets the composite's purpose.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.CompositeDebugView.Items">
            <summary>
            Gets all entries.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Composite">
            <summary>
            Aggregates multiple CVB objects under a common 
            <see cref="P:Stemmer.Cvb.Composite.Purpose"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Composite.#ctor(Stemmer.Cvb.CompositePurpose)">
            <summary>
            Creates a new <b>Composite</b> with the given <paramref name="purpose"/>.
            </summary>
            <param name="purpose">Purpose of this composite.</param>
        </member>
        <member name="M:Stemmer.Cvb.Composite.FromObject(Stemmer.Cvb.INativeHandle)">
            <summary>
            Create a composite object from another <paramref name="obj"/>.
            </summary>
            <param name="obj">Object to interpret as composite.</param>
            <returns>Newly created wrapper object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Composite.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Create a composite object from a <paramref name="handle"/>.
            </summary>
            <param name="handle">Native <c>IBuffer</c> handle.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if handle should be shared.</param>
            <returns>Newly created wrapper object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Composite.#ctor(System.IntPtr)">
            <summary>
            Create a composite object from a <paramref name="handle"/>.
            </summary>
            <param name="handle">Native <c>IBuffer</c> handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Composite.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Composite.Handle">
            <summary>
            Native CVB buffer handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Composite.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Composite.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Composite.Dispose">
            <summary>
            Disposes of this composite and its aggregated objects.
            </summary>
            <remark>Call this method to release the resources allocated by this
            buffer immediately. Remember that after calling Dispose, any subsequent
            access to references to this buffer will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Composite.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Composite.Purpose">
            <summary>
            Get the <see cref="T:Stemmer.Cvb.CompositePurpose"/> of this object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Composite.Count">
            <summary>
            Get the number of elements in this collection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Composite.Item(System.Int32)">
            <summary>
            Gets/sets the element at the given <paramref name="index"/>.
            </summary>
            <param name="index">Element index.</param>
            <returns>The element at the given <paramref name="index"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Composite.IndexOf(Stemmer.Cvb.INativeHandle)">
            <summary>
            Finds the given <paramref name="item"/> and returns its index.
            </summary>
            <param name="item">Item to find.</param>
            <returns>Index of item; -1 if not found.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Composite.Insert(System.Int32,Stemmer.Cvb.INativeHandle)">
            <summary>
            Inserts an <paramref name="item"/> at the given <paramref name="index"/>.
            </summary>
            <remarks>
            If the <paramref name="index"/> is set to <see cref="P:Stemmer.Cvb.Composite.Count"/>, 
            <paramref name="item"/> will be appended.
            </remarks>
            <param name="index">Index where to insert the <paramref name="item"/>.
            </param>
            <param name="item">CVB object to insert.</param>
        </member>
        <member name="M:Stemmer.Cvb.Composite.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given <paramref name="index"/>.
            </summary>
            <param name="index">Index of item to remove.</param>
        </member>
        <member name="M:Stemmer.Cvb.Composite.Add(Stemmer.Cvb.INativeHandle)">
            <summary>
            Adds the <paramref name="item"/> to the end of this collection.
            </summary>
            <param name="item">Item to append.</param>
        </member>
        <member name="M:Stemmer.Cvb.Composite.Clear">
            <summary>
            Removes all items from this collection.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Composite.Contains(Stemmer.Cvb.INativeHandle)">
            <summary>
            Determines whether this collection. 
            </summary>
            <param name="item">Item to find.</param>
            <returns><b>true</b> if <paramref name="item"/> is in this collection.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Composite.CopyTo(Stemmer.Cvb.INativeHandle[],System.Int32)">
            <summary>
            Copies the elements of this <b>PlaneEnum</b> to the given 
            <paramref name="array"/>, starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">Array to copy elements to.</param>
            <param name="arrayIndex">Start index in <paramref name="array"/>.</param>
        </member>
        <member name="M:Stemmer.Cvb.Composite.Remove(Stemmer.Cvb.INativeHandle)">
            <summary>
            Removes the first occurrence of <paramref name="item"/> from this 
            collection.
            </summary>
            <param name="item">CVB object to remove.</param>
            <returns><b>true</b> if <paramref name="item"/> was removed;
            <b>false</b> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Composite.GetEnumerator">
            <summary>
            Get the enumerator to iterate over all CVB objects.
            </summary>
            <returns>Enumerator over all CVB objects.</returns>
        </member>
        <member name="T:Stemmer.Cvb.MonochromeConversion">
            <summary>
            Options for converting to monochrome.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.MonochromeConversion.EqualWeights">
            <summary>
            give equal weights to red, green and blue while converting
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.MonochromeConversion.PerceptiveWeights">
            <summary>
            weigh the red green and blue channel with values that resemble human
            perception
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ConvertColorSpace">
            <summary>
            Simple color space conversion routines that are covered by the CVB
            Image Manager license. 
            </summary>
            <remarks>
            For more sophisticated functions have a look at 
            <c>Stemmer.Cvb.Foundation.ConvertColorSpace</c>.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.ConvertColorSpace.ToMono(Stemmer.Cvb.Image,Stemmer.Cvb.MonochromeConversion)">
            <summary>
            Convert the input image to mono. The input image needs to have three
            planes, and is then assumed to be an RGB image. 
            </summary>
            <param name="img">image to be converted</param>
            <param name="conversion">weighting method to apply</param>
            <returns>Converted image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.ConvertColorSpace.ToMono(Stemmer.Cvb.Image)">
            <summary>
            Convert the input image to mono. The input image needs to have three
            planes, and is then assumed to be an RGB image. 
            </summary>
            <param name="img">Image to be converted.</param>
            <returns>Converted image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.ConvertColorSpace.ToMono(Stemmer.Cvb.Image,System.Double,System.Double,System.Double)">
            <summary>
            Convert the input image to mono. The input image needs to have three
            planes, and is then assumed to be an RGB image. 
            </summary>
            <param name="img">Image to be converted.</param>
            <param name="weightR">Weight for the red channel.</param>
            <param name="weightG">Weight for the green channel.</param>
            <param name="weightB">Weight for the blue channel.</param>
            <returns>Converted image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.ConvertColorSpace.ToRichColorFeatures(Stemmer.Cvb.Image)">
            <summary>
            Convert the input RGB image to a color feature image that contains 
            additional planes with RG, RB, GB, RR, GG and BB (normalized to the
            value range).
            </summary>
            <param name="img">Input image. Must be RGB and have the same
            data type on each plane.</param>
            <returns>Converted image.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Calibrator3D">
            <summary>
            Object used to reconstruct point clouds.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Calibrator3D.FromFile(System.String)">
            <summary>
            Loads a 3D calibration file (ASCII string version).
            </summary>
            <param name="fileName">Full path to the file to load.</param>
            <returns>Calibrator for the loaded calibration file.</returns>
            <exception cref="T:System.ArgumentException">When the <paramref name="fileName"/> is null or empty.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When loading the <see cref="T:Stemmer.Cvb.Calibrator3D"/> from file failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Calibrator3D.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">Native handle of the calibrator.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="handle"/>
            is <see cref="F:System.IntPtr.Zero"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Calibrator3D.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.Calibrator3D"/> from a native handle and potentially
            increment the unmanaged reference count on the native handle.
            </summary>
            <remarks>
            <para>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="nativeHandle"/>
            parameter will most likely lead to severe problems in your
            application.
            </para>
            </remarks>
            <param name="nativeHandle">Handle to create the image from.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if
            <paramref name="nativeHandle"/> is to be shared.</param>
            <returns>Newly created calibrator or <see langword="null"/> of no
            object could be created.
            </returns>
        </member>
        <member name="E:Stemmer.Cvb.Calibrator3D.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Calibrator3D.Handle">
            <summary>
            Native handle of the calibrator.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Calibrator3D.IsDisposed">
            <summary>
            Gets if the native handle has been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Calibrator3D.Dispose(System.Boolean)">
            <summary>
            IDisposable helper function.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Stemmer.Cvb.Calibrator3D.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Calibrator3D.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Calibrator3D.CorrectionOfLaserPlaneInclination">
            <summary>
            Gets/sets the correction of the laser plane inclination
            (affine transformation) of the calibrator.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Calibrator3D.ExtrinsicMatrix">
            <summary>
            Gets/sets the extrinsic transformation matrix of the calibrator.
            </summary>
            <exception cref="T:Stemmer.Cvb.CvbException">When setting or getting the extrinsic matrix failed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Calibrator3D.RangeMapIgnoreValue">
            <summary>
            Gets/sets the ignore value for range maps.
            </summary>
            <remarks>
            <para>
            An value equal to this one in an input range map will have its
            confidence in the resulting point being set to 0.
            </para><para>
            If a non-<see langword="null"/> value is set the resulting point cloud
            will always have a confidence plane!
            </para>
            </remarks>
            <value>
            Value to ignore in an input range map; <see langword="null"/> if no
            values are to be ignored.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Calibrator3D.CreatePointCloud``1(Stemmer.Cvb.Image)">
            <summary>
            Creates a calibrated <see cref="T:Stemmer.Cvb.PointCloud"/> with point type <b>T</b>
            from the given <paramref name="rangeMap"/>.
            </summary>
            <typeparam name="T">Point type to create; e.g. <see cref="T:Stemmer.Cvb.Point3Dcf"/>.
            </typeparam>
            <param name="rangeMap">Range map to use.</param>
            <returns>Newly created, calibrated point cloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Calibrator3D.CreatePointCloud(Stemmer.Cvb.Image,Stemmer.Cvb.PointCloudFlags)">
            <summary>
            Creates a calibrated <see cref="T:Stemmer.Cvb.PointCloud"/> using the given
            <paramref name="rangeMap"/> and <paramref name="flags"/>.
            </summary>
            <param name="rangeMap">Range map to use.</param>
            <param name="flags">Flags used for point cloud creation.</param>
            <returns>Newly created, calibrated point cloud.</returns>
        </member>
        <member name="T:Stemmer.Cvb.ComponentsPointer3D">
            <summary>
            Point components of a point cloud.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ComponentsPointer3D.#ctor(Stemmer.Cvb.LinearPlaneAccess1D,Stemmer.Cvb.LinearPlaneAccess1D,Stemmer.Cvb.LinearPlaneAccess1D,System.Nullable{Stemmer.Cvb.LinearPlaneAccess1D},System.Nullable{Stemmer.Cvb.LinearPlaneAccess1D})">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-component.</param>
            <param name="y">Y-component.</param>
            <param name="z">Z-component.</param>
            <param name="w">W-component.</param>
            <param name="confidence">Confidence plane.</param>
        </member>
        <member name="P:Stemmer.Cvb.ComponentsPointer3D.X">
            <summary>
            X-component.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ComponentsPointer3D.Y">
            <summary>
            Y-component.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ComponentsPointer3D.Z">
            <summary>
            Z-component.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ComponentsPointer3D.W">
            <summary>
            W-component.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ComponentsPointer3D.Confidence">
            <summary>
            Confidence plane.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ComponentsPointer3D.CheckPointTypeValidity(System.Type)">
            <summary>
            Checks if the given type is a valid Point3D type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>True if the type is a valid Point3D type, false if not.</returns>
        </member>
        <member name="E:Stemmer.Cvb.CvbCancellationTokenSource.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.CvbCancellationTokenSource.Handle">
            <summary>
            Native handle of the PointCloud.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.CvbCancellationTokenSource.IsDisposed">
            <summary>
            Gets if the native handle has been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.CvbCancellationTokenSource.Dispose(System.Boolean)">
            <summary>
            IDisposable helper function.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Stemmer.Cvb.CvbCancellationTokenSource.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.CvbCancellationTokenSource.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.CvbCancellationToken.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.CvbCancellationToken.Handle">
            <summary>
            Native handle of the PointCloud.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.CvbCancellationToken.IsDisposed">
            <summary>
            Gets if the native handle has been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.CvbCancellationToken.Dispose(System.Boolean)">
            <summary>
            IDisposable helper function.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Stemmer.Cvb.CvbCancellationToken.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.CvbCancellationToken.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.DenseComponentsPointer3D`1">
            <summary>
            Generic point components of a <see cref="T:Stemmer.Cvb.DensePointCloud"/>.
            </summary>
            <typeparam name="T">Type of the points.
            Use one of the Stemmer.Cvb.Point3D types here.</typeparam>
        </member>
        <member name="F:Stemmer.Cvb.DenseComponentsPointer3D`1._getPoint">
            <summary>
            Delegate to get the point of the desired type.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DenseComponentsPointer3D`1._setPoint">
            <summary>
            Delegate to set the point of the desired type.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DenseComponentsPointer3D`1._latticeSize">
            <summary>
            The number of x,y,z(,w) point rows and columns.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.DenseComponentsPointer3D`1.#ctor(Stemmer.Cvb.LinearPlaneAccess1D,Stemmer.Cvb.LinearPlaneAccess1D,Stemmer.Cvb.LinearPlaneAccess1D,System.Nullable{Stemmer.Cvb.LinearPlaneAccess1D},System.Nullable{Stemmer.Cvb.LinearPlaneAccess1D},Stemmer.Cvb.Size2D)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-component.</param>
            <param name="y">Y-component.</param>
            <param name="z">Z-component.</param>
            <param name="w">W-component.</param>
            <param name="confidence">Confidence plane.</param>
            <param name="latticeSize">The number of x,y,z(,w) point rows and columns.</param>
        </member>
        <member name="P:Stemmer.Cvb.DenseComponentsPointer3D`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the point at the specified index.
            </summary>
            <param name="u">"X" index.</param>
            <param name="v">"Y" index.</param>
            <returns>The point at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="u"/> or <paramref name="v"/> is negative
            or bigger than the pointcloud size.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Driver.Buffer">
            <summary>
            A simple contiguous block of memory.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Buffer.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Create a buffer object from a <paramref name="handle"/>.
            </summary>
            <param name="handle">Native <c>IBuffer</c> handle.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if handle should be shared.</param>
            <returns>Newly created wrapper object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Buffer.#ctor(System.IntPtr)">
            <summary>
            Create a buffer object from a <paramref name="handle"/>.
            </summary>
            <param name="handle">Native <c>IBuffer</c> handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Buffer.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Buffer.Handle">
            <summary>
            Native CVB buffer handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Buffer.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Driver.Buffer.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Buffer.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
            <remark>Call this method to release the resources allocated by this
            buffer immediately. Remember that after calling Dispose, any subsequent
            access to references to this buffer will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Buffer.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Buffer.BasePtr">
            <summary>
            Get the base address of the buffer's memory.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Buffer.Size">
            <summary>
            Get the valid size in bytes of the buffer's memory.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Buffer.Capacity">
            <summary>
            Get the allocated size in bytes of the buffer's memory.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.CompositeStream">
            <summary>
            Stream that returns composites.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.#ctor(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="device">Parent device object</param>
            <param name="index">Index of the desired stream</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <returns>Acquired composite.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <returns>Acquired composite.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <param name="nodeMaps">NodeMaps of the returned composite.</param>
            <returns>Acquired composite.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="nodeMaps">NodeMaps of the returned composite.</param>
            <returns>Acquired composite.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <returns>Acquired composite.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <returns>Acquired composite.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <param name="nodeMaps">NodeMaps of the returned composite.</param>
            <returns>Acquired composite.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="nodeMaps">NodeMaps of the returned composite.</param>
            <returns>Acquired composite.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.Wait(Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="waitStatus">Returns status of wait</param>
            <returns>Received composite</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.Wait">
            <summary>
            Waits inifinitely
            </summary>
            <returns>Acquired Composite</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.Wait(Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="waitStatus">Returns status of wait</param>
            <param name="nodeMaps">NodeMaps of the returned composite.</param>
            <returns>Received composite</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.Wait(Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="nodeMaps">NodeMaps of the returned composite.</param>
            <returns>Received composite</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.Wait(System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="token">Token to cancel the operation</param>
            <param name="waitStatus">Returns status of wait</param>
            <returns>Received composite</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.Wait(System.Threading.CancellationToken)">
            <summary>
            Infinite wait, abortable by the cancellation token.
            </summary>
            <param name="token">Token to cancel the operation.</param>
            <returns>Received composite</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.Wait(System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="token">Token to cancel the operation</param>
            <param name="waitStatus">Returns status of wait</param>
            <param name="nodeMaps">NodeMaps of the returned composite.</param>
            <returns>Received composite</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStream.Wait(System.Threading.CancellationToken,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="token">Token to cancel the operation</param>
            <param name="nodeMaps">NodeMaps of the returned composite.</param>
            <returns>Received composite</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AcquisitionState">
            <summary>
            Specifies current state of the acquisition engine.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AcquisitionState.Stopped">
            <summary>
            The engine is stopped.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AcquisitionState.Started">
            <summary>
            The engine is started.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AcquisitionState.Stopping">
            <summary>
            The engine is in the process of stopping.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AcquisitionState.AbortingStop">
            <summary>
            THe engine is aborting an ongoing stop.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.CompositeStreamBase">
            <summary>
            Base class for streams that work with composites.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.#ctor(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="device">Parent device.</param>
            <param name="index">Index of the desired stream on this device.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.CompositeStreamBase.Parent">
            <summary>
            Gets the parent <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Driver.CompositeStreamBase.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.CompositeStreamBase.Handle">
            <summary>
            Native handle of the PointCloud.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.CompositeStreamBase.IsDisposed">
            <summary>
            Gets if the native handle has been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.Dispose(System.Boolean)">
            <summary>
            IDisposable helper function.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:Stemmer.Cvb.Driver.CompositeStreamBase.ENDLESS">
            <summary>
            Constant to use when doing endless buffer
            or frame count acquisition.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.CompositeStreamBase.INFINITY">
            <summary>
            Constant for infinite time span.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.CompositeStreamBase.NodeMaps">
            <summary>
            Gets the dictionary holding all available <see cref="T:Stemmer.Cvb.GenApi.NodeMap"/>s.
            </summary>
            <value>
            Dictionary containing all available node maps.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.Start">
            <summary>
            Starts both the engine using <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStart"/>
            and then the device using <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.DeviceStart"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.Stop">
            <summary>
            Stops both the engine using <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStart"/>
            and then the device using <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.DeviceStart"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryStop">
            <summary>
            Tries to stop the Device using <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryDeviceStop"/>
            and then the engine using <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryEngineStop"/>.
            Does not throw an exception if stopping wasn't successful.
            </summary>
            <returns>True if stopping was successful, false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.Abort">
            <summary>
            Aborts both the engine using <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStart"/>
            and then the device using <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.DeviceStart"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryAbort">
            <summary>
            Tries to abort the device using <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryDeviceAbort"/>
            and then the engine using <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryEngineAbort"/>.
            Does not throw an exception if aborting wasn't successful.
            </summary>
            <returns>True if aborting was successful, false otherwise.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.CompositeStreamBase.AcquisitionInterface">
            <summary>
            Gets the acquisition interface to use on this stream.
            Composite streams currently only support <see cref="F:Stemmer.Cvb.Driver.AcquisitionInterface.Grab3"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.CompositeStreamBase.IsIndexed">
            <summary>
            Gets if this stream is indexed (has a fixed amount of data).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.GetStreamHandleAt(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            Returns the handle of stream at index streamIndex.
            </summary>
            <param name="device"> Device object.</param>
            <param name="streamIndex"> Index of the stream.</param>
            <returns></returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.CompositeStreamBase.AcquisitionState">
            <summary>
            Current acquisition state of the stream.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStart">
            <summary>
            Starts the acquisition engine.
            This starts continuous acquisition that needs to
            be stopped via <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStop"/>, <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStop(Stemmer.Cvb.Utilities.UsTimeSpan)"/>
            or <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineAbort"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStart(System.Int64)">
            <summary>
            Starts the acquisition engine.
            </summary>
            <param name="bufferCountToAcquire">Number of buffers to acquire before stopping.
            <see cref="F:Stemmer.Cvb.Driver.CompositeStreamBase.ENDLESS"/> for endless until <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStop"/>,
            <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStop(Stemmer.Cvb.Utilities.UsTimeSpan)"/> or <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineAbort"/> is called.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during starting occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStop">
            <summary>
            Stops the acquisition engine.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineStop(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Stops the acquisition engine.
            </summary>
            <param name="timeout">Time to wait for the last data to be acquired.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error occurs during engine stop.
            Error can only occur when in a state other than <see cref="F:Stemmer.Cvb.Driver.AcquisitionState.Started"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryEngineStop">
            <summary>
            Tries to stop the acquisition engine.
            Does not throw an exception when engine
            could not be stopped.
            </summary>
            <returns>True if engine was stopped, false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryEngineStop(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Tries to stop the acquisition engine.
            Does not throw an exception when engine
            could not be stopped.
            </summary>
            <param name="timeout">Time to wait for the last data to be acquired.</param>
            <returns>True if engine was stopped, false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.EngineAbort">
            <summary>
            Aborts the acquisition engine.
            Does not throw an exception when engine
            could not be aborted.
            </summary>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error occurs during engine abort.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryEngineAbort">
            <summary>
            Aborts the acquisition engine.
            </summary>
            <returns>True if the engine was aborted, false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.DeviceStart">
            <summary>
            Starts the device acquisition.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.DeviceStart(System.Int64)">
            <summary>
            Starts the device acquisition.
            </summary>
            <param name="frameCountToAcquire">Number of buffers to acquire before stopping.
            <see cref="F:Stemmer.Cvb.Driver.CompositeStreamBase.ENDLESS"/> for endless.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during starting occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.DeviceStop">
            <summary>
            Stops the device acquisition.
            </summary>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during stopping occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryDeviceStop">
            <summary>
            Tries to stop the device acquisition.
            Des not throw an exception when the
            device could not be stopped.
            </summary>
            <returns>True if device was stopped, false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.DeviceAbort">
            <summary>
            Aborts the device acquisition.
            </summary>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during abortion occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.TryDeviceAbort">
            <summary>
            Tries to abort the device acquisition.
            Does not throw an error if the device could
            not be aborted.
            </summary>
            <returns>True if device was aborted, false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.RegisterManagedFlowSetPool(System.Int32)">
            <summary>
            Registers an internal flow-set pool.
            </summary>
            <remarks>
            <para>Creates an internal flow-set pool with <paramref name="numFlowSets"/>
            flow-sets. Any previously registered flow-set pool will be 
            deregistered.</para>
            <para>To reduce memory consumption call <see cref="M:Stemmer.Cvb.Driver.CompositeStreamBase.DeregisterFlowSetPool"/>
            before this call as first the new memory is created to be exception 
            safe.</para>
            </remarks>
            <param name="numFlowSets">Number of flow-sets to allocate.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.DeregisterFlowSetPool">
            <summary>
            Removes an existing flow set pool from the acquisition engine.
            </summary>
            <remarks>
            <para>This call is only allowed when the acquisition engine is not
            running.</para>
            <para>Removing the flow set pool can be useful in between changes of
            <see cref="P:Stemmer.Cvb.Driver.CompositeStreamBase.FlowSetCount"/> to reduce memory.</para>
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.CompositeStreamBase.FlowSetCount">
            <summary>
            Gets the number of registered flow sets.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.CompositeStreamBase.MinRequireedFlowSetCount">
            <summary>
            Gets minimum number of flow-sets required for the acquisition.
            </summary>
            <value>
            The count is as reported by the underlying transport layer provider and
            will at least be 3.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.WaitForNextComposite(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <returns>Acquired composite.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.WaitForNextComposite(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <returns>Acquired composite.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="token"/> is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.WaitForNextComposite(Stemmer.Cvb.Utilities.UsTimeSpan,System.IntPtr,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for and returns the next composite of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <returns>Acquired composite.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during the acquisition occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.RegisterComposite``1(``0)">
            <summary>
            Registers a composite for deregistration on disposal.
            </summary>
            <typeparam name="T">Returned composite type.</typeparam>
            <param name="composite">Composite to register.</param>
            <returns>The given <paramref name="composite"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.RegisterBufferNodeMaps(Stemmer.Cvb.Driver.BufferNodeMapDictionary)">
            <summary>
            Registers a composite for deregistration on disposal.
            </summary>
            <param name="nodeMaps">NodeMap dictionary to register.</param>
            <returns>The given <paramref name="nodeMaps"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.CompositeStreamBase.ThrowOnNonOkWaitStatus(Stemmer.Cvb.Driver.WaitStatus,System.String)">
            <summary>
            Throws exceptions depending on non-ok wait states.
            </summary>
            <param name="status"> wait status. </param> 
            <param name="debugLocator"></param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.GenICamDevice">
            <summary>
            Device supporting typed composite streams.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.GenICamDevice.#ctor(System.IntPtr,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="handle"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.GenICamDevice.Dispose(System.Boolean)">
            <summary>
            Addition disposal of all open streams.
            </summary>
            <param name="disposing"><b>true</b> if called from 
            <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.GenICamDevice.DriverGuid">
            <summary>
            Get the globally unique identifier of a CVB driver.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.GenICamDevice.StreamCount">
            <summary>
            Amount of streams of this device.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.GenICamDevice.Streams">
            <summary>
            Not supported by this device.
            Use <see cref="M:Stemmer.Cvb.Driver.GenICamDevice.GetStream``1(System.Int32)"/>
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.GenICamDevice.Stream">
            <summary>
            Not supported by this device.
            Use <see cref="M:Stemmer.Cvb.Driver.GenICamDevice.GetStream``1(System.Int32)"/>
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.GenICamDevice.GetStream``1(System.Int32)">
            <summary>
            Gets the typed stream at the given <paramref name="streamIndex"/>.
            </summary>
            <typeparam name="T">Type of the stream to get.</typeparam>
            <param name="streamIndex">Index of the stream to get.</param>
            <returns>Typed stream.</returns>
            <exception cref="T:System.ArgumentException">When the given stream type is not supported.</exception>
            <exception cref="T:System.InvalidCastException">When the same stream is queried with different types.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Driver.GenICamDevice.DeviceImage">
            <summary>
            <see cref="T:Stemmer.Cvb.Driver.GenICamDevice"/> does not support a device image.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IBuffer">
            <summary>
            A simple contiguous block of memory.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IBuffer.BasePtr">
            <summary>
            Get the base address of the buffer's memory.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IBuffer.Size">
            <summary>
            Get the valid size in bytes of the buffer's memory.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IBuffer.Capacity">
            <summary>
            Get the allocated size in bytes of the buffer's memory.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.ImageStream">
            <summary>
            Stream that delivers images.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.#ctor(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="device"> Parent device </param>
            <param name="index"> Index of the desired stream on the device. </param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for and returns the next image of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Waits for and returns the next image of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next image of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <param name="nodeMaps">NodeMaps of the returned image.</param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next image of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="nodeMaps">NodeMaps of the returned image.</param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for and returns the next image of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits for and returns the next image of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next image of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <param name="nodeMaps">NodeMaps of the returned image.</param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next image of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="nodeMaps">NodeMaps of the returned image.</param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.Wait(Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Infinite wait
            </summary>
            <param name="waitStatus">Returns status of wait</param>
            <returns>Received image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.Wait">
            <summary>
            Waits inifinitely
            </summary>
            <returns>Received image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.Wait(Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait
            </summary>
            <param name="waitStatus">Returns status of wait</param>
            <param name="nodeMaps">NodeMaps of the returned image.</param>
            <returns>Received image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.Wait(Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait
            </summary>
            <param name="nodeMaps">NodeMaps of the returned image.</param>
            <returns>Received image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.Wait(System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Infinite wait, abortable by the cancellation token.
            </summary>
            <param name="token">Token to cancel the operation.</param>
            <param name="waitStatus">Status of the wait operation.</param>
            <returns>Received image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.Wait(System.Threading.CancellationToken)">
            <summary>
            Infinite wait, abortable by the cancellation token.
            </summary>
            <param name="token">Token to cancel the operation.</param>
            <returns>Received image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.Wait(System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="token">Token to cancel the operation</param>
            <param name="waitStatus">Returns status of wait</param>
            <param name="nodeMaps">NodeMaps of the returned image.</param>
            <returns>Received image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageStream.Wait(System.Threading.CancellationToken,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="token">Token to cancel the operation</param>
            <param name="nodeMaps">NodeMaps of the returned image.</param>
            <returns>Received image</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IPfncBuffer">
            <summary>
            A <b>Buffer</b> that has GenICam layout information available.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IPfncBuffer.PfncFormat">
            <summary>
            Get the PFNC format of the pixel data stored in this buffer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IPfncBuffer.Rank">
            <summary>
            Get the rank of the plane.
            </summary>
            <remark>
            The rank is the number of dimensions in the plane. E.g. 2 for an image.
            </remark>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IPfncBuffer.GetLength(System.Int32)">
            <summary>
            Gets the number of elements at the given <paramref name="dimension"/>.
            </summary>
            <param name="dimension">Dimension to get length for; e.g. 0 for x-values.</param>
            <returns>The number of elements in the given <paramref name="dimension"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IPfncBuffer.GetIncrement(System.Int32)">
            <summary>
            Get the offset to the next element in this buffer in bytes.
            </summary>
            <param name="dimension">Dimension to get length for; e.g. 0 for x-values.</param>
            <returns>The offset to the next element in bytes.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IStream">
            <summary>
            Base class for all device streams.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IStream.Start">
            <summary>
            Start the acquisition.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IStream.Stop">
            <summary>
            Stops the acquisition.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IStream.Abort">
            <summary>
            Stops the acquisition of images immediately.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IStream.AcquisitionInterface">
            <summary>
            Gets or sets the acquisition interface to use on this stream.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IStream.IsIndexed">
            <summary>
            Gets if this stream is indexed (has a fixed amount of data).
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.MultiPartImage">
            <summary>
            A <b>StreamImage</b> that can have more <see cref="P:Stemmer.Cvb.Driver.MultiPartImage.Parts"/> associated
            with it.
            </summary>
            <remarks>
            This image is a view on one of the images in the <see cref="P:Stemmer.Cvb.Driver.MultiPartImage.Parts"/>. 
            There can be multiple data associated with this image like other images
            or raw buffer data.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.MultiPartImage.FromComposite(Stemmer.Cvb.Composite)">
            <summary>
            Create a <b>MultiPartImage</b> from the given <see cref="T:Stemmer.Cvb.Composite"/>
            <paramref name="obj"/>.
            </summary>
            <param name="obj">Composite from which an image is to be created.</param>
            <returns>New <b>MultiPartImage</b> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.MultiPartImage.#ctor(System.IntPtr)">
            <summary>
            Creates a new <b>MultiPartImage</b> by adopting the <paramref name="handle"/>.
            </summary>
            <param name="handle">Handle that is <b>IComposite</b> and
            <b>IImageVPA</b>.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.MultiPartImage.Dispose(System.Boolean)">
            <summary>
            Disposes also of the <b>Composite</b> <see cref="P:Stemmer.Cvb.Driver.MultiPartImage.Parts"/>.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.MultiPartImage.Parts">
            <summary>
            The different parts associated with this image.
            </summary>
            <remarks>
            This image references also one of the images in the <c>Parts</c>.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.PfncBuffer">
            <summary>
            A <b>Buffer</b> that has GenICam layout information available.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PfncBuffer.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Create a buffer object from a <paramref name="handle"/>.
            </summary>
            <param name="handle">Native <c>IPfncBuffer</c> handle.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if handle should be shared.</param>
            <returns>Newly created wrapper object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PfncBuffer.#ctor(System.IntPtr)">
            <summary>
            Create a buffer object from a <paramref name="handle"/>.
            </summary>
            <param name="handle">Native <c>IPfncBuffer</c> handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.PfncBuffer.PfncFormat">
            <summary>
            Get the PFNC format of the pixel data stored in this buffer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.PfncBuffer.Rank">
            <summary>
            Get the rank of the plane.
            </summary>
            <remark>
            The rank is the number of dimensions in the plane. E.g. 2 for an image.
            </remark>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PfncBuffer.GetIncrement(System.Int32)">
            <summary>
            Gets the number of elements at the given <paramref name="dimension"/>.
            </summary>
            <param name="dimension">Dimension to get length for; e.g. 0 for x-values.</param>
            <returns>The number of elements in the given <paramref name="dimension"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PfncBuffer.GetLength(System.Int32)">
            <summary>
            Gets the number of elements at the given <paramref name="dimension"/>.
            </summary>
            <param name="dimension">Dimension to get length for; e.g. 0 for x-values.</param>
            <returns>The number of elements in the given <paramref name="dimension"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.PointCloudStream">
            <summary>
            Stream that delivers <see cref="T:Stemmer.Cvb.PointCloud"/>s.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.#ctor(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="device"> Parent device object</param>
            <param name="index"> Index of the desired stream on this device</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for and returns the next pointcloud of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <returns>Acquired pointcloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Waits for and returns the next pointcloud of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <returns>Acquired pointcloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next pointcloud of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <param name="nodeMaps">NodeMaps of the returned pointcloud.</param>
            <returns>Acquired pointcloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next pointcloud of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="nodeMaps">NodeMaps of the returned pointcloud.</param>
            <returns>Acquired pointcloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for and returns the next pointcloud of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <returns>Acquired pointcloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits for and returns the next pointcloud of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <returns>Acquired pointcloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next image of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="waitStatus">Return status of the operation.</param>
            <param name="nodeMaps">NodeMaps of the returned pointcloud.</param>
            <returns>Acquired pointcloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.Threading.CancellationToken,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Waits for and returns the next image of the stream.
            </summary>
            <param name="timeout">Time to wait before timeout.</param>
            <param name="token">Token to cancel the operation.</param>
            <param name="nodeMaps">NodeMaps of the returned pointcloud.</param>
            <returns>Acquired pointcloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.Wait(Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="waitStatus">Returns status of wait</param>
            <returns>Received pointcloud</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.Wait">
            <summary>
            Waits inifinitely
            </summary>
            <returns>Acquired pointcloud</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.Wait(Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="waitStatus">Returns status of wait</param>
            <param name="nodeMaps">NodeMaps of the returned pointcloud.</param>
            <returns>Received pointcloud</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.Wait(Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="nodeMaps">NodeMaps of the returned pointcloud.</param>
            <returns>Received pointcloud</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.Wait(System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="token">Token to cancel the operation</param>
            <param name="waitStatus">Returns status of wait</param>
            <returns>Received pointcloud</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.Wait(System.Threading.CancellationToken)">
            <summary>
            Infinite wait, abortable by the cancellation token.
            </summary>
            <param name="token">Token to cancel the operation.</param>
            <returns>Received pointcloud</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.Wait(System.Threading.CancellationToken,Stemmer.Cvb.Driver.WaitStatus@,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="token">Token to cancel the operation</param>
            <param name="waitStatus">Returns status of wait</param>
            <param name="nodeMaps">NodeMaps of the returned pointcloud.</param>
            <returns>Received pointcloud</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.PointCloudStream.Wait(System.Threading.CancellationToken,Stemmer.Cvb.Driver.NodeMapDictionary@)">
            <summary>
            Infinite wait, abortable by the cancellation token
            </summary>
            <param name="token">Token to cancel the operation</param>
            <param name="nodeMaps">NodeMaps of the returned pointcloud.</param>
            <returns>Received pointcloud</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NamespaceDoc">
            <summary>
            The types in the namespace <c>Stemmer.Cvb.Driver</c> expose part of 
            the functionality covered by the CVCDriver.dll. 
            </summary>  
            <remarks>
            Definitions needed for device discovery, notification events and the 
            use of video streams of different kinds as well as the definitions of 
            the basic interfaces used in the CVCDriver.dll can be found here.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AccessToken">
            <summary>
            Parsed (partial) access token.
            </summary>
            <remarks>
            This is a helper data class for interpreting an access token e.g. for a
            device chooser dialog.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.AccessToken.Parse(System.String)">
            <summary>
            Parses the given <paramref name="json"/> access token.
            </summary>
            <param name="json">Access token as a json text.</param>
            <returns>Parsed object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.AccessToken.ToStrippedJson">
            <summary>
            Gets the json string that contains only the necessary data to open
            a device/node.
            </summary>
            <returns>Minimal json of this object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.AccessToken.DiscoveryLayer">
            <summary>
            Gets the discovery layer (the highest module layer) of this token.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.AccessToken.Path">
            <summary>
            Gets the path to the device/node to open.
            </summary>
            <remarks>
            Only use this for an access token capable for opening a device/node.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AccessToken.Info">
            <summary>
            Info properties of a module layer.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.Info.Name">
            <summary>
            Name of the property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.Info.Value">
            <summary>
            Value of the property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.AccessToken.Info.PropertyID">
            <summary>
            Identifier of the property.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AccessToken.Node">
            <summary>
            Base element of the module layers.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.AccessToken.Node.ModuleLayer">
            <summary>
            The module layer of this node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.Node.ID">
            <summary>
            Unique identifier of this module dependent on its parent.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.Node.Infos">
            <summary>
            Information collection.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.Node.Parameters">
            <summary>
            List of optional GenApi Feature settings.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.Node.GenApiFeatures">
            <summary>
            List of optional GenApi Feature settings.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AccessToken.Parameter">
            <summary>
            A GenTL Producer dependent parameter to set.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.Parameter.Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.Parameter.Value">
            <summary>
            Parameter value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AccessToken.GenApiFeature">
            <summary>
            Contains the triplet of NodeMap identifier, Node name and value.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.GenApiFeature.NodeMapId">
            <summary>
            The identifier of the NodeMap to use.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.GenApiFeature.NodeName">
            <summary>
            The name of the node to set.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.GenApiFeature.NodeValue">
            <summary>
            The value of the node to set.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AccessToken.Vin">
            <summary>
            Represents a vin driver module.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AccessToken.TransportLayer">
            <summary>
            Represents a GenTL Producer.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.TransportLayer.Interfaces">
            <summary>
            The interfaces available in this transport layer.
            </summary>
            <remarks>
            If this collection has <see cref="T:Stemmer.Cvb.Driver.AccessToken.Device"/> children only one 
            interface is present (the parent of the device).
            </remarks>
            <value>
            <c>null</c> if no <see cref="T:Stemmer.Cvb.Driver.AccessToken.Interface"/>s are present.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AccessToken.Interface">
            <summary>
            Represents an interface module of a GenTL producer.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.Interface.Devices">
            <summary>
            The devices reachable via this interface.
            </summary>
            <value>
            <c>null</c> if no <see cref="T:Stemmer.Cvb.Driver.AccessToken.Device"/>s are present.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AccessToken.Device">
            <summary>
            A GenTL producer device.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.TransportLayers">
            <summary>
            Lists all available transport layers.
            </summary>
            <value>
            <c>null</c> if no <see cref="T:Stemmer.Cvb.Driver.AccessToken.TransportLayer"/>s are present.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AccessToken.Vins">
            <summary>
            Lists all available vin-drivers.
            </summary>
            <value>
            <c>null</c> if no <see cref="T:Stemmer.Cvb.Driver.AccessToken.Vin"/>s are present.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.Driver.BufferImage">
            <summary>
            Stream image that is returned when no <see cref="T:Stemmer.Cvb.Driver.IRingBuffer"/> 
            interface is available.
            </summary>
            <remarks>
            <para>
            This behaves almost as a <see cref="T:Stemmer.Cvb.MappedImage"/>. The difference is
            that if the pixel buffer switches underneath, this image still points to
            the pixel buffer it was created on. The <c>CvbMappedImage</c> will point
            to the new location.
            </para><para>
            Switching pixel buffers commonly occurs on driver related 
            <see cref="T:Stemmer.Cvb.Driver.DeviceImage"/>s like the <see cref="T:Stemmer.Cvb.Driver.VinImage"/> from the
            <see cref="T:Stemmer.Cvb.Driver.VinDevice"/>. If available on a <see cref="T:Stemmer.Cvb.Device"/>, 
            prefer the <see cref="T:Stemmer.Cvb.Driver.RingBufferImage"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.BufferImage.HandleImage">
            <summary>
            Non-owning wrapper around an <c>IMG</c> handle for feature access.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferImage.HandleImage.#ctor(System.IntPtr)">
            <summary>
            Creates the VinImage.
            </summary>
            <remarks>
            No memory pressure is performed by this image as the device holds the
            memory. It is guessed via the <i>IRingBuffer</i> interface.
            </remarks>
            <param name="handle">Device object (and thus the image handle).</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferImage.HandleImage.Dispose(System.Boolean)">
            <summary>
            Change the dispose handling by just detaching from the native handle.
            </summary>
            <param name="disposing"><c>true</c> when called via 
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.BufferImage.ImageLayout">
            <summary>
            Contains the buffer layout of a <see cref="T:Stemmer.Cvb.Image"/> for fast 
            <see cref="T:Stemmer.Cvb.Driver.BufferImage"/> creation.
            </summary>
            <remarks>
            Stores the analysis data.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.BufferImage.ImageLayout.LinearLayout.PlaneIndexPair">
            <summary>
            No tuple :/
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.BufferImage.ImageLayout.LinearLayout.PlaneIndexPair.BasePtr">
            <summary>
            The base pointer of the plane.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.BufferImage.ImageLayout.LinearLayout.PlaneIndexPair.PlaneIndex">
            <summary>
            Index of the plane.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferImage.ImageLayout.FromImage(Stemmer.Cvb.Image)">
            <summary>
            Determines the layout information from the given 
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to get layout from.</param>
            <returns>Image layout information.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferImage.ImageLayout.FromIMGHandle(System.IntPtr)">
            <summary>
            Wraps the given <c>IMG</c> <paramref name="handle"/> in a temporary
            non-owning wrapper to determine the layout information.
            </summary>
            <param name="handle"><c>IMG</c> handle.</param>
            <returns>Image layout information.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferImage.ImageLayout.CloneImage(Stemmer.Cvb.Image)">
            <summary>
            Creates the <c>IMG</c> handle for the <see cref="T:Stemmer.Cvb.Driver.BufferImage"/>.
            </summary>
            <remarks>
            Attention: no security checks are performed: incompatible 
            <paramref name="image"/>s will lead to access violation on image
            data access..
            </remarks>
            <param name="image">Image to create clone from.</param>
            <returns><c>IMG</c> handle.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferImage.ImageLayout.CloneIMGHandle(System.IntPtr)">
            <summary>
            Wraps the given <c>IMG</c> <paramref name="handle"/> in a temporary
            non-owning wrapper to create the <c>IMG</c> handle for the 
            <see cref="T:Stemmer.Cvb.Driver.BufferImage"/>.
            </summary>
            <remarks>
            Attention: no security checks are performed: incompatible 
            <paramref name="handle"/>s will lead to access violation on image
            data access..
            </remarks>
            <param name="handle"><c>IMG</c> handle.</param>
            <returns><c>IMG</c> handle.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferImage.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Creates a new <see cref="T:Stemmer.Cvb.Driver.BufferImage"/> from the given
            <paramref name="device"/>.
            </summary>
            <param name="device">Device that has <c>IImageVPA</c> interface.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferImage.#ctor(Stemmer.Cvb.Device,Stemmer.Cvb.Driver.BufferImage.ImageLayout)">
            <summary>
            Creates a new <see cref="T:Stemmer.Cvb.Driver.BufferImage"/> from the given
            <paramref name="device"/> and <paramref name="layout"/> information.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> no security checks are performed: incompatible 
            <paramref name="device"/> <see cref="T:Stemmer.Cvb.Image"/>s will lead to access 
            violation on image data access..
            </para><para>
            This version is faster as no analysis of the given 
            <paramref name="device"/> image needs to be done.
            </para>
            </remarks>
            <param name="device">Device that has <c>IImageVPA</c> interface.
            </param>
            <param name="layout">Layout information of the 
            <paramref name="device"/> image.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferImage.Dispose(System.Boolean)">
            <summary>
            Unregisters the disposing event if this object is disposed before its
            parent.
            </summary>
            <param name="disposing"><c>true</c> if called from 
            <see cref="T:System.IDisposable"/> interface; <c>false</c> if called from 
            finalizer.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferImage.Parent_ObjectDisposing(Stemmer.Cvb.INativeHandle)">
            <summary>
            Called if the parent object is disposed.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.BufferImage.Parent">
            <summary>
            Gets the parent object this one references.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.RingBufferImage">
            <summary>
            Stream image that is returned, when the <see cref="T:Stemmer.Cvb.Driver.IRingBuffer"/>
            interface is available on a device.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.RingBufferImage.TimestampInfo">
            <summary>
            IRingBuffer Info for timestamp.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.RingBufferImage.TagInfo">
            <summary>
            IRingBuffer Info for optional tag.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBufferImage.#ctor(Stemmer.Cvb.Driver.IRingBuffer,System.Int32)">
            <summary>
            Creates a new <see cref="T:Stemmer.Cvb.Driver.IRingBuffer"/> image.
            </summary>
            <param name="ringBuffer">Ringbuffer object to create image from.</param>
            <param name="bufferIndex">Buffer index to retrieve image for.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBufferImage.#ctor(Stemmer.Cvb.Driver.IRingBuffer,System.Int32,Stemmer.Cvb.Size2D,System.Int32,Stemmer.Cvb.DataType,System.Double)">
            <summary>
            Constructor used for tests.
            </summary>
            <param name="ringBuffer">Ringbuffer object to use as parent.</param>
            <param name="bufferIndex">Index in the <paramref name="ringBuffer"/>
            of this image.</param>
            <param name="size">Width and height in pixels to create.</param>
            <param name="numPlanes">Number of planes to create.</param>
            <param name="dataType">Data type of the image to create.</param>
            <param name="rawTimestamp">The raw timestamp value to use.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBufferImage.Dispose(System.Boolean)">
            <summary>
            Overwritten to unlock this image on <see cref="M:Stemmer.Cvb.Image.Dispose"/>
            if <see cref="F:Stemmer.Cvb.Driver.RingBufferLockMode.On"/>.
            </summary>
            <param name="disposing"><c>true</c> when called from
            <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RingBufferImage.BufferIndex">
            <summary>
            Gets the index of this buffer in the <see cref="P:Stemmer.Cvb.Driver.RingBufferImage.ParentDevice"/> device's
            ring buffer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RingBufferImage.IsLocked">
            <summary>
            Gets whether this ring buffer image is in a locked state.
            </summary>
            <remarks>
            Locked state indicates that the acquisition engine is not allowed to
            fill this buffer.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RingBufferImage.ParentDevice">
            <summary>
            Gets the parent object this one references (device).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RingBufferImage.Parent">
            <summary>
            Gets the parent ring buffer object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RingBufferImage.Tag">
            <summary>
            Gets the optional tag of this buffer image.
            </summary>
            <value>
            The driver dependent tag or <see cref="F:System.Double.NaN"/> if none is
            present.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBufferImage.Unlock">
            <summary>
            Unlocks this buffer.
            </summary>
            <remarks>
            This is an alias for <see cref="M:System.IDisposable.Dispose"/>.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.StreamImage">
            <summary>
            Base class of all stream related images.
            </summary>
            <remarks>
            <para>
            A stream related image is returned from a grab synchronization method
            like <see cref="M:Stemmer.Cvb.Driver.Stream.Wait"/>. These kinds of images normally use
            an underlying ring buffer or a queue to reuse memory and increase
            performance. This then implies, that the validity of this image's data
            is limited according to the used acquisition engine / strategy.
            </para><para>
            By default, you expect images of this type to be valid from creation
            until the next synchronization / acquisition start.
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.StreamImage.#ctor(System.IntPtr)">
            <summary>
            Creates the stream image and adopts its life-time.
            </summary>
            <param name="handle">Image handle to adopt life-time</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.StreamImage.RawTimestamp">
            <summary>
            Gets the raw timestamp as reported by the driver.
            </summary>
            <remarks>
            <para>
            This value's unit depends on the driver used. Examples:
            <list type="table">
            <listheader>
            <term>GenICam.vin</term>
            <description>
            Device ticks (GigE Vision/USB3 Vision). Can be translated via either
            the <i>GevTimestampTickFrequency</i> GenApi
            <see cref="T:Stemmer.Cvb.GenApi.IntegerNode"/> or if that is not present the
            <see cref="P:Stemmer.Cvb.GenApi.IntegerNode.Increment"/> of the
            <i>TimestampLatchValue</i> <c>IntegerNode</c> (granularity in
            nanoseconds).
            </description>
            <term>Teledyne Dalsa Drivers</term>
            <description>
            Dependent on configuration file. By default microseconds.
            </description>
            </listheader>
            <term>CVSisoMe.vin</term>
            <description>
            Grabber FPGA frequency ticks (One tick would be 16 nanoseconds with
            the me4 and 8 nanoseconds with the me5). Can also be microseconds...
            </description>
            <term>CVAVT1394.vin</term>
            <description>
            Unit is seconds with 125 microsecond granularity (bus frequency).
            </description>
            <term>Video/Emu</term>
            <description>
            Unit is milliseconds; for variable rate videos the timestamp value is
            guessed by its frame number and the current frame time.
            </description>
            </list>
            </para><para>
            Keep in mind that the value might wrap around (can be as fast as 128s
            when the <i>CVAVT1394.vin</i> is used).
            </para>
            </remarks>
            <value>
            Value with undefined unit (dependent on driver);
            <see cref="F:System.Double.NaN"/> if no timestamp is present at all.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IndexedStream">
            <summary>
            A stream with a finite number of images, which can also be accessed via
            an <see cref="P:Stemmer.Cvb.Driver.IndexedStream.ImageIndex"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IndexedStream.#ctor(Stemmer.Cvb.Device,Stemmer.Cvb.Driver.AcquisitionInterface,System.Int32)">
            <summary>
            Creates the indexed stream object from a <paramref name="device"/>
            with the specified acquisition <paramref name="iface"/>.
            </summary>
            <param name="device">Device object to create stream from.</param>
            <param name="iface">Acquisition interface to use.</param>
            <param name="streamIndex">Stream index.</param>
            <exception cref="T:System.NotImplementedException">In case no known grab
            interface is available on the given <paramref name="device"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">In case
            <paramref name="device"/> has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IndexedStream.#ctor(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            Creates the indexed stream object from a <paramref name="device"/>
            with the best available acquisition interface.
            </summary>
            <param name="device">Device object to create stream from.</param>
            <param name="streamIndex">Stream index.</param>
            <exception cref="T:System.NotImplementedException">In case no known grab
            interface is available on the given <paramref name="device"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">In case
            <paramref name="device"/> has been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IndexedStream.IsIndexed">
            <summary>
            Gets whether this is a <see cref="T:Stemmer.Cvb.Driver.IndexedStream"/>.
            </summary>
            <value>Always <c>true</c>.</value>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IndexedStream.ImageCount">
            <summary>
            Gets the number of images contained in this stream.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IndexedStream.ImageIndex">
            <summary>
            Gets or sets the index of the current active image.
            </summary>
            <value>
            The range of possible values is from 0 up to, not including,
            <see cref="P:Stemmer.Cvb.Driver.IndexedStream.ImageCount"/>.
            </value>>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IndexedStream.LoopObservers">
            <summary>
            Gets or sets whether the
            <see cref="M:Stemmer.Cvb.Driver.Stream.Subscribe(System.IObserver{Stemmer.Cvb.Driver.StreamImage})"/>d observers are
            notified after all images have been delivered once.
            </summary>
            <remarks>
            If <b>true</b> this stream behaves like a non-indexed stream and
            repeats playback. If <b>false</b>
            <see cref="M:System.IObserver`1.OnCompleted"/> called after the first iteration
            and acquisition is stopped.
            </remarks>
            <value>
            Default is <b>false</b>.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IndexedStream.ObservableAcquisitionLoop">
            <summary>
            Special implementation taking <see cref="P:Stemmer.Cvb.Driver.IndexedStream.LoopObservers"/> into account.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.AcquisitionInterface">
            <summary>
            Known acquisition CVB interfaces.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AcquisitionInterface.Grabber">
            <summary>
            Basic grabber interface for single image acquisition.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AcquisitionInterface.Grab2">
            <summary>
            Ring buffer/queue based acquisition.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.AcquisitionInterface.Grab3">
            <summary>
            Composite based aquisition.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.Stream">
            <summary>
            Represents one acquisition stream of a <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.Stream.MaxTimeoutValue">
            <summary>
            Gets the maximal timeout a device normally supports.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.Stream.AcquisitionEngine">
            <summary>
            Indexed acquisition interface.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Ctor.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.AcquisitionInterface">
            <summary>
            Gets the interface of this implementation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.StreamIndex">
            <summary>
            Gets the stream index of this instance.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.Parent">
            <summary>
            The parent device.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.SetTimeout(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Sets the time out <paramref name="timeSpan"/> if necessary to this
            stream device.
            </summary>
            <param name="timeSpan">New time out.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.GetTimedSnapshot(Stemmer.Cvb.Utilities.UsTimeSpan,System.IntPtr@)">
            <summary>
            Acquires a single image.
            </summary>
            <remarks>
            This function still throws exceptions when a real error occurs.
            </remarks>
            <param name="timeSpan">Time span to wait for the image.</param>
            <param name="imageHandle">Acquireed image handle;
            <see cref="F:System.IntPtr.Zero"/> for none (i.e. the device handle points to
            the current image).</param>
            <returns><see cref="F:Stemmer.Cvb.Driver.WaitStatus.Ok"/> if image was acquired; otherwise
            the reason..
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.Start">
            <summary>
            Start the acquisition.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.IntPtr@)">
            <summary>
            Syncs to the next acquired image.
            </summary>
            <remarks>
            This function still throws exceptions when a real error occurs.
            </remarks>
            <param name="timeSpan">Time span to wait for new image.</param>
            <param name="imageHandle">Acquireed image handle;
            <see cref="F:System.IntPtr.Zero"/> for none (i.e. the device handle points to
            the current image).</param>
            <returns><c>true</c> if image was acquired; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.Abort">
            <summary>
            Stops the acquisition immediately.
            </summary>
            <returns>
            The CVB result code.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.Stop">
            <summary>
            Stops the acquisition gracefully.
            </summary>
            <returns>
            The CVB result code.
            </returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.IsRunning">
            <summary>
            Current acquisition state.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.GetBestAcquisitionInterface(Stemmer.Cvb.Device)">
            <summary>
            Gets the best available acquisition interface.
            </summary>
            <param name="device">Device to query.</param>
            <returns>Best available acquisition interface.</returns>
            <exception cref="T:System.NotImplementedException">In case no known grab
            interface is available on the given <paramref name="device"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">In case
            <paramref name="device"/> has been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.LastTimeout">
            <summary>
            The last set wait time span.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.AcquisitionEngine.CvbResultToWaitResult(System.Int32)">
            <summary>
            Translates the given <paramref name="result"/> into a
            <see cref="T:Stemmer.Cvb.Driver.WaitStatus"/> if possible.
            </summary>
            <remarks>
            This function still throws exceptions when a real error occurs.
            </remarks>
            <param name="result">CVB result value.</param>
            <returns>Non exceptional wait-status.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.Stream.Grab">
            <summary>
            IGrabber implementation.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab.#ctor(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="device">Device with IGrabber.</param>
            <param name="streamIndex">Stream index. Must be 0 as IGrabber only
            supports one stream channel.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab.GetTimedSnapshot(Stemmer.Cvb.Utilities.UsTimeSpan,System.IntPtr@)">
            <summary>
            Calls snap.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab.Start">
            <summary>
            Updates acquisition state.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.IntPtr@)">
            <summary>
            Calls Snap.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab.Stop">
            <summary>
            Updates acquisition state.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab.Abort">
            <summary>
            Same as Stop.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.Grab.IsRunning">
            <summary>
            Current acquisition state.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.Grab.StreamIndex">
            <summary>
            Gets the stream index of this instance.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.Stream.Grab2">
            <summary>
            IGrab2 implementation.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab2.#ctor(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="device">Device with IGrab2.</param>
            <param name="streamIndex">Stream index. Must be 0 as IGrab2 only
            supports one stream channel.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab2.GetTimedSnapshot(Stemmer.Cvb.Utilities.UsTimeSpan,System.IntPtr@)">
            <summary>
            Calls snap.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab2.Start">
            <summary>
            Calls G2Grab.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab2.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,System.IntPtr@)">
            <summary>
            Calls G2Wait
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab2.Stop">
            <summary>
            Calls G2Freeze.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Grab2.Abort">
            <summary>
            Calls G2Freeze with kill.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.Grab2.IsRunning">
            <summary>
            Queries the grab active state.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.Grab2.StreamIndex">
            <summary>
            Gets the stream index of this instance.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.#ctor(Stemmer.Cvb.Device,Stemmer.Cvb.Driver.AcquisitionInterface,System.Int32)">
            <summary>
            Creates the stream object from a <paramref name="device"/> with the
            specified acquisition <paramref name="iface"/>.
            </summary>
            <param name="device">Device object to create stream from.</param>
            <param name="iface">Acquisition interface to use.</param>
            <param name="streamIndex">Stream index.</param>
            <exception cref="T:System.NotImplementedException">In case no known grab
            interface is available on the given <paramref name="device"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">In case
            <paramref name="device"/> has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.#ctor(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            Creates the stream object from a <paramref name="device"/> with the
            best available acquisition interface.
            </summary>
            <param name="device">Device object to create stream from.</param>
            <param name="streamIndex">Stream index.</param>
            <exception cref="T:System.NotImplementedException">In case no known grab
            interface is available on the given <paramref name="device"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">In case
            <paramref name="device"/> has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
            <remark>Call this method to release the resources allocated by this
            stream immediately. Remember that after calling <c>Dispose</c>, any
            subsequent access to references to this image will result in an
            <see cref="T:System.ObjectDisposedException"/>.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><b>true</b> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <b>false</b> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.AcquisitionInterface">
            <summary>
            Gets or sets the acquisition interface to use on this stream.
            </summary>
            <remarks>
            When set the underlying acquisition interface is changed.
            </remarks>
            <value>
            The currently used acquisition engine. By default the best acquisition
            engine is chosen (e.g. <see cref="F:Stemmer.Cvb.Driver.AcquisitionInterface.Grab2"/>
            before <see cref="F:Stemmer.Cvb.Driver.AcquisitionInterface.Grabber"/>.
            </value>
            <exception cref="T:System.InvalidOperationException">Changing the acquisition
            interface while grabbing is not allowed.</exception>
            <exception cref="T:System.NotImplementedException">The desired acquisition
            interface is not supported on the device.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.CurrentAcquisitionEngine">
            <summary>
            Gets the currently configured <see cref="T:Stemmer.Cvb.Driver.Stream.AcquisitionEngine"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.Parent">
            <summary>
            Gets the parent <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.IsIndexed">
            <summary>
            Gets whether this stream is an <see cref="T:Stemmer.Cvb.Driver.IndexedStream"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.Statistics">
            <summary>
            Gets the available device statistics
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.GetSnapshot">
            <summary>
            Acquires a single image and returns it.
            </summary>
            <remarks>
            <para>
            <b>Attention:</b> it is generally not possible to call this method
            while the acquisition has been started by <see cref="M:Stemmer.Cvb.Driver.Stream.Start"/> or if
            an observer is <see cref="M:Stemmer.Cvb.Driver.Stream.Subscribe(System.IObserver{Stemmer.Cvb.Driver.StreamImage})"/>ed.
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this
            image in a display.
            </para>
            </remarks>
            <returns>Grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.GetTimedSnapshot(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Acquires a single image and returns it.
            </summary>
            <remarks>
            <para>
            Waits for the given <paramref name="timeSpan"/> for the image to be
            taken.
            </para><para>
            <c>Attention:</c> it is generally not possible to call this method
            while the acquisition has been started by <see cref="M:Stemmer.Cvb.Driver.Stream.Start"/>.
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this
            image in a display.
            </para>
            </remarks>
            <param name="timeSpan">Time span to wait for (millisecond granularity).
            </param>
            <returns>Grabbed image.</returns>
            <exception cref="T:System.TimeoutException">Most common exception:
            <paramref name="timeSpan"/> elapsed without receiving new image.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.GetTimedSnapshot(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            As <see cref="M:Stemmer.Cvb.Driver.Stream.GetTimedSnapshot(Stemmer.Cvb.Utilities.UsTimeSpan)"/>, but does not throw on
            timeout.
            </summary>
            <param name="timeSpan">Time span to wait for (millisecond granularity).
            </param>
            <param name="status">Either <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Ok"/> or
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Timeout"/> if <paramref name="timeSpan"/> was
            exceeded.</param>
            <returns>
            Acquired image if <paramref name="status"/> is
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Ok"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Start">
            <summary>
            Starts the acquisition.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Wait">
            <summary>
            Waits for indefinitely for the next acquired image and returns it.
            </summary>
            <remarks>
            <para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this
            image in a display.
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para><para>
            You can also <see cref="M:Stemmer.Cvb.Driver.Stream.Abort"/> this wait call.
            </para>
            </remarks>
            <returns>Grabbed image.</returns>
            <exception cref="T:System.OperationCanceledException">This operation has been
            aborted via <see cref="M:Stemmer.Cvb.Driver.Stream.Abort"/> or <see cref="M:Stemmer.Cvb.Driver.Stream.TryAbort"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Wait(Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for indefinitely for the next acquired image and returns it.
            </summary>
            <remarks>
            <para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this
            image in a display.
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para><para>
            You can also <see cref="M:Stemmer.Cvb.Driver.Stream.Abort"/> this wait call which results in
            <paramref name="status"/> being <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Abort"/>.
            </para>
            </remarks>
            <param name="status">Either <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Ok"/> or
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Abort"/> if opperation was <see cref="M:Stemmer.Cvb.Driver.Stream.Abort"/>ed.
            </param>
            <returns>Grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Waits for the given <paramref name="timeSpan"/> for the next acquired
            image.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this
            image in a display.
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para>
            </remarks>
            <param name="timeSpan">Time span to wait for (millisecond granularity).
            </param>
            <returns>Grabbed image.</returns>
            <exception cref="T:System.TimeoutException">Most common exception:
            <paramref name="timeSpan"/> elapsed without receiving new image.
            </exception>
            <exception cref="T:System.OperationCanceledException">This operation has been
            aborted via <see cref="M:Stemmer.Cvb.Driver.Stream.Abort"/> or <see cref="M:Stemmer.Cvb.Driver.Stream.TryAbort"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            As <see cref="M:Stemmer.Cvb.Driver.Stream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)"/>, but does not throw on timeout.
            </summary>
            <remarks>
            Still throws exceptions on other errors.
            </remarks>
            <param name="timeSpan">Time span to wait for (millisecond granularity).
            </param>
            <param name="status">Either <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Ok"/>;
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Timeout"/> if <paramref name="timeSpan"/> was
            exceeded; <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Abort"/> if <see cref="M:Stemmer.Cvb.Driver.Stream.Abort"/> or
            <see cref="M:Stemmer.Cvb.Driver.Stream.TryAbort"/> was successfully called.></param>
            <returns>
            Acquired image if <paramref name="status"/> is
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Ok"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Stop">
            <summary>
            Stops the acquisition.
            </summary>
            <remarks>
            This stops the acquisition gracefully letting the ongoing operation
            finish. The disadvantage may be that this call lasts until the timeout
            time of the last <see cref="M:Stemmer.Cvb.Driver.Stream.Wait"/> call.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.TryStop">
            <summary>
            Tries to stop the acquisition of images.
            </summary>
            <remarks>
            Like <see cref="M:Stemmer.Cvb.Driver.Stream.Stop"/> it tries to halt gracefully with the same
            implications. This variant does not throw exceptions exception
            <see cref="T:System.ObjectDisposedException"/>s.
            </remarks>
            <returns><c>true</c> on success; <c>false</c> on error.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Abort">
            <summary>
            Stops the acquisition of images immediately.
            </summary>
            <remarks>
            <para>
            This stops the acquisition as fast as possible interrupting the
            ongoing operation. This might result in partially acquired images.
            </para><para>
            If the underlying driver does not support this, this call behaves as
            if <see cref="M:Stemmer.Cvb.Driver.Stream.Stop"/> had been called.
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.TryAbort">
            <summary>
            Tries to stop the acquisition of images immediately.
            </summary>
            <remarks>
            Like <see cref="M:Stemmer.Cvb.Driver.Stream.Abort"/> it stops as fast as possible with the same
            implications. This variant does not throw exceptions exception
            <see cref="T:System.ObjectDisposedException"/>s.
            </remarks>
            <returns><c>true</c> on success; <c>false</c> on error.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.IsRunning">
            <summary>
            Gets whether the acquisition is currently active.
            </summary>
            <value>
            <c>true</c> if the underlying device is acquiring data; <c>false</c>
            if it is idle.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.MakeStreamImage(System.IntPtr)">
            <summary>
            Factory function for creating the returned image from the acquisition
            engine.
            </summary>
            <param name="handle">Acquired image handle; <see cref="F:System.IntPtr.Zero"/>
            for non (i.e. the device handle points to the newly synced image.
            </param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.MakeSnapshotImage(System.IntPtr)">
            <summary>
            Factory function for creating the returned image from the acquisition
            engine.
            </summary>
            <param name="handle">Acquired image handle; <see cref="F:System.IntPtr.Zero"/>
            for non (i.e. the device handle points to the newly synced image.
            </param>
            <returns>Acquired image.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.Stream.RingBuffer">
            <summary>
            Gets the <c>IRingBuffer</c> interface object if present.
            </summary>
            <value>Object for accessing the interface; <c>null</c> if not
            available.</value>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Subscribe(System.IObserver{Stemmer.Cvb.Driver.StreamImage})">
            <summary>
            Notifies this stream that the given <paramref name="observer"/> is to
            receive new image notifications.
            </summary>
            <remarks>
            <para>
            When subscribing to a stream which is not running (see
            <see cref="P:Stemmer.Cvb.Driver.Stream.IsRunning"/>), this stream is <see cref="M:Stemmer.Cvb.Driver.Stream.Start"/>ed. If this
            stream <see cref="P:Stemmer.Cvb.Driver.Stream.IsIndexed"/> it runs by default until all images are
            delivered once. For endless streams it keeps running until all
            subscribed <paramref name="observer"/>s are unsubscribed via the
            returned <see cref="T:System.IDisposable"/> object or
            <see cref="M:Stemmer.Cvb.Driver.Stream.Stop"/>/<see cref="M:Stemmer.Cvb.Driver.Stream.Abort"/> is called. If one of these two
            functions is called or this stream <see cref="P:Stemmer.Cvb.Driver.Stream.IsIndexed"/>, all
            subscribed <paramref name="observer"/>s receive the
            <see cref="M:System.IObserver`1.OnCompleted"/> notification.
            </para><para>
            If you wish to automatically loop <see cref="T:Stemmer.Cvb.Driver.IndexedStream"/>s, you
            need to set <see cref="P:Stemmer.Cvb.Driver.IndexedStream.LoopObservers"/> to <b>true</b>.
            </para><para>
            The stream is kept running even if
            <see cref="M:System.IObserver`1.OnError(System.Exception)"/> is called. Note, though,
            that if you use the reactive extensions (<b>System.Reactive</b>), they
            will unsubscribe in this case and you need to resetup your application.
            Thus if you use your own <see cref="T:System.IObserver`1"/> implementation you
            can handle it as you wish.
            </para><para>
            The acquisition loop is run in a long running <see cref="T:System.Threading.Tasks.Task"/> and
            using <see cref="M:Stemmer.Cvb.Driver.Stream.Wait"/>. Thus there are no timeouts. Unsubscribing all
            <paramref name="observer"/>s will result in <see cref="M:Stemmer.Cvb.Driver.Stream.Abort"/> being
            called.
            </para><para>
            Manually calling <see cref="M:Stemmer.Cvb.Driver.Stream.Wait"/> or
            <see cref="M:Stemmer.Cvb.Driver.Stream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)"/> is forbidden as long as there is at
            least one subscribed <paramref name="observer"/>.
            </para>
            </remarks>
            <param name="observer">Observer to receive image notifications.</param>
            <returns>Reference to an interface to allow stop receiving
            notifications (unsubscribe).</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.ObservableAcquisitionLoop">
            <summary>
            This is the acquisition loop for
            <see cref="M:Stemmer.Cvb.Driver.Stream.Subscribe(System.IObserver{Stemmer.Cvb.Driver.StreamImage})"/>d observers.
            </summary>
            <remarks>
            This method is executed in a long-running task scheduled on the default
            scheduler.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.Unsubscribe(System.IObserver{Stemmer.Cvb.Driver.StreamImage})">
            <summary>
            Unsubscribes the given <paramref name="observer"/>.
            </summary>
            <remarks>
            <para>
            If the given <paramref name="observer"/> is not subscribed, this method
            does nothing. After this call the <paramref name="observer"/> will get
            no notifications anymore.
            </para><para>
            If the last <paramref name="observer"/> is removed, <see cref="M:Stemmer.Cvb.Driver.Stream.Abort"/>
            is called.
            </para>
            </remarks>
            <param name="observer">Observer to unsubcribe.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.SendCompleteToObservers">
            <summary>
            Calls <see cref="M:System.IObserver`1.OnCompleted"/> on all subscribed
            observers.
            </summary>
            <remarks>
            It will not unsubscribe them; this is the job of the observers
            themselves.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.SendErrorToObservers(System.Exception)">
            <summary>
            Calls <see cref="M:System.IObserver`1.OnError(System.Exception)"/> on all subscribed
            observers.
            </summary>
            <param name="error">Exception that occured while
            <see cref="M:Stemmer.Cvb.Driver.Stream.Wait"/>ing on next image.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Stream.SendImageToObservers(Stemmer.Cvb.Driver.StreamImage)">
            <summary>
            Calls <see cref="M:System.IObserver`1.OnNext(`0)"/> with the given
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to send to all subscribed observers.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DeviceControl">
            <summary>
            Implementation of the <see cref="T:Stemmer.Cvb.Driver.IDeviceControl"/> interface.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DeviceControl.PinnedObject">
            <summary>
            Pin any value type.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceControl.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Ctor.
            </summary>
            <param name="device"></param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceControl.SendCommand(Stemmer.Cvb.Driver.DeviceControlCommand,System.String,System.String@)">
            <summary>
            Sends the given <paramref name="command"/> <paramref name="value"/>
            to the driver.
            </summary>
            <param name="command">Command to execute.</param>
            <param name="value">Value to send.</param>
            <param name="result">Command answer string.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceControl.SendCommand``2(Stemmer.Cvb.Driver.DeviceControlCommand,``0,``1@)">
            <summary>
            Sends the given <paramref name="command"/> <paramref name="value"/>
            to the driver.
            </summary>
            <typeparam name="Tin">Value type (non-reference type).</typeparam>
            <typeparam name="Tout">Value type (non-reference type).</typeparam>
            <param name="command">Command to execute.</param>
            <param name="value">Value to send.</param>
            <param name="result">Command answer.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceControl.SendCommand(Stemmer.Cvb.Driver.DeviceControlCommand,System.IntPtr,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Sends the given <paramref name="command"/> buffer.
            </summary>
            <remarks>
            The <paramref name="inputBufferSize"/> and 
            <paramref name="outputBufferSize"/> are given in <c>byte</c>s.
            </remarks>
            <param name="command">Command to execute.</param>
            <param name="inputBuffer">Pointer to input buffer to send.</param>
            <param name="inputBufferSize">Size of <paramref name="inputBuffer"/>
            data.</param>
            <param name="outputBuffer">Pointer to buffer to received command data;
            <see cref="F:System.IntPtr.Zero"/> to query size in 
            <paramref name="outputBufferSize"/>.</param>
            <param name="outputBufferSize">Size of the 
            <paramref name="outputBuffer"/> data if not <see cref="F:System.IntPtr.Zero"/>;
            will receive the minimal necessary size otherwise.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceControl.SendCommand(Stemmer.Cvb.Driver.DeviceControlCommand,System.IntPtr,System.Int64,System.IntPtr,System.Int64@)">
            <summary>
            Sends the given <paramref name="command"/> buffer.
            </summary>
            <remarks>
            The <paramref name="inputBufferSize"/> and 
            <paramref name="outputBufferSize"/> are given in <c>byte</c>s.
            </remarks>
            <param name="command">Command to execute.</param>
            <param name="inputBuffer">Pointer to input buffer to send.</param>
            <param name="inputBufferSize">Size of <paramref name="inputBuffer"/>
            data.</param>
            <param name="outputBuffer">Pointer to buffer to received command data;
            <see cref="F:System.IntPtr.Zero"/> to query size in 
            <paramref name="outputBufferSize"/>.</param>
            <param name="outputBufferSize">Size of the 
            <paramref name="outputBuffer"/> data if not <see cref="F:System.IntPtr.Zero"/>;
            will receive the minimal necessary size otherwise.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DeviceImage">
            <summary>
            Special device image.
            </summary>
            <remarks>
            <para>
            This image points to the image data that is currently processed. It is 
            not necessary the newest acquired image. It points to the image buffer
            that is returned due to the last grab synchronization method (i.e. 
            <c>Wait</c> method).
            </para><para>
            Use this image only in the same thread context in which you grab handling
            occurs. The object will stay the same, but the underlying buffer changes
            when the synchronization method returns successfully. If you need the 
            image in a parallel context copy the image 
            (<see cref="M:Stemmer.Cvb.Image.Copy"/>)
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceImage.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Creates the VideoImage.
            </summary>
            <remarks>
            No memory pressure is performed by this image as the device holds the
            memory. It is guessed via the <i>IRingBuffer</i> interface.
            </remarks>
            <param name="device">Device object (and thus the image handle).</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceImage.Dispose(System.Boolean)">
            <summary>
            Change the dispose handling by just detaching from the native handle.
            </summary>
            <param name="disposing"><c>true</c> when called via 
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DeviceImage.IsDisconnected">
            <summary>
            Gets whether this image is now standalone (not connected to a device
            anymore.
            </summary>
            <remarks>
            Disconnected images point to the last acquired image in the device's
            ring buffer. But no other access is possible on these kind of images.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DeviceImage.Parent">
            <summary>
            Gets the parent device of this image.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DeviceInterfaceBase">
            <summary>
            Base class of all the driver interface implementations.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceInterfaceBase.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Ctor.
            </summary>
            <param name="device">Parent device.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DeviceInterfaceBase.Parent">
            <summary>
            The <see cref="T:Stemmer.Cvb.Device"/> this interface works on.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DigitalIO">
            <summary>
            Digital I/O operations on a <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DigitalIO.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Creates a <c>DigitalIO</c> object from the given 
            <paramref name="device"/>.
            </summary>
            <param name="device">Parent device.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DigitalIO.InputCount">
            <summary>
            Gets the number of digital input ports of the <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DigitalIO.OutputCount">
            <summary>
            Gets the number of digital output ports of the <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DigitalIO.ReadInputBit(System.Int32)">
            <summary>
            Reads a single input <paramref name="port"/> from the device.
            </summary>
            <param name="port">Port index to read.</param>
            <returns><c>true</c> for input high state; <c>false</c> for low.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DigitalIO.ReadInputGroup(System.Int32)">
            <summary>
            Reads a single output <paramref name="group"/> from the device.
            </summary>
            <param name="group">Port index to read.</param>
            <returns><c>true</c> for output high state; <c>false</c> for low.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DigitalIO.ReadOutputBit(System.Int32)">
            <summary>
            Reads a single output <paramref name="port"/> from the device.
            </summary>
            <param name="port">Port index to read.</param>
            <returns><c>true</c> for output high state; <c>false</c> for low.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DigitalIO.ReadOutputGroup(System.Int32)">
            <summary>
            Reads the output <paramref name="group"/> from the device.
            </summary>
            <remarks>
            An output group consists of 32 single ports. Non existent ports are 
            always 0. Thus there are only more than one output group if 
            <see cref="P:Stemmer.Cvb.Driver.DigitalIO.OutputCount"/> is larger than 32.
            </remarks>
            <param name="group">Group index to read.</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DigitalIO.WriteOutputBit(System.Int32,System.Boolean)">
            <summary>
            Write a single output <paramref name="port"/> to the device.
            </summary>
            <param name="port">Port index to write.</param>
            <param name="value"><c>true</c> for hight state; <c>false</c> for low.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DigitalIO.WriteOutputGroup(System.Int32,System.Collections.Specialized.BitVector32)">
            <summary>
            Writes the output <paramref name="group"/> to the device.
            </summary>
            <remarks>
            An output group consists of 32 single ports. Non existent ports are 
            ignored. Thus there are only more than one output group if 
            <see cref="P:Stemmer.Cvb.Driver.DigitalIO.OutputCount"/> is larger than 32.
            </remarks>
            <param name="group">Group index to write.</param>
            <param name="value">Vector of port states.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DigitalIO.WriteOutputGroup(System.Int32,System.Collections.Specialized.BitVector32,System.Collections.Specialized.BitVector32)">
            <summary>
            Writes the <paramref name="mask"/>ed output <paramref name="group"/> 
            to the device.
            </summary>
            <remarks>
            An output group consists of 32 single ports. Non existent ports are 
            ignored. Thus there are only more than one output group if 
            <see cref="P:Stemmer.Cvb.Driver.DigitalIO.OutputCount"/> is larger than 32.
            </remarks>
            <param name="group">Group index to write.</param>
            <param name="value">Vector of port states.</param>
            <param name="mask">Bit mask for the bits being actually set to the 
            ports.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.ModuleLayer">
            <summary>
            Level of an access token entry.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ModuleLayer.Unknown">
            <summary>
            Invalid or not filled yet.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ModuleLayer.System">
            <summary>
            Discovery system module (root).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ModuleLayer.Vin">
            <summary>
            VIN driver module.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ModuleLayer.TransportLayerSystem">
            <summary>
            GenTL Producer system module.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ModuleLayer.TransportLayerInterface">
            <summary>
            GenTL Producer interface module.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ModuleLayer.TransportLayerDevice">
            <summary>
            GenTL Producer device module.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ModuleLayer.TransportLayerStream">
            <summary>
            GenTL Producer stream module.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DiscoveryProperties">
            <summary>
            Properties which can be queried from a <see cref="T:Stemmer.Cvb.Driver.DiscoveryInformation"/>
            entry.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.InterfaceSubNetList">
            <summary>
            Ethernet interface only: subnet list.
            </summary>
            <remarks>
            The list contains space separated IP/subnet mask pairs.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.InterfaceMac">
            <summary>
            Ethernet interface only: MAC address.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.InterfaceTLType">
            <summary>
            Interface only: GenTL transport layer type.
            </summary>
            <remarks>
            Content as per GenICam GenTL specification (www.GenICam.org).
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.InterfaceDisplayName">
            <summary>
            Interface only: Human readable name of the interface.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.InterfaceDriverType">
            <summary>
            Interface only: for Stemmer Imaging GEVTL type.
            </summary>
            <remarks>
            Possible values are  "SOCKET", "FILTER", "NA" (not applicable),
            "UNKNOWN".
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.InterfaceId">
            <summary>
            Interface only: GenTL identifier of the interface.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceTransportLayerType">
            <summary>
            Device only: GenTL transport layer type.
            </summary>
            <remarks>
            Content as per GenICam GenTL specification (www.GenICam.org).
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceUsername">
            <summary>
            Device only: User configured name.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceSerialNumber">
            <summary>
            Device only: Serial number.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceMac">
            <summary>
            Ethernet device only: MAC address.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceIP">
            <summary>
            Ethernet device only: IP address.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceSubnetMask">
            <summary>
            Ethernet device only: Subnet mask.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceUsbVendorId">
            <summary>
            USB device only: USB vendor identifier.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceUsbProductId">
            <summary>
            USB device only: USB product identifier.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceVendor">
            <summary>
            Device only: Vendor name.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceModel">
            <summary>
            Device only: Model name.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceId">
            <summary>
            Device only: GenTL identifier of the interface.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.DeviceAccessStatus">
            <summary>
            Device only: accessibility status.
            </summary>
            <remarks>
            Possible values are "READWRITE", "READONLY", "NOACCESS",
            "UNKNOWN" (for non-Stemmer GenTL Producers).
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.TransportLayerId">
            <summary>
            Unique identifier of the GenTL Producer.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.TransportLayerPath">
            <summary>
            File path of the CTI file (GenTL Producer library).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.TransportLayerVendor">
            <summary>
            Vendor name of the GenTL Producer.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryProperties.UsbPortPath">
            <summary>
            Port path of the USB device.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DiscoveryInformation">
            <summary>
            Stores information on a discovered device/node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformation.#ctor(Stemmer.Cvb.Driver.DiscoveryInformationList,System.Int32)">
            <summary>
            Creates the link to one entry in the <paramref name="parent"/> list.
            </summary>
            <param name="parent">The native list object.</param>
            <param name="index">This element's index.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformation.Parent">
            <summary>
            Gets the parent list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformation.Index">
            <summary>
            Gets the index of this element in the <see cref="P:Stemmer.Cvb.Driver.DiscoveryInformation.Parent"/> list.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformation.GetEnumerator">
            <summary>
            Gets the typed enumerator for the available information properties.
            </summary>
            <returns>Available information enumerator.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformation.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the untyped enumerator for the available information properties.
            </summary>
            <returns>Available information enumerator.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformation.ToString">
            <summary>
            Gets the access token as a string representation.
            </summary>
            <returns>The access token.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformation.AccessToken">
            <summary>
            The access token for opening the device/node.
            </summary>
            <remarks>
            Also supports additional (parameterized) queries.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformation.DiscoveryLayer">
            <summary>
            Gets the highest <see cref="T:Stemmer.Cvb.Driver.ModuleLayer"/> in this discovery
            information.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformation.Item(Stemmer.Cvb.Driver.DiscoveryProperties)">
            <summary>
            Gets the value of the information property with the given
            <paramref name="id"/>.
            </summary>
            <param name="id">Information to get.</param>
            <returns>Text containing the information.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformation.TryGetProperty(Stemmer.Cvb.Driver.DiscoveryProperties,System.String@)">
            <summary>
            Tries to get the value of the information property with the given
            <paramref name="id"/>.
            </summary>
            <param name="id">Information to get.</param>
            <param name="property">Text containing the information if successful.
            </param>
            <returns><c>true</c> if successful; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformation.SetGenApiFeature(System.String,System.String,System.String)">
            <summary>
            Sets a GenICam GenApi feature to be set with a new
            <see cref="M:Stemmer.Cvb.DeviceFactory.Discover(Stemmer.Cvb.Driver.DiscoveryInformation)"/> run or
            while opening a <see cref="T:Stemmer.Cvb.Device"/> via this information.
            </summary>
            <remarks>
            The feature is set on this <see cref="P:Stemmer.Cvb.Driver.DiscoveryInformation.DiscoveryLayer"/> module.
            </remarks>
            <param name="nodeMapId">ID of the nodemap to get
            <paramref name="featureName"/> from. The identifiers are defined on
            <see cref="T:Stemmer.Cvb.Driver.NodeMapDictionary"/>.</param>
            <param name="featureName">Name of the GenApi feature to set.</param>
            <param name="featureValue">Value of the GenApi feature to set.</param>
            <exception cref="T:System.ObjectDisposedException">If <see cref="P:Stemmer.Cvb.Driver.DiscoveryInformation.Parent"/> has
            been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">If one of the <c>string</c>
            arguments is <c>null</c>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformation.SetParameter(System.String,System.String)">
            <summary>
            Sets a custom GenTL Producer dependent parameter.
            </summary>
            <remarks>
            Contact the support of the GenTL Producer to get a list of available
            parameters to set.
            </remarks>
            <param name="name">Name of the parameter to set.</param>
            <param name="value">Value of the parameter to set.</param>
            <exception cref="T:System.ObjectDisposedException">If <see cref="P:Stemmer.Cvb.Driver.DiscoveryInformation.Parent"/> has
            been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">If one of the <c>string</c>
            arguments is <c>null</c>.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DiscoveryInformationDebuggerView">
            <summary>
            Debugger view for the discovery info.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformationDebuggerView.DiscoveryLayer">
            <summary>
            First gets the highest layer in this entry.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformationDebuggerView.AccessToken">
            <summary>
            Then lists the access token.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformationDebuggerView.Items">
            <summary>
            Lists the items.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DiscoveryInformationList">
            <summary>
            Contains all results from a discovery run.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.#ctor(System.IntPtr)">
            <summary>
            Creates the wrapper object.
            </summary>
            <param name="handle">Native object handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.Dispose">
            <summary>
            Disposes this information list.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.Dispose(System.Boolean)">
            <summary>
            Actual dispose implementation.
            </summary>
            <param name="disposing"><c>true</c> if called from 
            <see cref="M:System.IDisposable.Dispose"/>; <c>false</c> if called from 
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformationList.Handle">
            <summary>
            Gets the native object handle of the discovery information list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformationList.IsDisposed">
            <summary>
            Gets whether this object has been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Driver.DiscoveryInformationList.ObjectDisposing">
            <summary>
            Event that is fired when this object is about to be disposed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformationList.Item(System.Int32)">
            <summary>
            Get the entry with the given <paramref name="index"/>.
            </summary>
            <param name="index">Entry index to get.</param>
            <returns>The entry at the given <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="index"/> is outside of range.</exception>
            <exception cref="T:System.NotSupportedException">Set is not supported.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformationList.Count">
            <summary>
            Gets the number of discovered devices/nodes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformationList.IsReadOnly">
            <summary>
            Always returns <c>true</c> as this is a read only collection.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.Add(Stemmer.Cvb.Driver.DiscoveryInformation)">
            <summary>
            Not supported.
            </summary>
            <param name="item">Ignored.</param>
            <exception cref="T:System.NotSupportedException">This collection is read only.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.Clear">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">This collection is read only.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.Contains(Stemmer.Cvb.Driver.DiscoveryInformation)">
            <summary>
            Checks whether the given <paramref name="item"/> is inside this list.
            </summary>
            <param name="item">Item to check.</param>
            <returns><c>true</c> if <paramref name="item"/> is inside this list;
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.CopyTo(Stemmer.Cvb.Driver.DiscoveryInformation[],System.Int32)">
            <summary>
            Copies the elements of this collection to an <paramref name="array"/>,
            starting at a particular <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">One-dimensional array that is the destination of
            the elements copied from this collection. The array must have 
            zero-based indexing.</param>
            <param name="arrayIndex">Zero-based index in <paramref name="array"/>
            at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is 
            <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="arrayIndex"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in this
            collection is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination 
            <paramref name="array"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.IndexOf(Stemmer.Cvb.Driver.DiscoveryInformation)">
            <summary>
            Gets the index of the given <paramref name="item"/>.
            </summary>
            <param name="item">The item to get the index for.</param>
            <returns>Index of the given <paramref name="item"/>; -1 if not inside
            this list.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.Insert(System.Int32,Stemmer.Cvb.Driver.DiscoveryInformation)">
            <summary>
            Not supported.
            </summary>
            <param name="index">Ignored.</param>
            <param name="item">Ignored.</param>
            <exception cref="T:System.NotSupportedException">This collection is read only.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.Remove(Stemmer.Cvb.Driver.DiscoveryInformation)">
            <summary>
            Not supported.
            </summary>
            <param name="item">Ignored.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotSupportedException">This collection is read only.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.RemoveAt(System.Int32)">
            <summary>
            Not supported.
            </summary>
            <param name="index">Ignored.</param>
            <exception cref="T:System.NotSupportedException">This collection is read only.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the untyped enumerator of this list.
            </summary>
            <returns>Enumerator enumerating all elements in this list.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationList.GetEnumerator">
            <summary>
            Gets the typed enumerator for this list.
            </summary>
            <returns>Enumerator enumerating all elements in this list.</returns>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DiscoveryInformationListDebugView._collection">
            <summary>
            Reference to the collection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DiscoveryInformationListDebugView.Items">
            <summary>
            This items of the collection as an array.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DiscoveryInformationListDebugView.#ctor(Stemmer.Cvb.Driver.DiscoveryInformationList)">
            <summary>
            Ctor.
            </summary>
            <param name="collection">Collection to view.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.EmuDevice">
            <summary>
            A <see cref="T:Stemmer.Cvb.Device"/> representing an image stream based on single
            image files.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.EmuDevice.EmuStream">
            <summary>
            Indexed stream for emu files.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuDevice.EmuStream.#ctor(Stemmer.Cvb.Driver.EmuDevice)">
            <summary>
            Ctor.
            </summary>
            <param name="device">The emu device.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuDevice.EmuStream.GetTimedSnapshot(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Makes sure no new timeout is set as emu devices do not support
            timeout set.
            </summary>
            <param name="timeSpan">Ignored.</param>
            <param name="status">The operation result.</param>
            <returns>Acquired image if <paramref name="status"/> was
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Ok"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuDevice.EmuStream.InnerWaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.StreamImage@)">
            <summary>
            Makes sure no new timeout is set as emu devices do not support
            timeout set.
            </summary>
            <param name="timeSpan">Ignored.</param>
            <param name="image">The resulting image.</param>
            <returns>Wait status.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuDevice.EmuStream.MakeSnapshotImage(System.IntPtr)">
            <summary>
            Factory function for creating the returned image from the acquisition
            engine.
            </summary>
            <param name="handle">Acquired image handle; <see cref="F:System.IntPtr.Zero"/>
            for non (i.e. the device handle points to the newly synced image.
            </param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuDevice.EmuStream.MakeStreamImage(System.IntPtr)">
            <summary>
            Implementation is the same as
            <see cref="M:Stemmer.Cvb.Driver.EmuDevice.EmuStream.MakeSnapshotImage(System.IntPtr)"/>.
            </summary>
            <param name="handle">Acquired image handle; <see cref="F:System.IntPtr.Zero"/>
            for non (i.e. the device handle points to the newly synced image.
            </param>
            <returns>Acquired image.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.EmuDevice.EmuStream.ImageCount">
            <summary>
            Gets the number of images contained in this stream.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.EmuDevice.EmuStream.ImageIndex">
            <summary>
            Gets or sets the index of the current active image.
            </summary>
            <value>
            The range of possible values is from 0 up to, not including,
            <see cref="P:Stemmer.Cvb.Driver.EmuDevice.EmuStream.ImageCount"/>.
            </value>>
        </member>
        <member name="P:Stemmer.Cvb.Driver.EmuDevice.EmuStream.Statistics">
            <summary>
            No statistics available.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.EmuDevice.EmuStream.RingBuffer">
            <summary>
            No ring buffer available.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.EmuDevice._memoryPressure">
            <summary>
            The guessed memory pressure.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuDevice.#ctor(System.IntPtr,System.String)">
            <summary>
            Creates the <c>EmuDevice</c> from the given CVB object
            <paramref name="handle"/>.
            </summary>
            <param name="handle">Handle to create object from.</param>
            <param name="fileName">Rooted path for the device file.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuDevice.Dispose(System.Boolean)">
            <summary>
            Additionally disposes the associated <see cref="P:Stemmer.Cvb.Driver.EmuDevice.EmuImage"/> if
            present.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuDevice.OnImageAcquired(Stemmer.Cvb.Image)">
            <summary>
            A <see cref="T:Stemmer.Cvb.Driver.Stream"/> currently acquiring images calls this method
            to inform the device of newly acquired images.
            </summary>
            <param name="image">Newly acquired image (ignored).</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuDevice.ChangeHandle(System.IntPtr,Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Override to ensure error reporting.
            </summary>
            <param name="newHandle">Ignored.</param>
            <param name="mode">Ignored.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.EmuDevice.Streams">
            <summary>
            Access to the available acquisition streams of this device.
            </summary>
            <value>
            Collection of streams for acquisition.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Driver.EmuDevice.StreamCount">
            <summary>
            Number of streams of this device.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuDevice.GetStream``1(System.Int32)">
            <summary>
            Not supported by this device.
            Use the <see cref="T:Stemmer.Cvb.Driver.Stream"/> property.
            </summary>
            <typeparam name="T">Ignored.</typeparam>
            <param name="streamIndex">Ignored.</param>
            <returns>Ignored.</returns>
        </member>
        <member name="F:Stemmer.Cvb.Driver.EmuDevice._stream">
            <summary>
            The CVB stream of this device.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.EmuDevice.EmuImage">
            <summary>
            Gets the <c>EmuImage</c> of this device if available.
            </summary>
            <remarks>
            The image's content points to the latest waited on image of stream 0.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.EmuDevice.DeviceImage">
            <summary>
            Alias for the <see cref="P:Stemmer.Cvb.Driver.EmuDevice.EmuImage"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.EmuDevice.CurrentFileName">
            <summary>
            Gets the currently used file.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.EmuDevice.FrameTime">
            <summary>
            Gets or sets the time when frame is valid.
            </summary>
            <remarks>
            Thus the frame rate would be 1/<c>FrameTime.TotalSeconds</c>.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.EmuImage">
            <summary>
            Image of a CVB emulation object.
            </summary>
            <remarks>
            <para>
            This image points to the image data that is currently processed. It 
            points to the image buffer that is returned due to the last grab 
            synchronization method (i.e. <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> method).
            </para><para>
            Use this image only in the same thread context in which your grab 
            handling occurs. The object will stay the same, but the underlying buffer 
            changes when the synchronization method return successfully. If you need 
            the image in a parallel context either copy the image 
            (<see cref="M:Stemmer.Cvb.Image.Copy"/>).
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.EmuImage.#ctor(Stemmer.Cvb.Driver.EmuDevice)">
            <summary>
            Creates the <c>EmuImage</c>.
            </summary>
            <remarks>
            No memory pressure is performed by this image as the device holds the
            memory.
            </remarks>
            <param name="device">Device object (and thus the image handle).</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IImageRect">
            <summary>
            Image rectangle query and change operations.
            </summary>
            <remarks>
            <para>
            With this interface you can configure the AOI that is streamed from the
            camera's sensor.
            </para><para>
            You can also use this interface to adjust CVB's buffers for incoming 
            data according to the current device's settings.
            </para>
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IImageRect.SensorSize">
            <summary>
            Full size of the sensor in pixels.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IImageRect.Offset">
            <summary>
            Gets or sets the offset of the image rectangle from the top left 
            corner of the sensor.
            </summary>
            <remarks>
            <para>
            The set value may be adjusted according to the used hardware. To get
            the actual value you need to reread this offset after setting it.
            </para><para>
            Many devices support changing the offset while grab is active as the
            buffer size does not change.
            </para>
            </remarks>
            <value>
            The value range is 0 to 
            <see cref="P:Stemmer.Cvb.Driver.IImageRect.SensorSize"/>.<see cref="P:Stemmer.Cvb.Size2D.Width"/> - <see cref="P:Stemmer.Cvb.Driver.IImageRect.Size"/>.<see cref="P:Stemmer.Cvb.Size2D.Width"/> 
            and 0 to 
            <see cref="P:Stemmer.Cvb.Driver.IImageRect.SensorSize"/>.<see cref="P:Stemmer.Cvb.Size2D.Height"/> - <see cref="P:Stemmer.Cvb.Driver.IImageRect.Size"/>.<see cref="P:Stemmer.Cvb.Size2D.Height"/>
            pixels.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IImageRect.Size">
            <summary>
            Gets the size of the image rectangle.
            </summary>
            <remarks>
            Setting a new value results in new image buffers. Thus setting is only
            supported via either <see cref="M:Stemmer.Cvb.Driver.IImageRect.Update(Stemmer.Cvb.DeviceUpdateMode)"/> 
            and  <see cref="M:Stemmer.Cvb.Driver.IImageRect.ChangeSize(Stemmer.Cvb.Size2D,Stemmer.Cvb.DeviceUpdateMode)"/> methods.
            </remarks>
            <value>
            Size of the image in pixels.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IImageRect.Update(Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Reads out the current image format data from the device and adjusts
            the streaming input buffer accordingly.
            </summary>
            <remarks>
            <para>
            Calling this method is only possible if the acquisition not 
            <see cref="P:Stemmer.Cvb.Driver.Stream.IsRunning"/>.
            </para><para>
            If you changed the image dimension or color format e.g. via the 
            <see cref="T:Stemmer.Cvb.GenApi.NodeMap"/> interface, you can update the image 
            buffer via this call. This is necessary prior starting a new 
            acquisition!
            </para><para>
            If you are unsure about the <paramref name="mode"/>, simply use
            <see cref="F:Stemmer.Cvb.DeviceUpdateMode.UpdateDeviceImage"/>.
            </para>
            </remarks>
            <param name="mode">Defines how to handle device images.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IImageRect.ChangeSize(Stemmer.Cvb.Size2D,Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Sets a new size to the image rectangle and thus the streamed image.
            </summary>
            <remarks>
            <para>
            Calling this method is only possible if the acquisition not 
            <see cref="P:Stemmer.Cvb.Driver.Stream.IsRunning"/>.
            </para><para>
            The <paramref name="newSize"/> may be adjusted according to the used 
            hardware. To get the actual value you need to read the 
            <see cref="P:Stemmer.Cvb.Driver.IImageRect.Size"/> after setting it.
            </para><para>
            Possible sizes are up to
            <see cref="P:Stemmer.Cvb.Driver.IImageRect.SensorSize"/>.<see cref="P:Stemmer.Cvb.Size2D.Width"/> - <see cref="P:Stemmer.Cvb.Driver.IImageRect.Offset"/>.<see cref="P:Stemmer.Cvb.Point2D.X"/> 
            and 
            <see cref="P:Stemmer.Cvb.Driver.IImageRect.SensorSize"/>.<see cref="P:Stemmer.Cvb.Size2D.Height"/> - <see cref="P:Stemmer.Cvb.Driver.IImageRect.Offset"/>.<see cref="P:Stemmer.Cvb.Point2D.Y"/>
            </para><para>
            If you are unsure about the <paramref name="mode"/>, simply use
            <see cref="F:Stemmer.Cvb.DeviceUpdateMode.UpdateDeviceImage"/>.
            </para>
            </remarks>
            <param name="newSize">New size of the image rect in pixels.</param>
            <param name="mode">Defines how to handle device images.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.ImageRect">
            <summary>
            Image rectangle operations on a <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.ImageRect.Command">
            <summary>
            Commands to be sent to the native library.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ImageRect.Command.Get">
            <summary>
            Get the actual settings for the size or the offset.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ImageRect.Command.SetAutodelete">
            <summary>
            Sets the size and decrement the image reference count of the input
            image automatically.
            </summary>
            <remarks>
            This is what you really want to use and which works as expected.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ImageRect.Command.Validate">
            <summary>
            Validates a certain size or offset. The function returns the closest
            possible values.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ImageRect.Command.Set">
            <summary>
            Sets the size or the offset but doesn't decrement the RefCount.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> Be aware that the reference count of the input
            image is increased by one! You have to release the input image
            twice.
            </para><para>
            There seems to be a use case for that which is not remembered
            anymore.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ImageRect.Command.Reset">
            <summary>
            Creates a new image with the standard size of the image acquisition
            device driver.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ImageRect.Command.Check">
            <summary>
            Not allowed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.ImageRect._ringBuffer">
            <summary>
            Reference to the ringbuffer for updating it on size changes.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageRect.#ctor(Stemmer.Cvb.Device,Stemmer.Cvb.Driver.RingBuffer)">
            <summary>
            Creates a new <c>ImageRect</c> object from the given
            <paramref name="device"/> device.
            </summary>
            <param name="device">Parent device.</param>
            <param name="ringBuffer">The ringbuffer for updating the class on
            image changes.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.ImageRect.SensorSize">
            <summary>
            Gets the sensor size.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.ImageRect.Offset">
            <summary>
            Gets/sets the offset of the image rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.ImageRect.Size">
            <summary>
            Gets the current rectangle size.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageRect.Update(Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Updates the CVB buffer according to the current device settings.
            </summary>
            <param name="mode">How to handle the device image.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ImageRect.ChangeSize(Stemmer.Cvb.Size2D,Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Sets the <paramref name="newSize"/>.
            </summary>
            <param name="newSize"></param>
            <param name="mode"></param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NotifyEventArgs">
            <summary>
            Event argument for notification events.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NotifyEventArgs.#ctor(System.Object)">
            <summary>
            Creates the event argument with the given <paramref name="value"/>.
            </summary>
            <param name="value">Value delivered with the event.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NotifyEventArgs.Value">
            <summary>
            Gets the value delivered with the event.
            </summary>
            <remarks>
            Possible data types are:
            <list type="bullet">
            <item><description><c>null</c></description></item>
            <item><description><see cref="T:System.Int64"/></description></item>
            <item><description><see cref="T:System.Double"/></description></item>
            <item><description><see cref="T:System.String"/></description></item>
            <item><description><see cref="T:System.Boolean"/></description></item>
            <item><description><see cref="T:System.Byte"/> array</description></item>
            </list>
            </remarks>
            <value>
            Value delivered by the event; maybe <c>null</c>.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.Driver.INotifyObservable">
            <summary>
            Observable of of the <c>INotify</c> interface.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.INotifyObservable.Description">
            <summary>
            Descriptive text of this event.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.INotifyObservable.ID">
            <summary>
            The native identifier of this event.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.INotifyObservable.IsAvailable">
            <summary>
            Gets whether this event can be currently registered.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Driver.INotifyObservable.Event">
            <summary>
            Fired when this observable has a notification.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IRegPort">
            <summary>
            Enables direct memory access on the device.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IRegPort.Read(System.Int64)">
            <summary>
            Reads a four-byte integer from the device.
            </summary>
            <remarks>
            Here you do not need to take device endianness into account.
            </remarks>
            <param name="address">Address to read four bytes from.</param>
            <returns>Read four-byte integer.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IRegPort.Read(System.Int64,System.IntPtr,System.Int64)">
            <summary>
            Reads <paramref name="bufferLength"/> bytes from the 
            <paramref name="address"/> into the memory at 
            <paramref name="bufferPointer"/>.
            </summary>
            <remarks>
            Some transport layers have constraints in how many bytes can be read
            (i.e. max size and granularity). Also here device endianness needs to
            be taken into account if non-byte data is retrieved.
            </remarks>
            <param name="address">Address to read from.</param>
            <param name="bufferPointer">Pointer to write read data to.</param>
            <param name="bufferLength">Size of the memory chunk at
            <paramref name="bufferPointer"/>.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IRegPort.Read(System.Int64,System.Byte[])">
            <summary>
            Reads memory into the given <paramref name="buffer"/>.
            </summary>
            <remarks>
            Some transport layers have constraints in how many bytes can be read
            (i.e. max size and granularity). Also here device endianness needs to
            be taken into account if non-byte data is retrieved.
            </remarks>
            <param name="address">Address to read from.</param>
            <param name="buffer">Array to save data into.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IRegPort.Write(System.Int64,System.Int32)">
            <summary>
            Writes the <paramref name="value"/> to <paramref name="address"/>.
            </summary>
            <param name="address">Address to write to.</param>
            <param name="value">Value to write to device.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IRegPort.Write(System.Int64,System.IntPtr,System.Int64)">
            <summary>
            Writes the contents of the buffer at <paramref name="bufferPointer"/>
            to the given <paramref name="address"/>.
            </summary>
            <remarks>
            Some transport layers have constraints in how many bytes can be 
            written (i.e. max size and granularity). Also here device endianness 
            needs to be taken into account if non-byte data is retrieved.
            </remarks>
            <param name="address">Address to write to.</param>
            <param name="bufferPointer">Memory buffer to write to device.</param>
            <param name="bufferLength">Number of bytes to write from 
            <paramref name="bufferPointer"/>.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IRegPort.Write(System.Int64,System.Byte[])">
            <summary>
            Write the contents of <paramref name="buffer"/> to the given
            <paramref name="address"/>.
            </summary>
            <remarks>
            Some transport layers have constraints in how many bytes can be 
            written (i.e. max size and granularity). Also here device endianness 
            needs to be taken into account if non-byte data is retrieved.
            </remarks>
            <param name="address">Address to write to.</param>
            <param name="buffer">Values to write to device.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.RingBufferLockMode">
            <summary>
            Lock mode options.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.RingBufferLockMode.Auto">
            <summary>
            Buffer is automatically unlocked while streaming.
            </summary>
            <remarks>
            Traditional CVB behavior when you are using any of the acquisition 
            interfaces.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.RingBufferLockMode.Off">
            <summary>
            Buffers are not locked at all.
            </summary>
            <remarks>
            Images are simply written in the ring buffer and overwrite existing 
            image data.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.RingBufferLockMode.On">
            <summary>
            Buffer is locked after acquisition. 
            </summary>
            <remarks>
            Has to be manually unlocked via 
            <see cref="M:Stemmer.Cvb.Driver.RingBufferImage.Unlock"/> method. If all buffers are 
            locked the system looses images. 
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IRingBuffer">
            <summary>
            RingBuffer operations on a <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IRingBuffer.Count">
            <summary>
            Gets the number of buffers in this ring buffer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IRingBuffer.LockMode">
            <summary>
            Gets/sets the current lock mode.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IRingBuffer.Item(System.Int32)">
            <summary>
            Gets the ring buffer image at the given <paramref name="bufferIndex"/>.
            </summary>
            <param name="bufferIndex">Index of image to retrieve.</param>
            <returns>The ring buffer image at <paramref name="bufferIndex"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IRingBuffer.GetAcquisitionSequence">
            <summary>
            Gets the sequence of ring buffer images in the order they were 
            acquired.
            </summary>
            <remarks>
            <para>
            Calling this method gives a snapshot of all acquired images based on
            the point in time when the last <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> or 
            related method was called.
            </para><para>
            The first entry in the list is thus the oldest waited upon image and
            the last one is the newest (the one returned by <c>Wait</c>).
            </para>
            </remarks>
            <returns>Array of <c>RingBuffer</c> indeces in acquisition order.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IRingBuffer.ChangeCount(System.Int32,Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Sets a new ring buffer size in the acquisition engine.
            </summary>
            <remarks>
            <para>
            Calling this method is only possible if the acquisition not 
            <see cref="P:Stemmer.Cvb.Driver.Stream.IsRunning"/>.
            </para><para>
            If you are unsure about the <paramref name="mode"/>, simply use
            <see cref="F:Stemmer.Cvb.DeviceUpdateMode.UpdateDeviceImage"/>.
            </para>
            </remarks>
            <param name="numBuffers">New number of image buffers.</param>
            <param name="mode">Defines how to handle device images.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.ISoftwareTrigger">
            <summary>
            Software trigger interface to trigger image acquisition from the 
            application.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ISoftwareTrigger.Send">
            <summary>
            Generates a software trigger.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.ISoftwareTrigger.Send(System.Int32)">
            <summary>
            Generates a software trigger with the specified <paramref name="id"/>
            for devices supporting different trigger ids.
            </summary>
            <remarks>
            Trigger <paramref name="id"/>s are device/driver specific.
            </remarks>
            <param name="id">Trigger id; 0 for default.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NodeMapNames">
            <summary>
            Contains all known node map names.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NodeMapNames.Device">
            <summary>
            The name of the node map that represents the remote device, i.e.
            camera.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NodeMapNames.Factory">
            <summary>
            The name of the node map that gives access to CVB's GenTL enumeration.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NodeMapNames.System">
            <summary>
            The name of the node map that gives access to the GenTL system (the TL
            itself) of the currently opened device.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NodeMapNames.Interface">
            <summary>
            The name of the node map that gives access to the GenTL interface
            (e.g. the NIC) of the currently opened device.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NodeMapNames.TLDevice">
            <summary>
            The name of the node map that gives access to the GenTL's side of the
            device (the proxy).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NodeMapNames.DataStream">
            <summary>
            The name of the node map that gives access to the GenTL streaming
            interface (grab/acquisition).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NodeMapNames.VinBuffer">
            <summary>
            The name of the node map that represents the video interface driver buffer.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NodeMapDictionaryDebugView">
            <summary>
            Debug view for the node map dictionary.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NodeMapDictionaryDebugView.Items">
            <summary>
            Gets all the node maps as an array.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionaryDebugView.#ctor(Stemmer.Cvb.Driver.NodeMapDictionary)">
            <summary>
            Ctor.
            </summary>
            <param name="dictionary">The node map dictionary to inspect.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NodeMapDictionary">
            <summary>
            Device dictionary holding all node maps.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NodeMapDictionary.LockAnchor">
            <summary>
            Lock anchor for thread safety.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NodeMapDictionary.ParentHandle">
            <summary>
            Native handle of the parent object holding the node maps.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.#ctor(System.IntPtr)">
            <summary>
            Creates this dictionary from the given <paramref name="handle"/>
            <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
            <param name="handle">Parent handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.FromBuffer(Stemmer.Cvb.Driver.MultiPartImage)">
            <summary>
            Creates a new NodeMapDictionary from a given MultiPartImage
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.FromBuffer(Stemmer.Cvb.PointCloud)">
            <summary>
            Creates a new NodeMapDictionary from a given PointCloud
            </summary>
            <param name="pointCloud"> Point cloud object.</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.FromBuffer(Stemmer.Cvb.Composite)">
            <summary>
            Creates a new NodeMapDictionary from a given Composite
            </summary>
            <param name="composite"> Composite object.</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.Dispose">
            <summary>
            Dispose of all node maps immediately.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NodeMapDictionary.IsDisposed">
            <summary>
            Gets whether this object has been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.Dispose(System.Boolean)">
            <summary>
            Disposable implementation.
            </summary>
            <param name="disposing"><c>true</c> if called from
            <see cref="M:System.IDisposable.Dispose"/>; <c>false</c> if called from
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NodeMapDictionary.Item(System.String)">
            <summary>
            Indexer to retrieve a node map with the given <paramref name="name"/>.
            </summary>
            <param name="name">Name of the node map.</param>
            <returns><see cref="T:Stemmer.Cvb.GenApi.NodeMap"/> with the given <paramref name="name"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if <paramref name="name"/> does not exist in this collection.
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NodeMapDictionary.Values">
            <summary>
            Gets the value-collection containing all available nodes maps.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,Stemmer.Cvb.GenApi.NodeMap})">
            <summary>
            Gets whether the given pair <paramref name="item"/> is contained in
            this node map dictionary.
            </summary>
            <param name="item">Element to be checked.</param>
            <returns><c>true</c> if the key/value pair exists; <c>false</c>
            otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,Stemmer.Cvb.GenApi.NodeMap}[],System.Int32)">
            <summary>
            Copies the elements of this dictionary into the given
            <paramref name="array"/> starting at index
            <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">Array to copy elements into.</param>
            <param name="arrayIndex">Start index to copy to.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.GetEnumerator">
            <summary>
            Gets the enumerator for the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.
            </summary>
            <returns>Typed enumerator.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.TryGetValue(System.String,Stemmer.Cvb.GenApi.NodeMap@)">
            <summary>
            Tries to get the node map with the given <paramref name="name"/>.
            </summary>
            <param name="name">Name of the node map.</param>
            <param name="value">Will contain the <see cref="T:Stemmer.Cvb.GenApi.NodeMap"/> object if
            present.</param>
            <returns><c>true</c> if <paramref name="name"/> is contained in this
            dictionary; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.CreateNodeMapFromName(System.String)">
            <summary>
            Helper to create a native node map from the given module
            <paramref name="name"/>.
            </summary>
            <param name="name">Node map name.</param>
            <returns>Node map object with the given module
            <paramref name="name"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NodeMapDictionary.UpdateNodeMapDictionaryValues">
            <summary>
            Ensures prior to any value-enumeration that all values are set.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DeviceNodeMapDictionary">
            <summary>
            <see cref="T:Stemmer.Cvb.Driver.NodeMapDictionary"/> for <see cref="T:Stemmer.Cvb.Device"/>s.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceNodeMapDictionary.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Creates this dictionary from the given <paramref name="parent"/>
            <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
            <param name="parent">Parent device.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DeviceNodeMapDictionary.Parent">
            <summary>
            Gets the device this dictionary is for.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.StreamNodeMapDictionary">
            <summary>
            <see cref="T:Stemmer.Cvb.Driver.NodeMapDictionary"/> for <see cref="T:Stemmer.Cvb.Driver.Stream"/>s.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.StreamNodeMapDictionary.#ctor(Stemmer.Cvb.Driver.CompositeStreamBase)">
            <summary>
            Creates this dictionary from the given <paramref name="parent"/>
            <see cref="T:Stemmer.Cvb.Driver.Stream"/>.
            </summary>
            <param name="parent">Parent stream.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.StreamNodeMapDictionary.Parent">
            <summary>
            Gets the device this dictionary is for.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.BufferNodeMapDictionary">
            <summary>
            <see cref="T:Stemmer.Cvb.Driver.NodeMapDictionary"/> for <see cref="T:Stemmer.Cvb.Driver.Stream"/>s.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferNodeMapDictionary.#ctor(Stemmer.Cvb.INativeHandle)">
            <summary>
            Creates this dictionary from the given <paramref name="parent"/>.
            </summary>
            <param name="parent">Parent object.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.BufferNodeMapDictionary.Handle">
            <summary>
            Gets the parent handle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.BufferNodeMapDictionary.IsDisposed">
            <summary>
            Gets whether this object is disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Driver.BufferNodeMapDictionary.ObjectDisposing">
            <summary>
            Event that is fired when this object is disposing.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.BufferNodeMapDictionary.Dispose(System.Boolean)">
            <summary>
            Called either from <see cref="M:System.IDisposable.Dispose"/> or the finalizer.
            </summary>
            <param name="disposing"><b>true</b> if called from
            <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NonStreamingDevice">
            <summary>
            A <see cref="T:Stemmer.Cvb.Device"/> representing a device without any streaming 
            capabilities.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NonStreamingDevice.#ctor(System.IntPtr,System.String)">
            <summary>
            Creates the device.
            </summary>
            <param name="handle">Native handle.</param>
            <param name="fileName">Access token string.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NonStreamingDevice.ChangeHandle(System.IntPtr,Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Override to ensure error reporting.
            </summary>
            <param name="newHandle">Ignored.</param>
            <param name="mode">Ignored.</param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NonStreamingDevice.DeviceImage">
            <summary>
            Device image is not supported on devices without acquisition streams.
            </summary>
            <value>
            Always <c>null</c>.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NonStreamingDevice.DriverGuid">
            <summary>
            Get the globally unique identifier of a CVB driver.
            </summary>
            <value>
            This device resides in no driver and thus we use our fake 
            <see cref="F:Stemmer.Cvb.Driver.NonStreamingDevice.Guid"/>.
            </value>
            <remarks>
            Fake <c>Guid</c>. See <see cref="F:Stemmer.Cvb.Driver.NonStreamingDevice.Guid"/> for additional details.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">If this device has already
            been disposed.</exception>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NonStreamingDevice.Guid">
            <summary>
            This assembly's fake <see cref="T:System.Guid"/> for non-streaming devices.
            </summary>
            <remarks>
            Non-streaming devices have no grabber interface and thus no 
            <see cref="T:System.Guid"/>. For <see cref="T:Stemmer.Cvb.DeviceFactory"/> 
            book-keeping we define our own <c>Guid</c>.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NonStreamingDevice.Streams">
            <summary>
            Gets an empty stream collection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NonStreamingDevice.StreamCount">
            <summary>
            Number of streams of this device.
            Always 0.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NonStreamingDevice.GetStream``1(System.Int32)">
            <summary>
            Not supported by this device.
            Use the <see cref="T:Stemmer.Cvb.Driver.Stream"/> property.
            </summary>
            <typeparam name="T">Ignored.</typeparam>
            <param name="streamIndex">Ignored.</param>
            <returns>Ignored.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NotifyDictionaryDebugView">
            <summary>
            Debug view for the notify observable dictionary.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NotifyDictionaryDebugView.Items">
            <summary>
            Gets all the notify observables as an array.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NotifyDictionaryDebugView.#ctor(Stemmer.Cvb.Driver.NotifyDictionary)">
            <summary>
            Ctor.
            </summary>
            <param name="dictionary">The node map dictionary to inspect.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NotifyDictionary">
            <summary>
            Read-only collection containing all <b>INotify</b> events of a
            <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyDictionary.DeviceDisconnected">
            <summary>
            Device was disconnected (communication lost).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyDictionary.DeviceReconnect">
            <summary>
            Device was reconnected (communication regained).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyDictionary.DeviceImageGeometryChanged">
            <summary>
            Device width, height, plane number, and/or data type changed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyDictionary.NewMetaData">
            <summary>
            New meta data arrived.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NotifyDictionary.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Device to enumerate notify events on.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NotifyDictionary.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NotifyDictionary.Dispose">
            <summary>
            Disposes
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NotifyDictionary.Dispose(System.Boolean)">
            <summary>
            Dispose implementation.
            </summary>
            <param name="disposing"><c>true</c> if called from 
            <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NotifyObservable">
            <summary>
            Single notify event observable.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NotifyObservable.Datatype">
            <summary>
            Datatype delivered by the event.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyObservable.Datatype.Void">
            <summary>
            No data.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyObservable.Datatype.Int64">
            <summary>
            <c>long</c>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyObservable.Datatype.Float64">
            <summary>
            <c>double</c>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyObservable.Datatype.String">
            <summary>
            <c>String</c>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyObservable.Datatype.Binary">
            <summary>
            <c>Byte</c> array.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyObservable.Datatype.Boolean">
            <summary>
            <c>Boolean</c>.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NotifyObservable.Status">
            <summary>
            Status query commands.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyObservable.Status.NumCallbacksRegistered">
            <summary>
            Number of callbacks registered.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyObservable.Status.NumCallbacksFired">
            <summary>
            Number of callbacks fired for a specific event type.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NotifyObservable.Status.IsAvailable">
            <summary>
            Availability of the event at the time of the status inquiry.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NotifyObservable.#ctor(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent device.</param>
            <param name="eventIndex">Index of the notify event.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NotifyObservable.Dispose">
            <summary>
            Disposes of this object immediately.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NotifyObservable.Dispose(System.Boolean)">
            <summary>
            Unregisters the native event if necessary.
            </summary>
            <param name="disposing"><c>true</c> if called from
            <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NotifyObservable.Description">
            <summary>
            The identifier of this event.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NotifyObservable.IsAvailable">
            <summary>
            Gets whether the current device can actually handle this event.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.NotifyObservable.ID">
            <summary>
            Native ID.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Driver.NotifyObservable.Event">
            <summary>
            The event to register.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NotifyObservable.NotifyObservable_Callback(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Called from native library.
            </summary>
            <param name="eventID">Ignored.</param>
            <param name="pBuffer">Data to be interpreted.</param>
            <param name="bufferSize">Number of bytes in <paramref name="pBuffer"/>.
            </param>
            <param name="bufferType"><see cref="T:Stemmer.Cvb.Driver.NotifyObservable.Datatype"/> of the buffer.</param>
            <param name="pPrivate">Ignored.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.RegPort">
            <summary>
            Register port implementation.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RegPort.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Ctor.
            </summary>
            <param name="device">Interface device.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RegPort.Parent">
            <summary>
            The parent of this interface.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RegPort.Read(System.Int64)">
            <summary>
            Reads DWORD.
            </summary>
            <param name="address">Address to read from.</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RegPort.Read(System.Int64,System.IntPtr,System.Int64)">
            <summary>
            Reads into the buffer at <paramref name="bufferPointer"/>.
            </summary>
            <param name="address">Address to read from.</param>
            <param name="bufferPointer">Address of buffer.</param>
            <param name="bufferLength">Size of buffer.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RegPort.Read(System.Int64,System.Byte[])">
            <summary>
            Reads into <paramref name="buffer"/>.
            </summary>
            <param name="address">Address to read from.</param>
            <param name="buffer">Buffer to write into.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RegPort.Write(System.Int64,System.Int32)">
            <summary>
            Write the <paramref name="value"/> to <paramref name="address"/>.
            </summary>
            <param name="address">Address to write to.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RegPort.Write(System.Int64,System.Byte[])">
            <summary>
            Writes the <paramref name="buffer"/> to <paramref name="address"/>.
            </summary>
            <param name="address">Address to write to.</param>
            <param name="buffer">Buffer to write.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RegPort.Write(System.Int64,System.IntPtr,System.Int64)">
            <summary>
            Writes the buffer at <paramref name="bufferPointer"/> to
            <paramref name="address"/>.
            </summary>
            <param name="address">Address to write to.</param>
            <param name="bufferPointer">Address of buffer.</param>
            <param name="bufferLength">Size of buffer.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.RingBufferDebugView">
            <summary>
            Helper to show only the relevant ring buffer images.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBufferDebugView.#ctor(Stemmer.Cvb.Driver.RingBuffer)">
            <summary>
            Creates the debug view.
            </summary>
            <param name="ringBuffer">Ring buffer to view.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RingBufferDebugView.LockMode">
            <summary>
            The current lock mode.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RingBufferDebugView.RBItems">
            <summary>
            The items.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.RingBuffer">
            <summary>
            RingBuffer operations on a <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.RingBuffer.CommandGet">
            <summary>
            Gets a value via the ring buffer functions.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.RingBuffer.CommandSet">
            <summary>
            Sets a value via the ring buffer functions.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.RingBuffer._bufferImages">
            <summary>
            Weak reference to all ring buffer images.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.RingBuffer._memoryPressure">
            <summary>
            Stores the memory pressure from this ring buffer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Creates a <c>RingBuffer</c> object from the given
            <paramref name="device"/>.
            </summary>
            <param name="device">Parent device.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.Dispose">
            <summary>
            Disposes this ring buffer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.Dispose(System.Boolean)">
            <summary>
            Dispose implementation with <paramref name="disposing"/> flag.
            </summary>
            <param name="disposing"><c>true</c> if called from 
            <see cref="T:System.IDisposable"/> interface; <c>false</c> if called from 
            finalizer.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.GuessMemoryPressure">
            <summary>
            Guesses the memory pressure based on the images and their number.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RingBuffer.Count">
            <summary>
            Number of buffers in the ring buffer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RingBuffer.Item(System.Int32)">
            <summary>
            Access to a single ring buffer image specified by its
            <paramref name="bufferIndex"/>.
            </summary>
            <remarks>
            The ring buffer images are stored as weak references and are recreated
            if finalized or disposed. But this also means there is at most one
            ring buffer image available for one buffer index.
            </remarks>
            <param name="bufferIndex">Image index of the ring buffer image to 
            access.</param>
            <returns>The image at <paramref name="bufferIndex"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.GetAcquisitionSequence">
            <summary>
            Creates the acquisition sequence in acquisition order.
            </summary>
            <returns>First entry is the oldest.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.RingBuffer.LockMode">
            <summary>
            Gets/sets the current lock mode.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.LockModeFromHandle(System.IntPtr)">
            <summary>
            Gets the lock moder for the given native <paramref name="handle"/>.
            </summary>
            <param name="handle">Native device (image) handle to query.</param>
            <returns>The lock mode.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.ChangeCount(System.Int32,Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Changes the number of buffers in this ring buffer.
            </summary>
            <remarks>
            If you are unsure about the <paramref name="mode"/>, simply use
            <see cref="F:Stemmer.Cvb.DeviceUpdateMode.UpdateDeviceImage"/>. If you use this,
            all <see cref="T:Stemmer.Cvb.Driver.RingBufferImage"/>s are disposed/unlocked.
            </remarks>
            <param name="numBuffers">New number of buffers in the ring buffer.
            </param>
            <param name="mode">Defines how to handle device images.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.ResetBufferImageCache(System.WeakReference[])">
            <summary>
            Resets the .Net cached images of this ring buffer and with that 
            updates the memory pressure.
            </summary>
            <param name="bufferImages">The new (empty array) of weak references to
            ring buffer images.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.GetEnumerator">
            <summary>
            Gets the typed enumerator iterating all available images.
            </summary>
            <returns>Typed iterator.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.RingBuffer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the untyped enumerator iterating all available images.
            </summary>
            <returns>Untyped iterator.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.SoftwareTrigger">
            <summary>
            Implementation of the software trigger.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.SoftwareTrigger.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Interface parent device.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.SoftwareTrigger.Parent">
            <summary>
            The parent device.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.SoftwareTrigger.Send">
            <summary>
            Send default trigger.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.SoftwareTrigger.Send(System.Int32)">
            <summary>
            Send trigger with <paramref name="id"/>.
            </summary>
            <param name="id">Trigger id.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.StreamInfo">
            <summary>
            Queryable information.
            </summary>
            <remarks>
            <c>Attention:</c> All streams only provide a sub-set of the available 
            queries. So always make sure that the information is available when
            switching devices/drivers.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.IsCameraDetected">
            <summary>
            Gets whether a camera is currently detected.
            </summary>
            <remarks>
            <para>
            The value is interpreted as a C boolean: everything except 0 is 
            <c>true</c>.
            </para><para>
            This information depends on the camera/frame grabber technology. It 
            can be the presence of a signal from e.g. a CameraLink camera or an 
            active heartbeat signal from a GigE Vision device.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersAcquired">
            <summary>
            The number of images buffers acquired since start of the last 
            acquisition.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersDelivered">
            <summary>
            Number of image buffers successfully returned by the stream's wait
            method.
            </summary>
            <remarks>
            This counts both corrupt and complete image buffers. Corrupt images
            are only delivered if enabled by the driver (normally defaults to yes).
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersLost">
            <summary>
            Count that incorporates all lost image buffers despite their reason. 
            Can be transfer, corruption, or overflown ring buffer.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersLostTransfer">
            <summary>
            Count that only contains lost images during transfer.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersLostLocked">
            <summary>
            Count that only contains lost images due to ring buffer overflow.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersLocked">
            <summary>
            Number of images currently in locked state.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersPending">
            <summary>
            Number of images acquired, but not retrieved via the stream's wait 
            method.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersCorruptOnArrival">
            <summary>
            Count that contains erroneous image buffer acquisition.
            </summary>
            <remarks>
            Packet resend can alleviate this problem and result in complete buffer
            to be delivered via the stream's wait method. But higher counts 
            indicate a bad connection either due to transfer errors or to high
            throughput.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersCorruptOnDelivery">
            <summary>
            Count that contains erroneous image buffers delivered via the stream's
            wait method.
            </summary>
            <remarks>
            This count can only increase if corrupt images are delivered from the
            driver (default is yes). That means that either packet resend is 
            disabled or packet resend could not complete the image buffer.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumTriggersLost">
            <summary>
            Gets how many trigger signals where ignored by the device due to e.g.
            over-triggering.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersAnnounced">
            <summary>
            Number of buffers used in the acquisition engine.
            </summary>
            <remarks>
            This is the number of images in the ring buffer.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersQueued">
            <summary>
            Number of buffers available to be filled by the acquisition engine. 
            I.e. image buffers that are not locked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumBuffersBeingFilled">
            <summary>
            Number of buffer currently being filled by the acquisition engine.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumPacketsReceived">
            <summary>
            For packet based protocols this contains the actual number of packets 
            received (parts of a whole image buffer).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.StreamInfo.NumResends">
            <summary>
            Number of resend requests sent since start of the last acquisition.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.StreamStatisticsDebuggerView">
            <summary>
            Debugger view for the statistics.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.StreamStatisticsDebuggerView.Items">
            <summary>
            Lists the items.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.StreamStatistics">
            <summary>
            Gives access to stream related statistics.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.StreamStatistics.GetEnumerator">
            <summary>
            Gets the typed enumerator for the available statistics.
            </summary>
            <returns>Available statistics enumerator.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.StreamStatistics.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the untyped enumerator for the available statistics.
            </summary>
            <returns>Available statistics enumerator.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.StreamStatistics.TryGetValue(Stemmer.Cvb.Driver.StreamInfo,System.Double@)">
            <summary>
            Tries to retrieve the <paramref name="value"/> of statistic to 
            <paramref name="query"/>.
            </summary>
            <param name="query">Info to query.</param>
            <param name="value">Current value of the statistic.</param>
            <returns><c>true</c> if statistic value could be retrieved; 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.StreamStatistics.Item(Stemmer.Cvb.Driver.StreamInfo)">
            <summary>
            Gets the value of the statistic to <paramref name="query"/>.
            </summary>
            <param name="query">Info to query</param>
            <returns>Current value of the statistic.</returns>
            <exception cref="T:System.NotSupportedException">Statistic to 
            <paramref name="query"/> is not available.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Driver.NoStatistics">
            <summary>
            Statistics object for anything not being able to report statistics.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.NoStatistics.Default">
            <summary>
            The singleton instance for no statistics.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.NoStatistics.TryGetValue(Stemmer.Cvb.Driver.StreamInfo,System.Double@)">
            <summary>
            Always returns <c>false</c>.
            </summary>
            <param name="query">Ignored.</param>
            <param name="value">Set to <see cref="F:System.Double.NaN"/>.</param>
            <returns>Always <c>false</c>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.Grab2Statistics">
            <summary>
            Statistics implementation for the <c>IGrab2</c> interface.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.Grab2Statistics._parent">
            <summary>
            Parent device for handle access.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Grab2Statistics.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Creats the statistics object.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.Grab2Statistics.TryGetValue(Stemmer.Cvb.Driver.StreamInfo,System.Double@)">
            <summary>
            Uses <c>G2GetGrabStatus</c> to <paramref name="query"/> the 
            <paramref name="value"/>.
            </summary>
            <param name="query">Info to query.</param>
            <param name="value">Current value of the statistic.</param>
            <returns><c>true</c> if statistic value could be retrieved; 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.WaitStatus">
            <summary>
            Extended status code for <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait(Stemmer.Cvb.Driver.WaitStatus@)"/> 
            and <see cref="M:Stemmer.Cvb.Driver.IAcquisition.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@)"/> 
            methods.
            </summary>
            <remarks>
            <para>
            You can use the methods with this overload to not generate exceptions in 
            the cases <ses cref="F:Stemmer.Cvb.Driver.WaitStatus.Timeout"/> or <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Abort"/>.
            </para><para>
            With the <see cref="N:Stemmer.Cvb.Async"/> methods we follow the .Net idiom of setting 
            the <see cref="T:System.Threading.Tasks.Task"/> to canceled (see <see cref="P:System.Threading.Tasks.Task.IsCanceled"/>) 
            resulting in <see cref="T:System.OperationCanceledException"/> when using 
            <see langword="await"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.WaitStatus.Ok">
            <summary>
            Image was returned normally.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.WaitStatus.Timeout">
            <summary>
            No image was returned because the operation timed out.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.WaitStatus.Abort">
            <summary>
            No image was returned because the operation was 
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Abort"/>ed.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IAcquisition">
            <summary>
            Interface for all streaming devices
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.GetSnapshot">
            <summary>
            Acquires a single image and returns it.
            </summary>
            <remarks>
            <para>
            Waits infinitely for the image to be taken.
            </para><para>
            <c>Attention:</c> it is generally not possible to call this method
            while the acquisition has been started by <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Start"/>.
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para>
            </remarks>
            <returns>Grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.GetTimedSnapshot(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Acquires a single image and returns it.
            </summary>
            <remarks>
            <para>
            Waits for the given <paramref name="timeSpan"/> for the image to be 
            taken.
            </para><para>
            <c>Attention:</c> it is generally not possible to call this method
            while the acquisition has been started by <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Start"/>.
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para>
            </remarks>
            <param name="timeSpan">Time span to wait for (millisecond granularity).
            </param>
            <returns>Grabbed image.</returns>
            <exception cref="T:System.TimeoutException">Most common exception: 
            <paramref name="timeSpan"/> elapsed without receiving new image.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.GetTimedSnapshot(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Acquires a single image and returns it.
            </summary>
            <remarks>
            <para>
            Waits for the given <paramref name="timeSpan"/> for the image to be 
            taken.
            </para><para>
            <c>Attention:</c> it is generally not possible to call this method
            while the acquisition has been started by <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Start"/>.
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para><para>
            This method does not throw an exception when <paramref name="timeSpan"/>
            is exceeded; it will report this in the <paramref name="status"/> 
            with <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Timeout"/>. Other exceptions still might get 
            thrown on error conditions.
            </para>
            </remarks>
            <param name="timeSpan">Time span to wait for (millisecond granularity).
            </param>
            <param name="status">Variable to receive the status of this operation.
            </param>
            <returns>Grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.Start">
            <summary>
            Starts the acquisition of images.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.Wait">
            <summary>
            Waits infinitely for the next acquired image and returns it.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para>
            </remarks>
            <returns>Grabbed image.</returns>
            <exception cref="T:System.OperationCanceledException"><see cref="M:Stemmer.Cvb.Driver.IAcquisition.Abort"/> was 
            called while waiting.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.Wait(Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits infinitely for the next acquired image and returns it.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para><para>
            This method does not throw an exception when the operation was
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Abort"/>ed; it will report this in the 
            <paramref name="status"/> with <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Abort"/>. Other 
            exceptions still might get thrown on error conditions.
            </para>
            </remarks>
            <param name="status">Variable to receive the status of this operation.
            </param>
            <returns>Grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Waits for the given <paramref name="timeSpan"/> for the next acquired
            image.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para>
            </remarks>
            <param name="timeSpan">Time span to wait for (millisecond granularity).
            </param>
            <returns>Grabbed image.</returns>
            <exception cref="T:System.TimeoutException">Most common exception: 
            <paramref name="timeSpan"/> elapsed without receiving new image.
            </exception>
            <exception cref="T:System.OperationCanceledException"><see cref="M:Stemmer.Cvb.Driver.IAcquisition.Abort"/> was 
            called while waiting.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Driver.WaitStatus@)">
            <summary>
            Waits for the given <paramref name="timeSpan"/> for the next acquired
            image.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> it is generally not safe to call the wait method 
            from different threads on the same object!
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay 
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this 
            image in a display.
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para><para>
            This method does not throw an exception when the operation was
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Abort"/>ed or did time out; it will report this in the 
            <paramref name="status"/> with <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Abort"/> and
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Timeout"/> respectively. Other exceptions still 
            might get thrown on error conditions.
            </para>
            </remarks>
            <param name="timeSpan">Time span to wait for (millisecond granularity).
            </param>
            <param name="status">Variable to receive the status of this operation.
            </param>
            <returns>Grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.Stop">
            <summary>
            Stops the acquisition of images.
            </summary>
            <remarks>
            This stops the acquisition gracefully letting the ongoing operation 
            finish. The drawback of this might be that this call may take 
            indefinite time if <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> is used and no images are sent
            by the device.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.TryStop">
            <summary>
            Tries to stop the acquisition of images.
            </summary>
            <remarks>
            Like <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Stop"/> it tries to halt gracefully with the same
            implications. This variant does not throw exceptions exception
            <see cref="T:System.ObjectDisposedException"/>s.
            </remarks>
            <returns><c>true</c> on success; <c>false</c> on error.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.Abort">
            <summary>
            Stops the acquisition of images immediately.
            </summary>
            <remarks>
            <para>
            This stops the acquisition as fast as possible interrupting the 
            ongoing operation. This might result in partially acquired images and
            either the <see cref="T:System.OperationCanceledException"/> being thrown or
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Abort"/> being signaled by the aborted method.
            </para><para>
            If the underlying driver does not support this, this call behaves as
            if <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Stop"/> had been called.
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IAcquisition.TryAbort">
            <summary>
            Tries to stop the acquisition of images immediately.
            </summary>
            <remarks>
            Like <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Abort"/> it stops as fast as possible with the same
            implications. This variant does not throw exceptions exception
            <see cref="T:System.ObjectDisposedException"/>s.
            </remarks>
            <returns><c>true</c> on success; <c>false</c> on error.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IAcquisition.IsRunning">
            <summary>
            Gets whether the acquisition is currently active.
            </summary>
            <value>
            <c>true</c> if the underlying device is acquiring data; <c>false</c> 
            if it is idle.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DeviceControlOperation">
            <summary>
            Operation on driver specific parameter.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DeviceControlOperation.Get">
            <summary>
            Get information from the device.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DeviceControlOperation.Set">
            <summary>
            Set information in the device.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DeviceControlOperation.GetMinimum">
            <summary>
            Gets the minimal supported value for the parameter.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DeviceControlOperation.GetMaximum">
            <summary>
            Gets the maximal supported value for the parameter.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DeviceControlOperation.Verify">
            <summary>
            Verify the given value for the parameter.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DeviceControlCommand">
            <summary>
            A specific command to send to the driver.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DeviceControlCommand.OperationMask">
            <summary>
            Mask for the <see cref="T:Stemmer.Cvb.Driver.DeviceControlOperation"/> part of a command.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DeviceControlCommand.ParameterMask">
            <summary>
            Mask for the driver specific parameter part of a command.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceControlCommand.#ctor(Stemmer.Cvb.Driver.DeviceControlOperation,System.Int32)">
            <summary>
            Creates a command from the given <paramref name="operation"/> and
            command <paramref name="parameter"/>.
            </summary>
            <param name="operation">Operation to perform on 
            <paramref name="parameter"/>.</param>
            <param name="parameter">Driver specific command parameter.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DeviceControlCommand.Operation">
            <summary>
            Gets or sets the operation part of the command.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DeviceControlCommand.Parameter">
            <summary>
            Gets or sets the parameter part of the command.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceControlCommand.op_Implicit(Stemmer.Cvb.Driver.DeviceControlCommand)~System.Int32">
            <summary>
            Implicit conversion to an integer.
            </summary>
            <param name="cmd"><see cref="T:Stemmer.Cvb.Driver.DeviceControlCommand"/> to be converted.
            </param>
            <returns>Integer representation of the input <paramref name="cmd"/>.
            </returns>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DeviceControlCommand._command">
            <summary>
            The command.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IDeviceControl">
            <summary>
            Driver specific get or set operations on a <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDeviceControl.SendCommand(Stemmer.Cvb.Driver.DeviceControlCommand,System.String,System.String@)">
            <summary>
            Sends the given <paramref name="command"/> <paramref name="value"/>
            to the driver.
            </summary>
            <param name="command">Command to execute.</param>
            <param name="value">Value to send.</param>
            <param name="result">Command answer string.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDeviceControl.SendCommand``2(Stemmer.Cvb.Driver.DeviceControlCommand,``0,``1@)">
            <summary>
            Sends the given <paramref name="command"/> <paramref name="value"/>
            to the driver.
            </summary>
            <typeparam name="Tin">Value type (non-reference type).</typeparam>
            <typeparam name="Tout">Value type (non-reference type).</typeparam>
            <param name="command">Command to execute.</param>
            <param name="value">Value to send.</param>
            <param name="result">Command answer.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDeviceControl.SendCommand(Stemmer.Cvb.Driver.DeviceControlCommand,System.IntPtr,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Sends the given <paramref name="command"/> buffer.
            </summary>
            <remarks>
            The <paramref name="inputBufferSize"/> and 
            <paramref name="outputBufferSize"/> are given in <c>byte</c>s.
            </remarks>
            <param name="command">Command to execute.</param>
            <param name="inputBuffer">Pointer to input buffer to send.</param>
            <param name="inputBufferSize">Size of <paramref name="inputBuffer"/>
            data.</param>
            <param name="outputBuffer">Pointer to buffer to received command data;
            <see cref="F:System.IntPtr.Zero"/> to query size in 
            <paramref name="outputBufferSize"/>.</param>
            <param name="outputBufferSize">Size of the 
            <paramref name="outputBuffer"/> data if not <see cref="F:System.IntPtr.Zero"/>;
            will receive the minimal necessary size otherwise.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDeviceControl.SendCommand(Stemmer.Cvb.Driver.DeviceControlCommand,System.IntPtr,System.Int64,System.IntPtr,System.Int64@)">
            <summary>
            Sends the given <paramref name="command"/> buffer.
            </summary>
            <remarks>
            The <paramref name="inputBufferSize"/> and 
            <paramref name="outputBufferSize"/> are given in <c>byte</c>s.
            </remarks>
            <param name="command">Command to execute.</param>
            <param name="inputBuffer">Pointer to input buffer to send.</param>
            <param name="inputBufferSize">Size of <paramref name="inputBuffer"/>
            data.</param>
            <param name="outputBuffer">Pointer to buffer to received command data;
            <see cref="F:System.IntPtr.Zero"/> to query size in 
            <paramref name="outputBufferSize"/>.</param>
            <param name="outputBufferSize">Size of the 
            <paramref name="outputBuffer"/> data if not <see cref="F:System.IntPtr.Zero"/>;
            will receive the minimal necessary size otherwise.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IDeviceInterface">
            <summary>
            Base interface of all <see cref="T:Stemmer.Cvb.Device"/> interfaces.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IDeviceInterface.Parent">
            <summary>
            The <see cref="T:Stemmer.Cvb.Device"/> this interface works on.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IDigitalIO">
            <summary>
            Digital I/O operations on a <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IDigitalIO.InputCount">
            <summary>
            Gets the number of digital input ports of the <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IDigitalIO.OutputCount">
            <summary>
            Gets the number of digital output ports of the <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDigitalIO.ReadInputBit(System.Int32)">
            <summary>
            Reads a single input <paramref name="port"/> from the device.
            </summary>
            <param name="port">Port index to read.</param>
            <returns><c>true</c> for input high state; <c>false</c> for low.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDigitalIO.ReadInputGroup(System.Int32)">
            <summary>
            Reads the input <paramref name="group"/> from the device.
            </summary>
            <remarks>
            An input group consists of 32 single ports. Non existent ports are 
            always 0. Thus there are only more than one input group if 
            <see cref="P:Stemmer.Cvb.Driver.IDigitalIO.InputCount"/> is larger than 32.
            </remarks>
            <param name="group">Group index to read.</param>
            <returns>A <see cref="T:System.Collections.Specialized.BitVector32"/> representing the 32 bits of
            the input group selected by <paramref name="group"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDigitalIO.ReadOutputBit(System.Int32)">
            <summary>
            Reads a single output <paramref name="port"/> from the device.
            </summary>
            <param name="port">Port index to read.</param>
            <returns><c>true</c> for output high state; <c>false</c> for low.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDigitalIO.ReadOutputGroup(System.Int32)">
            <summary>
            Reads the output <paramref name="group"/> from the device.
            </summary>
            <remarks>
            An output group consists of 32 single ports. Non existent ports are 
            always 0. Thus there are only more than one output group if 
            <see cref="P:Stemmer.Cvb.Driver.IDigitalIO.OutputCount"/> is larger than 32.
            </remarks>
            <param name="group">Group index to read.</param>
            <returns>A <see cref="T:System.Collections.Specialized.BitVector32"/> representing the 32 bits of
            the output group selected by <paramref name="group"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDigitalIO.WriteOutputBit(System.Int32,System.Boolean)">
            <summary>
            Write a single output <paramref name="port"/> to the device.
            </summary>
            <param name="port">Port index to write.</param>
            <param name="value"><c>true</c> for hight state; <c>false</c> for low.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDigitalIO.WriteOutputGroup(System.Int32,System.Collections.Specialized.BitVector32)">
            <summary>
            Writes the output <paramref name="group"/> to the device.
            </summary>
            <remarks>
            An output group consists of 32 single ports. Non existent ports are 
            ignored. Thus there are only more than one output group if 
            <see cref="P:Stemmer.Cvb.Driver.IDigitalIO.OutputCount"/> is larger than 32.
            </remarks>
            <param name="group">Group index to write.</param>
            <param name="value">Vector of port states.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDigitalIO.WriteOutputGroup(System.Int32,System.Collections.Specialized.BitVector32,System.Collections.Specialized.BitVector32)">
            <summary>
            Writes the <paramref name="mask"/>ed output <paramref name="group"/> 
            to the device.
            </summary>
            <remarks>
            An output group consists of 32 single ports. Non existent ports are 
            ignored. Thus there are only more than one output group if 
            <see cref="P:Stemmer.Cvb.Driver.IDigitalIO.OutputCount"/> is larger than 32.
            </remarks>
            <param name="group">Group index to write.</param>
            <param name="value">Vector of port states.</param>
            <param name="mask">Bit mask for the bits being actually set to the 
            ports.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VideoBufferImage">
            <summary>
            Acquired image in a video stream.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoBufferImage.#ctor(Stemmer.Cvb.Driver.VideoDevice,Stemmer.Cvb.Driver.BufferImage.ImageLayout)">
            <summary>
            Ctor.
            </summary>
            <param name="device">Parent device.</param>
            <param name="layout">Current video layout.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoBufferImage.FrameTime">
            <summary>
            Gets the time this frame is valid.
            </summary>
            <remarks>
            Thus if the frame time is constant in the stream, the frame rate would 
            be 1/<see cref="P:Stemmer.Cvb.Utilities.UsTimeSpan.TotalSeconds"/>. This value might change in
            variable frame rate streams.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.PlaybackMode">
            <summary>
            Defines how frames are acquired by this video device.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.PlaybackMode.FrameByFrame">
            <summary>
            The <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> method always returns the next
            image in the video stream.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.PlaybackMode.Stream">
            <summary>
            The <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> method syncs to the videos playback
            rate. That means if you call this method faster than the frame time
            the call will block. But on the other hand if you are slower than
            the frame time you will eventually drop images.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VideoDevice">
            <summary>
            A <see cref="T:Stemmer.Cvb.Device"/> representing a video stream from the hard disk.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VideoDevice.DefaultTimeoutValue">
            <summary>
            Default timeout value for the <see cref="M:Stemmer.Cvb.Driver.Stream.WaitFor(Stemmer.Cvb.Utilities.UsTimeSpan)"/>
            methods.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VideoDevice.VideoStream">
            <summary>
            Indexed stream of a video file.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoDevice.VideoStream.#ctor(Stemmer.Cvb.Driver.VideoDevice)">
            <summary>
            Ctor.
            </summary>
            <param name="device">Device of the stream.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoDevice.VideoStream.GetSnapshot">
            <summary>
            Acquires a single image and returns it.
            </summary>
            <remarks>
            <para>
            Waits for <see cref="F:Stemmer.Cvb.Driver.VideoDevice.DefaultTimeoutValue"/> for the image to taken.
            </para><para>
            <c>Attention:</c> it is generally not possible to call this method
            while the acquisition has been started by
            <see cref="M:Stemmer.Cvb.Driver.Stream.Start"/>.
            </para><para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this
            image in a display.
            </para>
            </remarks>
            <returns>Grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoDevice.VideoStream.Wait">
            <summary>
            Waits for <see cref="F:Stemmer.Cvb.Driver.VideoDevice.DefaultTimeoutValue"/> for the next available
            image and returns it.
            </summary>
            <remarks>
            <para>
            Dispose the returned <see cref="T:Stemmer.Cvb.Image"/> when not needed anymore!
            </para><para>
            By default the returned image content is only guaranteed to stay
            unchanged until the next call to this method; afterwards the returned
            image is normally disposed. Thus it is normally not save to use this
            image in a display.
            </para><para>
            The returned image is not necessary the newest. If more images where
            acquired since the last call to this method, the content is the oldest
            not collected image buffer by default.
            </para>
            </remarks>
            <returns>Grabbed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoDevice.VideoStream.MakeSnapshotImage(System.IntPtr)">
            <summary>
            Factory function for creating the returned image from
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> and
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.GetSnapshot"/> .
            </summary>
            <param name="handle">Acquired image handle; <see cref="F:System.IntPtr.Zero"/>
            for non (i.e. the device handle points to the newly synced image.
            </param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoDevice.VideoStream.MakeStreamImage(System.IntPtr)">
            <summary>
            Implementation is the same as
            <see cref="M:Stemmer.Cvb.Driver.VideoDevice.VideoStream.MakeSnapshotImage(System.IntPtr)"/>.
            </summary>
            <param name="handle">Acquired image handle; <see cref="F:System.IntPtr.Zero"/>
            for non (i.e. the device handle points to the newly synced image.
            </param>
            <returns>Acquired image.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.VideoStream.ImageCount">
            <summary>
            Gets the number of images contained in this stream.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.VideoStream.ImageIndex">
            <summary>
            Gets or sets the index of the current active image.
            </summary>
            <value>
            The range of possible values is from 0 up to, not including,
            <see cref="P:Stemmer.Cvb.Driver.VideoDevice.VideoStream.ImageCount"/>.
            </value>>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.VideoStream.Statistics">
            <summary>
            Gets the <i>IGrab2</i> statistics.
            </summary>
            <remarks>
            This statistics data is only available if
            <see cref="P:Stemmer.Cvb.Driver.VideoDevice.PlaybackMode"/> is
            <see cref="F:Stemmer.Cvb.Driver.PlaybackMode.Stream"/>.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.VideoStream.RingBuffer">
            <summary>
            No ring buffer available.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VideoDevice._stream">
            <summary>
            The CVB stream of this device.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VideoDevice._memoryPressure">
            <summary>
            Memory pressure of the video device in bytes.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoDevice.#ctor(System.IntPtr,System.String)">
            <summary>
            Creates the <c>VideoDevice</c> from the given CVB object
            <paramref name="handle"/>.
            </summary>
            <param name="handle">Handle to create object from.</param>
            <param name="fileName">Rooted path for the device file.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoDevice.Dispose(System.Boolean)">
            <summary>
            Additionally disposes the associated <see cref="P:Stemmer.Cvb.Driver.VideoDevice.VideoImage"/> if
            present.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.PlaybackMode">
            <summary>
            Gets or sets how images are delivered by the stream.
            </summary>
            <exception cref="T:System.InvalidOperationException">Changing the acquisition
            interface while grabbing is not allowed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.Streams">
            <summary>
            Access to the available acquisition streams of this device.
            </summary>
            <value>
            Collection of streams for acquisition.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.StreamCount">
            <summary>
            Number of streams of this device.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoDevice.GetStream``1(System.Int32)">
            <summary>
            Not supported by this device.
            Use the <see cref="T:Stemmer.Cvb.Driver.Stream"/> property.
            </summary>
            <typeparam name="T">Ignored.</typeparam>
            <param name="streamIndex">Ignored.</param>
            <returns>Ignored.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoDevice.OnImageAcquired(Stemmer.Cvb.Image)">
            <summary>
            A <see cref="T:Stemmer.Cvb.Driver.Stream"/> currently acquiring images calls this method
            to inform the device of newly acquired images.
            </summary>
            <param name="image">Newly acquired image (ignored).</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoDevice.ChangeHandle(System.IntPtr,Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Override to ensure error reporting.
            </summary>
            <param name="newHandle">Ignored.</param>
            <param name="mode">Ignored.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.ReplayRateMin">
            <summary>
            Gets the minimal possible replay rate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.ReplayRateMax">
            <summary>
            Gets the maximal possible replay rate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.ReplayRate">
            <summary>
            Gets or sets the current replay rate.
            </summary>
            <value>
            The replay rate must be in between <see cref="P:Stemmer.Cvb.Driver.VideoDevice.ReplayRateMin"/> and
            <see cref="P:Stemmer.Cvb.Driver.VideoDevice.ReplayRateMax"/> and is a factor that is applied to the
            individual frame time.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.VideoImage">
            <summary>
            Gets the <c>VideoImage</c> of this video device.
            </summary>
            <remarks>The returned video image always points to the current
            location of the video stream.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoDevice.DeviceImage">
            <summary>
            Alias for the <see cref="P:Stemmer.Cvb.Driver.VideoDevice.VideoImage"/> property.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VideoImage">
            <summary>
            Image of a video.
            </summary>
            <remarks>
            <para>
            This image points to the image data that is currently processed. It is 
            not necessary the newest acquired image. It points to the image buffer
            that is returned due to the last grab synchronization method (i.e. 
            <c>Wait</c> method).
            </para><para>
            Use this image only in the same thread context in which you grab handling
            occurs. The object will stay the same, but the underlying buffer changes
            when the synchronization method returns successfully. If you need the 
            image in a parallel context copy the image 
            (<see cref="M:Stemmer.Cvb.Image.Copy"/>)
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoImage.#ctor(Stemmer.Cvb.Driver.VideoDevice)">
            <summary>
            Creates the VideoImage.
            </summary>
            <remarks>
            No memory pressure is performed by this image as the device holds the
            memory. It is guessed via the <i>IRingBuffer</i> interface.
            </remarks>
            <param name="device">Device object (and thus the image handle).</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VideoImage.GetFrameTime(Stemmer.Cvb.Driver.VideoDevice)">
            <summary>
            Gets the time the current synchronized frame is valid.
            </summary>
            <param name="device">Device to query.</param>
            <returns>Frame time.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VideoImage.FrameTime">
            <summary>
            Gets the time this frame is valid.
            </summary>
            <remarks>
            Thus if the frame time is constant in the stream, the frame rate would 
            be 1/<see cref="P:Stemmer.Cvb.Utilities.UsTimeSpan.TotalSeconds"/>. This value might change in
            variable frame rate streams.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VinDevice">
            <summary>
            A <see cref="T:Stemmer.Cvb.Device"/> representing a video interface driver (vin).
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VinDevice.VinStream">
            <summary>
            Video input stream.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.VinStream.#ctor(Stemmer.Cvb.Driver.VinDevice)">
            <summary>
            Ctor.
            </summary>
            <param name="device">Video device parent.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.VinStream.UpdateLayout(System.IntPtr)">
            <summary>
            Updates the layout based on the image handle.
            </summary>
            <remarks>
            Any image returned by the stream is now invalid and will thus be
            disposed.
            </remarks>
            <param name="imageHandle">New image handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinDevice.VinStream.Statistics">
            <summary>
            Gets the <i>IGrab2</i> statistics.
            </summary>
            <remarks>
            This statistics data is only available if
            <see cref="T:Stemmer.Cvb.Driver.AcquisitionInterface"/> is
            <see cref="F:Stemmer.Cvb.Driver.AcquisitionInterface.Grab2"/>.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VinDevice.NonRingBufferVinStream">
            <summary>
            Video input stream for drivers not supporting
            <see cref="T:Stemmer.Cvb.Driver.IRingBuffer"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.NonRingBufferVinStream.#ctor(Stemmer.Cvb.Driver.VinDevice)">
            <summary>
            Ctor.
            </summary>
            <param name="device">Video device parent.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.NonRingBufferVinStream.MakeSnapshotImage(System.IntPtr)">
            <summary>
            Factory function for creating the returned image from
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> and
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.GetSnapshot"/> .
            </summary>
            <param name="handle">Acquired image handle; <see cref="F:System.IntPtr.Zero"/>
            for non (i.e. the device handle points to the newly synced image.
            </param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.NonRingBufferVinStream.MakeStreamImage(System.IntPtr)">
            <summary>
            Implementation is the same as
            <see cref="M:Stemmer.Cvb.Driver.VinDevice.NonRingBufferVinStream.MakeSnapshotImage(System.IntPtr)"/>.
            </summary>
            <param name="handle">Acquired image handle; <see cref="F:System.IntPtr.Zero"/>
            for non (i.e. the device handle points to the newly synced image.
            </param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.NonRingBufferVinStream.UpdateLayout(System.IntPtr)">
            <summary>
            Updates the layout based on the image handle.
            </summary>
            <remarks>
            Any image returned by the stream is now invalid and will thus be
            disposed.
            </remarks>
            <param name="imageHandle">New image handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinDevice.NonRingBufferVinStream.RingBuffer">
            <summary>
            No ring buffer available.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VinDevice.RingBufferVinStream">
            <summary>
            Video input stream for drivers supporting the
            <see cref="T:Stemmer.Cvb.Driver.IRingBuffer"/> interface.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.RingBufferVinStream.#ctor(Stemmer.Cvb.Driver.VinDevice)">
            <summary>
            Ctor.
            </summary>
            <param name="device">Video device parent.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.RingBufferVinStream.MakeStreamImage(System.IntPtr)">
            <summary>
            Factory function for creating the returned image from
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> and
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.GetSnapshot"/> .
            </summary>
            <param name="handle">Acquired image handle; <see cref="F:System.IntPtr.Zero"/>
            for non (i.e. the device handle points to the newly synced image.
            </param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.RingBufferVinStream.MakeSnapshotImage(System.IntPtr)">
            <summary>
            Factory function for creating the returned image from
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> and
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.GetSnapshot"/> .
            </summary>
            <param name="handle">Acquired image handle; <see cref="F:System.IntPtr.Zero"/>
            for non (i.e. the device handle points to the newly synced image.
            </param>
            <returns>Acquired image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.RingBufferVinStream.UpdateLayout(System.IntPtr)">
            <summary>
            No update implementation necessary as this is handled internally by
            the ring buffer implementation.
            </summary>
            <remarks>
            Disposes the old buffer depending on acquisition mode.
            </remarks>
            <param name="imageHandle">Ignored.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinDevice.RingBufferVinStream.RingBuffer">
            <summary>
            The ring buffer object.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.#ctor(System.IntPtr,System.String)">
            <summary>
            Creates the <c>VinDevice</c> from the given CVB object
            <paramref name="handle"/>.
            </summary>
            <param name="handle">Handle to create object from.</param>
            <param name="fileName">Rooted path for the device file.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.Dispose(System.Boolean)">
            <summary>
            Additionally disposes the associated <see cref="P:Stemmer.Cvb.Driver.VinDevice.VinImage"/> if
            present.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinDevice.Streams">
            <summary>
            Access to the available acquisition streams of this device.
            </summary>
            <value>
            Collection of streams for acquisition.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinDevice.StreamCount">
            <summary>
            Number of streams of this device.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.GetStream``1(System.Int32)">
            <summary>
            Not supported by this device.
            Use the <see cref="T:Stemmer.Cvb.Driver.Stream"/> property.
            </summary>
            <typeparam name="T">Ignored.</typeparam>
            <param name="streamIndex">Ignored.</param>
            <returns>Ignored.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.OnImageAcquired(Stemmer.Cvb.Image)">
            <summary>
            A <see cref="T:Stemmer.Cvb.Driver.Stream"/> currently acquiring images calls this method
            to inform the device of newly acquired images.
            </summary>
            <param name="image">Newly acquired image (ignored).</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinDevice.VinConnectionInformation">
            <summary>
            Gets the board and port information of this device.
            </summary>
            <value>
            <see cref="T:Stemmer.Cvb.Driver.VinConnectionInformation"/> containing this device's
            board and camera port index.
            </value>
            <exception cref="T:System.NullReferenceException">If this is not a Vin driver
            supporting a board- or camera select interface.</exception>
            <exception cref="T:System.ObjectDisposedException">If this device has already
            been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.TryGetVinConnectionInformation(Stemmer.Cvb.Driver.VinConnectionInformation@)">
            <summary>
            Tries to get the board an port information of this device.
            </summary>
            <param name="info">The <see cref="T:Stemmer.Cvb.Driver.VinConnectionInformation"/>
            containing this device's board and camera port index.</param>
            <returns><c>true</c> if successful; <c>false</c> if not.</returns>
            <exception cref="T:System.ObjectDisposedException">If this device has already
            been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinDevice.VinImage">
            <summary>
            Gets the <c>VinImage</c> of this device if available.
            </summary>
            <remarks>
            The image's content points to the latest waited on image of stream 0.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinDevice.DeviceImage">
            <summary>
            Alias for the <see cref="P:Stemmer.Cvb.Driver.VinDevice.VinImage"/> property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDevice.ChangeHandle(System.IntPtr,Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Updates the <see cref="P:Stemmer.Cvb.Driver.VinDevice.VinImage"/> depending on the
            <paramref name="mode"/>.
            </summary>
            <param name="newHandle">New device handle.</param>
            <param name="mode">Create a new image or update it.</param>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VinDevice._stream">
            <summary>
            The CVB stream of this device.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VinImage">
            <summary>
            Image of a CVB Virtual Interface object.
            </summary>
            <remarks>
            <para>
            This image points to the image data that is currently processed. It is 
            not necessary the newest acquired image. It points to the image buffer
            that is returned due to the last grab synchronization method (i.e. 
            <see cref="M:Stemmer.Cvb.Driver.IAcquisition.Wait"/> method).
            </para><para>
            Use this image only in the same thread context in which your grab 
            handling occurs. The object will stay the same, but the underlying buffer 
            changes when the synchronization method return successfully. If you need 
            the image in a parallel context either copy the image 
            (<see cref="M:Stemmer.Cvb.Image.Copy"/>) or use the <c>RingBufferImage</c> in
            combination with <c>LockMode.On</c>. In the latter case you can unlock
            (dispose) the image when not needed anymore.
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinImage.#ctor(Stemmer.Cvb.Driver.VinDevice)">
            <summary>
            Creates the VinImage.
            </summary>
            <remarks>
            No memory pressure is performed by this image as the device holds the
            memory. It is guessed via the <i>IRingBuffer</i> interface.
            </remarks>
            <param name="device">Device object (and thus the image handle).</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DeviceEventArgs">
            <summary>
            Event argument for notifying a device change.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DeviceEventArgs.Device">
            <summary>
            Gets the device associated with an event.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DeviceEventArgs.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Creates the device event argument from the given 
            <paramref name="device"/>.
            </summary>
            <param name="device">Device object.</param>
        </member>
        <member name="T:Stemmer.Cvb.Driver.IDeviceSet">
            <summary>
            Interface for <see cref="T:Stemmer.Cvb.Device"/> sets.
            </summary>
            <remarks>
            <para>
            A set contains a sorted list of unique entries.
            </para>
            <para>
            These sets are a bit special as new instances are to be checked against
            present instances. This is necessary as different native objects can 
            reference the same native device. With this API only one managed object
            of a device must be available at one point in time.
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDeviceSet.Add(Stemmer.Cvb.Device)">
            <summary>
            Adds the given <paramref name="device"/> to this set.
            </summary>
            <param name="device">Device to add.</param>
            <returns><c>true</c> if <paramref name="device"/> was not present and
            thus could be added; <c>false</c> if it was present and could not be
            added.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDeviceSet.Remove(Stemmer.Cvb.Device)">
            <summary>
            Removes the given <paramref name="device"/> from this set.
            </summary>
            <param name="device">Device to remove.</param>
            <returns><c>true</c> if <paramref name="device"/> was present and thus
            could be removed; <c>false</c> if it was not present.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDeviceSet.Contains(Stemmer.Cvb.Device,Stemmer.Cvb.Device@)">
            <summary>
            Checks whether an instance equivalent to 
            <paramref name="deviceToCheck"/> is present in this set.
            </summary>
            <param name="deviceToCheck">Device to be checked whether an equivalent
            device is available in this set.</param>
            <param name="presentDevice">Contains the equivalent device which is 
            present in this set if available; <c>null</c> otherwise.</param>
            <returns><c>true</c> if equivalent device is present; <c>false</c> if
            not.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDeviceSet.GetDevices">
            <summary>
            Gets all currently tracked devices.
            </summary>
            <returns>All currently tracked devices, alive or not.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.IDeviceSet.Collect">
            <summary>
            Checks this set for expired weak references and trims the set to the
            actually alive objects.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Driver.IDeviceSet.Count">
            <summary>
            Gets the number of active devices in this set.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VinDriverDeviceSet">
            <summary>
            Sorted list containing all weak references to opened devices from a 
            certain Vin driver. 
            </summary>
            <remarks>
            Devices are sorted first by board number and then by port number.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VinDriverDeviceSet.KeyComparer">
            <summary>
            Helper to give a sort order for connection information.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDriverDeviceSet.KeyComparer.Compare(Stemmer.Cvb.Driver.VinConnectionInformation,Stemmer.Cvb.Driver.VinConnectionInformation)">
            <summary>
            Compares first the board and then the port indices.
            </summary>
            <param name="lhs">Left hand side.</param>
            <param name="rhs">Right hand side.</param>
            <returns>-1 if <paramref name="lhs"/> is smaller than 
            <paramref name="rhs"/>, 0 if both are equal and 1 if 
            <paramref name="rhs"/> is smaller.</returns>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VinDriverDeviceSet.devices_">
            <summary>
            Sorted device list.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDriverDeviceSet.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDriverDeviceSet.Add(Stemmer.Cvb.Device)">
            <summary cref="M:Stemmer.Cvb.Driver.IDeviceSet.Add(Stemmer.Cvb.Device)"/>
            <param name="device" cref="M:Stemmer.Cvb.Driver.IDeviceSet.Add(Stemmer.Cvb.Device)"/>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDriverDeviceSet.Remove(Stemmer.Cvb.Device)">
            <summary cref="M:Stemmer.Cvb.Driver.IDeviceSet.Remove(Stemmer.Cvb.Device)"/>
            <param name="device" cref="M:Stemmer.Cvb.Driver.IDeviceSet.Remove(Stemmer.Cvb.Device)"/>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDriverDeviceSet.Contains(Stemmer.Cvb.Device,Stemmer.Cvb.Device@)">
            <summary cref="M:Stemmer.Cvb.Driver.IDeviceSet.Contains(Stemmer.Cvb.Device,Stemmer.Cvb.Device@)"/>
            <param name="deviceToCheck" cref="M:Stemmer.Cvb.Driver.IDeviceSet.Contains(Stemmer.Cvb.Device,Stemmer.Cvb.Device@)"/>
            <param name="presentDevice" cref="M:Stemmer.Cvb.Driver.IDeviceSet.Contains(Stemmer.Cvb.Device,Stemmer.Cvb.Device@)"/>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinDriverDeviceSet.Count">
            <summary>
            Gets the number of tracked devices.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDriverDeviceSet.Collect">
            <summary cref="M:Stemmer.Cvb.Driver.IDeviceSet.Collect"/>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDriverDeviceSet.GetDevices">
            <summary>
            Gets all currently tracked vin devices.
            </summary>
            <returns>All currently tracked devices, alive or not.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.FileDriverDeviceSet">
            <summary>
            Sorted list containing all weak references to opened devices from either
            the file driver, an avi-stream or a non-streaming device.
            </summary>
            <remarks>
            Devices are sorted by their file names (rooted path) or access token.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.FileDriverDeviceSet.devices_">
            <summary>
            Sorted device list.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.FileDriverDeviceSet.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.FileDriverDeviceSet.Add(Stemmer.Cvb.Device)">
            <summary cref="M:Stemmer.Cvb.Driver.IDeviceSet.Add(Stemmer.Cvb.Device)"/>
            <param name="device" cref="M:Stemmer.Cvb.Driver.IDeviceSet.Add(Stemmer.Cvb.Device)"/>
        </member>
        <member name="M:Stemmer.Cvb.Driver.FileDriverDeviceSet.Remove(Stemmer.Cvb.Device)">
            <summary cref="M:Stemmer.Cvb.Driver.IDeviceSet.Remove(Stemmer.Cvb.Device)"/>
            <param name="device" cref="M:Stemmer.Cvb.Driver.IDeviceSet.Remove(Stemmer.Cvb.Device)"/>
        </member>
        <member name="M:Stemmer.Cvb.Driver.FileDriverDeviceSet.Contains(Stemmer.Cvb.Device,Stemmer.Cvb.Device@)">
            <summary cref="M:Stemmer.Cvb.Driver.IDeviceSet.Contains(Stemmer.Cvb.Device,Stemmer.Cvb.Device@)"/>
            <param name="deviceToCheck" cref="M:Stemmer.Cvb.Driver.IDeviceSet.Contains(Stemmer.Cvb.Device,Stemmer.Cvb.Device@)"/>
            <param name="presentDevice" cref="M:Stemmer.Cvb.Driver.IDeviceSet.Contains(Stemmer.Cvb.Device,Stemmer.Cvb.Device@)"/>
        </member>
        <member name="P:Stemmer.Cvb.Driver.FileDriverDeviceSet.Count">
            <summary>
            Gets the number of tracked devices.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.FileDriverDeviceSet.Collect">
            <summary cref="M:Stemmer.Cvb.Driver.IDeviceSet.Collect"/>
        </member>
        <member name="M:Stemmer.Cvb.Driver.FileDriverDeviceSet.GetDevices">
            <summary>
            Gets all currently tracked file devices.
            </summary>
            <returns>All currently tracked devices, alive or not.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Driver.DriverDeviceTracker">
            <summary>
            Singleton class tracking all opened <see cref="T:Stemmer.Cvb.Device"/> objects from
            drivers.
            </summary>
            <remarks>
            This affects all devices loaded via the native 
            <see cref="M:Stemmer.Cvb.ImgLib.LoadImageFile(System.String,System.IntPtr@)"/> method.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.DriverDeviceTracker.drivers_">
            <summary>
            Stores all opened devices.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DriverDeviceTracker.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Driver.DriverDeviceTracker.Added">
            <summary>
            Occurs when a device is added.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DriverDeviceTracker.RaiseAdded(Stemmer.Cvb.Device)">
            <summary>
            Raises the <see cref="E:Stemmer.Cvb.Driver.DriverDeviceTracker.Added"/> event.
            </summary>
            <param name="device">Device which is added.</param>
        </member>
        <member name="E:Stemmer.Cvb.Driver.DriverDeviceTracker.Removed">
            <summary>
            Occurs when a device is removed.
            </summary>
            <remarks>
            Beware of using the associated object as it is either disposed or in
            the process of disposing.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DriverDeviceTracker.RaiseRemoved(Stemmer.Cvb.Device)">
            <summary>
            Raises the <see cref="E:Stemmer.Cvb.Driver.DriverDeviceTracker.Removed"/> event.
            </summary>
            <param name="device">Removed device.</param>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DriverDeviceTracker.GetDevices">
            <summary>
            Gets all currently tracked devices.
            </summary>
            <returns>All currently tracked devices, alive or not.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DriverDeviceTracker.Add(Stemmer.Cvb.Device)">
            <summary>
            Adds a <paramref name="device"/> to the global driver set.
            </summary>
            <param name="device">Device to add to the set.</param>
            <returns><c>true</c> if <paramref name="device"/> was not present and
            thus could be added; <c>false</c> if it was present and could not be
            added.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DriverDeviceTracker.Remove(Stemmer.Cvb.Device)">
            <summary>
            Removes the given <paramref name="device"/> from the global driver set.
            </summary>
            <param name="device">Device to remove.</param>
            <returns><c>true</c> if <paramref name="device"/> was present and thus
            could be removed; <c>false</c> if it was not present.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Driver.DriverDeviceTracker.Count">
            <summary>
            Gets the number of tracked devices.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DriverDeviceTracker.Contains(Stemmer.Cvb.Device,Stemmer.Cvb.Device@)">
            <summary>
            Checks whether an instance equivalent to 
            <paramref name="deviceToCheck"/> is present in this set.
            </summary>
            <param name="deviceToCheck">Device to be checked whether an equivalent
            device is available in this set.</param>
            <param name="presentDevice">Contains the equivalent device which is 
            present in this set if available; <c>null</c> otherwise.</param>
            <returns><c>true</c> if equivalent device is present; <c>false</c> if
            not.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Driver.DriverDeviceTracker.Collect">
            <summary>
            Collects dead weak references and trims the memory.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VinConnectionInformation">
            <summary>
            Contains the board and port information of a <see cref="T:Stemmer.Cvb.Device"/> or
            its access token.
            </summary>
            <remarks>
            Either <see cref="P:Stemmer.Cvb.Driver.VinConnectionInformation.CurrentBoard"/> and <see cref="P:Stemmer.Cvb.Driver.VinConnectionInformation.CurrentPort"/> are used
            (e.g. by configuring a vin-driver and opening it) or the 
            <see cref="P:Stemmer.Cvb.Driver.VinConnectionInformation.AccessToken"/> is used (if openen via it).
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinConnectionInformation.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Retrieves the information from the given <paramref name="device"/>.
            </summary>
            <param name="device">Device to fill information from.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinConnectionInformation.CurrentBoard">
            <summary>
            Gets the board number the device is on.
            </summary>
            <remarks>
            If the device has no board select interface this will always return 0.
            </remarks>
            <value>
            A zero based, positive board index; -1 if <see cref="P:Stemmer.Cvb.Driver.VinConnectionInformation.AccessToken"/> is
            in use.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinConnectionInformation.CurrentPort">
            <summary>
            Gets the camera port number the device is on.
            </summary>
            <remarks>
            If the device has no camera select interface this will always return 
            0.
            </remarks>
            <value>
            A zero based, positive camera port index; -1 if 
            <see cref="P:Stemmer.Cvb.Driver.VinConnectionInformation.AccessToken"/> is in use.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinConnectionInformation.AccessToken">
            <summary>
            Gets the device access token if available.
            </summary>
            <value>
            The device access token; <c>null</c> if <see cref="P:Stemmer.Cvb.Driver.VinConnectionInformation.CurrentBoard"/> and
            <see cref="P:Stemmer.Cvb.Driver.VinConnectionInformation.CurrentPort"/> are in use.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VinDriverEnumeration">
            <summary>
            Helper object to enumerate boards and ports.
            </summary>
            <remarks>
            Enumerating boards/ports on not opened drivers/boards is at least 
            inefficient. It can also return an error if the board is opened in 
            another process exclusively or if the configuration is invalid.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VinDriverEnumeration._device">
            <summary>
            The Vin driver device to enumerate boards and ports for.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VinDriverEnumeration._numBoards">
            <summary>
            Gets the number of boards the associated <see cref="F:Stemmer.Cvb.Driver.VinDriverEnumeration._device"/> has.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VinDriverEnumeration._currentBoard">
            <summary>
            Stores the board the associated <see cref="F:Stemmer.Cvb.Driver.VinDriverEnumeration._device"/> is on.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Driver.VinDriverEnumeration.CameraSelect">
            <summary>
            Helper enumeration to determine the highest supported camera select
            version.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VinDriverEnumeration.CameraSelect.None">
            <summary>
            No camera select interface is supported.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VinDriverEnumeration.CameraSelect.V1">
            <summary>
            ICameraSelect interface is supported.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VinDriverEnumeration.CameraSelect.V2">
            <summary>
            ICameraSelect2 interface is supported.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Driver.VinDriverEnumeration._cameraSelectSupport">
            <summary>
            Stores the supported camera select interface.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDriverEnumeration.#ctor(Stemmer.Cvb.Device)">
            <summary>
            Ctor.
            </summary>
            <param name="device">Device having at least board select 2 or a port 
            select interface.</param>
        </member>
        <member name="P:Stemmer.Cvb.Driver.VinDriverEnumeration.NumBoards">
            <summary>
            Gets the number of boards the Vin driver of the associated device has.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Driver.VinDriverEnumeration.GetNumPortsForBoard(System.Int32)">
            <summary>
            Gets the number of ports for a given <paramref name="board"/>.
            </summary>
            <param name="board">Board number to retrieve ports for.</param>
            <returns>Number of ports on the given <paramref name="board"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given
            <paramref name="board"/> is outside its allowed range.</exception>
        </member>
        <member name="T:Stemmer.Cvb.FactorsCalibrator3D">
            <summary>
            Calibrator that multiplies the created <i>X</i>, <i>Y</i> and <i>Z</i>
            components with predefined factors.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.FactorsCalibrator3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:Stemmer.Cvb.FactorsCalibrator3D"/> from the given factors.
            </summary>
            <param name="x">X factor.</param>
            <param name="y">Y factor.</param>
            <param name="z">Z factor.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When the creation of the <see cref="T:Stemmer.Cvb.Calibrator3D"/> failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.FactorsCalibrator3D.#ctor(Stemmer.Cvb.Factors3D)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.FactorsCalibrator3D"/> using the
            given <paramref name="factors"/>.
            </summary>
            <param name="factors">Factors to use.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When the creation of the <see cref="T:Stemmer.Cvb.Calibrator3D"/> failed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Geometry3D.Plane">
            <summary>
            A plane in 3D space in Hessian normal form.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Geometry3D.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <b>Plane</b> object from the given normal vector 
            components and the <paramref name="distanceToOrigin"/>.
            </summary>
            <param name="nx">Normal vector x component.</param>
            <param name="ny">Normal vector y component.</param>
            <param name="nz">Normal vector z component</param>
            <param name="distanceToOrigin">Distance to origin in point units.</param>
        </member>
        <member name="M:Stemmer.Cvb.Geometry3D.Plane.#ctor(Stemmer.Cvb.Point3Dd,System.Double)">
            <summary>
            Creates a new <b>Plane</b> object.
            </summary>
            <param name="normal">Normal vector.</param>
            <param name="distanceToOrigin">Distance to origin in point units.</param>
        </member>
        <member name="P:Stemmer.Cvb.Geometry3D.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Geometry3D.Plane.DistanceToOrigin">
            <summary>
            Distance to the origin in point units.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Geometry3D.Plane.DistanceToPoint(Stemmer.Cvb.Point3Df)">
            <summary>
            Calculates the distance to the point <paramref name="pt"/>.
            </summary>
            <param name="pt">Point to calculate the distance to.</param>
            <returns>Distance of point <paramref name="pt"/> to this plane.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Geometry3D.Plane.DistanceToPoint(Stemmer.Cvb.Point3Dd)">
            <summary>
            Calculates the distance to the point <paramref name="pt"/>.
            </summary>
            <param name="pt">Point to calculate the distance to.</param>
            <returns>Distance of point <paramref name="pt"/> to this plane.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Geometry3D.Plane.DistanceToPoint(System.Double,System.Double,System.Double)">
            <summary>
            Calculates the distance to the point given by its components.
            </summary>
            <param name="x">Point x component.</param>
            <param name="y">Point y component.</param>
            <param name="z">Point z component.</param>
            <returns>Distance to this plane.</returns>
        </member>
        <member name="T:Stemmer.Cvb.GeometryFit">
            <summary>
            Fitting algorithms for geometric objects.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GeometryFit.Plane(Stemmer.Cvb.Point3Dd[],System.Double)">
            <summary>
            Iteratively fits a <see cref="T:Stemmer.Cvb.Geometry3D.Plane"/> into the given 
            <paramref name="points"/>.
            </summary>
            <param name="points">Points to fit plane into.</param>
            <param name="locality">Distance in which the points should be 
            considered to belong to the plane.</param>
            <returns>New plane object fitted into the points.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GeometryFit.Plane(Stemmer.Cvb.Point3Dd[])">
            <summary>
            Fits a <see cref="T:Stemmer.Cvb.Geometry3D.Plane"/> into the given 
            <paramref name="points"/>.
            </summary>
            <remarks>
            Also fits a plane in points lying on one line, thus make sure that the
            points really span a plane. 
            </remarks>
            <param name="points">Points to fit plane into.</param>
            <returns>New plane object fitted into the points.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GeometryFit.Plane(Stemmer.Cvb.Point3Df[],System.Single)">
            <summary>
            Iteratively fits a <see cref="T:Stemmer.Cvb.Geometry3D.Plane"/> into the given 
            <paramref name="points"/>.
            </summary>
            <param name="points">Points to fit plane into.</param>
            <param name="locality">Distance in which the points should be 
            considered to belong to the plane.</param>
            <returns>New plane object fitted into the points.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GeometryFit.Plane(Stemmer.Cvb.Point3Df[])">
            <summary>
            Fits a <see cref="T:Stemmer.Cvb.Geometry3D.Plane"/> into the given 
            <paramref name="points"/>.
            </summary>
            <remarks>
            Also fits a plane in points lying on one line, thus make sure that the
            points really span a plane. 
            </remarks>
            <param name="points">Points to fit plane into.</param>
            <returns>New plane object fitted into the points.</returns>
        </member>
        <member name="T:Stemmer.Cvb.LaserPlaneHomographyCalibrator3D">
            <summary>
            Calibrator that uses the Metric created X-Z matrix to rectify the laser 
            line triangulated range map.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.LaserPlaneZigZagCalibrator3D">
            <summary>
            Calibrator that uses the ZigZag algorithm to rectify the laser line
            triangulated range map.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.LinearPlaneAccess1D">
            <summary>
            Linear access to a plane;
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.LinearPlaneAccess1D.#ctor(System.IntPtr,System.IntPtr,Stemmer.Cvb.DataType)">
            <summary>
            Constructor.
            </summary>
            <param name="basePtr">Pointer to the first component of the plane.</param>
            <param name="increment">Increment to the next component of the
            plane in bytes.</param>
            <param name="dataType">The data type of the plane.</param>
        </member>
        <member name="P:Stemmer.Cvb.LinearPlaneAccess1D.BasePtr">
            <summary>
            Pointer to the first component of the plane.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.LinearPlaneAccess1D.Increment">
            <summary>
            Increment to the next component of the
            plane in bytes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.LinearPlaneAccess1D.DataType">
            <summary>
            The data type of the plane.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Convert3D">
            <summary>
            Conversion functions for 3D objects.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Convert3D.To``1(Stemmer.Cvb.PointCloud)">
            <summary>
            Creates a new point cloud which is a copy of the given <paramref name="source"/>,
            but with possibly different data type and number of components.
            </summary>
            <typeparam name="T">DataType to convert to.
            Can be either double or float.</typeparam>
            <param name="source">The point cloud to convert.</param>
            <returns>Converted point cloud.</returns>
            <exception cref="T:System.ArgumentException">When <typeparamref name="T"/> is not double or float.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Convert3D.Convert(Stemmer.Cvb.PointCloud,Stemmer.Cvb.PointCloudFlags)">
            <summary>
            Creates a new point cloud which is a copy of the given <paramref name="source"/>,
            but with possibly different data type and number of components.
            </summary>
            <param name="source">The point cloud to convert.</param>
            <param name="flags">Flags specifying the kind of point cloud to be created.</param>
            <returns>Converted point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the converted point cloud failed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Cuboid">
            <summary>
            3-dimensional range construct.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Cuboid.#ctor(Stemmer.Cvb.ValueRange{System.Double},Stemmer.Cvb.ValueRange{System.Double},Stemmer.Cvb.ValueRange{System.Double})">
            <summary>
            Constructor.
            </summary>
            <param name="xRange">Range in X direction.</param>
            <param name="yRange">Range in Y direction.</param>
            <param name="zRange">Range in Z direction.</param>
        </member>
        <member name="F:Stemmer.Cvb.Cuboid.X">
            <summary>
            Range in X direction.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Cuboid.Y">
            <summary>
            Range in Y direction.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Cuboid.Z">
            <summary>
            Range in Z direction.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.DensePointCloud">
            <summary>
            Dense point cloud object.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.DensePointCloud.Create``1(Stemmer.Cvb.Size2D)">
            <summary>
            Creates a new dense point cloud with the specified <paramref name="size"/>
            and components of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">One of Stemmer.Cvb.Point3D types.</typeparam>
            <param name="size">Size of the point cloud to create.</param>
            <returns>Newly created dense point cloud.</returns>
            <exception cref="T:System.ArgumentException">When <typeparamref name="T"/> is not double or float.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the dense point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.DensePointCloud.Create``1(System.Int32,System.Int32)">
            <summary>
            Creates a new dense point cloud with the specified <paramref name="width"/>, <paramref name="height"/>
            and components of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">One of Stemmer.Cvb.Point3D types.</typeparam>
            <param name="width">Width of the point cloud to create.</param>
            <param name="height">Height of the point cloud to create.</param>
            <returns>Newly created dense point cloud.</returns>
            <exception cref="T:System.ArgumentException">When <typeparamref name="T"/> is not double or float.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the dense point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.DensePointCloud.#ctor(Stemmer.Cvb.Size2D)">
            <summary>
            Constructor.
            </summary>
            <param name="size">Size of the point cloud to create.</param>
        </member>
        <member name="M:Stemmer.Cvb.DensePointCloud.#ctor(Stemmer.Cvb.Size2D,Stemmer.Cvb.PointCloudFlags)">
            <summary>
            Constructor.
            </summary>
            <param name="size">Size of the point cloud to create.</param>
            <param name="flags">Flags to create the pointcloud with.</param>
        </member>
        <member name="M:Stemmer.Cvb.DensePointCloud.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="width">Width of the pointcloud to create.</param>
            <param name="height">Height of the pointcloud to create.</param>
        </member>
        <member name="M:Stemmer.Cvb.DensePointCloud.#ctor(System.Int32,System.Int32,Stemmer.Cvb.PointCloudFlags)">
            <summary>
            Constructor.
            </summary>
            <param name="width">Width of the pointcloud to create.</param>
            <param name="height">Height of the pointcloud to create.</param>
            <param name="flags">Flags to create the pointcloud with.</param>
        </member>
        <member name="M:Stemmer.Cvb.DensePointCloud.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">Native handle to the PointCloud.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="handle"/> is <see cref="F:System.IntPtr.Zero"/>.</exception>
        </member>
        <member name="P:Stemmer.Cvb.DensePointCloud.LatticeSize">
            <summary>
            Gets the number of x,y,z(,w) point rows and columns.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.DensePointCloud.GetComponentsPointer3D``1">
            <summary>
            Gets the generic components pointer for this point cloud.
            </summary>
            <typeparam name="T">Type of the points.</typeparam>
            <returns>Generic components pointer for this point cloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DensePointCloud.CreateHandle(System.Int32,System.Int32,Stemmer.Cvb.PointCloudFlags)">
            <summary>
            Creates a new dense point cloud with the specified <paramref name="width"/>, <paramref name="height"/>
            and the specified <paramref name="flags"/>.
            </summary>
            <param name="width">Width of the point cloud to create.</param>
            <param name="height">Height of the point cloud to create.</param>
            <param name="flags">Flags to create point cloud with.</param>
            <returns>Newly created dense point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the dense point cloud failed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Factors3D">
            <summary>
            3D factor struct.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Factors3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-factor.</param>
            <param name="y">Y-factor.</param>
            <param name="z">Z-factor.</param>
        </member>
        <member name="P:Stemmer.Cvb.Factors3D.Identity">
            <summary>
            Identity element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Factors3D.X">
            <summary>
            X-factor.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Factors3D.Y">
            <summary>
            Y-factor.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Factors3D.Z">
            <summary>
            Z-factor.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Matrix3D">
            <summary>
            Double precision 3x3 matrix struct.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.#ctor(System.Double[],System.Double[],System.Double[])">
            <summary>
            Constructor.
            </summary>
            <param name="row1">First component row.</param>
            <param name="row2">Second component row.</param>
            <param name="row3">Third component row.</param>
            <exception cref="T:System.IndexOutOfRangeException">When one of the given rows
            has less than three values.</exception>
            <exception cref="T:System.NullReferenceException">When one of the given rows is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.#ctor(System.Double[0:,0:])">
            <summary>
            Constructor.
            </summary>
            <param name="arr">A 3x3 array containing the matrix values.</param>
            <exception cref="T:System.IndexOutOfRangeException">When the given <paramref name="arr"/>
            is smaller than 3x3.</exception>
            <exception cref="T:System.NullReferenceException">If the given <paramref name="arr"/> is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="a11">Top left matrix element.</param>
            <param name="a12">Top middle matrix element.</param>
            <param name="a13">Top right matrix element.</param>
            <param name="a21">Mid left matrix element.</param>
            <param name="a22">Mid matrix element.</param>
            <param name="a23">Mid right matrix element.</param>
            <param name="a31">Bottom left matrix element.</param>
            <param name="a32">Bottom mid matrix element.</param>
            <param name="a33">Bottom right matrix element.</param>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.#ctor(Stemmer.Cvb.RotationAngles3D)">
            <summary>
            Constructor.
            </summary>
            <param name="rotationAngles">Rotation angles to create matrix from.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the matrix failed.</exception>
        </member>
        <member name="F:Stemmer.Cvb.Matrix3D.Identity">
            <summary>
            The identity element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3D.A11">
            <summary>
            Top left matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3D.A12">
            <summary>
            Top middle matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3D.A13">
            <summary>
            Top right matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3D.A21">
            <summary>
            Mid left matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3D.A22">
            <summary>
            Mid matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3D.A23">
            <summary>
            Mid right matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3D.A31">
            <summary>
            Bottom left matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3D.A32">
            <summary>
            Bottom mid matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3D.A33">
            <summary>
            Bottom right matrix element.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.Invert">
            <summary>
            Inverts this Matrix.
            </summary>
            <returns>Inverted matrix.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3D.Item(System.Int32,System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The row, or "Y" index to get.</param>
            <param name="column">The column, or "X" index to get.</param>
            <returns>Value at the specified position.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.op_Addition(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Matrix3D)">
            <summary>
            Addition operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.op_Subtraction(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Matrix3D)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Difference of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.op_Multiply(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Matrix3D)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.op_Equality(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Matrix3D)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> == <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.op_Inequality(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Matrix3D)">
            <summary>
            Unequality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> != <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.Equals(Stemmer.Cvb.Matrix3D)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3D.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this MatrixD</returns>
        </member>
        <member name="T:Stemmer.Cvb.Matrix3DH">
            <summary>
            Double precision 4x4 matrix struct.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.#ctor(System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            Constructor.
            </summary>
            <param name="row1">First component row.</param>
            <param name="row2">Second component row.</param>
            <param name="row3">Third component row.</param>
            <param name="row4">Fourth component row.</param>
            <exception cref="T:System.IndexOutOfRangeException">When one of the given rows
            has less than four values.</exception>
            <exception cref="T:System.NullReferenceException">When one of the given rows is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="a11">First top matrix element.</param>
            <param name="a12">Second top matrix element.</param>
            <param name="a13">Third top matrix element.</param>
            <param name="a14">Fourth top matrix element.</param>
            <param name="a21">First upper mid matrix element.</param>
            <param name="a22">Second upper mid matrix element.</param>
            <param name="a23">Third upper mid right matrix element.</param>
            <param name="a24">Fourth upper mid matrix element.</param>
            <param name="a31">First lower mid matrix element.</param>
            <param name="a32">Second lower mid matrix element.</param>
            <param name="a33">Third lower mid matrix element.</param>
            <param name="a34">Fourth lower mid matrix element.</param>
            <param name="a41">First bottom matrix element.</param>
            <param name="a42">Second bottom matrix element.</param>
            <param name="a43">Third bottom matrix element.</param>
            <param name="a44">Fourth bottom matrix element.</param>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.#ctor(Stemmer.Cvb.Matrix3D)">
            <summary>
            Constructor.
            </summary>
            <param name="matrix">3x3 matrix to create this 4x4 matrix from.</param>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.Identity">
            <summary>
            The identity element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A11">
            <summary>
            First top matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A12">
            <summary>
            Second top matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A13">
            <summary>
            Third top matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A14">
            <summary>
            Fourth top matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A21">
            <summary>
            First upper mid matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A22">
            <summary>
            Second upper mid matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A23">
            <summary>
            Third upper mid right matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A24">
            <summary>
            Fourth upper mid matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A31">
            <summary>
            First lower mid matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A32">
            <summary>
            Second lower mid matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A33">
            <summary>
            Third lower mid matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A34">
            <summary>
            Fourth lower mid matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A41">
            <summary>
            First bottom matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A42">
            <summary>
            Second bottom matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A43">
            <summary>
            Third bottom matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.A44">
            <summary>
            Fourth bottom matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix3DH.Item(System.Int32,System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The row, or "Y" index to get.</param>
            <param name="column">The column, or "X" index to get.</param>
            <returns>Value at the specified position.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.op_Addition(Stemmer.Cvb.Matrix3DH,Stemmer.Cvb.Matrix3DH)">
            <summary>
            Addition operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.op_Subtraction(Stemmer.Cvb.Matrix3DH,Stemmer.Cvb.Matrix3DH)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Difference of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.op_Multiply(Stemmer.Cvb.Matrix3DH,Stemmer.Cvb.Matrix3DH)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.op_Equality(Stemmer.Cvb.Matrix3DH,Stemmer.Cvb.Matrix3DH)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> == <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.op_Inequality(Stemmer.Cvb.Matrix3DH,Stemmer.Cvb.Matrix3DH)">
            <summary>
            Unequality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> != <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.Equals(Stemmer.Cvb.Matrix3DH)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix3DH.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Stemmer.Cvb.MatrixCalibrator3D">
            <summary>
            Calibrator that multiplies the <i>X</i>, <i>Y</i> and <i>Z</i> components 
            vector with a 4x4 matrix.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.MatrixCalibrator3D.#ctor(Stemmer.Cvb.Matrix3DH)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.MatrixCalibrator3D"/> using the
            given <paramref name="matrix"/>.
            </summary>
            <param name="matrix">Matrix to use.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When the creation of the <see cref="T:Stemmer.Cvb.Calibrator3D"/> failed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Mesh`1">
            <summary>
            3D mesh object consisting of polygons.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Mesh`1.NumPolygons">
            <summary>
            Number of polygons this mesh has.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.FromFile(System.String)">
            <summary>
            Loads a mesh from file.
            </summary>
            <param name="file">File to load.</param>
            <returns>Created mesh from the given <paramref name="file"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.FromHandle(System.IntPtr)">
            <summary>
            Creates a mesh from the given <paramref name="handle"/>.
            </summary>
            <param name="handle"></param>
            <returns>Created mesh.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="pcHandle">Handle of the sparse point cloud to create mesh from.</param>
        </member>
        <member name="P:Stemmer.Cvb.Mesh`1.Handle">
            <summary>
            The native handle of the object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Mesh`1.IsDisposed">
            <summary>
            Possibility to check whether the object has already been disposed of.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Mesh`1.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.Dispose(System.Boolean)">
            <summary>
            IDisposable helper function.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.TryGetPointsAs``1">
            <summary>
            Tries to get the points of this mesh.
            </summary>
            <typeparam name="PointType">Type of the points to get.</typeparam>
            <returns>The points of the mesh. Empty if points could not be gotten.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.GetPolygonIndices">
            <summary>
            Gets the point indices of the polygons in this mesh.
            </summary>
            <returns>Point indices of the polygons in this mesh</returns>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.GetPolygons">
            <summary>
            Gets the polygons of this mesh.
            </summary>
            <returns>Polygon iterator.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.RasterToDensePointCloud(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Point3Dd,Stemmer.Cvb.DensePointCloud)">
            <summary>
            Rasters this mesh into a zbuffer and stores the result
            into the given <paramref name="denseCloud"/>.
            </summary>
            <param name="cameraRotation">Rotation matrix for the camera.</param>
            <param name="cameraTranslation">Translation vector for the camera.</param>
            <param name="denseCloud">Dense point cloud to store the rastered mesh in.</param>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.RasterToDensePointCloud(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Point3Dd,Stemmer.Cvb.DensePointCloud,Stemmer.Cvb.DensePointCloud)">
            <summary>
            Rasters this mesh into a zbuffer and stores the result
            into the given <paramref name="denseCloud"/>.
            </summary>
            <param name="cameraRotation">Rotation matrix for the camera.</param>
            <param name="cameraTranslation">Translation vector for the camera.</param>
            <param name="denseCloud">Dense point cloud to store the rastered mesh in.</param>
            <param name="tempBufferCloud">A pointcloud of the same size as the mesh, used as temporary
            storage to avoid potentially costly allocations. If an invalid object is given (e.g. null)
            a temporary buffer is allocated on each call.</param>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.RasterToDensePointCloud(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Point3Dd,System.Double,System.Double)">
            <summary>
            Rasters this mesh into a zbuffer and stores the result
            in a newly created <see cref="T:Stemmer.Cvb.DensePointCloud"/>.
            </summary>
            <param name="cameraRotation">Rotation matrix for the camera.</param>
            <param name="cameraTranslation">Translation vector for the camera.</param>
            <param name="xResIncrement">The pixel size in x-direction.</param>
            <param name="yResIncrement">The pixel size in y-direction.</param>
            <returns>A new dense pointcloud that is filled with the rastered mesh.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.RasterToDensePointCloud(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Point3Dd,System.Double,System.Double,Stemmer.Cvb.DensePointCloud)">
            <summary>
            Rasters this mesh into a zbuffer and stores the result
            in a newly created <see cref="T:Stemmer.Cvb.DensePointCloud"/>.
            </summary>
            <param name="cameraRotation">Rotation matrix for the camera.</param>
            <param name="cameraTranslation">Translation vector for the camera.</param>
            <param name="xResIncrement">The pixel size in x-direction.</param>
            <param name="yResIncrement">The pixel size in y-direction.</param>
            <param name="tempBufferCloud">A pointcloud of the same size as the mesh, used as temporary
            storage to avoid potentially costly allocations. If an invalid object is given (e.g. null)
            a temporary buffer is allocated on each call.</param>
            <returns>A new dense point cloud that is filled with the rastered mesh.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Mesh`1.IndicesEnumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.PinholeCameraCalibrator3D">
            <summary>
            Calibrator the calculates the <i>X</i>, <i>Y</i> and <i>Z</i> components
            via the pinhole camera model.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PinholeCameraCalibrator3D.#ctor(System.Double,Stemmer.Cvb.Point2Dd)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.PinholeCameraCalibrator3D"/>.
            </summary>
            <remarks><i>Z</i> devisor is 1.0.</remarks>
            <param name="f">Focal length for x and y components.</param>
            <param name="center">Center (or principal) point.</param>
            <returns>New pinhole camera model <see cref="T:Stemmer.Cvb.Calibrator3D"/>
            object.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When the creation of the <see cref="T:Stemmer.Cvb.Calibrator3D"/> failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PinholeCameraCalibrator3D.#ctor(System.Double,Stemmer.Cvb.Point2Dd,System.Double)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.PinholeCameraCalibrator3D"/>.
            </summary>
            <param name="f">Focal length for x and y components.</param>
            <param name="center">Center (or principal) point.</param>
            <param name="zDivisor">Divisor for every z value.</param>
            <returns>New pinhole camera model <see cref="T:Stemmer.Cvb.Calibrator3D"/>
            object.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When the creation of the <see cref="T:Stemmer.Cvb.Calibrator3D"/> failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PinholeCameraCalibrator3D.#ctor(System.Double,System.Double,Stemmer.Cvb.Point2Dd)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.PinholeCameraCalibrator3D"/>.
            </summary>
            <remarks><i>Z</i> devisor is 1.0.</remarks>
            <param name="fx">Focal length x component.</param>
            <param name="fy">Focal lenght y component.</param>
            <param name="center">Center (or principal) point.</param>
            <returns>New pinhole camera model <see cref="T:Stemmer.Cvb.Calibrator3D"/>
            object.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When the creation of the <see cref="T:Stemmer.Cvb.Calibrator3D"/> failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PinholeCameraCalibrator3D.#ctor(System.Double,System.Double,Stemmer.Cvb.Point2Dd,System.Double)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.PinholeCameraCalibrator3D"/>.
            </summary>
            <param name="fx">Focal length x component.</param>
            <param name="fy">Focal lenght y component.</param>
            <param name="center">Center (or principal) point.</param>
            <param name="zDivisor">Divisor for every z value.</param>
            <returns>New pinhole camera model <see cref="T:Stemmer.Cvb.Calibrator3D"/>
            object.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When the creation of the <see cref="T:Stemmer.Cvb.Calibrator3D"/> failed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.PlaneRole">
            <summary>
            Role of a plane.
            </summary>
            <remarks>
            Roles describe the component role a plane aggregates.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.Undefined">
            <summary>
            Undefined role; for initialization only.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixMono">
            <summary>
            Monochrome or lightness plane.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixRGB_R">
            <summary>
            Red plane of an RGB image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixRGB_G">
            <summary>
            Green plane of an RGB image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixRGB_B">
            <summary>
            Blue plane of an RGB image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixYUV_Y">
            <summary>
            Y plane of a YUV image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixYUV_U">
            <summary>
            U plane of a YUV image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixYUV_V">
            <summary>
            V plane of a YUV image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixHSV_H">
            <summary>
            Hue plane of an HSV image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixHSV_S">
            <summary>
            Saturation plane of an HSV image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixHSV_V">
            <summary>
            Value plane of an HSV image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixLAB_L">
            <summary>
            Lightness plane of a LAB image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixLAB_A">
            <summary>
            A plane of a LAB image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixLAB_B">
            <summary>
            B plane of a LAB image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.PixConfidence">
            <summary>
            Confidence plane of a point cloud.
            </summary>
            <remarks>
            Normally in the range 0f 0 to 1. Where 0 means no point and 1 means
            100% a point.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordCartesian_X">
            <summary>
            X component of a XYZ point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordCartesian_Y">
            <summary>
            Y component of a XYZ point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordCartesian_Z">
            <summary>
            Z component of a XYZ point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordCartesian_W">
            <summary>
            W component of a XYZ point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordPolar_Rho">
            <summary>
            Rho component of a polar point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordPolar_Phi">
            <summary>
            Phi component of a polar point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordCylindrical_Rho">
            <summary>
            Rho component of a cylindrical point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordCylindrical_Phi">
            <summary>
            Phi component of a cylindrical point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordCylindrical_Z">
            <summary>
            Z component of a cylindrical point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordSpherical_Rho">
            <summary>
            Rho component of a spherical point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordSpherical_Phi">
            <summary>
            Phi component of a spherical point cloud.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneRole.CoordSpherical_Theta">
            <summary>
            Theta component of a spherical point cloud.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Plane">
            <summary>
            A single linear plane of component data.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Plane.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Create a plane object from a <paramref name="handle"/>.
            </summary>
            <param name="handle">Native <c>IBuffer</c> handle.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if handle should be shared.</param>
            <returns>Newly created wrapper object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Plane.#ctor(System.IntPtr)">
            <summary>
            Create a plane object from a <paramref name="handle"/>.
            </summary>
            <param name="handle">Native <c>IBuffer</c> handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.Plane.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Plane.Handle">
            <summary>
            Native CVB buffer handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Plane.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Plane.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Plane.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
            <remark>Call this method to release the resources allocated by this
            buffer immediately. Remember that after calling Dispose, any subsequent
            access to references to this buffer will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Plane.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Plane.Role">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.PlaneRole"/> of this plane.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Plane.DataType">
            <summary>
            Gets the CVB <see cref="P:Stemmer.Cvb.Plane.DataType"/> for this plane.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Plane.BasePtr">
            <summary>
            Get the base address of the plane's memory.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Plane.Rank">
            <summary>
            Get the rank of the plane.
            </summary>
            <remark>
            The rank is the number of dimensions in the plane. E.g. 2 for an image.
            </remark>
        </member>
        <member name="M:Stemmer.Cvb.Plane.GetIncrement(System.Int32)">
            <summary>
            Gets the number of elements at the given <paramref name="dimension"/>.
            </summary>
            <param name="dimension">Dimension to get length for; e.g. 0 for x-values.</param>
            <returns>The number of elements in the given <paramref name="dimension"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Plane.GetLength(System.Int32)">
            <summary>
            Gets the number of elements at the given <paramref name="dimension"/>.
            </summary>
            <param name="dimension">Dimension to get length for; e.g. 0 for x-values.</param>
            <returns>The number of elements in the given <paramref name="dimension"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.PlaneEnumerator">
            <summary>
            Container for a set of planes.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PlaneEnumerator.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Create a plane object from a <paramref name="handle"/>.
            </summary>
            <param name="handle">Native <c>IBuffer</c> handle.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if handle should be shared.</param>
            <returns>Newly created wrapper object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PlaneEnumerator.#ctor(System.IntPtr)">
            <summary>
            Create a plane object from a <paramref name="handle"/>.
            </summary>
            <param name="handle">Native <c>IBuffer</c> handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.PlaneEnumerator.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.PlaneEnumerator.Handle">
            <summary>
            Native CVB buffer handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.PlaneEnumerator.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.PlaneEnumerator.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.PlaneEnumerator.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
            <remark>Call this method to release the resources allocated by this
            buffer immediately. Remember that after calling Dispose, any subsequent
            access to references to this buffer will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.PlaneEnumerator.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.PlaneEnumerator.Count">
            <summary>
            Gets the number of planes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.PlaneEnumerator.Item(System.Int32)">
            <summary>
            Get the plane at the given <paramref name="index"/>.
            </summary>
            <param name="index">Plane index.</param>
            <returns>The <b>Plane</b> at the given <paramref name="index"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PlaneEnumerator.IndexOf(Stemmer.Cvb.Plane)">
            <summary>
            Finds the given <paramref name="item"/> and returns its index.
            </summary>
            <param name="item">Item to find.</param>
            <returns>Index of item; -1 if not found.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PlaneEnumerator.Contains(Stemmer.Cvb.Plane)">
            <summary>
            Determines whether this <b>PlaneEnum</b> 
            </summary>
            <param name="item">Item to find.</param>
            <returns><b>true</b> if <paramref name="item"/> is in this collection.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.PlaneEnumerator.CopyTo(Stemmer.Cvb.Plane[],System.Int32)">
            <summary>
            Copies the elements of this <b>PlaneEnum</b> to the given 
            <paramref name="array"/>, starting at <paramref name="arrayIndex"/>.
            </summary>
            <param name="array">Array to copy elements to.</param>
            <param name="arrayIndex">Start index in <paramref name="array"/>.</param>
        </member>
        <member name="M:Stemmer.Cvb.PlaneEnumerator.GetEnumerator">
            <summary>
            Get the enumerator to iterate over all planes.
            </summary>
            <returns>Enumerator over all planes.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Point3Dcd">
            <summary>
            Multi-purpose 3D float vector struct with confidence value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-coordinate</param>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-coordinate</param>
            <param name="confidence">Confidence-component (0 is invalid; 1 is 100% valid).</param>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dcd.X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dcd.Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dcd.Z">
            <summary>
            Z-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dcd.C">
            <summary>
            Confidence-component.
            </summary>
            <remarks>
            0 means invalid; 1 means 100% valid.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dcd.Item(System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The element to access (0 is <see cref="P:Stemmer.Cvb.Point3Dcd.X"/>).</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.op_Equality(Stemmer.Cvb.Point3Dcd,Stemmer.Cvb.Point3Dcd)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> == <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.op_Inequality(Stemmer.Cvb.Point3Dcd,Stemmer.Cvb.Point3Dcd)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> != <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.op_Subtraction(Stemmer.Cvb.Point3Dcd,Stemmer.Cvb.Point3Dcd)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Difference of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.op_Addition(Stemmer.Cvb.Point3Dcd,Stemmer.Cvb.Point3Dcd)">
            <summary>
            Addition operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Addition of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.Equals(Stemmer.Cvb.Point3Dcd)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.ToPoint3Dd">
            <summary>
            Converts this point to a <see cref="T:Stemmer.Cvb.Point3Dd"/>.
            </summary>
            <returns>New <b>Point3Dd</b> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this PointD</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcd.CrossProduct(Stemmer.Cvb.Point3Dcd)">
            <summary>
            Calculates the crossproduct of this vector
            and the given <paramref name="v2"/>.
            </summary>
            <param name="v2">Vector to build crossproduct with.</param>
            <returns>Crossproduct of this vector and <paramref name="v2"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Point3Dcf">
            <summary>
            Multi-purpose 3D float vector struct with confidence value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-coordinate</param>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-coordinate</param>
            <param name="confidence">Confidence-component (0 is invalid; 1 is 100% valid).</param>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dcf.X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dcf.Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dcf.Z">
            <summary>
            Z-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dcf.C">
            <summary>
            Confidence-component.
            </summary>
            <remarks>
            0 means invalid; 1 means 100% valid.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dcf.Item(System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The element to access (0 is <see cref="P:Stemmer.Cvb.Point3Dcf.X"/>).</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.op_Equality(Stemmer.Cvb.Point3Dcf,Stemmer.Cvb.Point3Dcf)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> == <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.op_Inequality(Stemmer.Cvb.Point3Dcf,Stemmer.Cvb.Point3Dcf)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> != <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.op_Subtraction(Stemmer.Cvb.Point3Dcf,Stemmer.Cvb.Point3Dcf)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Difference of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.op_Addition(Stemmer.Cvb.Point3Dcf,Stemmer.Cvb.Point3Dcf)">
            <summary>
            Addition operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Addition of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.Equals(Stemmer.Cvb.Point3Dcf)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.ToPoint3Df">
            <summary>
            Converts this point to a <see cref="T:Stemmer.Cvb.Point3Df"/>.
            </summary>
            <returns>New <b>Point3Df</b> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this PointD</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dcf.CrossProduct(Stemmer.Cvb.Point3Dcf)">
            <summary>
            Calculates the crossproduct of this vector
            and the given <paramref name="v2"/>.
            </summary>
            <param name="v2">Vector to build crossproduct with.</param>
            <returns>Crossproduct of this vector and <paramref name="v2"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Point3Df">
            <summary>
            Multi-purpose 3D float vector struct.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-coordinate</param>
        </member>
        <member name="P:Stemmer.Cvb.Point3Df.X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Df.Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Df.Z">
            <summary>
            Z-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Df.Item(System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The element to access (0 is <see cref="P:Stemmer.Cvb.Point3Df.X"/>).</param>
            <returns></returns>
        </member>
        <member name="P:Stemmer.Cvb.Point3Df.Length">
            <summary>
            Gets the length of this point.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.op_Addition(Stemmer.Cvb.Point3Df,Stemmer.Cvb.Point3Df)">
            <summary>
            Addition operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.op_Subtraction(Stemmer.Cvb.Point3Df,Stemmer.Cvb.Point3Df)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Difference of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.op_Multiply(Stemmer.Cvb.Point3Df,Stemmer.Cvb.Point3Df)">
            <summary>
            Multiplication operator.
            Gets the inner product of the given <paramref name="lhs"/> and <paramref name="rhs"/>.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Inner product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.op_Multiply(System.Single,Stemmer.Cvb.Point3Df)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.op_Multiply(Stemmer.Cvb.Point3Df,System.Single)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.op_Division(Stemmer.Cvb.Point3Df,System.Single)">
            <summary>
            Division operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Ratio of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.op_Multiply(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Point3Df)">
            <summary>
            Multiply a Matrix with a PointD rhs.
            </summary>
            <param name="lhs">matrix</param>
            <param name="rhs">rhs</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.op_Multiply(Stemmer.Cvb.AffineMatrix3D,Stemmer.Cvb.Point3Df)">
            <summary>
            Transform a point using an affine matrix (= coordinate system).
            </summary>
            <param name="m">affine matrix to transform with</param>
            <param name="p">point to transform</param>
            <returns>Product of <paramref name="m"/> and <paramref name="p"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.op_Equality(Stemmer.Cvb.Point3Df,Stemmer.Cvb.Point3Df)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> == <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.op_Inequality(Stemmer.Cvb.Point3Df,Stemmer.Cvb.Point3Df)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> != <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.Equals(Stemmer.Cvb.Point3Df)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this PointD</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Df.CrossProduct(Stemmer.Cvb.Point3Df)">
            <summary>
            Calculates the crossproduct of this vector
            and the given <paramref name="v2"/>.
            </summary>
            <param name="v2">Vector to build crossproduct with.</param>
            <returns>Crossproduct of this vector and <paramref name="v2"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Point3Dd">
            <summary>
            Multi-purpose 3D double vector struct.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-coordinate</param>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dd.X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dd.Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dd.Z">
            <summary>
            Z-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dd.Length">
            <summary>
            Gets the length of this point.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dd.Item(System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The element to access (0 is <see cref="P:Stemmer.Cvb.Point3Dd.X"/>).</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.op_Addition(Stemmer.Cvb.Point3Dd,Stemmer.Cvb.Point3Dd)">
            <summary>
            Addition operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.op_Subtraction(Stemmer.Cvb.Point3Dd,Stemmer.Cvb.Point3Dd)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Difference of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.op_Multiply(Stemmer.Cvb.Point3Dd,Stemmer.Cvb.Point3Dd)">
            <summary>
            Multiplication operator.
            Gets the inner product of the given <paramref name="lhs"/> and <paramref name="rhs"/>.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Inner product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.op_Multiply(System.Double,Stemmer.Cvb.Point3Dd)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.op_Multiply(Stemmer.Cvb.Point3Dd,System.Double)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.op_Division(Stemmer.Cvb.Point3Dd,System.Double)">
            <summary>
            Division operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Ratio of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.op_Multiply(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Point3Dd)">
            <summary>
            Multiply a Matrix with a PointD rhs.
            </summary>
            <param name="lhs">matrix</param>
            <param name="rhs">rhs</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.op_Multiply(Stemmer.Cvb.AffineMatrix3D,Stemmer.Cvb.Point3Dd)">
            <summary>
            Transform a point using an affine matrix (= coordinate system).
            </summary>
            <param name="m">affine matrix to transform with</param>
            <param name="p">point to transform</param>
            <returns>Product of <paramref name="m"/> and <paramref name="p"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.ToPoint3Df">
            <summary>
            Converts this point to a <see cref="T:Stemmer.Cvb.Point3Df"/>.
            </summary>
            <returns><b>Point3Df</b> point.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.op_Equality(Stemmer.Cvb.Point3Dd,Stemmer.Cvb.Point3Dd)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> == <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.op_Inequality(Stemmer.Cvb.Point3Dd,Stemmer.Cvb.Point3Dd)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> != <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.Equals(Stemmer.Cvb.Point3Dd)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this PointD</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dd.CrossProduct(Stemmer.Cvb.Point3Dd)">
            <summary>
            Calculates the crossproduct of this vector
            and the given <paramref name="v2"/>.
            </summary>
            <param name="v2">Vector to build crossproduct with.</param>
            <returns>Crossproduct of this vector and <paramref name="v2"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Point3Dhd">
            <summary>
            Multi-purpose homogeneous 3D double vector struct.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-coordinate</param>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-coordinate</param>
            <param name="w">W-component.</param>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dhd.X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dhd.Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dhd.Z">
            <summary>
            Z-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dhd.W">
            <summary>
            W-component.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dhd.Item(System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The element to access (0 is <see cref="P:Stemmer.Cvb.Point3Dhd.X"/>).</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.op_Addition(Stemmer.Cvb.Point3Dhd,Stemmer.Cvb.Point3Dhd)">
            <summary>
            Addition operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.op_Subtraction(Stemmer.Cvb.Point3Dhd,Stemmer.Cvb.Point3Dhd)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Difference of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.op_Multiply(Stemmer.Cvb.Point3Dhd,Stemmer.Cvb.Point3Dhd)">
            <summary>
            Multiplication operator.
            Gets the inner product of the given <paramref name="lhs"/> and <paramref name="rhs"/>.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Inner product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.op_Multiply(System.Double,Stemmer.Cvb.Point3Dhd)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Multiplied point.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.op_Multiply(Stemmer.Cvb.Point3Dhd,System.Double)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Multiplied point.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.op_Division(Stemmer.Cvb.Point3Dhd,System.Double)">
            <summary>
            Division operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Divided point.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.op_Equality(Stemmer.Cvb.Point3Dhd,Stemmer.Cvb.Point3Dhd)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> == <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.op_Inequality(Stemmer.Cvb.Point3Dhd,Stemmer.Cvb.Point3Dhd)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> != <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.Equals(Stemmer.Cvb.Point3Dhd)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.ToPoint3Dd">
            <summary>
            Converts this point to a <see cref="T:Stemmer.Cvb.Point3Dd"/>.
            </summary>
            <returns>New <b>Point3Dd</b> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this PointD</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhd.CrossProduct(Stemmer.Cvb.Point3Dhd)">
            <summary>
            Calculates the crossproduct of this vector
            and the given <paramref name="v2"/>.
            </summary>
            <param name="v2">Vector to build crossproduct with.</param>
            <returns>Crossproduct of this vector and <paramref name="v2"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Point3Dhf">
            <summary>
            Multi-purpose homogeneous 3D float vector struct.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-coordinate</param>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-coordinate.</param>
            <param name="y">Y-Coordinate.</param>
            <param name="z">Z-coordinate</param>
            <param name="w">W-component.</param>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dhf.X">
            <summary>
            X-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dhf.Y">
            <summary>
            Y-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dhf.Z">
            <summary>
            Z-coordinate.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dhf.W">
            <summary>
            W-component.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point3Dhf.Item(System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The element to access (0 is <see cref="P:Stemmer.Cvb.Point3Dhf.X"/>).</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.op_Addition(Stemmer.Cvb.Point3Dhf,Stemmer.Cvb.Point3Dhf)">
            <summary>
            Addition operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.op_Subtraction(Stemmer.Cvb.Point3Dhf,Stemmer.Cvb.Point3Dhf)">
            <summary>
            Subtraction operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Difference of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.op_Multiply(Stemmer.Cvb.Point3Dhf,Stemmer.Cvb.Point3Dhf)">
            <summary>
            Multiplication operator.
            Gets the inner product of the given <paramref name="lhs"/> and <paramref name="rhs"/>.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Inner product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.op_Multiply(System.Single,Stemmer.Cvb.Point3Dhf)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.op_Multiply(Stemmer.Cvb.Point3Dhf,System.Single)">
            <summary>
            Multiplication operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.op_Division(Stemmer.Cvb.Point3Dhf,System.Single)">
            <summary>
            Division operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Divided point.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.op_Equality(Stemmer.Cvb.Point3Dhf,Stemmer.Cvb.Point3Dhf)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> == <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.op_Inequality(Stemmer.Cvb.Point3Dhf,Stemmer.Cvb.Point3Dhf)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>True if <paramref name="lhs"/> != <paramref name="rhs"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.Equals(Stemmer.Cvb.Point3Dhf)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.ToPoint3Df">
            <summary>
            Converts this point to a <see cref="T:Stemmer.Cvb.Point3Df"/>.
            </summary>
            <returns>New <b>Point3Df</b> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this PointD</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point3Dhf.CrossProduct(Stemmer.Cvb.Point3Dhf)">
            <summary>
            Calculates the crossproduct of this vector
            and the given <paramref name="v2"/>.
            </summary>
            <param name="v2">Vector to build crossproduct with.</param>
            <returns>Crossproduct of this vector and <paramref name="v2"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.PointCloudFlags">
            <summary>
            Flags for creating <see cref="T:Stemmer.Cvb.PointCloud"/>s.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudFlags.Float">
            <summary>
            Create the point cloud with float components.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudFlags.Double">
            <summary>
            Create the point cloud with double components.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudFlags.XYZ">
            <summary>
            Create the point cloud with three Cartesian components (x, y, z).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudFlags.XYZW">
            <summary>
            Create the point cloud with four Cartesian, homogeneous components (x, y, z, w).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudFlags.XYZConfidence">
            <summary>
            Create point cloud with three Cartesian components (x, y, z) and
            a confidence plane.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudFlags.WithConfidence">
            <summary>
            Create the point cloud with an additional confidence plane.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudFlags.NoExtrinsinc">
            <summary>
            Only apply intrinsic calibration in <see cref="M:Stemmer.Cvb.Calibrator3D.CreatePointCloud(Stemmer.Cvb.Image,Stemmer.Cvb.PointCloudFlags)"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudFlags.NoMeshIndices">
            <summary>
            Do not use directly: use <see cref="M:Stemmer.Cvb.PointCloud.FromFile(System.String)"/> to
            not load mesh information.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.PointCloudLayout">
            <summary>
            Supported point cloud layouts.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudLayout.Invalid">
            <summary>
            No known / supported point cloud format.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudLayout.Linear">
            <summary>
            No known buffer layout.
            For this layout only the plane roles X, Y and Z are known with their increments.
            Thus the PointCloud composite either has no buffer or no buffer that can be mapped via a PFNC value.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudLayout.SeparatePlanar">
            <summary>
            Each plane is in its own, contiguous buffer.
            For each plane role X, Y and Z exists one distinct buffer. Increment to the next element is element sized as in a simple array.
            If the component data types are float, the composite has at least three buffers with PFNC values Coord3D_A32f, Coord3D_B32f and Coord3D_C32f.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudLayout.Planar">
            <summary>
            All planes are in one planar, contiguous buffer.
            All plane roles X, Y and Z lay component wise one after the other. First all x, then all y and finally all z components.
            If the component data type is float, the composite has at least one buffer with a PFNC value of Coord3D_ABC32f_Planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PointCloudLayout.Interleaved">
            <summary>
            All points are stored x,y,z interleaved as in Point3D.
            All plane roles X, Y and Z lay point wise one after the other.
            If the component data type is float, the composite has at least one buffer with a PFNC value of Coord3D_ABC32f.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.FileFormat">
            <summary>
            File format to store a point cloud in.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.FileFormat.Ascii">
            <summary>
            ASCII text file with each point in one row.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.FileFormat.Ply">
            <summary>
            PLY format for storing sparse point clouds and meshes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.FileFormat.Stl">
            <summary>
            STL format for storing sparse point clouds and meshes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.FileFormat.WavefrontObj">
            <summary>
            OBJ format for storing sparse point clouds and meshes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.FileFormat.Tiff">
            <summary>
            Custom TIFF format for storing sparse and dense point clouds.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.DownSampleMode">
            <summary>
            Mode used for the downsample methods.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DownSampleMode.ByFactor">
            <summary>
            Remove every n-th points.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DownSampleMode.RemoveRandomly">
            <summary>
            Remove a specified amount of random points
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.PointCloud">
            <summary>
            Base class for point clouds.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.FromFile(System.String)">
            <summary>
            Loads a point cloud from the given <paramref name="fileName"/>.
            </summary>
            <param name="fileName">File to load the point cloud from.</param>
            <returns>Loaded point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When loading the point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.FromFile(System.String,Stemmer.Cvb.PointCloudFlags)">
            <summary>
            Loads a point cloud from the given <paramref name="fileName"/>
            with the specified <paramref name="flags"/>.
            </summary>
            <param name="fileName">File to load the point cloud from.</param>
            <param name="flags">Flags to load the point cloud with.</param>
            <returns>Loaded point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When loading the point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.FromComposite(Stemmer.Cvb.Composite)">
            <summary>
            Create a point cloud from the gicen <see cref="T:Stemmer.Cvb.Composite"/>
            <paramref name="obj"/>.
            </summary>
            <param name="obj">Composite from which a point cloud is to be
            created.</param>
            <returns>New <b>PointCloud</b> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Creates a point cloud from the given <paramref name="handle"/>.
            </summary>
            <param name="handle">Handle to create point cloud with.</param>
            <param name="doShare">Share ownership or adopt it.</param>
            <returns>Created point cloud.</returns>
            <exception cref="T:System.ArgumentException">When <paramref name="handle"/> is <see cref="F:System.IntPtr.Zero"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.FromMemory``1(System.Byte[],Stemmer.Cvb.FileFormat)">
            <summary>
            Creates a point cloud from the given <paramref name="buffer"/> buffer.
            </summary>
            <typeparam name="T">Point type used by the cloud.</typeparam>
            <param name="buffer">Buffer containing the point cloud data.</param>
            <param name="fileFormat">File format of the <paramref name="buffer"/> data.</param>
            <returns>Created point cloud.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="buffer"/> is empty.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during point cloud creation occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.FromMemory(System.Byte[],Stemmer.Cvb.PointCloudFlags,Stemmer.Cvb.FileFormat)">
            <summary>
            Creates a point cloud from the given <paramref name="buffer"/> buffer.
            </summary>
            <param name="buffer">Buffer containing the point cloud data.</param>
            <param name="flags">Flags of the point cloud to create.</param>
            <param name="fileFormat">File format of the <paramref name="buffer"/> data.</param>
            <returns>Created point cloud.</returns>
            <exception cref="T:System.ArgumentNullException">When <paramref name="buffer"/> is null.</exception>
            <exception cref="T:System.ArgumentException">When <paramref name="buffer"/> is empty.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during point cloud creation occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.FromMemory``1(System.IntPtr,System.Int64,Stemmer.Cvb.FileFormat)">
            <summary>
            Creates a point cloud from the given <paramref name="buffer"/> buffer.
            </summary>
            <typeparam name="T">Point type used by the cloud.</typeparam>
            <param name="buffer">Buffer containing the point cloud data.</param>
            <param name="bufferSize">Size of the <paramref name="buffer"/>.</param>
            <param name="fileFormat">File format of the <paramref name="buffer"/> data.</param>
            <returns>Created point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during point cloud creation occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.FromMemory(System.IntPtr,System.Int64,Stemmer.Cvb.PointCloudFlags,Stemmer.Cvb.FileFormat)">
            <summary>
            Creates a point cloud from the given <paramref name="buffer"/> buffer.
            </summary>
            <param name="buffer">Buffer containing the point cloud data.</param>
            <param name="bufferSize">Size of the <paramref name="buffer"/>.</param>
            <param name="flags">Flags of the point cloud to create.</param>
            <param name="fileFormat">File format of the <paramref name="buffer"/> data.</param>
            <returns>Created point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during point cloud creation occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">Native handle to the PointCloud.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="handle"/> is <see cref="F:System.IntPtr.Zero"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.#ctor(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">Native handle to the PointCloud.</param>
            <param name="useMemoryPressure">Guesses memory pressure if
            <see cref="F:Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure.Yes"/> is set.</param>
            <exception cref="T:System.ArgumentException">When <paramref name="handle"/> is <see cref="F:System.IntPtr.Zero"/>.</exception>
        </member>
        <member name="E:Stemmer.Cvb.PointCloud.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.PointCloud.Handle">
            <summary>
            Native handle of the PointCloud.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.PointCloud.IsDisposed">
            <summary>
            Gets if the native handle has been disposed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.Dispose(System.Boolean)">
            <summary>
            IDisposable helper function.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.PointCloud.MemoryPressure">
            <summary>
            Info how much memory pressure this point cloud provides.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.GuessMemoryPressure">
            <summary>
            Calculates a rough estimate of the size of the
            point cloud occupies.
            </summary>
            <returns>Rough estimate of memory pressure of this point cloud.</returns>
        </member>
        <member name="P:Stemmer.Cvb.PointCloud.Layout">
            <summary>
            The layout of the buffer / planes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.PointCloud.DataType">
            <summary>
            The data type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.PointCloud.NumPoints">
            <summary>
            Number of points.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.PointCloud.PointComponents">
            <summary>
            The pointer components for the points.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.TryGetConfidencePlane(Stemmer.Cvb.LinearPlaneAccess1D@)">
            <summary>
            Tries to get the confidence plane data of this point cloud.
            </summary>
            <param name="confidencePointer">Variable to receive the confidence plane data.</param>
            <returns>True if confidence plane data was successfully read, false otherwise.</returns>
        </member>
        <member name="P:Stemmer.Cvb.PointCloud.Planes">
            <summary>
            Gets all the component planes of this point cloud.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.Clone">
            <summary>
            Creates a new point cloud which is a copy of this point cloud.
            </summary>
            <returns>Copy of this point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When duplicating the point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.System#ICloneable#Clone">
            <summary>
            Creates a new point cloud which is a copy of this point cloud.
            </summary>
            <returns>Copy of this point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When duplicating the point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.PointTypeToFlags``1">
            <summary>
            Converts the point type to flags.
            </summary>
            <typeparam name="T">One of the Stemmer.Cvb.Point3D types.</typeparam>
            <returns>Flags identifying this type.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.TryEnumeratePointsAs``1">
            <summary>
            Tries to get the points of this point cloud.
            </summary>
            <typeparam name="T">Type to try to get the points in.</typeparam>
            <returns>The points (or empty <see cref="T:System.Collections.Generic.IEnumerable`1"/>,
            when the points could not be gotten).</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.TryEnumeratePointsAsPoint3Dd">
            <summary>
            Tries to get the points from this point cloud as <see cref="T:Stemmer.Cvb.Point3Dd"/>.
            </summary>
            <returns>The <see cref="T:Stemmer.Cvb.Point3Dd"/>s.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.GetAsP3D(System.IntPtr,System.UInt64)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Point3Dd"/> at the given <paramref name="basePtr"/> address
            with the given <paramref name="index"/>.
            </summary>
            <param name="basePtr">Base address of the point array.</param>
            <param name="index">Index of the point to get.</param>
            <returns>The point at the given <paramref name="index"/> of the point array.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.TryEnumeratePointsAsPoint3Df">
            <summary>
            Tries to get the points from this point cloud as <see cref="T:Stemmer.Cvb.Point3Df"/>.
            </summary>
            <returns>The <see cref="T:Stemmer.Cvb.Point3Df"/>s.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.GetAsP3F(System.IntPtr,System.UInt64)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Point3Df"/> at the given <paramref name="basePtr"/> address
            with the given <paramref name="index"/>.
            </summary>
            <param name="basePtr">Base address of the point array.</param>
            <param name="index">Index of the point to get.</param>
            <returns>The point at the given <paramref name="index"/> of the point array.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.TryEnumeratePointsAsPoint3Dhd">
            <summary>
            Tries to get the points from this point cloud as <see cref="T:Stemmer.Cvb.Point3Dhd"/>.
            </summary>
            <returns>The <see cref="T:Stemmer.Cvb.Point3Dhd"/>s.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.GetAsP3HD(System.IntPtr,System.UInt64)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Point3Dhd"/> at the given <paramref name="basePtr"/> address
            with the given <paramref name="index"/>.
            </summary>
            <param name="basePtr">Base address of the point array.</param>
            <param name="index">Index of the point to get.</param>
            <returns>The point at the given <paramref name="index"/> of the point array.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.TryEnumeratePointsAsPoint3Dhf">
            <summary>
            Tries to get the points from this point cloud as <see cref="T:Stemmer.Cvb.Point3Dhf"/>.
            </summary>
            <returns>The <see cref="T:Stemmer.Cvb.Point3Dhf"/>s.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.GetAsP3HF(System.IntPtr,System.UInt64)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.Point3Dhf"/> at the given <paramref name="basePtr"/> address
            with the given <paramref name="index"/>.
            </summary>
            <param name="basePtr">Base address of the point array.</param>
            <param name="index">Index of the point to get.</param>
            <returns>The point at the given <paramref name="index"/> of the point array.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.CreateTypedPointCloud(System.IntPtr)">
            <summary>
            Creates a typed point cloud determined by
            the given <paramref name="handle"/>.
            </summary>
            <param name="handle">Point cloud handle to create
            typed point cloud for.</param>
            <returns>Typed point cloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloud.IsDense(System.IntPtr)">
            <summary>
            Gets if the given <paramref name="handle"/>
            is a <see cref="T:Stemmer.Cvb.DensePointCloud"/> handle by
            checking the lattice size can be read.
            </summary>
            <param name="handle">Point cloud handle to check.</param>
            <returns>True if the given <paramref name="handle"/> is
            a <see cref="T:Stemmer.Cvb.DensePointCloud"/> handle, false if not.</returns>
        </member>
        <member name="T:Stemmer.Cvb.PointCloudExtensions">
            <summary>
            Extension methods for <see cref="T:Stemmer.Cvb.PointCloud"/>s.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.CalculateBoundingBox(Stemmer.Cvb.PointCloud)">
            <summary>
            Calculates the minimum and maximum extent of the point cloud.
            </summary>
            <param name="pc">PointCloud whose bounding box to calculate.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When calculating the bounding box failed.</exception>
            <returns>The bounding box.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.CalculateCenterOfGravity(Stemmer.Cvb.PointCloud)">
            <summary>
            Calculates the center of gravity of the point cloud.
            </summary>
            <param name="pc">PointCloud whose center of gravity to calculate.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When calculating the center of gravity failed.</exception>
            <returns>Point to the center of gravity.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.CalculateCovarianceMatrix(Stemmer.Cvb.PointCloud)">
            <summary>
            Calculates the covariance matrix of the point cloud.
            </summary>
            <param name="pc">PointCloud whose covariance matrix to calculate.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When calculating the covariance matrix failed.</exception>
            <returns>The covariance matrix.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.FitPlane(Stemmer.Cvb.PointCloud)">
            <summary>
            Fits a plane in the points of the <see cref="T:Stemmer.Cvb.PointCloud"/>
            <paramref name="pc"/>.
            </summary>
            <remarks>
            Also fits a plane in points lying on one line, thus make sure that the
            points really span a plane.
            </remarks>
            <param name="pc">Point cloud to extract points from.</param>
            <returns>Newly created <b>Plane</b> object fitted in the points from
            the point cloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.FitPlane(Stemmer.Cvb.PointCloud,Stemmer.Cvb.Cuboid)">
            <summary>
            Fits a plane in the points of the <see cref="T:Stemmer.Cvb.PointCloud"/>
            <paramref name="pc"/> restricted by the given <paramref name="aoi"/>.
            </summary>
            <remarks>
            Also fits a plane in points lying on one line, thus make sure that the
            points really span a plane.
            </remarks>
            <param name="pc">Point cloud to extract points from.</param>
            <param name="aoi">Bounding cuboid to extract points from.</param>
            <returns>Newly created <b>Plane</b> object fitted in the points from
            the point cloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.Crop(Stemmer.Cvb.PointCloud,Stemmer.Cvb.Cuboid)">
            <summary>
            Creates a new point cloud which is a copy of this point cloud,
            which only consists of the points inside the given <paramref name="clipBox"/>.
            </summary>
            <param name="pc">PointCloud to crop.</param>
            <param name="clipBox">Cuboid defining the inclusive bounds
            for the points to be copied.</param>
            <returns>Cropped point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the cropped point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.DownsampleByFactor(Stemmer.Cvb.PointCloud,System.Int32)">
            <summary>
            Creates a new point cloud which is a copy of this point cloud,
            with every nth point removed (n being defined by the given <paramref name="factor"/>).
            </summary>
            <param name="pc">PointCloud to downsample.</param>
            <param name="factor">Factor by which to remove points.</param>
            <returns>Downsampled point cloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.DownsampleRandomly(Stemmer.Cvb.PointCloud,System.Int32)">
            <summary>
            Creates a new point cloud which is a copy of this point cloud,
            with n random points removed (n being defined by the given <paramref name="amount"/>).
            </summary>
            <param name="pc">PointCloud to downsample.</param>
            <param name="amount">Amount of points to remove.</param>
            <returns>Downsampled point cloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.Scale(Stemmer.Cvb.PointCloud,Stemmer.Cvb.Factors3D)">
            <summary>
            Creates a new point cloud which is a copy of this point cloud,
            with all points scaled by the given <paramref name="factors"/>.
            </summary>
            <param name="pc">PointCloud to scale.</param>
            <param name="factors">Factors to be applied to each point.</param>
            <returns>Scaled point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the scaled point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.ToRangeMap(Stemmer.Cvb.PointCloud,Stemmer.Cvb.ValueRange{System.Double},Stemmer.Cvb.ValueRange{System.Double},Stemmer.Cvb.Size2D,System.Double)">
            <summary>
            Creates a new range map image via linear project
            in negative z direction.
            </summary>
            <param name="pc">PointCloud to create range map from.</param>
            <param name="xRange">Input window along the x axis (inclusive).</param>
            <param name="yRange">Input window along the y axis (inclusive).</param>
            <param name="targetSize">Target size of the RangeMap in pixels (greater or equal to 2).</param>
            <param name="backgroundValue">Background value (initialization value for RangeMap).</param>
            <returns>The created range map image.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the range map failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.ToRangeMap(Stemmer.Cvb.PointCloud,Stemmer.Cvb.ValueRange{System.Double},Stemmer.Cvb.ValueRange{System.Double},System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a new range map image via linear project
            in negative z direction.
            </summary>
            <param name="pc">PointCloud to create range map from.</param>
            <param name="xRange">Input window along the x axis (inclusive).</param>
            <param name="yRange">Input window along the y axis (inclusive).</param>
            <param name="targetWidth">Target width of the RangeMap in pixels (greater or equal to 2).</param>
            <param name="targetHeight">Target height of the RangeMap in pixels (greater or equal to 2).</param>
            <param name="backgroundValue">Background value (initialization value for RangeMap).</param>
            <returns>The created range map image.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the range map failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.Save(Stemmer.Cvb.PointCloud,System.String)">
            <summary>
            Saves this point cloud to the given <paramref name="fileName"/>.
            </summary>
            <param name="pc">PointCloud to save.</param>
            <param name="fileName">Full path to the file to save to.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When saving the point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.Save(Stemmer.Cvb.PointCloud,System.String,Stemmer.Cvb.PointCloudFlags)">
            <summary>
            Saves this point cloud to the given <paramref name="fileName"/>.
            </summary>
            <param name="pc">PointCloud to save.</param>
            <param name="fileName">Full path to the file to save to.</param>
            <param name="flags">Ignored so far.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When saving the point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.ToMemory(Stemmer.Cvb.PointCloud,Stemmer.Cvb.PointCloudFlags,Stemmer.Cvb.FileFormat)">
            <summary>
            Saves this point cloud to memory.
            </summary>
            <param name="pc">Point cloud to save.</param>
            <param name="flags">Flags of the point cloud.</param>
            <param name="fileFormat">File format to save.</param>
            <returns>Array containing the byte data.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during saving occurs.</exception>
        </member>
        <member name="M:Stemmer.Cvb.PointCloudExtensions.ToMemory(Stemmer.Cvb.PointCloud,System.IntPtr,System.Int64,Stemmer.Cvb.PointCloudFlags,Stemmer.Cvb.FileFormat)">
            <summary>
            Saves this point cloud to the given <paramref name="buffer"/>.
            </summary>
            <param name="pc">Point cloud to save.</param>
            <param name="buffer">Buffer to save point cloud to.</param>
            <param name="bufferSize">Size of the <paramref name="buffer"/>.</param>
            <param name="flags">Flags of the point cloud.</param>
            <param name="fileFormat">File format to save.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">When an error during saving occurs.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Polygon3D`1">
            <summary>
            A polygon in 3D space.
            </summary>
            <typeparam name="T">Type of the points.
            Use <see cref="T:Stemmer.Cvb.Point3Dd"/> or <see cref="T:Stemmer.Cvb.Point3Df"/> here.</typeparam>
        </member>
        <member name="P:Stemmer.Cvb.Polygon3D`1.Points">
            <summary>
            The points of the polygon.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Polygon3D`1.#ctor(`0[])">
            <summary>
            Constructor.
            </summary>
            <param name="points">Points of the polygon.</param>
            <exception cref="T:System.ArgumentException">When the type of the points contained
            in <paramref name="points"/> is not <see cref="T:Stemmer.Cvb.Point3Dd"/> or <see cref="T:Stemmer.Cvb.Point3Df"/>
            or <paramref name="points"/> contains less than 3 points.</exception>
            <exception cref="T:System.ArgumentNullException">When <paramref name="points"/> is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Polygon3D`1.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance are the same type and represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Polygon3D`1.Equals(Stemmer.Cvb.Polygon3D{`0})">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if obj and this instance represent the same value;
            otherwise, false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Polygon3D`1.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Polygon3D`1.op_Equality(Stemmer.Cvb.Polygon3D{`0},Stemmer.Cvb.Polygon3D{`0})">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="left">Left hand side operand.</param>
            <param name="right">Right hand side operand.</param>
            <returns>True if <paramref name="left"/> == <paramref name="right"/>,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Polygon3D`1.op_Inequality(Stemmer.Cvb.Polygon3D{`0},Stemmer.Cvb.Polygon3D{`0})">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="left">Left hand side operand.</param>
            <param name="right">Right hand side operand.</param>
            <returns>True if <paramref name="left"/> != <paramref name="right"/>,
            otherwise false.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Range">
            <summary>
            Struct defining a range.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Range.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="min">Inclusive minimum of the range.</param>
            <param name="max">Inclusive maximum of the range.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="min"/> is > <paramref name="max"/>.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Range.Min">
            <summary>
            Inclusive minimum of the range.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Range.Max">
            <summary>
            Inclusive maximum of the range.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.RotationAngles3D">
            <summary>
            Roll-pitch-yaw rotation angle struct.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.RotationAngles3D.#ctor(Stemmer.Cvb.Angle,Stemmer.Cvb.Angle,Stemmer.Cvb.Angle)">
            <summary>
            Constructor.
            </summary>
            <param name="roll">The roll angle.</param>
            <param name="pitch">The pitch angle.</param>
            <param name="yaw">The yaw angle.</param>
        </member>
        <member name="M:Stemmer.Cvb.RotationAngles3D.#ctor(Stemmer.Cvb.Matrix3D)">
            <summary>
            Constructor.
            </summary>
            <param name="matrix">3D matrix to create rotation angles from.</param>
        </member>
        <member name="P:Stemmer.Cvb.RotationAngles3D.Roll">
            <summary>
            The roll angle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.RotationAngles3D.Pitch">
            <summary>
            The pitch angle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.RotationAngles3D.Yaw">
            <summary>
            The yaw angle.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SparseComponentsPointer3D`1">
            <summary>
            Generic point components of a <see cref="T:Stemmer.Cvb.SparsePointCloud"/>.
            </summary>
            <typeparam name="T">Type of the points.
            Use one of the Stemmer.Cvb.Point3D types here.</typeparam>
        </member>
        <member name="F:Stemmer.Cvb.SparseComponentsPointer3D`1._getPoint">
            <summary>
            Delegate to get the point of the desired type.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SparseComponentsPointer3D`1._setPoint">
            <summary>
            Delegate to set the point of the desired type.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SparseComponentsPointer3D`1._numPoints">
            <summary>
            Number of points in the parent point cloud.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SparseComponentsPointer3D`1.#ctor(Stemmer.Cvb.LinearPlaneAccess1D,Stemmer.Cvb.LinearPlaneAccess1D,Stemmer.Cvb.LinearPlaneAccess1D,System.Nullable{Stemmer.Cvb.LinearPlaneAccess1D},System.Nullable{Stemmer.Cvb.LinearPlaneAccess1D},System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="x">X-component.</param>
            <param name="y">Y-component.</param>
            <param name="z">Z-component.</param>
            <param name="w">W-component.</param>
            <param name="confidence">Confidence plane.</param>
            <param name="numPoints">Number of points in the parent point cloud.</param>
        </member>
        <member name="P:Stemmer.Cvb.SparseComponentsPointer3D`1.Item(System.Int32)">
            <summary>
            Gets or sets the point at the specified index.
            </summary>
            <param name="i">Index of the point to get or set.</param>
            <returns>The point at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="i"/> is negative
            or bigger than the amount of points in the point cloud.</exception>
        </member>
        <member name="T:Stemmer.Cvb.SparsePointCloud">
            <summary>
            Sparse point cloud object.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SparsePointCloud.Create``1(System.Int64)">
            <summary>
            Creates a new point cloud with the specified <paramref name="numPoints"/>
            and components of the given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">One of the Stemmer.Cvb.Point3D point types.</typeparam>
            <param name="numPoints">Amount of points to create.</param>
            <returns>Newly created point cloud.</returns>
            <exception cref="T:System.ArgumentException">When <typeparamref name="T"/> is not double or float.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the sparse point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.SparsePointCloud.#ctor(System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="numPoints">Amount of points to create.</param>
        </member>
        <member name="M:Stemmer.Cvb.SparsePointCloud.#ctor(System.Int64,Stemmer.Cvb.PointCloudFlags)">
            <summary>
            Constructor.
            </summary>
            <param name="numPoints">Amount of points to create.</param>
            <param name="flags">Flags to create point cloud with.</param>
        </member>
        <member name="M:Stemmer.Cvb.SparsePointCloud.#ctor(System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="handle">The sparse point cloud handle.</param>
            <exception cref="T:System.ArgumentException">When the given <paramref name="handle"/>
            is not a sparse point cloud handle or is <see cref="F:System.IntPtr.Zero"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.SparsePointCloud.GetComponentsPointer3D``1">
            <summary>
            Gets the generic components pointer for this point cloud.
            </summary>
            <typeparam name="T">Type of the points.</typeparam>
            <returns>Generic components pointer for this point cloud.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SparsePointCloud.CreateHandle(System.Int64,Stemmer.Cvb.PointCloudFlags)">
            <summary>
            Creates a new point cloud with the specified <paramref name="numPoints"/>
            and the specified <paramref name="flags"/>.
            </summary>
            <param name="numPoints">Amount of points to create.</param>
            <param name="flags">Flags to create point cloud with.</param>
            <returns>Newly created sparse point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the sparse point cloud failed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Transform3D">
            <summary>
            Transformation functions for 3D objects.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Transform3D.Transform(Stemmer.Cvb.PointCloud,Stemmer.Cvb.AffineMatrix3D)">
            <summary>
            Creates a new point cloud which is a copy of this point cloud,
            with all points being transformed by the given <paramref name="affineTransformation"/>.
            </summary>
            <param name="pc">PointCloud to transform.</param>
            <param name="affineTransformation">Transformation matrix to apply.</param>
            <returns>Transformed point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the transformed point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Transform3D.Transform(Stemmer.Cvb.PointCloud,Stemmer.Cvb.AffineMatrix3D,Stemmer.Cvb.PointCloud)">
            <summary>
            Transforms all points of this point cloud with the given <paramref name="affineTransformation"/>
            and stores them in the <paramref name="target"/>.
            </summary>
            <param name="pc">PointCloud to transform.</param>
            <param name="affineTransformation">Transformation matrix to apply.</param>
            <param name="target">Point cloud to store the transformed points in.</param>
            <returns>Transformed point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When transforming the point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Transform3D.Transform(Stemmer.Cvb.PointCloud,Stemmer.Cvb.Matrix3DH)">
            <summary>
            Creates a new point cloud which is a copy of this point cloud,
            with all points being transformed by the given <paramref name="transformation"/>.
            </summary>
            <param name="pc">PointCloud to transform.</param>
            <param name="transformation">Homogeneous transformation matrix to apply.</param>
            <returns>Transformed point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the transformed point cloud failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Transform3D.Transform(Stemmer.Cvb.PointCloud,Stemmer.Cvb.Matrix3DH,Stemmer.Cvb.PointCloud)">
            <summary>
            Transforms all points of this point cloud with the given <paramref name="transformation"/>
            and stores them in the <paramref name="target"/>.
            </summary>
            <param name="pc">PointCloud to transform.</param>
            <param name="transformation">Homogeneous transformation matrix to apply.</param>
            <param name="target">Point cloud to store the transformed points in.</param>
            <returns>Transformed point cloud.</returns>
            <exception cref="T:Stemmer.Cvb.CvbException">When transforming the point cloud failed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.AffineMatrix3D">
            <summary>
            Compacted affine matrix for 3D operations.
            </summary>
            <remarks>
            The fourth line is assumed to be 0, 0, 0, 1.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.AffineMatrix3D.#ctor(Stemmer.Cvb.Matrix3D,Stemmer.Cvb.Point3Dd)">
            <summary>
            Constructor.
            </summary>
            <param name="matrix">Matrix to use.</param>
            <param name="translation">Translation to use.</param>
        </member>
        <member name="P:Stemmer.Cvb.AffineMatrix3D.Identity">
            <summary>
            The identity element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.AffineMatrix3D.Translation">
            <summary>
            The translation part of the transformation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.AffineMatrix3D.Matrix">
            <summary>
            The matrix part of the transformation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.AffineMatrix3D.Item(System.Int32,System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The row, or "Y" index to get.</param>
            <param name="column">The column, or "X" index to get.</param>
            <returns>Value at the specified position.</returns>
        </member>
        <member name="M:Stemmer.Cvb.AffineMatrix3D.op_Multiply(Stemmer.Cvb.AffineMatrix3D,Stemmer.Cvb.AffineMatrix3D)">
            <summary>
            Compose two affine matrices by multiplying them.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>composed AffineMatrix struct</returns>
        </member>
        <member name="M:Stemmer.Cvb.AffineMatrix3D.Equals(System.Object)">
            <summary>
            Indicates whether this instance and the given <paramref name="obj"/> are equal.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> and this
            instance are the same type and represent the same value; otherwise
            <see langword="false"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.AffineMatrix3D.Equals(Stemmer.Cvb.AffineMatrix3D)">
            <summary>
            Gets whether this and the other <paramref name="t2"/> object are equal.
            </summary>
            <param name="t2">Object to compre to.</param>
            <returns><see langword="true"/> if <paramref name="t2"/> and this
            instance represent the same value; otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.AffineMatrix3D.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.AffineMatrix3D.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this affine matrix</returns>
        </member>
        <member name="T:Stemmer.Cvb.FeatureExtent">
            <summary>
            The rectangular extent of a feature relative to an anchor point.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.FeatureExtent.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for Cvb rectangles.
            </summary>
            <param name="left">Leftmost column of the rectangle</param>
            <param name="top">Topmost column of the rectangle</param>
            <param name="right">Rightmost column of the rectangle</param>
            <param name="bottom">Bottom columns of the rectangle</param>
        </member>
        <member name="P:Stemmer.Cvb.FeatureExtent.Left">
            <summary>
            First column of the rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.FeatureExtent.Top">
            <summary>
            First row of the rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.FeatureExtent.Right">
            <summary>
            Rightmost column of the rectangle (still inside the rectangle).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.FeatureExtent.Bottom">
            <summary>
            Bottom row of the rectangle (still inside the rectangle).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.FeatureExtent.Size">
            <summary>
            Gets the width and height of the feature rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.FeatureExtent.Width">
            <summary>
            Gets the width of the feature rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.FeatureExtent.Height">
            <summary>
            Gets the height of the feature rectangle.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.FileImage">
            <summary>
            An <see cref="T:Stemmer.Cvb.Image"/> loaded from the file system.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.FileImage.#ctor(System.String)">
            <summary>
            Loads an image with the given <paramref name="fileName"/>.
            </summary>
            <param name="fileName">File name of image to load.</param>
            <exception cref="T:System.IO.FileNotFoundException">when the file specified by
            the <paramref name="fileName"/> parameter does not exist.</exception>
            <exception cref="T:System.IO.FileLoadException">If the file specified by the
            <paramref name="fileName"/> parameter exists, but cannot be loaded.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fileName"/>
            is null.</exception>
        </member>
        <member name="P:Stemmer.Cvb.FileImage.FileName">
            <summary>
            Gets the full filename of this image.
            </summary>
            <remarks>
            If the file name is present (e.g. when the file is loaded from disk)
            this contains the full path including extension.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IBooleanNode">
            <summary>
            GenICam GenApi node with a <see langword="bool"/> value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IBooleanNode.Value">
            <summary>
            Gets/sets the value of this boolean node.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.ICategoryNode">
            <summary>
            GenICam GenApi node grouping other <see cref="T:Stemmer.Cvb.GenApi.INode"/> objects.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.ICategoryNode.Nodes">
            <summary>
            Gets the nodes categorized by this node.
            </summary>
            <value>Enumerator to enumerate all categorized nodes.</value>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.ICommandNode">
            <summary>
            GenICam GenApi node that is executable.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.ICommandNode.Execute">
            <summary>
            Executes this command.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.ICommandNode.IsDone">
            <summary>
            If this command is readable, the execution state can be queried.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IEnumEntryNode">
            <summary>
            GenICam GenApi node representing one enumeration entry.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IEnumEntryNode.SymbolicValue">
            <summary>
            Gets the symbolic value of this entry.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IEnumEntryNode.NumericValue">
            <summary>
            Gets the numeric value of this entry.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IEnumerationNode">
            <summary>
            GenICam GenApi node containing named values.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IEnumerationNode.Value">
            <summary>
            Gets/sets the symbolic value of this enumeration.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IEnumerationNode.Entries">
            <summary>
            Gets all enum entries of this enumeration.
            </summary>
            <returns>
            Enumerator to enumerate all enum entries of this enumeration.
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IFloatNode">
            <summary>
            GenICam GenApi node that has a <see langword="double"/> value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IFloatNode.Value">
            <summary>
            Gets/Sets the value of this floating point node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IFloatNode.Min">
            <summary>
            Gets the minimal allowed number for this <see cref="P:Stemmer.Cvb.GenApi.IFloatNode.Value"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IFloatNode.Max">
            <summary>
            Gets the maximal allowed number for this <see cref="P:Stemmer.Cvb.GenApi.IFloatNode.Value"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IFloatNode.Increment">
            <summary>
            Gets the increment of this <see cref="P:Stemmer.Cvb.GenApi.IFloatNode.Value"/>.
            </summary>
            <value>The <see cref="P:Stemmer.Cvb.GenApi.IFloatNode.Value"/> can take values that are multiples of
            this one. Except when <see cref="F:System.Double.NaN"/> is returned which 
            indicates that no increment is available.</value>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IFloatNode.Representation">
            <summary>
            Gets how the value is to be represented.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IFloatNode.Unit">
            <summary>
            Gets the unit of this node's value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IIntegerNode">
            <summary>
            GenICam GenApi node that has a <see langword="long"/> value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IIntegerNode.Value">
            <summary>
            Gets/Sets the value of this integer node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IIntegerNode.Min">
            <summary>
            Gets the minimal allowed number for this <see cref="P:Stemmer.Cvb.GenApi.IIntegerNode.Value"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IIntegerNode.Max">
            <summary>
            Gets the maximal allowed number for this <see cref="P:Stemmer.Cvb.GenApi.IIntegerNode.Value"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IIntegerNode.Increment">
            <summary>
            Gets the increment of this <see cref="P:Stemmer.Cvb.GenApi.IIntegerNode.Value"/>.
            </summary>
            <value>
            The <see cref="P:Stemmer.Cvb.GenApi.IIntegerNode.Value"/> can take values that are multiples of this one. 
            </value>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IIntegerNode.Representation">
            <summary>
            Gets how the value is to be represented.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IIntegerNode.Unit">
            <summary>
            Gets the unit of this node's value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.INode">
            <summary>
            Generic GenICam GenApi node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.NodeMap">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.GenApi.INodeMap"/> this node resides in.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.Name">
            <summary>
            Gets the full name of this node.
            </summary>
            <value>
            String containing the namespace of the node (<i>Std</i> or <i>Cust</i>
            and the node's name separated by double colons (::)).
            </value>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.ToolTip">
            <summary>
            Gets the short descriptive text of this node.
            </summary>
            <remarks>
            See <see cref="P:Stemmer.Cvb.GenApi.INode.Description"/> for the long description.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.Description">
            <summary>
            Gets the long descriptive text of this node.
            </summary>
            <remarks>
            See <see cref="P:Stemmer.Cvb.GenApi.INode.ToolTip"/> for the short description.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.AccessMode">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.GenApi.AccessMode"/> of this node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.IsImplemented">
            <summary>
            <see cref="P:Stemmer.Cvb.GenApi.INode.AccessMode"/> helper to check whether this node is 
            implemented.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.IsAvailable">
            <summary>
            <see cref="P:Stemmer.Cvb.GenApi.INode.AccessMode"/> helper to check whether this node is 
            available.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.IsReadable">
            <summary>
            <see cref="P:Stemmer.Cvb.GenApi.INode.AccessMode"/> helper to check whether this node is 
            readable.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.IsWritable">
            <summary>
            <see cref="P:Stemmer.Cvb.GenApi.INode.AccessMode"/> helper to check whether this node is 
            writable.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.CacheMode">
            <summary>
            Gets the cache mode of this node.
            </summary>
            <remarks>
            For non-register nodes the cache mode of the register in the value
            path of the node chain up the the register is used.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.EventID">
            <summary>
            Nodes with an event identifier may become invalidated if an 
            event/message is delivered from the device.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.IsFeature">
            <summary>
            Gets whether this node is considered a feature node.
            </summary>
            <remarks>
            Feature nodes are in a way public/user interface nodes. All nodes that
            are directly referenced by the <i>Root</i> <see cref="T:Stemmer.Cvb.GenApi.CategoryNode"/>
            or indirectly via other <c>CategoryNode</c>s that are children of
            <i>Root</i> are considered features.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.IsDeprecated">
            <summary>
            Gets whether this node is considered deprecated.
            </summary>
            <remarks>
            Deprecated nodes are only available because of backward compatibility.
            New applications should not use these features.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.Visibility">
            <summary>
            Gets the complexity level of this node.
            </summary>
            <remarks>
            For additional information on the different levels see the 
            <see cref="T:Stemmer.Cvb.GenApi.Visibility"/> documentation.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INode.AliasNode">
            <summary>
            Gets the node that is an alias value for this node.
            </summary>
            <remarks>
            Alias nodes give an additional view on a value or can contain summary
            information for e.g. <see cref="T:Stemmer.Cvb.GenApi.CategoryNode"/>s.
            </remarks>
            <value>
            Alias node instance; <c>null</c> for none.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.INodeMap">
            <summary>
            Read-only dictionary holding all <see cref="T:Stemmer.Cvb.GenApi.INode"/>s of a device or 
            module.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INodeMap.Item(System.String)">
            <summary>
            Indexer to retrieve a node with the given <paramref name="name"/> from
            this node map.
            </summary>
            <param name="name">Name with or without the namespace prefix.</param>
            <returns><see cref="T:Stemmer.Cvb.GenApi.Node"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if <paramref name="name"/> does not exist in this collection.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.INodeMap.TryGetValue``1(System.String,``0@)">
            <summary>
            Tries to get the <paramref name="node"/> with the given 
            <paramref name="name"/>.
            </summary>
            <typeparam name="TNode">Type of node to retrieve.</typeparam>
            <param name="name">Name with or without the namespace prefix.</param>
            <param name="node">Node instance; <see langword="null"/> if not found.
            </param>
            <returns><b>true</b> if node with given <paramref name="name"/> exists
            and is of type <b>TNode</b>.</returns>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INodeMap.ModuleName">
            <summary>
            Gets the GenTL module name this node map refers to.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INodeMap.VendorName">
            <summary>
            Gets the name of the vendor who created the XML description.
            </summary>
            <remarks>
            <c>Attention:</c> often this name does not match the information of
            the GenTL port (discovery information).
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INodeMap.ModelName">
            <summary>
            Gets the name of the model that the XML description is for.
            </summary>
            <remarks>
            <c>Attention:</c> often this name does not match the information of
            the GenTL port (discovery information).
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INodeMap.TransportLayerNamespace">
            <summary>
            Gets the transport layer type of the device.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INodeMap.XmlFileVersion">
            <summary>
            Gets the XML version.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.INodeMap.XmlFileSchemaVersion">
            <summary>
            Gets the XML schema version.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IPortNode">
            <summary>
            GenICam GenApi node that enable read/write access to e.g. a device.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.IPortNode.Read(System.Int64,System.IntPtr,System.Int64)">
            <summary>
            Reads memory from the remote device into the given buffer.
            </summary>
            <remarks>
            Use of this method is unsafe; prefer using the typed nodes instead or
            reading into byte-arrays if necessary.
            </remarks>
            <param name="address">Address to read from.</param>
            <param name="bufferPointer">Buffer to store data into.</param>
            <param name="bufferLength">Number of bytes to read; buffer must have
            at least that many bytes of allocated memory.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.IPortNode.Read(System.Int64,System.Byte[])">
            <summary>
            Reads memory from the remote device into the given 
            <paramref name="buffer"/>.
            </summary>
            <remarks>
            The number of bytes read depend on the <see cref="P:System.Array.Length"/> of
            the given <paramref name="buffer"/>.
            </remarks>
            <param name="address">Address to read from.</param>
            <param name="buffer">Byte array to read to.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.IPortNode.Write(System.Int64,System.IntPtr,System.Int64)">
            <summary>
            Writes memory from the given buffer to the remote device.
            </summary>
            <remarks>
            Use of this method is unsafe; prefer using the typed nodes instead or
            writing from byte-arrays if necessary.
            </remarks>
            <param name="address">Address to write to.</param>
            <param name="bufferPointer">Buffer to write to device.</param>
            <param name="bufferLength">Number of bytes in the buffer.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.IPortNode.Write(System.Int64,System.Byte[])">
            <summary>
            Writes the the given <paramref name="buffer"/> to the remote device.
            </summary>
            <remarks>
            The number of bytes written depend on the <see cref="P:System.Array.Length"/> 
            of the given <paramref name="buffer"/>.
            </remarks>
            <param name="address">Address to write to.</param>
            <param name="buffer">Byte array to write.</param>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IRegisterNode">
            <summary>
            GenICam GenApi register node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IRegisterNode.Address">
            <summary>
            Gets the registers address.
            </summary>
            <remarks>
            <b>Attention:</b> the register address may change dependent on
            selecting nodes or other states.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IRegisterNode.Length">
            <summary>
            Gets the number of bytes the register occupies.
            </summary>
            <value>
            Length of the register's memory in bytes.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.ISelectorNode">
            <summary>
            GenICam GenApi node that can select others.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.ISelectorNode.IsSelector">
            <summary>
            Gets whether this node selects at least one other.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.ISelectorNode.SelectedNodes">
            <summary>
            Gets all nodes selected by this one.
            </summary>
            <returns>Enumerator for enumerating all selected nodes.</returns>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IStringNode">
            <summary>
            GenICam GenApi node that has a <see langword="string"/> value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IStringNode.Value">
            <summary>
            Gets/sets the string value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IValueNode">
            <summary>
            GenICam GenApi node having a value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.IValueNode.FromString(System.String)">
            <summary>
            Sets this node's value from the string <paramref name="value"/>.
            </summary>
            <param name="value">New value as a string.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IValueNode.PollingTime">
            <summary>
            Gets the polling time of this value.
            </summary>
            <value  >
            If this node is not intended to be polled <see cref="F:System.TimeSpan.Zero"/>
            is returned.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IValueNode.IsStreamable">
            <summary>
            Gets whether this node should be used when the camera settings are
            stored.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.NamespaceDoc">
            <summary>
            The types in the namespace <c>Stemmer.Cvb.Driver.GenApi</c> expose 
            and implement the functionality covered by the CVGenApi.dll. 
            </summary>  
            <remarks>
            Definitions and types needed for interfacing to GenICam-compliant 
            devices and controlling these devices can be found here.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.FloatRegNode">
            <summary>
            Floating point value register.
            </summary>
            <remarks>
            Use the <see cref="T:Stemmer.Cvb.GenApi.PortNode"/> for reading/writing memory.
            <see cref="P:Stemmer.Cvb.GenApi.FloatRegNode.Address"/> and <see cref="P:Stemmer.Cvb.GenApi.FloatRegNode.Length"/> can be queried via this
            node. <see cref="B:Value"/> access is favored though.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.FloatRegNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.FloatRegNode.Address">
            <summary>
            Gets the registers address.
            </summary>
            <remarks>
            <c>Attention:</c> the register address may change dependent on
            selecting nodes or other states.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.FloatRegNode.Length">
            <summary>
            Gets the number of bytes occupied by the register.
            </summary>
            <value>
            Length of the register's memory in bytes.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IntegerNode">
            <summary>
            Represents a floating point number.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.IntegerNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IntegerNode.Value">
            <summary>
            Gets/Sets the value of this floating point node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IntegerNode.Min">
            <summary>
            Gets the minimal allowed number for this <see cref="P:Stemmer.Cvb.GenApi.IntegerNode.Value"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IntegerNode.Max">
            <summary>
            Gets the maximal allowed number for this <see cref="P:Stemmer.Cvb.GenApi.IntegerNode.Value"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IntegerNode.Increment">
            <summary>
            Gets the increment of this <see cref="P:Stemmer.Cvb.GenApi.IntegerNode.Value"/>.
            </summary>
            <value>
            The <see cref="P:Stemmer.Cvb.GenApi.IntegerNode.Value"/> can take values that are multiples of this one. 
            </value>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IntegerNode.Representation">
            <summary>
            Gets how the value is to be represented.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IntegerNode.Unit">
            <summary>
            Gets the unit of this node's value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.IntRegNode">
            <summary>
            Integer value register.
            </summary>
            <remarks>
            Use the <see cref="T:Stemmer.Cvb.GenApi.PortNode"/> for reading/writing memory.
            <see cref="P:Stemmer.Cvb.GenApi.IntRegNode.Address"/> and <see cref="P:Stemmer.Cvb.GenApi.IntRegNode.Length"/> can be queried via this
            node. <see cref="B:Value"/> access is favored though.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.IntRegNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IntRegNode.Address">
            <summary>
            Gets the registers address.
            </summary>
            <remarks>
            <c>Attention:</c> the register address may change dependent on
            selecting nodes or other states.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.IntRegNode.Length">
            <summary>
            Gets the number of bytes occupied by the register.
            </summary>
            <value>
            Length of the register's memory in bytes.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.PortNode">
            <summary>
            Port nodes are the connection to the remote device.
            </summary>
            <remarks>
            Port nodes enable direct memory access on the remote device.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.PortNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.PortNode.Read(System.Int64,System.IntPtr,System.Int64)">
            <summary>
            Reads memory from the remote device into the given buffer.
            </summary>
            <remarks>
            Use of this method is unsafe; prefer using the typed nodes instead or
            reading into byte-arrays if necessary.
            </remarks>
            <param name="address">Address to read from.</param>
            <param name="bufferPointer">Buffer to store data into.</param>
            <param name="bufferLength">Number of bytes to read; buffer must have
            at least that many bytes of allocated memory.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.PortNode.Read(System.Int64,System.Byte[])">
            <summary>
            Reads memory from the remote device into the given 
            <paramref name="buffer"/>.
            </summary>
            <remarks>
            The number of bytes read depend on the <see cref="P:System.Array.Length"/> of
            the given <paramref name="buffer"/>.
            </remarks>
            <param name="address">Address to read from.</param>
            <param name="buffer">Byte array to read to.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.PortNode.Write(System.Int64,System.IntPtr,System.Int64)">
            <summary>
            Writes memory from the given buffer to the remote device.
            </summary>
            <remarks>
            Use of this method is unsafe; prefer using the typed nodes instead or
            writing from byte-arrays if necessary.
            </remarks>
            <param name="address">Address to write to.</param>
            <param name="bufferPointer">Buffer to write to device.</param>
            <param name="bufferLength">Number of bytes in the buffer.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.PortNode.Write(System.Int64,System.Byte[])">
            <summary>
            Writes the the given <paramref name="buffer"/> to the remote device.
            </summary>
            <remarks>
            The number of bytes written depend on the <see cref="P:System.Array.Length"/> 
            of the given <paramref name="buffer"/>.
            </remarks>
            <param name="address">Address to write to.</param>
            <param name="buffer">Byte array to write.</param>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.RegisterNode">
            <summary>
            Untyped register access (only memory).
            </summary>
            <remarks>
            Use the <see cref="T:Stemmer.Cvb.GenApi.PortNode"/> for reading/writing memory.
            <see cref="P:Stemmer.Cvb.GenApi.RegisterNode.Address"/> and <see cref="P:Stemmer.Cvb.GenApi.RegisterNode.Length"/> can be queried via this
            node.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.RegisterNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.RegisterNode.Address">
            <summary>
            Gets the registers address.
            </summary>
            <remarks>
            <c>Attention:</c> the register address may change dependent on
            selecting nodes or other states.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.RegisterNode.Length">
            <summary>
            Gets the number of bytes occupied by the register.
            </summary>
            <value>
            Length of the register's memory in bytes.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.BooleanNode">
            <summary>
            Node representing a <c>true</c>/<c>false</c> value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.BooleanNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.BooleanNode.Value">
            <summary>
            Gets/sets the value of this boolean node.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.CategoryNodeDebugView">
            <summary>
            Debug visualization for category nodes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.CategoryNodeDebugView._node">
            <summary>
            The actual node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.CategoryNodeDebugView.Info">
            <summary>
            Normal node info (omitting value...).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.CategoryNodeDebugView.Items">
            <summary>
            The nodes.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.CategoryNodeDebugView.#ctor(Stemmer.Cvb.GenApi.CategoryNode)">
            <summary>
            Ctor.
            </summary>
            <param name="node">The category node to display.</param>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.CategoryNode">
            <summary>
            Node that logically groups other nodes.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.CategoryNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.CategoryNode.GetEnumerator">
            <summary>
            Gets the enumerator to enumerate the categorized nodes.
            </summary>
            <returns>Node enumerator.</returns>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.CategoryNode.Nodes">
            <summary>
            Gets the nodes categorized by this node.
            </summary>
            <value>Enumerator to enumerate all categorized nodes.</value>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.CategoryNode.FromString(System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="value">Ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.CategoryNode.ToString">
            <summary>
            Gets the value of the alias node, if any is present. Empty string 
            otherwise.
            </summary>
            <returns>Alias value or empty string.</returns>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.CommandNode">
            <summary>
            A node that can be executed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.CommandNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.CommandNode.Execute">
            <summary>
            Executes this command.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.CommandNode.IsDone">
            <summary>
            If this command is readable, the execution state can be queried.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.EnumEntryNode">
            <summary>
            One entry in an enumeration.
            </summary>
            <remarks>
            The enum entry translates a symbolic name into an integer value.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.EnumEntryNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.EnumEntryNode.SymbolicValue">
            <summary>
            Gets the symbolic value of this entry.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.EnumEntryNode.NumericValue">
            <summary>
            Gets the numeric value of this entry.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.EnumEntryNode.FromString(System.String)">
            <summary>
            Not supported.
            </summary>
            <param name="value">Ignored.</param>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.EnumerationNodeDebugView._node">
            <summary>
            The actual node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.EnumerationNodeDebugView.Info">
            <summary>
            Normal node info (omitting value...).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.EnumerationNodeDebugView.Entries">
            <summary>
            The enum entries.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.EnumerationNodeDebugView.#ctor(Stemmer.Cvb.GenApi.EnumerationNode)">
            <summary>
            Ctor.
            </summary>
            <param name="node">The category node to display.</param>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.EnumerationNode">
            <summary>
            A node that presents a choice of values.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.EnumerationNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">The parent node map.</param>
            <param name="handle">Native node object handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.EnumerationNode.Value">
            <summary>
            Gets/sets the symbolic value of this enumeration.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.EnumerationNode.Entries">
            <summary>
            Gets all enum entries of this enumeration.
            </summary>
            <returns>
            Enumerator to enumerate all enum entries of this enumeration.
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.FloatNode">
            <summary>
            Represents a floating point number.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.FloatNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.FloatNode.Value">
            <summary>
            Gets/Sets the value of this floating point node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.FloatNode.Min">
            <summary>
            Gets the minimal allowed number for this <see cref="P:Stemmer.Cvb.GenApi.FloatNode.Value"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.FloatNode.Max">
            <summary>
            Gets the maximal allowed number for this <see cref="P:Stemmer.Cvb.GenApi.FloatNode.Value"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.FloatNode.Increment">
            <summary>
            Gets the increment of this <see cref="P:Stemmer.Cvb.GenApi.FloatNode.Value"/>.
            </summary>
            <value>The <see cref="P:Stemmer.Cvb.GenApi.FloatNode.Value"/> can take values that are multiples of
            this one. Except when <see cref="F:System.Double.NaN"/> is returned which 
            indicates that no increment is available.</value>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.FloatNode.Representation">
            <summary>
            Gets how the value is to be represented.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.FloatNode.Unit">
            <summary>
            Gets the unit of this node's value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.FloatNode.GetInfoAsFloat(Stemmer.Cvb.GenApi.Node.NodeInfo)">
            <summary>
            Gets information about this node.
            </summary>
            <param name="command">Command for information query.</param>
            <returns>String value dependent on command.</returns>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.AccessMode">
            <summary>
            Access possibility of the <see cref="T:Stemmer.Cvb.GenApi.Node"/>.
            </summary>
            <remarks>
            The access mode can change dependent on the device state.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.AccessMode.NI">
            <summary>
            Node is not implemented on this device.
            </summary>
            <remarks>
            <c>Attention:</c> If the node <see cref="P:Stemmer.Cvb.GenApi.ValueNode.IsSelected"/>, it
            can be that the node is only not implemented regarding the current
            selector(s) value(s)!
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.AccessMode.NA">
            <summary>
            Node is not available.
            </summary>
            <remarks>
            Node can become available when the state of the device changes.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.AccessMode.RO">
            <summary>
            Node can only be read.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.AccessMode.WO">
            <summary>
            Node can only be written to.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.AccessMode.RW">
            <summary>
            Node can be read and written to.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.Visibility">
            <summary>
            Feature complexity level.
            </summary>
            <remarks>
            The visibility can be used as a filter to hide more complex or even
            dangerous features in an user interface.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Visibility.Invisible">
            <summary>
            Node should not be displayed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Visibility.Beginner">
            <summary>
            Simple feature usable by everybody.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Visibility.Expert">
            <summary>
            More complex feature, that requires deeper knowledge about the feature.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Visibility.Guru">
            <summary>
            Very complex and/or dangerous feature.
            </summary>
            <remarks>
            <b>Attention:</b> Wrong usage of these features may damage the device.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.CacheMode">
            <summary>
            Defines how the value is cached.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.CacheMode.NoCache">
            <summary>
            No caching used.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.CacheMode.WriteThrough">
            <summary>
            Write to cache and register.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.CacheMode.WriteAround">
            <summary>
            Write to register, cache written on next read.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.Node">
            <summary>
            Basic GenApi node for device feature access.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.Node.NodeInfo">
            <summary>
            Native information retrieval commands.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Name">
            <summary>
            Gets the full name of the node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.DisplayName">
            <summary>
            Gets the display name of the node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.AccessMode">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.GenApi.AccessMode" /> of the node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Max">
            <summary>
            Gets the maximal value.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Min">
            <summary>
            Gets the minimal value.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Increment">
            <summary>
            Gets the increment.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.NumEnumEntries">
            <summary>
            Gets the number of entries for
            <see cref="M:Stemmer.Cvb.GenApiLib.NInfoEnum(System.IntPtr,System.Int32,System.Int64@,System.IntPtr,System.IntPtr@)" />.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Streamable">
            <summary>
            Gets whether this node can be saved.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.CachingMode">
            <summary>
            Gets the caching mode.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.ToolTip">
            <summary>
            Gets the tooltip (short description).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Description">
            <summary>
            Gets the long descriptive text.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Visibility">
            <summary>
            Gets the visibility level.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.PollingTime">
            <summary>
            Gets the polling time in ms.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.EventID">
            <summary>
            Gets the event ID if available.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.RegisterAddress">
            <summary>
            Gets the address of a register node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.RegisterLength">
            <summary>
            Gets the length of a register node in bytes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Representation">
            <summary>
            Gets the number representation if applicable.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Unit">
            <summary>
            Gets the unit of float nodes as a string.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.AliasName">
            <summary>
            Gets the full name of an alias node (empty for none).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Deprecated">
            <summary>
            Gets whether this node has been deprecated.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeInfo.Feature">
            <summary>
            Gets whether this is a public feature node.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.Node.NodeType">
            <summary>
            Publicly supported node types (basic GenApi interfaces).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.Invalid">
            <summary>
            Not a valid node object.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.Unknown">
            <summary>
            Unknown or unsupported node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.Boolean">
            <summary>
            IBoolean node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.Category">
            <summary>
            ICategory node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.Command">
            <summary>
            ICommand node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.Enumeration">
            <summary>
            IEnumeration node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.EnumEntry">
            <summary>
            IEnumEntry node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.Float">
            <summary>
            IFloat node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.Integer">
            <summary>
            IInteger node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.String">
            <summary>
            IString node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.Port">
            <summary>
            IPort node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeType.Node">
            <summary>
            Generic INode node.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.Node.NodeList">
            <summary>
            Types of lists to retrieve from a node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeList.ChildNode">
            <summary>
            Child nodes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeList.Selected">
            <summary>
            Selected (indexed) nodes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeList.EnumEntry">
            <summary>
            Enumeration entries.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.NodeList.Selecting">
            <summary>
            Nodes selecting this node.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.Node.UpdatedCallbackID">
            <summary>
            Identifier of the registered updated callback.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Creates the node from its <paramref name="parent"/> node map and
            native <paramref name="handle"/>.
            </summary>
            <param name="parent">Parent node map this node resides in.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.IsRegisterNode(System.IntPtr)">
            <summary>
            Checks whether the given node <paramref name="handle"/> points to a
            register node.
            </summary>
            <param name="handle">Native node handle.</param>
            <returns><c>true</c> if <paramref name="handle"/> points to a register;
            <c>false</c> if not.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.FromName(Stemmer.Cvb.GenApi.NodeMap,System.String)">
            <summary>
            Factory method to create node instances dependent on its type.
            </summary>
            <param name="parent">Parent node map this node resides in.</param>
            <param name="name">Full node name.</param>
            <returns>Node instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.IsDisposed">
            <summary>
            Tests whether the native handle has been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.GenApi.Node.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.Detach">
            <summary>
            Detaches this <see cref="T:Stemmer.Cvb.Image"/> object from the native object.
            </summary>
            <remarks>
            This call marks this object as disposed without changing the
            underlying ref-count.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.Dispose">
            <summary>
            Disposes the native object wrapped by this object immediately.
            </summary>
            <remark>Call this method to release the resources allocated by this
            node immediately. Remember that after calling Dispose, any subsequent
            access to references to this image will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.Close">
            <summary>
            Alias of the <see cref="M:Stemmer.Cvb.GenApi.Node.Dispose"/> method.
            </summary>
            <remark>Call this method to release the resources allocated by this
            node immediately. Remember that after calling Dispose, any subsequent
            access to references to this image will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.Handle">
            <summary>
            Native CVB NODE handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.NodeMap">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.GenApi.NodeMap"/> this node resides in.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.Name">
            <summary>
            Gets the full name of this node.
            </summary>
            <value>
            String containing the namespace of the node (<i>Std</i> or <i>Cust</i>
            and the node name separated by double colons (::)).
            </value>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.ToolTip">
            <summary>
            Gets the short descriptive text of this node.
            </summary>
            <remarks>
            See <see cref="P:Stemmer.Cvb.GenApi.Node.Description"/> for the long description.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.Description">
            <summary>
            Gets the long descriptive text of this node.
            </summary>
            <remarks>
            See <see cref="P:Stemmer.Cvb.GenApi.Node.ToolTip"/> for the short description.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.AccessMode">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.GenApi.AccessMode"/> of this node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.IsImplemented">
            <summary>
            <see cref="P:Stemmer.Cvb.GenApi.Node.AccessMode"/> helper to check whether this node is
            implemented.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.IsAvailable">
            <summary>
            <see cref="P:Stemmer.Cvb.GenApi.Node.AccessMode"/> helper to check whether this node is
            available.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.IsReadable">
            <summary>
            <see cref="P:Stemmer.Cvb.GenApi.Node.AccessMode"/> helper to check whether this node is
            readable.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.IsWritable">
            <summary>
            <see cref="P:Stemmer.Cvb.GenApi.Node.AccessMode"/> helper to check whether this node is
            writable.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.CacheMode">
            <summary>
            Gets the cache mode of this node.
            </summary>
            <remarks>
            For non-register nodes the cache mode of the register in the value
            path of the node chain up the the register is used.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.EventID">
            <summary>
            Nodes with an event identifier may become invalidated, if an
            event / message is delivered from the device.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.IsFeature">
            <summary>
            Returns whether this node is considered a feature node.
            </summary>
            <remarks>
            Feature nodes are in a way public / user interface nodes. All nodes, that
            are directly referenced by the <i>Root</i> <see cref="T:Stemmer.Cvb.GenApi.CategoryNode"/>
            or indirectly via other <c>CategoryNode</c>s that are children of
            <i>Root</i>, are considered features.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.IsDeprecated">
            <summary>
            Gets whether this node is considered deprecated.
            </summary>
            <remarks>
            Deprecated nodes are only available because of backward compatibility.
            New applications should not use these features.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.Visibility">
            <summary>
            Gets the complexity level of this node.
            </summary>
            <remarks>
            For additional information on the different levels see the
            <see cref="T:Stemmer.Cvb.GenApi.Visibility"/> documentation.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.Node.AliasNode">
            <summary>
            Gets the node, that is an alias value for this node.
            </summary>
            <remarks>
            Alias nodes give an additional view on a value or can contain summary
            information for e.g. <see cref="T:Stemmer.Cvb.GenApi.CategoryNode"/>s.
            </remarks>
            <value>
            Alias node instance; <c>null</c> for none.
            </value>
        </member>
        <member name="E:Stemmer.Cvb.GenApi.Node.Updated">
            <summary>
            Event signaling that a node property has been updated.
            </summary>
            <remarks>
            Updates range
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.OnUpdated(System.IntPtr,System.IntPtr)">
            <summary>
            Called by native code to fire <see cref="E:Stemmer.Cvb.GenApi.Node.Updated"/> event.
            </summary>
            <param name="nodePtr">Ignored.</param>
            <param name="privatePtr">Ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.ToDebugString">
            <summary>
            Debug helper to display a value if possible.
            </summary>
            <returns>Node's value</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.NativeCall(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionVoid)">
            <summary>
            Helper to throw an annotated exception.
            </summary>
            <param name="fn">Function to call.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.NativeCall``1(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunction1{``0})">
            <summary>
            Helper to throw an annotated exception.
            </summary>
            <param name="fn">Function to call.</param>
            <returns>Result of the call.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.GetInfoAsBool(Stemmer.Cvb.GenApi.Node.NodeInfo)">
            <summary>
            Gets information about this node.
            </summary>
            <param name="command">Command for information query.</param>
            <returns>Boolean value dependent on command.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.GetInfoAsInt(Stemmer.Cvb.GenApi.Node.NodeInfo)">
            <summary>
            Gets information about this node.
            </summary>
            <param name="command">Command for information query.</param>
            <returns>Integer value dependent on command.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.GetInfoAsString(Stemmer.Cvb.GenApi.Node.NodeInfo)">
            <summary>
            Gets information about this node.
            </summary>
            <param name="command">Command for information query.</param>
            <returns>String value dependent on command.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.GetDependentNodeCount(Stemmer.Cvb.GenApi.Node.NodeList)">
            <summary>
            Gets the number of nodes in the list identified by
            <paramref name="type"/>.
            </summary>
            <param name="type">Kind of nodes to retrieve.</param>
            <returns>Number of nodes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.Node.GetDependentNodes``1(Stemmer.Cvb.GenApi.Node.NodeList)">
            <summary>
            Gets all nodes dependent on this one selected by
            <paramref name="type"/>.
            </summary>
            <typeparam name="T">Node type.</typeparam>
            <param name="type">Kind of nodes to retrieve.</param>
            <returns>Enumeration of nodes.</returns>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.NodeRef">
            <summary>
            Helper view on other node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeRef.#ctor(Stemmer.Cvb.GenApi.Node)">
            <summary>
            Ctor.
            </summary>
            <param name="referencedNode">Referenced node.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeRef.Dispose(System.Boolean)">
            <summary>
            Non decreasing dispose.
            </summary>
            <param name="disposing">Ignored.</param>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.NodeMapInfo">
            <summary>
            NodeMap information retrieval commands.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.Vendor">
            <summary>
            Gets the vendor name of XML provider.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.Model">
            <summary>
            Gets the model name of XML provider.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.SchemaVersionMajor">
            <summary>
            Gets the schema major version number.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.SchemaVersionMinor">
            <summary>
            Gets the schema minor version number.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.SchemaVersionSubMinor">
            <summary>
            Gets the schema sub-minor version number.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.DeviceVersionMajor">
            <summary>
            Gets the device major version number.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.DeviceVersionMinor">
            <summary>
            Gets the device minor version number.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.DeviceVersionSubMinor">
            <summary>
            Gets the device sub-minor version number.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.Namespace">
            <summary>
            Gets the description namespace (e.g. GEV).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.ProductGUID">
            <summary>
            Gets the product GUID.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.VersionGUID">
            <summary>
            Gets the version GUID.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapInfo.Tooltip">
            <summary>
            Gets the XML description tool tip.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.GenApiVersion">
            <summary>
            Version information for GenICam related objects.
            </summary>
            <remarks>
            The versions are managed as follows:
            <list type="bullet">
              <item>
                <description><see cref="P:Stemmer.Cvb.GenApi.GenApiVersion.Major"/>:
                             An increase indicates a change which is not backward
                             compatible.
                </description>
              </item>
              <item>
                <description><see cref="P:Stemmer.Cvb.GenApi.GenApiVersion.Minor"/>:
                             An increase indicates a change which adds new
                             features. It must still support old versions of the
                             server instance.
                </description>
              </item>
              <item>
                <description><see cref="P:Stemmer.Cvb.GenApi.GenApiVersion.SubMinor"/>:
                             An increase indicates a bug fix. No new features are
                             added.
                </description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.GenApiVersion.Major">
            <summary>
            Gets or sets the major version number.
            </summary>
            <value>Positive integer value containing the version number.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is
            smaller than zero.</exception>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.GenApiVersion.Minor">
            <summary>
            Gets or sets the minor version number.
            </summary>
            <value>Positive integer value containing the version number.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is
            smaller than zero.</exception>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.GenApiVersion.SubMinor">
            <summary>
            Gets or sets the sub-minor version number.
            </summary>
            <value>Positive integer value containing the version number.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">The value is
            smaller than zero.</exception>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.GenApiVersion.ToString">
            <summary>
            Gets the string representation of this version.
            </summary>
            <returns>Version string.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.GenApiVersion.Equals(System.Object)">
            <summary>
            Checks whether the given <paramref name="obj"/> is a
            <b>GenApiVersion</b> with the same version number.
            </summary>
            <param name="obj">Object to test for equality.</param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is equal to this object;
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.GenApiVersion.Equals(Stemmer.Cvb.GenApi.GenApiVersion)">
            <summary>
            Checks whether the given <paramref name="other"/> is a
            <b>GenApiVersion</b> with the same version number.
            </summary>
            <param name="other">Object to test for equality.</param>
            <returns>
            <b>true</b> if <paramref name="other"/> is equal to this object;
            <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.GenApiVersion.GetHashCode">
            <summary>
            Gets the hash code for this <b>GenApiVersion</b>.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.GenApiVersion.CompareTo(Stemmer.Cvb.GenApi.GenApiVersion)">
            <summary>
            Compares the current instance with another object of the same type
            and returns an integer that indicates whether the current instance
            precedes, follows, or occurs in the same position in the sort order as
            the <paramref name="other"/> object.
            </summary>
            <param name="other">Object to compare to this one.</param>
            <returns>
            Less than zero if this object precedes the <paramref name="other"/>;
            Equal to zero of both are equal; Greater than zero if this object
            follows the <paramref name="other"/> one.
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.NodeMapDebugView">
            <summary>
            View for node map in the debugger.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NodeMapDebugView.Info.Dictionary">
            <summary>
            Stores the node map.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMapDebugView.Info.#ctor(Stemmer.Cvb.GenApi.NodeMap)">
            <summary>
            Ctor.
            </summary>
            <param name="dictionary">Node map dictionary.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMapDebugView.Info.ModuleName">
            <summary>
            Module name.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMapDebugView.Info.ModelName">
            <summary>
            Model name.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMapDebugView.Info.VendorName">
            <summary>
            Vendor name.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMapDebugView.Info.Description">
            <summary>
            Module description.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMapDebugView.Info.ToolTip">
            <summary>
            XML tool tip.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMapDebugView.Info.TransportLayerNamespace">
            <summary>
            Namespace of the transport technology.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMapDebugView.Info.XMLFileSchemaVersion">
            <summary>
            Version of the XML file's schema.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMapDebugView.Info.XMLFileVersion">
            <summary>
            Version of the XML file.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMapDebugView.Information">
            <summary>
            Stores the info.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMapDebugView.Items">
            <summary>
            Lists the items.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMapDebugView.#ctor(Stemmer.Cvb.GenApi.NodeMap)">
            <summary>
            Ctor.
            </summary>
            <param name="dictionary">Node map dictionary.</param>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.NodeMap">
            <summary>
            Contains all nodes of a device or module.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.#ctor(System.IntPtr)">
            <summary>
            Creates the node map from its native <paramref name="handle"/>.
            </summary>
            <param name="handle">Native node map handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.FromHandle(System.IntPtr)">
            <summary>
            Create a <c>NodeMap</c> from a native handle.
            </summary>
            <remarks>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="nativeHandle"/>
            parameter will most likely lead to severe problems in your
            application.</remarks>
            <param name="nativeHandle">handle to create the naode map from.</param>
            <returns>Newly created node map or null of no node map could be
            created.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Create a <c>NodeMap</c> from a native handle and potentially increment
            the unmanaged reference count on the native handle.
            </summary>
            <remarks>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="nativeHandle"/>
            parameter will most likely lead to severe problems in your
            application.
            </remarks>
            <param name="nativeHandle">handle to create the image from.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if
            <paramref name="nativeHandle"/> is to be shared.</param>
            <returns>Newly created node map or null of no node map could be
            created.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.IsDisposed">
            <summary>
            Tests whether the native handle has been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.GenApi.NodeMap.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.Dispose">
            <summary>
            Disposes the native object wrapped by this object immediately.
            </summary>
            <remark>Call this method to release the resources allocated by this
            node immediately. Remember that after calling Dispose, any subsequent
            access to references to this image will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.Close">
            <summary>
            Alias of the <see cref="M:Stemmer.Cvb.GenApi.NodeMap.Dispose"/> method.
            </summary>
            <remark>Call this method to release the resources allocated by this
            node immediately. Remember that after calling Dispose, any subsequent
            access to references to this image will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.Handle">
            <summary>
            Native CVB NODE handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.ContainsKey(System.String)">
            <summary>
            Gets whether a node with the <paramref name="name"/> is contained in
            this node map.
            </summary>
            <param name="name">Name of the node (namespace prefix necessary).</param>
            <returns><c>true</c> if the name exists in this dictionary.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.TryGetValue``1(System.String,``0@)">
            <summary>
            Tries to get the <paramref name="node"/> with the given
            <paramref name="name"/>.
            </summary>
            <typeparam name="TNode">Type of node to retrieve.</typeparam>
            <param name="name">Name with or without the namespace prefix.</param>
            <param name="node">Node instance; <see langword="null"/> if not found.
            </param>
            <returns><b>true</b> if node with given <paramref name="name"/> exists
            and is of type <b>TNode</b>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.TryGetValue(System.String,Stemmer.Cvb.GenApi.Node@)">
            <summary>
            Tries to get the node with the given <paramref name="name"/>.
            </summary>
            <param name="name">Name of the node (namespace prefix optional).</param>
            <param name="value">Will contain the <see cref="T:Stemmer.Cvb.GenApi.Node"/> object if
            present.</param>
            <returns><c>true</c> if <paramref name="name"/> is contained in this
            dictionary; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.Contains(System.Collections.Generic.KeyValuePair{System.String,Stemmer.Cvb.GenApi.Node})">
            <summary>
            Gets whether the given pair <paramref name="item"/> is contained in
            this node map.
            </summary>
            <param name="item">Element to be checked.</param>
            <returns><c>true</c> if the key/value pair exists; <c>false</c>
            otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.TryMakePrefixedName(System.String,System.String@)">
            <summary>
            Checks if the given <paramref name="name"/> is in the dictionary
            and if not, prefixes it and checks again.
            </summary>
            <param name="name">Name to check and possibly prefix.</param>
            <param name="prefixedName">The prefixed name.</param>
            <returns>True if the <paramref name="prefixedName"/> is in the dictionary,
            otherwise false.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.GetEnumerator">
            <summary>
            Gets the enumerator for the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.
            </summary>
            <returns>Typed enumerator.</returns>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.Values">
            <summary>
            Gets the value-collection containing all available nodes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.Item(System.String)">
            <summary>
            Indexer to retrieve a node with the given <paramref name="name"/> from
            this node map.
            </summary>
            <param name="name">Name with or without the namespace prefix.</param>
            <returns><see cref="T:Stemmer.Cvb.GenApi.Node"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="name"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            Thrown if <paramref name="name"/> does not exist in this collection.
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.GenApiVersion">
            <summary>
            Gets the GenICam GenApi version used by CVB.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.ModuleName">
            <summary>
            Gets the GenTL module name this node map refers to.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.Description">
            <summary>
            Gets the descriptive text of this node map.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.VendorName">
            <summary>
            Gets the name of the vendor, who created the XML description.
            </summary>
            <remarks>
            <c>Attention:</c> often this name does not match the information of
            the GenTL port (discovery information).
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.ModelName">
            <summary>
            Gets the name of the model, that the XML description is for.
            </summary>
            <remarks>
            <c>Attention:</c> often this name does not match the information of
            the GenTL port (discovery information).
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.TransportLayerNamespace">
            <summary>
            Gets the transport layer type of the device.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.ToolTip">
            <summary>
            Gets the short descriptive text, if any is available.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.XmlFileVersion">
            <summary>
            Gets the XML version.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.NodeMap.XmlFileSchemaVersion">
            <summary>
            Gets the XML schema version.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.PollNodes">
            <summary>
            Polls all nodes of this node map that have a
            <see cref="P:Stemmer.Cvb.GenApi.ValueNode.PollingTime"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.LoadSettings(System.String)">
            <summary>
            Loads the node values from the gcs file given in
            <paramref name="filename"/> and sets the node values accordingly.
            </summary>
            <param name="filename">Complete path to gcs file that contains the settings.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.SaveSettings(System.String)">
            <summary>
            Saves all nodes which have <see cref="P:Stemmer.Cvb.GenApi.ValueNode.IsStreamable"/> set to
            <c>true</c>.
            </summary>
            <param name="filename">Complete path to gcs file that contains the settings.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.SaveSettings(System.String,System.String[])">
            <summary>
            Saves all nodes which are listed in <paramref name="nodeNames"/>.
            </summary>
            <param name="filename">Complete path to gcs file that contains the settings.
            </param>
            <param name="nodeNames">Array containing all names of the nodes to
            save.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.SaveSettings(System.String,System.Collections.Generic.IEnumerable{Stemmer.Cvb.GenApi.Node})">
            <summary>
            Saves all <paramref name="nodes"/>.
            </summary>
            <param name="filename">Complete path to gcs file that contains the settings.
            </param>
            <param name="nodes">All nodes to save.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.GetAvailableFiles">
            <summary>
            Gets the currently available file identifiers, which can be downloaded
            or uploaded.
            </summary>
            <remarks>
            See <see cref="M:Stemmer.Cvb.GenApi.NodeMap.DownloadFile(System.String,System.String)"/> or
            <see cref="M:Stemmer.Cvb.GenApi.NodeMap.UploadFile(System.String,System.String)"/> for operations on the
            returned list.
            </remarks>
            <returns>Array containing the file identifiers; empty array for none.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.DownloadFile(System.String,System.String)">
            <summary>
            Downloads a file from the camera via the GenApi file download.
            </summary>
            <remarks>
            See <see cref="M:Stemmer.Cvb.GenApi.NodeMap.GetAvailableFiles"/> for file ids which can be
            downloaded.
            </remarks>
            <param name="filename">Full path to file to save data to.</param>
            <param name="fileSelectorEntryName">Symbolic name of the
            <i>FileSelector</i> <see cref="T:Stemmer.Cvb.GenApi.EnumerationNode"/> identifying the file
            to download.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.UploadFile(System.String,System.String)">
            <summary>
            Uploads a file to the camera via the GenApi file upload.
            </summary>
            <remarks>
            See <see cref="M:Stemmer.Cvb.GenApi.NodeMap.GetAvailableFiles"/> for file ids which can be uploaded.
            </remarks>
            <param name="filename">Full path to file to load data from.</param>
            <param name="fileSelectorEntryName">Symbolic name of the
            <i>FileSelector</i> <see cref="T:Stemmer.Cvb.GenApi.EnumerationNode"/> identifying the file
            to upload.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.NativeCall(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionVoid)">
            <summary>
            Helper to throw an annotated exception.
            </summary>
            <param name="fn">Function to call.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.GetInfoAsInt(Stemmer.Cvb.GenApi.NodeMapInfo)">
            <summary>
            Gets information about this node map.
            </summary>
            <param name="command">Command for information query.</param>
            <returns>Integer value dependent on command.</returns>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.NodeMap.GetInfoAsString(Stemmer.Cvb.GenApi.NodeMapInfo)">
            <summary>
            Gets information about this node map.
            </summary>
            <param name="command">Command for information query.</param>
            <returns>String value dependent on command.</returns>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.SelectorNode">
            <summary>
            Groups <see cref="T:Stemmer.Cvb.GenApi.Node"/>s, that are dependent on this one
            </summary>
            <remarks>
            Selected nodes are normally dependent on the value of the selector.
            Selected nodes represent for example availability of features depending
            on a parent <see cref="T:Stemmer.Cvb.GenApi.EnumerationNode"/> selector. Or they could be
            LUT values selected by a LUT index node.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.SelectorNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.SelectorNode.IsSelector">
            <summary>
            Returns whether this node selects at least one other node.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.SelectorNode.SelectedNodes">
            <summary>
            Gets all nodes selected by this one.
            </summary>
            <returns>Enumerator for enumerating all selected nodes.</returns>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.SelectorNodeRef">
            <summary>
            Helper view on other selector node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.SelectorNodeRef.#ctor(Stemmer.Cvb.GenApi.SelectorNode)">
            <summary>
            Ctor.
            </summary>
            <param name="referencedNode">Referenced node.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.SelectorNodeRef.Dispose(System.Boolean)">
            <summary>
            Non decreasing dispose.
            </summary>
            <param name="disposing">Ignored.</param>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.StringNode">
            <summary>
            String value node.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.StringNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.StringNode.Value">
            <summary>
            Gets/sets the string value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.StringRegNode">
            <summary>
            String value register.
            </summary>
            <remarks>
            Use the <see cref="T:Stemmer.Cvb.GenApi.PortNode"/> for reading / writing memory.
            <see cref="P:Stemmer.Cvb.GenApi.StringRegNode.Address"/> and <see cref="P:Stemmer.Cvb.GenApi.StringRegNode.Length"/> can be queried via this
            node. <see cref="B:Value"/> access is favored though.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.StringRegNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Native node handle.</param>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.StringRegNode.Address">
            <summary>
            Gets the register address.
            </summary>
            <remarks>
            <c>Attention:</c> the register address may change dependent on
            selecting nodes or other states.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.StringRegNode.Length">
            <summary>
            Gets the number of bytes occupied by the register.
            </summary>
            <value>
            <c>Attention:</c> Length of the register's memory in bytes, not in
            <c>char</c>s. Normally strings are UTF-8 encoded which means, that
            texts may be longer than the number of characters.
            </value>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.NumberRepresentation">
            <summary>
            Defines how a number is to be interpreted/displayed in a graphical user
            interface.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NumberRepresentation.Undefined">
            <summary>
            Not set in XML (treated as linear)
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NumberRepresentation.Linear">
            <summary>
            Slider with linear behavior.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NumberRepresentation.Logarithmic">
            <summary>
            Slider with logarithmic behavior.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NumberRepresentation.Boolean">
            <summary>
            <c>True</c>/<c>False</c> representation.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NumberRepresentation.PureNumber">
            <summary>
            Decimal number in an edit control.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NumberRepresentation.HexNumber">
            <summary>
            Hex number in an edit control.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NumberRepresentation.IPv4">
            <summary>
            IPv4 address in an edit control.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.NumberRepresentation.MAC">
            <summary>
            MAC address in an edit control.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.ReadWriteVerify">
            <summary>
            Controls how read/write operations are verified by the GenApi.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.ReadWriteVerify.None">
            <summary>
            No verification while reading or writing values.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.ReadWriteVerify.WriteOnly">
            <summary>
            Only write operations are validated (default).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.ReadWriteVerify.ReadOnly">
            <summary>
            Only read operations are validated.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.GenApi.ReadWriteVerify.Both">
            <summary>
            Both read and write operations are validated.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.GenApi.ValueNode">
            <summary>
            Base class for all <see cref="T:Stemmer.Cvb.GenApi.Node"/>s, that have a value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.ValueNode.#ctor(Stemmer.Cvb.GenApi.NodeMap,System.IntPtr)">
            <summary>
            Ctor.
            </summary>
            <param name="parent">Parent node map.</param>
            <param name="handle">Node handle.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.ValueNode.FromString(System.String)">
            <summary>
            Sets the value of this node from the string <paramref name="value"/>.
            </summary>
            <param name="value">New value as a string.</param>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.ValueNode.ToString">
            <summary>
            Returns this node's value as a string representation.
            </summary>
            <returns>Value as a string.</returns>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.ValueNode.VerifyMode">
            <summary>
            Gets/sets how the read/write of values in this node is verified.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.ValueNode.PollingTime">
            <summary>
            Gets the polling time of this value.
            </summary>
            <value  >
            If this node is not intended to be polled, <see cref="F:System.TimeSpan.Zero"/>
            is returned.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.GenApi.ValueNode.Invalidate">
            <summary>
            Invalidates the values of this node.
            </summary>
            <remarks>
            Invalidate deletes all caches for all nodes on which this node depends
            (value, min, max, increment,...).
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.ValueNode.IsStreamable">
            <summary>
            Returns whether this node should be used when saving camera settings.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.ValueNode.IsSelected">
            <summary>
            Gets whether this value is selected by at least one other node.
            </summary>
            <remarks>
            For information about selected <see cref="T:Stemmer.Cvb.GenApi.Node"/>s see the
            <see cref="T:Stemmer.Cvb.GenApi.SelectorNode"/>.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.GenApi.ValueNode.SelectingNodes">
            <summary>
            Gets all nodes selecting this node.
            </summary>
            <remarks>
            For information about selected <see cref="T:Stemmer.Cvb.GenApi.Node"/>s see the
            <see cref="T:Stemmer.Cvb.GenApi.SelectorNode"/>.
            </remarks>
            <value>Enumerator for enumerating all selecting nodes.</value>
        </member>
        <member name="T:Stemmer.Cvb.NamespaceDoc">
            <summary>
            The namespace and assembly <c>Stemmer.Cvb</c> holds all published 
            definitions of the types that form <c>Cvb.Net</c>.
            </summary>  
            <remarks>
            Directly underneath <c>Stemmer.Cvb</c> the functionality resident in the 
            CVCImg.dll and CVCDriver.dll may be found in the form of the 
            corresponding image and device types. Functionality implemented by other 
            Image Manager DLLs (like CVCUtilities.dll or CVGenApi.dll) and Tools is 
            located in the namespaces below <c>Stemmer.Cvb</c>.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Geometry2D.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Geometry</c> exposes some elementary
            geometrical primitives that one or more modules of Common Vision Blox
            are working with (e.g. for regression purposes).
            </summary>  
        </member>
        <member name="T:Stemmer.Cvb.Geometry2D.LineSegment">
            <summary>
            A line segment between two points.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Geometry2D.LineSegment.#ctor(Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Creates a line segment based on the two given points 
            <paramref name="p0"/> and <paramref name="p1"/>.
            </summary>
            <param name="p0">Start point.</param>
            <param name="p1">End point.</param>
        </member>
        <member name="M:Stemmer.Cvb.Geometry2D.LineSegment.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a line segment based on the given coordinates.
            </summary>
            <param name="x0">Start point X.</param>
            <param name="y0">Start point Y.</param>
            <param name="x1">End point X.</param>
            <param name="y1">End point Y.</param>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.LineSegment.P0">
            <summary>
            Start point.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.LineSegment.P1">
            <summary>
            End point.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.LineSegment.Length">
            <summary>
            Gets the length of this line segment.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Geometry2D.LineSegment.CalculatePointsOnLine">
            <summary>
            Calculates all the points on this line.
            </summary>
            <remarks>
            Uses the Bresenham algorithm to calculate the points on this segment.
            </remarks>
            <returns>Array containing the points on this line.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Geometry2D.Circle">
            <summary>
            Class representing a circle (for the purpose of regression and other
            calculations).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Geometry2D.Circle.#ctor(Stemmer.Cvb.Point2Dd,System.Double)">
            <summary>
            Create a circle.
            </summary>
            <param name="center">center of the circle</param>
            <param name="radius">radius of the circle</param>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.Circle.Radius">
            <summary>
            Radius of the circle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.Circle.Center">
            <summary>
            Center of the circle.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Geometry2D.Circle.Contains(Stemmer.Cvb.Point2Dd)">
            <summary>
            Check whether a point is inside or outside a circle.
            </summary>
            <param name="pt">point to be checked</param>
            <returns>bool if <paramref name="pt"/> lies inside the circle, false
            otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Geometry2D.Circle.IsOnRadius(Stemmer.Cvb.Point2Dd,System.Double)">
            <summary>
            Check whether a point is on the radius of a circle (or at least within
            a small epsilon thereof).
            </summary>
            <param name="pt">point to be checked</param>
            <param name="epsilon">maximum allowable deviation</param>
            <returns>true if <paramref name="pt"/> lies within 
            <paramref name="epsilon"/> length units of this circle's radius</returns>
        </member>
        <member name="T:Stemmer.Cvb.Geometry2D.Ellipse">
            <summary>
            Class representing an ellipse (for the purpose of regression and other
            calculations).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Geometry2D.Ellipse.#ctor(Stemmer.Cvb.Point2Dd,System.Double,System.Double,Stemmer.Cvb.Angle)">
            <summary>
            Create an ellipse.
            </summary>
            <param name="center">center of the ellipse</param>
            <param name="radiusA">first radius of the ellipse</param>
            <param name="radiusB">second radius of the ellipse</param>
            <param name="rotation">angle by which the ellipse is rotated</param>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.Ellipse.RadiusA">
            <summary>
            Larger radius of the ellipse.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.Ellipse.RadiusB">
            <summary>
            Smaller radius of the ellipse.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.Ellipse.Center">
            <summary>
            Center of the circle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.Ellipse.Rotation">
            <summary>
            Angle by which the ellipse is rotated.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Geometry2D.Line">
            <summary>
            Object representing an infinite line in 2 dimensional space.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Geometry2D.Line.#ctor(Stemmer.Cvb.Point2Dd,System.Double)">
            <summary>
            Create a line object.
            </summary>
            <param name="normal">normal vector of the line</param>
            <param name="d">distance between the line and the origin</param>
        </member>
        <member name="M:Stemmer.Cvb.Geometry2D.Line.#ctor(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd)">
            <summary>
            Create a line object.
            </summary>
            <param name="pt1">first point the line is supposed to cross</param>
            <param name="pt2">second point the line is supposed to cross</param>
        </member>
        <member name="M:Stemmer.Cvb.Geometry2D.Line.Set(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd)">
            <summary>
            Modify this line so that it traverses through two points.
            </summary>
            <param name="pt1">first point to traverse</param>
            <param name="pt2">second point to traverse</param>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.Line.Normal">
            <summary>
            Normal vector of the line. When setting a different normal vector,
            it will automatically normalized to a length of 1.0.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Geometry2D.Line.Distance">
            <summary>
            Distance of the line from the origin.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Utilities</c> contains classes and 
            definitions based on the functionality from the CVCUtilities.dll, 
            namely high performance counters and system parameter queries.
            </summary>  
        </member>
        <member name="T:Stemmer.Cvb.Utilities.RateCounter">
            <summary>
            Frame Rate Measurement counter with selectable averaging window.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.RateCounter.DefaultWindowSize">
            <summary>
            Default averaging window size.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.RateCounter.MinimumWindowSize">
            <summary>
            Minimal selectable averaging window size. Trying to select a smaller
            window will result in an exception.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.RateCounter.MaximumWindowSize">
            <summary>
            Maximum selectable averaging window size. Trying to select a larger
            window will result in an exception.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.RateCounter._measurements">
            <summary>
            Linked list of the single measurements.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.RateCounter._stopWatch">
            <summary>
            The internally used CVB stopwatch.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.RateCounter._lastReading">
            <summary>
            Most recent stop watch reading.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.RateCounter._numSteps">
            <summary>
            Number of Step() calls.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.RateCounter.#ctor(System.Int32,Stemmer.Cvb.Utilities.StopWatchMode)">
            <summary>
            Constructor for an FpsCounter object.
            </summary>
            <param name="windowSize">Averaging window (i.e. number of
            measurements over which to average).</param>
            <param name="mode"><see cref="T:Stemmer.Cvb.Utilities.StopWatchMode"/> to be used. See enum
            values for details.</param>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.RateCounter.#ctor(System.Int32)">
            <summary>
            Constructor for an FpsCounter object.
            </summary>
            <param name="windowSize">Averaging window (i.e. number of
            measurements over which to average).</param>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.RateCounter.#ctor">
            <summary>
            Constructor for an FpsCounter object with default averaging window
            size.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.RateCounter.Mode">
            <summary>
            The <see cref="T:Stemmer.Cvb.Utilities.StopWatchMode"/> used internally.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.RateCounter.WindowSize">
            <summary>
            Currently used averaging window size.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">If the value to be set
            exceeds the range [MinimumWindowSize...MaximumWindowSize].</exception>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.RateCounter.AverageTimeSpan">
            <summary>
            Average time span between two <see cref="M:Stemmer.Cvb.Utilities.RateCounter.Step"/> calls since the
            creation of the counter or the most recent call to
            <see cref="M:Stemmer.Cvb.Utilities.RateCounter.Reset"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.RateCounter.Rate">
            <summary>
            Returns the rate (1/s) at which the calls to <see cref="M:Stemmer.Cvb.Utilities.RateCounter.Step"/>
            occurred.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.RateCounter.NumSteps">
            <summary>
            Number of <see cref="M:Stemmer.Cvb.Utilities.RateCounter.Step"/> called since construction or since last
            call to <see cref="M:Stemmer.Cvb.Utilities.RateCounter.Reset"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.RateCounter.Reset">
            <summary>
            Erase all measurements so far.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.RateCounter.Step">
            <summary>
            Reading step (first reading step will not yield a measurement result
            but define the starting point).
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.LoadConstructor`1">
            <summary>
            Generic shape of a function that loads an object.
            </summary>
            <typeparam name="TObject">Type of the object to be loaded.</typeparam>
            <param name="fileName">Name of the file to load the object from.
            </param>
            <returns>Loaded object (or null).</returns>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.SaveFunction`1">
            <summary>
            Generic shape of a function that saves an object.
            </summary>
            <typeparam name="TObject">Type of the object to be saved.</typeparam>
            <param name="obj">Object to be saved.</param>
            <param name="fileName">File name under which to save the object.
            </param>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.ReaderWriterLockMode">
            <summary>
            Defines how to lock the reader-writer lock.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.ReaderWriterLocker">
            <summary>
            Helper for scoped reader/writer lock behavior.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.ReaderWriterLocker._release">
            <summary>
            The action to release the lock.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.ReaderWriterLocker.#ctor(System.Threading.ReaderWriterLockSlim,Stemmer.Cvb.Utilities.ReaderWriterLockMode)">
            <summary>
            Ctor.
            </summary>
            <param name="rwLock">Lock to lock.</param>
            <param name="mode">How to lock.</param>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.ReaderWriterLocker.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.ReaderWriterLocker.Dispose">
            <summary>
            Unlocks the associated lock.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.UsTimeSpan">
            <summary>
            Time span with micro second granularity.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.UsTimeSpan.Zero">
            <summary>
            Represents the zero UsTimeSpan value. This field is read-only.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.UsTimeSpan.MaxValue">
            <summary>
            Represents the maximum UsTimeSpan value. This field is read-only.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.UsTimeSpan.MinValue">
            <summary>
            Represents the minimum UsTimeSpan value. This field is read-only.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.UsTimeSpan.TicksPerDay">
            <summary>
            Represents the number of ticks in 1 day. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.UsTimeSpan.TicksPerHour">
            <summary>
            Represents the number of ticks in 1 hour. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.UsTimeSpan.TicksPerMicrosecond">
            <summary>
            Represents the number of ticks in 1 microsecond. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.UsTimeSpan.TicksPerMillisecond">
            <summary>
            Represents the number of ticks in 1 millisecond. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.UsTimeSpan.TicksPerMinute">
            <summary>
            Represents the number of ticks in 1 minute. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.UsTimeSpan.TicksPerSecond">
            <summary>
            Represents the number of ticks in 1 second.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.UsTimeSpan._ticks">
            <summary>
            Ticks.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.#ctor(System.Int64)">
            <summary>
            Initializes this timespan from the given <paramref name="ticks"/>.
            </summary>
            <param name="ticks">Ticks to initialize with.</param>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes this timespan from the given times.
            </summary>
            <param name="days">A number of days</param>
            <param name="hours">A number of hours</param>
            <param name="minutes">A number of minuts.</param>
            <param name="seconds">A number of seconds.</param>
            <param name="milliseconds">A number of milliseconds.</param>
            <param name="microseconds">A number of microseconds.</param>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes this timespan from the given times.
            </summary>
            <param name="days">A number of days</param>
            <param name="hours">A number of hours</param>
            <param name="minutes">A number of minuts.</param>
            <param name="seconds">A number of seconds.</param>
            <param name="milliseconds">A number of milliseconds.</param>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes this timespan from the given times.
            </summary>
            <param name="days">A number of days</param>
            <param name="hours">A number of hours</param>
            <param name="minutes">A number of minuts.</param>
            <param name="seconds">A number of seconds.</param>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes this timespan from the given times.
            </summary>
            <param name="hours">A number of hours</param>
            <param name="minutes">A number of minuts.</param>
            <param name="seconds">A number of seconds.</param>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.#ctor(System.TimeSpan)">
            <summary>
            Creates a <c>UsTimeSpan</c> from the given <paramref name="timeSpan"/>.
            </summary>
            <param name="timeSpan">Time span to create this on of.</param>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.FromDays(System.Double)">
            <summary>
            Returns <c>UsTimeSpan</c> that represents a specified number of 
            <paramref name="days"/>.
            </summary>
            <param name="days">A number of days.</param>
            <returns><c>UsTimeSpan</c> that represents that value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.FromHours(System.Double)">
            <summary>
            Returns <c>UsTimeSpan</c> that represents a specified number of 
            <paramref name="hours"/>.
            </summary>
            <param name="hours">A number of hours.</param>
            <returns><c>UsTimeSpan</c> that represents that value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.FromMicroseconds(System.Double)">
            <summary>
            Returns <c>UsTimeSpan</c> that represents a specified number of 
            <paramref name="microseconds"/>.
            </summary>
            <param name="microseconds">A number of microseconds.</param>
            <returns><c>UsTimeSpan</c> that represents that value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.FromMilliseconds(System.Double)">
            <summary>
            Returns <c>UsTimeSpan</c> that represents a specified number of 
            <paramref name="milliseconds"/>.
            </summary>
            <param name="milliseconds">A number of milliseconds.</param>
            <returns><c>UsTimeSpan</c> that represents that value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.FromMinutes(System.Double)">
            <summary>
            Returns <c>UsTimeSpan</c> that represents a specified number of 
            <paramref name="minutes"/>.
            </summary>
            <param name="minutes">A number of micro seconds.</param>
            <returns><c>UsTimeSpan</c> that represents that value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.FromSeconds(System.Double)">
            <summary>
            Returns <c>UsTimeSpan</c> that represents a specified number of 
            <paramref name="seconds"/>.
            </summary>
            <param name="seconds">A number of seconds.</param>
            <returns><c>UsTimeSpan</c> that represents that value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.FromTicks(System.Int64)">
            <summary>
            Returns <c>UsTimeSpan</c> that represents a specified number of 
            <paramref name="ticks"/>.
            </summary>
            <param name="ticks">Unitless ticks.</param>
            <returns><c>UsTimeSpan</c> that represents that value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to the given
            <paramref name="obj"/>.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns><c>true</c> if <paramref name="obj"/> represents the 
            same time interval as this instance; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.ToString">
            <summary>
            Returns the string representation of the value of this instance.
            </summary>
            <returns>
            <para>A string in the form [-][d.]hh:mm[:ss[.fffffff]]. Elements in
            square brackets may not be included. Colons and periods are literal 
            characters.</para>
            </returns>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.Days">
            <summary>
            Gets the days component of the time interval represented by this 
            object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.Hours">
            <summary>
            Gets the hours component of the time interval represented by this 
            object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.Minutes">
            <summary>
            Gets the minutes component of the time interval represented by this 
            object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.Seconds">
            <summary>
            Gets the second component of the time interval represented by this 
            object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.Milliseconds">
            <summary>
            Gets the millisecond component of the time interval represented by 
            this object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.Microseconds">
            <summary>
            Gets the microsecond component of the time interval represented by 
            this object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.TotalDays">
            <summary>
            Gets the whole value of this object expressed in whole and fractional
            days.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.TotalHours">
            <summary>
            Gets the whole value of this object expressed in whole and fractional
            hours.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.TotalMinutes">
            <summary>
            Gets the whole value of this object expressed in whole and fractional
            minutes.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.TotalSeconds">
            <summary>
            Gets the whole value of this object expressed in whole and fractional
            seconds.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.TotalMilliseconds">
            <summary>
            Gets the whole value of this object expressed in whole and fractional
            milliseconds.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.TotalMicroseconds">
            <summary>
            Gets the whole value of this object expressed in whole and fractional
            microseconds.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.UsTimeSpan.TotalTicks">
            <summary>
            Gets the whole value of this object expressed in ticks.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_Explicit(Stemmer.Cvb.Utilities.UsTimeSpan)~System.TimeSpan">
            <summary>
            Explicitly converts the <paramref name="timeSpan"/> into a
            <see cref="T:System.TimeSpan"/> object.
            </summary>
            <remarks>
            Only explicit as this is a narrowing conversion.
            </remarks>
            <param name="timeSpan">Time span to convert.</param>
            <returns>Millisecond granularity time span.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_Implicit(System.TimeSpan)~Stemmer.Cvb.Utilities.UsTimeSpan">
            <summary>
            Implicitly converts the given <paramref name="timeSpan"/> into a
            <c>UsTimeSpan</c> object.
            </summary>
            <param name="timeSpan">Time span to convert.</param>
            <returns>Microsecond granularity time span.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.Add(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Gets the sum of this and the given <paramref name="timeSpan"/>.
            </summary>
            <param name="timeSpan">The span to add.</param>
            <returns>Sum value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.Duration">
            <summary>
            Gets new <c>UsTimeSpan</c> whose value is the absolute value of this
            object.
            </summary>
            <returns>Absolute time span.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.Negate">
            <summary>
            Gets the same value of this object with a changed sign.
            </summary>
            <returns>Negated value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.Subtract(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Gets the difference of this and the given <paramref name="timeSpan"/>.
            </summary>
            <param name="timeSpan">The span to subtract.</param>
            <returns>Difference value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an integer 
            that indicates whether this instance is shorter than, equal to, or 
            longer than the specified object.
            </summary>
            <param name="obj">An object to compare, or null.</param>
            <returns>
            Value Condition -1 This instance is shorter than value. 0 This 
            instance is equal to value. 1 This instance is longer than value.-or- 
            value is null.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.CompareTo(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Compares this instance to a specified object and returns an integer 
            that indicates whether this instance is shorter than, equal to, or 
            longer than the specified object.
            </summary>
            <param name="other">An object to compare.</param>
            <returns>
            Value Condition -1 This instance is shorter than value. 0 This 
            instance is equal to value. 1 This instance is longer than value.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.Equals(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Returns a value indicating whether this instance is equal to given
            <paramref name="other"/> object.
            </summary>
            <param name="other">Object to compare with this instance.</param>
            <returns><c>true</c> if <paramref name="other"/> represents the 
            same time interval as this instance; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_UnaryNegation(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Gets the same value of <paramref name="other"/> object with a changed 
            sign.
            </summary>
            <param name="other">Value to negate.</param>
            <returns>Negated value</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_Subtraction(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Subtracts <paramref name="rhs"/> from <paramref name="lhs"/>.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Difference value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_UnaryPlus(Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Gets the same value of <paramref name="other"/> object.
            </summary>
            <param name="other">Value.</param>
            <returns>Value</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_Addition(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Adds <paramref name="lhs"/> to <paramref name="rhs"/>.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns>Sum value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_Inequality(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Inequality operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns><c>true</c> if <paramref name="lhs"/> and
            <paramref name="rhs"/> are not equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_Equality(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Equality operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns><c>true</c> if <paramref name="lhs"/> and
            <paramref name="rhs"/> are equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_LessThan(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Less operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns><c>true</c> if <paramref name="lhs"/> is less than
            <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_LessThanOrEqual(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Less or equal to operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns><c>true</c> if <paramref name="lhs"/> is less than or equal 
            to <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_GreaterThan(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Greater operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns><c>true</c> if <paramref name="lhs"/> is greater than
            <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.UsTimeSpan.op_GreaterThanOrEqual(Stemmer.Cvb.Utilities.UsTimeSpan,Stemmer.Cvb.Utilities.UsTimeSpan)">
            <summary>
            Greater or equal operator.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns><c>true</c> if <paramref name="lhs"/> is greater than or 
            equal to <paramref name="rhs"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.StopWatchMode">
            <summary>
            Mode at which the StopWatch should work.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.StopWatchMode.MultiCPU">
            <summary>
            The StopWatch works safe in multi-CPU environments. For that, some
            degree of accuracy is lost, because under Windows the timers, that are
            safe to use on a multi-CPU system, are limited to 1 ms granularity.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.StopWatchMode.SingleCPU">
            <summary>
            The StopWatch works with a granularity of less than 1 ms (basically
            with what the Windows SDK function QueryPerformanceFrequency returns).
            However, a time generated with this mode will *not* be safe to use in
            a multi-CPU (not multi-core!) environment, because a thread may travel
            between CPUs and the timers are not synchronized between CPUs.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.StopWatch">
            <summary>
            Speed measurement object with selectable accuracy, based on the
            functions exported by the CVCUtilities.dll.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.StopWatch.#ctor">
            <summary>
            Create a StopWatch object with default initialization (MultiCPU mode).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.StopWatch.#ctor(Stemmer.Cvb.Utilities.StopWatchMode)">
            <summary>
            Create a StopWatch object.
            </summary>
            <param name="mode">Mode to create the stopwatch object for.</param>
            <exception cref="T:System.InsufficientMemoryException">If the stopwatch
            cannot be created due to an out of memory situation</exception>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.StopWatch.AccuracyLevel">
            <summary>
            Relative accuracy level at which the stop watch works.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.StopWatch.AccuracyLevel.Unknown">
            <summary>
            Unknown accuracy level
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.StopWatch.AccuracyLevel.Normal">
            <summary>
            Normal accuracy level
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.StopWatch.AccuracyLevel.High">
            <summary>
            High accuracy level
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.StopWatch.Start">
            <summary>
            Start (or re-start) the stopwatch. This will reset the
            <see cref="P:Stemmer.Cvb.Utilities.StopWatch.TimeSpan"/> property to 0.0. All subsequent readouts of
            the <see cref="P:Stemmer.Cvb.Utilities.StopWatch.TimeSpan"/> property will give the time in milliseconds,
            that has elapsed since the last call to <see cref="M:Stemmer.Cvb.Utilities.StopWatch.Start"/> or since
            the construction of the Stopwatch object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.StopWatch.TimeSpan">
            <summary>
            Gets the time, that has elapsed since <see cref="M:Stemmer.Cvb.Utilities.StopWatch.Start"/> was last
            called (or since the construction of the Stopwatch object if
            <see cref="M:Stemmer.Cvb.Utilities.StopWatch.Start"/> has not been called yet).
            </summary>
            <value>Elapsed time in milliseconds.</value>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.StopWatch.Accuracy">
            <summary>
            Get the hardware-dependent estimated relative accuracy level at which
            the Stopwatch is running.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.StopWatch.Mode">
            <summary>
            Mode for which the StopWatch was created.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.StopWatch.handle_">
            <summary>
            Handle to the CVCUtilities.dll Timewatch object that is being wrapped
            by this instance of Stopwatch
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.StopWatch.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.StopWatch.Dispose">
            <summary>
            Dispose method.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.StopWatch.Dispose(System.Boolean)">
            <summary>
            Disposes the native object.
            </summary>
            <param name="disposing"><c>true</c> if called from
            <see cref="T:System.IDisposable"/> interface; <c>false</c> if called from
            finalizer.</param>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.LicenseInfo">
            <summary>
            Information about CVB licenses.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.LicenseInfo.#ctor(System.Int32,System.Boolean)">
            <summary>
            ctor for license info objects.
            </summary>
            <param name="serialNumber">CVB serial number</param>
            <param name="isFoundationLicense">Foundation Package flag</param>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.LicenseInfo.SerialNumber">
            <summary>
            The 32 bit CVB serial number of this license.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.LicenseInfo.IsFoundationLicense">
            <summary>
            <c>true</c> if the license is valid for the Common Vision Blox
            Foundation Package, <c>false</c> otherwise.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.LicenseInfo.ToString">
            <summary>
            Gets the string representation of this serial number.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.MagicNumberEntry">
            <summary>
            A single Magic Number entry.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.MagicNumberEntry.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initialize a MagicNumberEntry structure.
            </summary>
            <param name="provider">provider name</param>
            <param name="id">tool id</param>
            <param name="mn">magic number</param>
            <param name="serial">serial number</param>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.MagicNumberEntry.ProviderName">
            <summary>
            The friendly (= human-readable) name of the license provider, that
            reported this Magic Number entry.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.MagicNumberEntry.ToolID">
            <summary>
            The tool ID of the Magic Number entry.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.MagicNumberEntry.MagicNumber">
            <summary>
            The Magic Number.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.MagicNumberEntry.SerialNumber">
            <summary>
            The serial number assigned to this Magic Number entry
            (0 if it has no inherent link to a serial number).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.MagicNumberEntry.ToString">
            <summary>
            Gets the string representation of this magic number info.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Utilities.SystemInfo">
            <summary>
            Provides information about the CVB installation on your System.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.SystemInfo.ErrorStringLengthMax">
            <summary>
            Maximum number of bytes to retrieve from the cached error strings.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.SystemInfo.GetLicenseInfo">
            <summary>
            Get information about available licenses.
            </summary>
            <remarks>In theory, the collection of available licenses can change
            any time. However, it is fairly unlikely that during runtime someone
            unplugs a dongle or removes a Node Locked license, so Common Vision
            Blox does <i>not</i> implement a costly push/event model for
            notifying clients during runtime about the presence of new licenses
            or the loss of a license. Instead, the license information can and
            needs to be queried using this method.</remarks>
            <returns>An array containing the currently available licenses.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.SystemInfo.WaitForLicense(System.TimeSpan)">
            <summary>
            Waits until at least one license was found.
            </summary>
            <param name="timeout">Maximum amount of time to wait.</param>
            <returns><see cref="F:Stemmer.Cvb.Driver.WaitStatus.Ok"/> when licenses could be acquired,
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Timeout"/> when the timeout was exceeded.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.SystemInfo.WaitForLicenseAsync(System.TimeSpan)">
            <summary>
            Waits asynchronously until at least one license was found.
            </summary>
            <param name="timeout">Maximum amount of time to wait.</param>
            <returns>Task containing the result.
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Ok"/> when licenses could be acquired,
            <see cref="F:Stemmer.Cvb.Driver.WaitStatus.Timeout"/> when the timeout was exceeded.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.SystemInfo.GetMagicNumberEntries">
            <summary>
            Query the set of currently available Magic Numbers.
            </summary>
            <remarks>In theory, the collection of available Magic Numbers can
            change any time. However, it is fairly unlikely that during runtime
            someone unplugs a dongle or removes a Node Locked license, so Common
            Vision Blox does <i>not</i> implement a costly push/event model for
            notifying clients during runtime about the presence of new Magic
            Numbers or the loss of a Magic Number. Instead, the Magic Number
            information can and needs to be queried using this method.</remarks>
            <returns>An array containing the currently available magic number
            entries.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.SystemInfo.Version">
            <summary>
            Version number of your CVB installation.
            </summary>
            <exception cref="T:System.IO.IOException">If the current CVB version
            could not be read from the registry</exception>
            <exception cref="T:System.FormatException">If the version id of your CVB
            installation has been corrupted</exception>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.SystemInfo.InstallPath">
            <summary>
            Directory Common Vision Blox has been installed to.
            </summary>
            <exception cref="T:System.IO.IOException">If the CVB path
            could not be read from the registry</exception>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.SystemInfo.DataPath">
            <summary>
            Directory where Common Vision Blox stores its settings.
            </summary>
            <exception cref="T:System.IO.IOException">If the CVB data path
            could not be read from the registry</exception>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.SystemInfo.DefaultTimeout">
            <summary>
            Default timeout setting to be used by drivers.
            </summary>
            <remarks>Note that for setting this property administrative privileges
            are required, which means that the application must have been started
            using "Launch as Administrator" on Windows Vista or 7 if UAC is
            enabled, otherwise an exception will occur.
            A default timeout of 10 seconds will be returned in
            case the timeout can not be read from registry.</remarks>
            <exception cref="T:System.IO.IOException">If the default timeout
            could not be written to the registry</exception>
            <exception cref="T:System.UnauthorizedAccessException">When trying to set this
            property while the application that tries to set the property does
            not have administrative privileges.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.SystemInfo.DeviceFileLoadFormatFilter">
            <summary>
            Returns a filter string with all formats that may be used with
            the <see cref="M:Stemmer.Cvb.DeviceFactory.Open(System.String,Stemmer.Cvb.AcquisitionStack)"/> method.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.SystemInfo.ImageFileLoadFormatFilter">
            <summary>
            Returns a filter string retrieved from the CVCFile.dll containing
            the different file types loadable by Common Vision Blox. This string
            is ready for use in the System.Windows.Forms dialog boxes' Filter
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.SystemInfo.ImageFileSaveFormatFilter">
            <summary>
            Returns a filter string retrieved from the CVCFile.dll containing
            the different file types savable by Common Vision Blox. This string
            is ready for use in the System.Windows.Forms dialog boxes' Filter
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Utilities.SystemInfo.LoggedErrors">
            <summary>
            Number of errors that has been logged since the start of this process.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.SystemInfo.GetLastErrorMessage">
            <summary>
            Get the last error from the Error cache in the form of an exception
            that can be thrown.
            </summary>
            <returns>exception to pass on, null if no error occurred</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.SystemInfo.GetLastError">
            <summary>
            Get the last error from the Error cache in the form of an exception
            that can be thrown.
            </summary>
            <returns>exception to pass on, null if no error occurred</returns>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.SystemInfo.ThrowLastError(System.Boolean)">
            <summary>
            Throw the last CVB error that was cached (if any).
            </summary>
            <param name="force">when set to true, this function will throw a
            nondescript error if no error was cached</param>
        </member>
        <member name="M:Stemmer.Cvb.Utilities.SystemInfo.ThrowLastError">
            <summary>
            Throw the last CVB error that was cached (if any).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Utilities.SystemInfo.LockAnchor">
            <summary>
            lock object
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Runtime.InteropSerices</c> contains 
            classes and definitions internally used for implementing CVB.Net.
            </summary>  
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.IntPtrUtilities">
            <summary>
            Several utility functions that make interfacing managed and unmanaged
            DLLs easier.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.IntPtrUtilities.ToHashCode(System.IntPtr)">
            <summary>
            Build a 32 bit hash code (suitable for overriding "GetHash") from and
            IntPtr.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.PixelListConversion">
            <summary>
            Conversion functions from unmanaged PIXELLIST objects to managed lists.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.PixelListConversion.ToLocalMaxima(System.IntPtr)">
            <summary>
            Convert a pixel list (with pixels with at least 3 components) to a 
            List of <see cref="T:Stemmer.Cvb.LocalMaximum"/> objects.
            </summary>
            <param name="pl">Unmanaged pixel list object.</param>
            <returns><c>null</c> if <paramref name="pl"/> was 
            <see cref="F:System.IntPtr.Zero"/>, a list of <see cref="T:Stemmer.Cvb.LocalMaximum"/> 
            objects otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.PixelListConversion.ToPoints(System.IntPtr)">
            <summary>
            Convert a pixel list (with pixels with at least 2 components) to a 
            List of <see cref="T:Stemmer.Cvb.Point2Dd"/> objects.
            </summary>
            <param name="pl">unmanaged pixel list object</param>
            <returns>null if <paramref name="pl"/> was <see cref="F:System.IntPtr.Zero"/>,
            a list of <see cref="T:Stemmer.Cvb.LocalMaximum"/> objects otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.PixelListConversion.FromPositions(System.Collections.Generic.ICollection{Stemmer.Cvb.IPosition})">
            <summary>
            Convert a list of positions to an unmanaged pixel list object.
            </summary>
            <remarks>
            The handle must be release when no longer used by means of a 
            <see cref="M:Stemmer.Cvb.Runtime.InteropServices.PixelListConversion.ReleaseNativeHandle(System.IntPtr)"/> call.
            </remarks>
            <param name="pixels">Positions to be converted.</param>
            <returns>Handle to unmanaged pixel list.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.PixelListConversion.ReleaseNativeHandle(System.IntPtr)">
            <summary>
            Releases the given native object <paramref name="handle"/>.
            </summary>
            <remarks>
            <c>Attention:</c> only use this if you know what you are doing. This 
            is normally not needed in the <i>Stemmer.Cvb</i> wrappers!
            </remarks>
            <param name="handle">Object handle to be released.</param>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.Processing">
            <summary>
            Utility functions used for marshaling processing function calls.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.Processing.ReturnCodeTranslation">
            <summary>
            Delegate for converting tool-specific return codes to generalized
            return codes.
            </summary>
            <param name="val">value to be converted</param>
            <returns>converted value</returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunction1`1">
            <summary>
            Delegate for generating the bound Lambda expressions that will help
            reduce code duplication.
            </summary>
            <param name="valOut">output value created by the processor</param>
            <returns>true if processing succeeded, false others</returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunction2`1">
            <summary>
            Delegate for generating the bound Lambda expressions that will help
            reduce code duplication.
            </summary>
            <param name="valOut1">output value created by the processor</param>
            <param name="valOut2">output value created by the processor</param>
            <returns>true if processing succeeded, false others</returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionVoid">
            <summary>
            Delegate for generating the bound Lambda expressions that will help
            reduce code duplication.
            </summary>
            <returns>true if processing succeeded, false others</returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionImg">
            <summary>
            Delegate for generating the bound Lambda expressions that will help
            reduce code duplication.
            </summary>
            <param name="imgOut">output image created by the processor</param>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.Processing.BoolProcessingFunctionImg">
            <summary>
            Delegate for generating the bound Lambda expressions that will help
            reduce code duplication.
            </summary>
            <param name="imgOut">output image created by the processor</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.GenericInvocation``1(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunction1{``0})">
            <summary>
            Invocation function for the generic processing delegate.
            </summary>
            <param name="fn">delegate to be invoked</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.GenericInvocation``1(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunction2{``0},``0@,``0@)">
            <summary>
            Invocation function for the generic processing delegate.
            </summary>
            <param name="fn">delegate to be invoked</param>
            <param name="val1">output value created by the processor</param>
            <param name="val2">output value created by the processor</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.GenericInvocation(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionVoid,Stemmer.Cvb.Runtime.InteropServices.Processing.ReturnCodeTranslation)">
            <summary>
            Invocation function for the generic processing delegate.
            </summary>
            <param name="fn">delegate to be invoked</param>
            <param name="translator">return value translator</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.GenericInvocation(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionImg,Stemmer.Cvb.Runtime.InteropServices.Processing.ReturnCodeTranslation)">
            <summary>
            Invocation function for the generic processing delegate.
            </summary>
            <param name="fn">delegate to be invoked</param>
            <param name="returnCodeTranslator">translation function for tool
            specific return values</param>
            <returns>invocation result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.GenericInvocation(Stemmer.Cvb.Runtime.InteropServices.Processing.BoolProcessingFunctionImg)">
            <summary>
            Invocation function for the generic processing delegate.
            </summary>
            <param name="fn">delegate to be invoked</param>
            <returns>invocation result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingImg(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionImg)">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to the result image creation and error reporting for functions
            that take an image (plus potentially some parameters) and generate an
            output image.
            </summary>
            <param name="fn">function to be called</param>
            <returns>image created by the <paramref name="fn"/> call</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.BoolProcessingImg(Stemmer.Cvb.Image,Stemmer.Cvb.Runtime.InteropServices.Processing.BoolProcessingFunctionImg)">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to the result image creation and error reporting for functions
            that take an image (plus potentially some parameters) and generate an
            output image.
            </summary>
            <param name="img">input image to be checked</param>
            <param name="fn">function to be called</param>
            <returns>image created by the <paramref name="fn"/> call</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingImg(Stemmer.Cvb.INativeHandle,Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionImg)">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to the result image creation and error reporting for functions
            that take an image (plus potentially some parameters) and generate an
            output image.
            </summary>
            <param name="obj">input image to be checked</param>
            <param name="fn">funcitn to be called</param>
            <returns>image returned by the <paramref name="fn"/> call</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingImg(Stemmer.Cvb.INativeHandle,Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionImg,Stemmer.Cvb.Runtime.InteropServices.Processing.ReturnCodeTranslation)">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to the result image creation and error reporting for functions
            that take an image (plus potentially some parameters) and generate an
            output image.
            </summary>
            <param name="obj">input image to be checked</param>
            <param name="fn">funcitn to be called</param>
            <param name="returnCodeTranslator">translation function for tool
            specific return codes.</param>
            <returns>image returned by the <paramref name="fn"/> call</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingImg(Stemmer.Cvb.INativeHandle,Stemmer.Cvb.INativeHandle,Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionImg)">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to the result image creation and error reporting for functions
            that take an image (plus potentially some parameters) and generate an
            output image.
            </summary>
            <param name="obj1">input image 1 to check</param>
            <param name="obj2">input image 2 to check</param>
            <param name="fn">function to be called</param>
            <returns>image returned by the <paramref name="fn"/> call</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessing``1(Stemmer.Cvb.INativeHandle,Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunction1{``0})">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to the result image creation and error reporting for functions
            that take an image (plus potentially some parameters) and generate an
            output image.
            </summary>
            <param name="obj">image input parameter to verify</param>
            <param name="fn">function to invoke</param>
            <returns>the value(s) returned by <paramref name="fn"/> as an out
            parameter</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessing``1(Stemmer.Cvb.INativeHandle,Stemmer.Cvb.INativeHandle,Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunction1{``0})">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to the result image creation and error reporting for functions
            that take an image (plus potentially some parameters) and generate an
            output image.
            </summary>
            <param name="obj1">image input parameter to verify</param>
            <param name="obj2">image input parameter to verify</param>
            <param name="fn">function to invoke</param>
            <returns>the value(s) returned by <paramref name="fn"/> as an out
            parameter</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessing``1(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunction1{``0})">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to the result image creation and error reporting for functions
            that take an image (plus potentially some parameters) and generate an
            output image.
            </summary>
            <param name="fn">function to invoke</param>
            <returns>the value(s) returned by <paramref name="fn"/> as an out
            parameter</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessing``1(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunction2{``0},``0@,``0@)">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to the result image creation and error reporting for functions
            that take an image (plus potentially some parameters) and generate an
            output image.
            </summary>
            <param name="val1">output value created by the processor</param>
            <param name="val2">output value created by the processor</param>
            <param name="fn">function to invoke</param>
            <returns>the value(s) returned by <paramref name="fn"/> as an out
            parameter</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessing(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionVoid,Stemmer.Cvb.Runtime.InteropServices.Processing.ReturnCodeTranslation)">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to error reporting for functions some and generate nothing.
            </summary>
            <param name="fn">function to be invoked</param>
            <param name="translator">return value translator</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessing(Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionVoid)">
            <summary>
            Generic processing function.
            </summary>
            <param name="fn">function to call</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessing(Stemmer.Cvb.INativeHandle,Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionVoid)">
            <summary>
            Processing function that accepts an image and returns nothing.
            </summary>
            <param name="obj">image for consistency check</param>
            <param name="fn">function to call</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessing(Stemmer.Cvb.INativeHandle,Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionVoid,Stemmer.Cvb.Runtime.InteropServices.Processing.ReturnCodeTranslation)">
            <summary>
            Generic processing function that handles the basic input checks and
            caters to error reporting for functions some and generate nothing.
            </summary>
            <param name="obj">image to perform consistency checks on</param>
            <param name="fn">function to be invoked</param>
            <param name="translator">return value translator</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessing(Stemmer.Cvb.INativeHandle,Stemmer.Cvb.INativeHandle,Stemmer.Cvb.Runtime.InteropServices.Processing.StandardProcessingFunctionVoid,Stemmer.Cvb.Runtime.InteropServices.Processing.ReturnCodeTranslation)">
            <summary>
            Processing function that accepts two images and returns nothing.
            </summary>
            <param name="obj1">image 1 for consistency check</param>
            <param name="obj2">image 2 for consistency check</param>
            <param name="fn">function to call</param>
            <param name="translator">return value translator</param>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.StringUtilities">
            <summary>
            Several utility functions that make interfacing managed and unmanaged
            DLLs easier.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.StringUtilities.StringQuery`2">
            <summary>
            String query function.
            </summary>
            <typeparam name="TRes">Result type of the query function.</typeparam>
            <typeparam name="TSize">Size type used by the query function.
            </typeparam>
            <param name="s">String builder passed to the query function.</param>
            <param name="size">Size passed to the query function.</param>
            <returns>Return value.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.StringUtilities.StringQueryFixedLength`1">
            <summary>
            String query functions for string queries that do *not* support the
            initial query for the string's length, but operate with a maximum
            length instead (which has been set on the string builder passed as
            the first argument).
            </summary>
            <typeparam name="TRes">return type of the query function</typeparam>
            <param name="s">String builder to receive the string.</param>
            <param name="size">Size of the buffer allocated in the string
            builder.</param>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.StringUtilities.Succeeded`1">
            <summary>
            Result value verification function.
            </summary>
            <typeparam name="TRes">Type of result to be verified.</typeparam>
            <param name="value">Value to be verified.</param>
            <returns>Bool value, indicating success or failure.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.StringUtilities.GetUnmanagedString``2(Stemmer.Cvb.Runtime.InteropServices.StringUtilities.StringQuery{``0,``1},Stemmer.Cvb.Runtime.InteropServices.StringUtilities.Succeeded{``0})">
            <summary>
            Retrieves an unmanaged string from a function that follows the 
            convention that a size query is possible by passing a null pointer
            first.
            </summary>
            <typeparam name="TRes">Return type of the query function.</typeparam>
            <typeparam name="TSize">Size type used by the query function.
            </typeparam>
            <param name="query">Query function</param>
            <param name="succeeded">verification function that checks the 
            result returned by the query function.</param>
            <returns>Retrieved string or null if retrieval failed.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.StringUtilities.GetUnmanagedString``1(Stemmer.Cvb.Runtime.InteropServices.StringUtilities.StringQueryFixedLength{``0},System.Int32,Stemmer.Cvb.Runtime.InteropServices.StringUtilities.Succeeded{``0})">
            <summary>
            Retrieves an unmanaged string from a function that follows the 
            convention that a size query is possible by passing a null pointer
            first.
            </summary>
            <typeparam name="TRes">Return type of the query function.</typeparam>
            <param name="query">Query function</param>
            <param name="succeeded">verification function that checks the 
            result returned by the query function.</param>
            <param name="capacity">Capacity to use on the string builder.</param>
            <returns>Retrieved string or null if retrieval failed.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.ShareObject">
            <summary>
            Defines whether or not the native object handle is shared in an 
            operation.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes">
            <summary>
            Object is to be shared.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.No">
            <summary>
            Object is not shared.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure">
            <summary>
            Defines whether or not the newly created object should add memory 
            pressure on the garbage collector.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure.Yes">
            <summary>
            Do add memory pressure.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure.No">
            <summary>
            Do not add memory pressure as the pressure is handled elsewhere.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeCvbObjectHandle">
            <summary>
            Safe-destruct handle wrapper for IntPtr-based resources that are pseudo
            COM objects released through ReleaseObject
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeCvbObjectHandle.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">native handle for which to create the image 
            object</param>
        </member>
        <member name="P:Stemmer.Cvb.Runtime.InteropServices.SafeCvbObjectHandle.IsInvalid">
            <summary>
            Verify internally memorized handle for validity.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Runtime.InteropServices.SafeCvbObjectHandle.NativeHandle">
            <summary>
            Internally stored handle.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeCvbObjectHandle.ReleaseHandle">
            <summary>
            Release internally memorized handle.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandleCreate">
            <summary>
            Delegate for handle creation functions to be used with the 
            <see cref="T:Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandle"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandleRelease">
            <summary>
            Delegate for handle destruction functions to be used with the 
            <see cref="T:Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandle"/> class.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandle">
            <summary>
            Safe-destruct handle wrapper for IntPtr-based resources.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandle.#ctor(Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandleCreate,Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandleRelease)">
            <summary>
            Constructor
            </summary>
            <param name="ctor">custom construction function</param>
            <param name="dtor">custom destruction function</param>
        </member>
        <member name="F:Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandle.dtor_">
            <summary>
            memorized destructor
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandle.IsInvalid">
            <summary>
            Verify internally memorized handle for validity.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandle.NativeHandle">
            <summary>
            Internally stored handle.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeIntPtrHandle.ReleaseHandle">
            <summary>
            Release internally memorized handle.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.PanoramaDirection">
            <summary>
            Defines the direction of the panoramic image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PanoramaDirection.Horizontal">
            <summary>
            Images are stitch horizontally.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PanoramaDirection.Vertical">
            <summary>
            Images are stitched vertically.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.PanoramicMappedImage">
            <summary>
            Mapped image of two merged source images.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PanoramicMappedImage.CreateHorizontal(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Creates a new horizontal mapped image.
            </summary>
            <param name="left">Left hand side image.</param>
            <param name="right">Right hand side image.</param>
            <returns>New mapped panoramic image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PanoramicMappedImage.CreateVertical(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Creates a new vertical mapped image.
            </summary>
            <param name="top">Top image.</param>
            <param name="bottom">Bottom image.</param>
            <returns>New mapped panoramic image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PanoramicMappedImage.Dispose(System.Boolean)">
            <summary>
            Unregisters the events on the linked images.
            </summary>
            <param name="disposing"><c>true</c> if called from 
            <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="M:Stemmer.Cvb.PanoramicMappedImage.OnPixelContentChanged(Stemmer.Cvb.Rect)">
            <summary>
            Handles forwarding the updated events in both directions.
            </summary>
            <param name="rect">Rectangle to be updated.</param>
        </member>
        <member name="P:Stemmer.Cvb.PanoramicMappedImage.LinkedImages">
            <summary>
            Gets the linked images that this <b>PanoramicMappedImage</b> maps.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.PanoramicMappedImage.Direction">
            <summary>
            Gets the direction of this panoramic map.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.PfncFormatValue">
            <summary>
            Helper methods for <see cref="T:Stemmer.Cvb.PfncFormat"/> values.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PfncFormatValue.From(Stemmer.Cvb.ColorModel,Stemmer.Cvb.DataType)">
            <summary>
            Tries to coerce the <see cref="T:Stemmer.Cvb.PfncFormat"/> from the given 
            <paramref name="colorModel"/> and <paramref name="dataType"/>.
            </summary>
            <param name="colorModel">CVB color model.</param>
            <param name="dataType">CVB data type.</param>
            <returns>The matching <see cref="T:Stemmer.Cvb.PfncFormat"/>; 
            <see cref="F:Stemmer.Cvb.PfncFormat.InvalidPixelFormat"/> if not successful.</returns>
        </member>
        <member name="M:Stemmer.Cvb.PfncFormatValue.ToString(Stemmer.Cvb.PfncFormat)">
            <summary>
            Gets the official name for the given <paramref name="pixelFormat"/>.
            </summary>
            <param name="pixelFormat">PFNC pixel format to get name of.</param>
            <returns>Name of the given <paramref name="pixelFormat"/>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.PfncFormat">
            <summary>
            GenICam Pixel Format Naming Convention (PFNC) format values.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono1p">
            <summary>
            Monochrome 1-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono2p">
            <summary>
            Monochrome 2-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono4p">
            <summary>
            Monochrome 4-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono8">
            <summary>
            Monochrome 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono8s">
            <summary>
            Monochrome 8-bit signed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono10">
            <summary>
            Monochrome 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono10p">
            <summary>
            Monochrome 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono12">
            <summary>
            Monochrome 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono12p">
            <summary>
            Monochrome 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono14">
            <summary>
            Monochrome 14-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono16">
            <summary>
            Monochrome 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerBG8">
            <summary>
            Bayer Blue-Green 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerBG10">
            <summary>
            Bayer Blue-Green 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerBG10p">
            <summary>
            Bayer Blue-Green 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerBG12">
            <summary>
            Bayer Blue-Green 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerBG12p">
            <summary>
            Bayer Blue-Green 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerBG16">
            <summary>
            Bayer Blue-Green 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGB8">
            <summary>
            Bayer Green-Blue 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGB10">
            <summary>
            Bayer Green-Blue 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGB10p">
            <summary>
            Bayer Green-Blue 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGB12">
            <summary>
            Bayer Green-Blue 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGB12p">
            <summary>
            Bayer Green-Blue 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGB16">
            <summary>
            Bayer Green-Blue 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGR8">
            <summary>
            Bayer Green-Red 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGR10">
            <summary>
            Bayer Green-Red 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGR10p">
            <summary>
            Bayer Green-Red 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGR12">
            <summary>
            Bayer Green-Red 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGR12p">
            <summary>
            Bayer Green-Red 12-bit packed. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGR16">
            <summary>
            Bayer Green-Red 16-bit,
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerRG8">
            <summary>
            Bayer Red-Green 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerRG10">
            <summary>
            Bayer Red-Green 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerRG10p">
            <summary>
            Bayer Red-Green 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerRG12">
            <summary>
            Bayer Red-Green 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerRG12p">
            <summary>
            Bayer Red-Green 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerRG16">
            <summary>
            Bayer Red-Green 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGBa8">
            <summary>
            Red-Green-Blue-alpha 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGBa10">
            <summary>
            Red-Green-Blue-alpha 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGBa10p">
            <summary>
            Red-Green-Blue-alpha 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGBa12">
            <summary>
            Red-Green-Blue-alpha 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGBa12p">
            <summary>
            Red-Green-Blue-alpha 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGBa14">
            <summary>
            Red-Green-Blue-alpha 14-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGBa16">
            <summary>
            Red-Green-Blue-alpha 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB8">
            <summary>
            Red-Green-Blue 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB8_Planar">
            <summary>
            Red-Green-Blue 8-bit planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB10">
            <summary>
            Red-Green-Blue 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB10_Planar">
            <summary>
            Red-Green-Blue 10-bit unpacked planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB10p">
            <summary>
            Red-Green-Blue 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB10p32">
            <summary>
            Red-Green-Blue 10-bit packed into 32-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB12">
            <summary>
            Red-Green-Blue 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB12_Planar">
            <summary>
            Red-Green-Blue 12-bit unpacked planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB12p">
            <summary>
            Red-Green-Blue 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB14">
            <summary>
            Red-Green-Blue 14-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB16">
            <summary>
            Red-Green-Blue 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB16_Planar">
            <summary>
            Red-Green-Blue 16-bit planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB565p">
            <summary>
            Red-Green-Blue 5/6/5-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGRa8">
            <summary>
            Blue-Green-Red-alpha 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGRa10">
            <summary>
            Blue-Green-Red-alpha 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGRa10p">
            <summary>
            Blue-Green-Red-alpha 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGRa12">
            <summary>
            Blue-Green-Red-alpha 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGRa12p">
            <summary>
            Blue-Green-Red-alpha 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGRa14">
            <summary>
            Blue-Green-Red-alpha 14-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGRa16">
            <summary>
            Blue-Green-Red-alpha 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGR8">
            <summary>
            Blue-Green-Red 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGR10">
            <summary>
            Blue-Green-Red 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGR10p">
            <summary>
            Blue-Green-Red 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGR12">
            <summary>
            Blue-Green-Red 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGR12p">
            <summary>
            Blue-Green-Red 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGR14">
            <summary>
            Blue-Green-Red 14-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGR16">
            <summary>
            Blue-Green-Red 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BGR565p">
            <summary>
            Blue-Green-Red 5/6/5-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.R8">
            <summary>
            Red 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.R10">
            <summary>
            Red 10-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.R12">
            <summary>
            Red 12-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.R16">
            <summary>
            Red 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.G8">
            <summary>
            Green 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.G10">
            <summary>
            Green 10-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.G12">
            <summary>
            Green 12-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.G16">
            <summary>
            Green 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.B8">
            <summary>
            Blue 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.B10">
            <summary>
            Blue 10-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.B12">
            <summary>
            Blue 12-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.B16">
            <summary>
            Blue 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_ABC8">
            <summary>
            3D coordinate A-B-C 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_ABC8_Planar">
            <summary>
            3D coordinate A-B-C 8-bit planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_ABC10p">
            <summary>
            3D coordinate A-B-C 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_ABC10p_Planar">
            <summary>
            3D coordinate A-B-C 10-bit packed planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_ABC12p">
            <summary>
            3D coordinate A-B-C 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_ABC12p_Planar">
            <summary>
            3D coordinate A-B-C 12-bit packed planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_ABC16">
            <summary>
            3D coordinate A-B-C 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_ABC16_Planar">
            <summary>
            3D coordinate A-B-C 16-bit planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_ABC32f">
            <summary>
            3D coordinate A-B-C 32-bit floating point.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_ABC32f_Planar">
            <summary>
            3D coordinate A-B-C 32-bit floating point planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_AC8">
            <summary>
            3D coordinate A-C 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_AC8_Planar">
            <summary>
            3D coordinate A-C 8-bit planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_AC10p">
            <summary>
            3D coordinate A-C 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_AC10p_Planar">
            <summary>
            3D coordinate A-C 10-bit packed planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_AC12p">
            <summary>
            3D coordinate A-C 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_AC12p_Planar">
            <summary>
            3D coordinate A-C 12-bit packed planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_AC16">
            <summary>
            3D coordinate A-C 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_AC16_Planar">
            <summary>
            3D coordinate A-C 16-bit planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_AC32f">
            <summary>
            3D coordinate A-C 32-bit floating point.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_AC32f_Planar">
            <summary>
            3D coordinate A-C 32-bit floating point planar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_A8">
            <summary>
            3D coordinate A 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_A10p">
            <summary>
            3D coordinate A 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_A12p">
            <summary>
            3D coordinate A 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_A16">
            <summary>
            3D coordinate A 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_A32f">
            <summary>
            3D coordinate A 32-bit floating point.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_B8">
            <summary>
            3D coordinate B 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_B10p">
            <summary>
            3D coordinate B 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_B12p">
            <summary>
            3D coordinate B 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_B16">
            <summary>
            3D coordinate B 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_B32f">
            <summary>
            3D coordinate B 32-bit floating point.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_C8">
            <summary>
            3D coordinate C 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_C10p">
            <summary>
            3D coordinate C 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_C12p">
            <summary>
            3D coordinate C 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_C16">
            <summary>
            3D coordinate C 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Coord3D_C32f">
            <summary>
            3D coordinate C 32-bit floating point.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Confidence1">
            <summary>
            Confidence 1-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Confidence1p">
            <summary>
            Confidence 1-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Confidence8">
            <summary>
            Confidence 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Confidence16">
            <summary>
            Confidence 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Confidence32f">
            <summary>
            Confidence 32-bit floating point.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BiColorBGRG8">
            <summary>
            Bi-color Blue/Green - Red/Green 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BiColorBGRG10">
            <summary>
            Bi-color Blue/Green - Red/Green 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BiColorBGRG10p">
            <summary>
            Bi-color Blue/Green - Red/Green 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BiColorBGRG12">
            <summary>
            Bi-color Blue/Green - Red/Green 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BiColorBGRG12p">
            <summary>
            Bi-color Blue/Green - Red/Green 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BiColorRGBG8">
            <summary>
            Bi-color Red/Green - Blue/Green 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BiColorRGBG10">
            <summary>
            Bi-color Red/Green - Blue/Green 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BiColorRGBG10p">
            <summary>
            Bi-color Red/Green - Blue/Green 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BiColorRGBG12">
            <summary>
            Bi-color Red/Green - Blue/Green 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BiColorRGBG12p">
            <summary>
            Bi-color Red/Green - Blue/Green 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WBWG8">
            <summary>
            Sparse Color Filter #1 White-Blue-White-Green 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WBWG10">
            <summary>
            Sparse Color Filter #1 White-Blue-White-Green 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WBWG10p">
            <summary>
            Sparse Color Filter #1 White-Blue-White-Green 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WBWG12">
            <summary>
            Sparse Color Filter #1 White-Blue-White-Green 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WBWG12p">
            <summary>
            Sparse Color Filter #1 White-Blue-White-Green 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WBWG14">
            <summary>
            Sparse Color Filter #1 White-Blue-White-Green 14-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WBWG16">
            <summary>
            Sparse Color Filter #1 White-Blue-White-Green 16-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWB8">
            <summary>
            Sparse Color Filter #1 White-Green-White-Blue 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWB10">
            <summary>
            Sparse Color Filter #1 White-Green-White-Blue 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWB10p">
            <summary>
            Sparse Color Filter #1 White-Green-White-Blue 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWB12">
            <summary>
            Sparse Color Filter #1 White-Green-White-Blue 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWB12p">
            <summary>
            Sparse Color Filter #1 White-Green-White-Blue 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWB14">
            <summary>
            Sparse Color Filter #1 White-Green-White-Blue 14-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWB16">
            <summary>
            Sparse Color Filter #1 White-Green-White-Blue 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWR8">
            <summary>
            Sparse Color Filter #1 White-Green-White-Red 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWR10">
            <summary>
            Sparse Color Filter #1 White-Green-White-Red 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWR10p">
            <summary>
            Sparse Color Filter #1 White-Green-White-Red 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWR12">
            <summary>
            Sparse Color Filter #1 White-Green-White-Red 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWR12p">
            <summary>
            Sparse Color Filter #1 White-Green-White-Red 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWR14">
            <summary>
            Sparse Color Filter #1 White-Green-White-Red 14-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WGWR16">
            <summary>
            Sparse Color Filter #1 White-Green-White-Red 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WRWG8">
            <summary>
            Sparse Color Filter #1 White-Red-White-Green 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WRWG10">
            <summary>
            Sparse Color Filter #1 White-Red-White-Green 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WRWG10p">
            <summary>
            Sparse Color Filter #1 White-Red-White-Green 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WRWG12">
            <summary>
            Sparse Color Filter #1 White-Red-White-Green 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WRWG12p">
            <summary>
            Sparse Color Filter #1 White-Red-White-Green 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WRWG14">
            <summary>
            Sparse Color Filter #1 White-Red-White-Green 14-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.SCF1WRWG16">
            <summary>
            Sparse Color Filter #1 White-Red-White-Green 16-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr8">
            <summary>
            YCbCr 4:4:4 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr8_CbYCr">
            <summary>
            YCbCr 4:4:4 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr10_CbYCr">
            <summary>
            YCbCr 4:4:4 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr10p_CbYCr">
            <summary>
            YCbCr 4:4:4 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr12_CbYCr">
            <summary>
            YCbCr 4:4:4 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr12p_CbYCr">
            <summary>
            YCbCr 4:4:4 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr411_8">
            <summary>
            YCbCr 4:1:1 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr411_8_CbYYCrYY">
            <summary>
            YCbCr 4:1:1 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr422_8">
            <summary>
            YCbCr 4:2:2 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr422_8_CbYCrY">
            <summary>
            YCbCr 4:2:2 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr422_10">
            <summary>
            YCbCr 4:2:2 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr422_10_CbYCrY">
            <summary>
            YCbCr 4:2:2 10-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr422_10p">
            <summary>
            YCbCr 4:2:2 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr422_10p_CbYCrY">
            <summary>
            YCbCr 4:2:2 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr422_12">
            <summary>
            YCbCr 4:2:2 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr422_12_CbYCrY">
            <summary>
            YCbCr 4:2:2 12-bit unpacked.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr422_12p">
            <summary>
            YCbCr 4:2:2 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr422_12p_CbYCrY">
            <summary>
            YCbCr 4:2:2 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_8_CbYCr">
            <summary>
            YCbCr 4:4:4 8-bit BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_10_CbYCr">
            <summary>
            YCbCr 4:4:4 10-bit unpacked BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_10p_CbYCr">
            <summary>
            YCbCr 4:4:4 10-bit packed BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_12_CbYCr">
            <summary>
            YCbCr 4:4:4 12-bit unpacked BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_12p_CbYCr">
            <summary>
            YCbCr 4:4:4 12-bit packed BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_411_8_CbYYCrYY">
            <summary>
            YCbCr 4:1:1 8-bit BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_422_8">
            <summary>
            YCbCr 4:2:2 8-bit BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_422_8_CbYCrY">
            <summary>
            YCbCr 4:2:2 8-bit BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_422_10">
            <summary>
            YCbCr 4:2:2 10-bit unpacked BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_422_10_CbYCrY">
            <summary>
            YCbCr 4:2:2 10-bit unpacked BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_422_10p">
            <summary>
            YCbCr 4:2:2 10-bit packed BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_422_10p_CbYCrY">
            <summary>
            YCbCr 4:2:2 10-bit packed BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_422_12">
            <summary>
            YCbCr 4:2:2 12-bit unpacked BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_422_12_CbYCrY">
            <summary>
            YCbCr 4:2:2 12-bit unpacked BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_422_12p">
            <summary>
            YCbCr 4:2:2 12-bit packed BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr601_422_12p_CbYCrY">
            <summary>
            YCbCr 4:2:2 12-bit packed BT.601.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_8_CbYCr">
            <summary>
            YCbCr 4:4:4 8-bit BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_10_CbYCr">
            <summary>
            YCbCr 4:4:4 10-bit unpacked BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_10p_CbYCr">
            <summary>
            YCbCr 4:4:4 10-bit packed BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_12_CbYCr">
            <summary>
            YCbCr 4:4:4 12-bit unpacked BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_12p_CbYCr">
            <summary>
            YCbCr 4:4:4 12-bit packed BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_411_8_CbYYCrYY">
            <summary>
            YCbCr 4:1:1 8-bit BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_422_8">
            <summary>
            YCbCr 4:2:2 8-bit BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_422_8_CbYCrY">
            <summary>
            YCbCr 4:2:2 8-bit BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_422_10">
            <summary>
            YCbCr 4:2:2 10-bit unpacked BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_422_10_CbYCrY">
            <summary>
            YCbCr 4:2:2 10-bit unpacked BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_422_10p">
            <summary>
            YCbCr 4:2:2 10-bit packed BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_422_10p_CbYCrY">
            <summary>
            YCbCr 4:2:2 10-bit packed BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_422_12">
            <summary>
            YCbCr 4:2:2 12-bit unpacked BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_422_12_CbYCrY">
            <summary>
            YCbCr 4:2:2 12-bit unpacked BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_422_12p">
            <summary>
            YCbCr 4:2:2 12-bit packed BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr709_422_12p_CbYCrY">
            <summary>
            YCbCr 4:2:2 12-bit packed BT.709.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_8_CbYCr">
            <summary>
            YCbCr 4:4:4 8-bit BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_10_CbYCr">
            <summary>
            YCbCr 4:4:4 10-bit unpacked BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_10p_CbYCr">
            <summary>
            YCbCr 4:4:4 10-bit packed BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_12_CbYCr">
            <summary>
            YCbCr 4:4:4 12-bit unpacked BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_12p_CbYCr">
            <summary>
            YCbCr 4:4:4 12-bit packed BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_411_8_CbYYCrYY">
            <summary>
            YCbCr 4:1:1 8-bit BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_422_8">
            <summary>
            YCbCr 4:2:2 8-bit BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_422_8_CbYCrY">
            <summary>
            YCbCr 4:2:2 8-bit BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_422_10">
            <summary>
            YCbCr 4:2:2 10-bit unpacked BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_422_10_CbYCrY">
            <summary>
            YCbCr 4:2:2 10-bit unpacked BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_422_10p">
            <summary>
            YCbCr 4:2:2 10-bit packed BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_422_10p_CbYCrY">
            <summary>
            YCbCr 4:2:2 10-bit packed BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_422_12">
            <summary>
            YCbCr 4:2:2 12-bit unpacked BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_422_12_CbYCrY">
            <summary>
            YCbCr 4:2:2 12-bit unpacked BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_422_12p">
            <summary>
            YCbCr 4:2:2 12-bit packed BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YCbCr2020_422_12p_CbYCrY">
            <summary>
            YCbCr 4:2:2 12-bit packed BT.2020.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YUV8_UYV">
            <summary>
            YUV 4:4:4 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YUV411_8_UYYVYY">
            <summary>
            YUV 4:1:1 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YUV422_8">
            <summary>
            YUV 4:2:2 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.YUV422_8_UYVY">
            <summary>
            YUV 4:2:2 8-bit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono10Packed">
            <summary>
            GigE Vision specific format, Monochrome 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Mono12Packed">
            <summary>
            GigE Vision specific format, Monochrome 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerBG10Packed">
            <summary>
            GigE Vision specific format, Bayer Blue-Green 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerBG12Packed">
            <summary>
            GigE Vision specific format, Bayer Blue-Green 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGB10Packed">
            <summary>
            GigE Vision specific format, Bayer Green-Blue 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGB12Packed">
            <summary>
            GigE Vision specific format, Bayer Green-Blue 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGR10Packed">
            <summary>
            GigE Vision specific format, Bayer Green-Red 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerGR12Packed">
            <summary>
            GigE Vision specific format, Bayer Green-Red 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerRG10Packed">
            <summary>
            GigE Vision specific format, Bayer Red-Green 10-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.BayerRG12Packed">
            <summary>
            GigE Vision specific format, Bayer Red-Green 12-bit packed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB10V1Packed">
            <summary>
            GigE Vision specific format, Red-Green-Blue 10-bit packed - variant 1.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.RGB12V1Packed">
            <summary>
            GigE Vision specific format, Red-Green-Blue 12-bit packed - variant 1.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.Custom">
            <summary>
            Start number for custom pixel formats.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PfncFormat.InvalidPixelFormat">
            <summary>
            Invalid pixel format.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Resources.DeviceFileFilter">
            <summary>
              Looks up a localized string similar to Common Vision Blox Video Interface Driver (*.vin)|*.vin|Common Vision Blox Emulator Image Lists (*.emu)|*.emu|Video Files (*.avi;*.mpg;*.cvrv)|*.avi;*.mpg;*.cvrv|All Common Vision Blox Devices (*.vin;*.emu;*.avi;*.mpg;*.cvrv)|*.vin;*.emu;*.avi;*.mpg;*.cvrv|All files (*.*)|*.*.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Properties.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.AcquisitionError">
            <summary>
              Looks up a localized string similar to {0} acquisition error..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.Busy">
            <summary>
              Looks up a localized string similar to {0} is currently busy. Stop the ongoing operation to successfully finish this call..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.DataTypePlaneMismatch">
            <summary>
              Looks up a localized string similar to Not all image planes have the same data type..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.DeserializationFailed">
            <summary>
              Looks up a localized string similar to Deserialization of the object buffer is not possible..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.EntityInaccessible">
            <summary>
              Looks up a localized string similar to The {0} cannot currently be accessed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.FileNotFound">
            <summary>
              Looks up a localized string similar to The {0} file &apos;{1}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.ImageFormatNotSupported">
            <summary>
              Looks up a localized string similar to The input image format is unsupported..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.ImplementationError">
            <summary>
              Looks up a localized string similar to An internal error occurred. Please report this to support@stemmer-imaging.de along with the call stack if possible..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.InformationMissing">
            <summary>
              Looks up a localized string similar to The required information for {0} is missing..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.InsufficientData">
            <summary>
              Looks up a localized string similar to Not enough data for {0}..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.InvalidCombination">
            <summary>
              Looks up a localized string similar to The options {0} and {1} cannot be combined in the same operation..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.InvalidOperation">
            <summary>
              Looks up a localized string similar to {0} is not supported when {1}..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.LinearOnly">
            <summary>
              Looks up a localized string similar to Operation {0} only supported on linear VPATs..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.LoadFailure">
            <summary>
              Looks up a localized string similar to Loading the {0} from file {1} failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.NoInterface">
            <summary>
              Looks up a localized string similar to Device does not support Interface {0}..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.NoReferenceTypesAllowed">
            <summary>
              Looks up a localized string similar to This operation is only allowed with value types..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.NotOverlayImage">
            <summary>
              Looks up a localized string similar to Image is not an overlay image..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.NotSupported">
            <summary>
              Looks up a localized string similar to Operation is not supported..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.OutsideImage">
            <summary>
              Looks up a localized string similar to {0} must be located inside the image (location: {1}, image size: {2}).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.PixelFormatNotSupported">
            <summary>
              Looks up a localized string similar to The pixel format {0} is not supported..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.ReadOnlyCollection">
            <summary>
              Looks up a localized string similar to This {0} collection is read-only..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.SaveFailure">
            <summary>
              Looks up a localized string similar to Saving the {0} to file {1} failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.ThreadContext">
            <summary>
              Looks up a localized string similar to Control {0} accessed from a thread other than the thread it was created on..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.UnableToCreateBuffer">
            <summary>
              Looks up a localized string similar to Unable to create image or object buffer from {0}..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.UnbalancedPlaneCount">
            <summary>
              Looks up a localized string similar to The number of {0} does not correspond to the number of planes..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.Unexpected">
            <summary>
              Looks up a localized string similar to An unexpected error occurred..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.UnsupportedValue">
            <summary>
              Looks up a localized string similar to {0} is not in the supported range [{1}]..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Properties.Messages.ValueOutOfRange">
            <summary>
              Looks up a localized string similar to Value is out of range ({0} &lt;= {1} &lt; {2})..
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.RgbColor">
            <summary>
            Color type resembling that of <c>System.Drawing.Color</c> but
            which can be used without the System.Drawing dependency.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.RgbColor.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            ctor for <see cref="T:Stemmer.Cvb.RgbColor"/> objects.
            </summary>
            <param name="a">Alpha value.</param>
            <param name="r">Red value.</param>
            <param name="g">Green value.</param>
            <param name="b">Blue value.</param>
        </member>
        <member name="P:Stemmer.Cvb.RgbColor.A">
            <summary>
            Alpha component of the color value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.RgbColor.R">
            <summary>
            Red component of the color value
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.RgbColor.G">
            <summary>
            Green component of the color value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.RgbColor.B">
            <summary>
            Blue component of the color value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.RgbColor.FromArgb(System.Int32)">
            <summary>
            Construct a <see cref="T:Stemmer.Cvb.RgbColor"/> from 32 bit integer that contains the 
            values for ARGB as (hex) AARRGGBB.
            </summary>
            <param name="val">AARRGGBB value.</param>
            <returns><see cref="T:Stemmer.Cvb.RgbColor"/> value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.RgbColor.FromArgb(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct a <see cref="T:Stemmer.Cvb.RgbColor"/> from A, R, G and B values.
            </summary>
            <param name="a">Alpha channel.</param>
            <param name="r">Red channel.</param>
            <param name="g">Green channel.</param>
            <param name="b">Blue channel.</param>
            <returns><see cref="T:Stemmer.Cvb.RgbColor"/> value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.RgbColor.ToArgb">
            <summary>
            Return the 32 bit integer encoding the AARRGGBB value of this color.
            </summary>
            <returns>32 bit representation of the color.</returns>
        </member>
        <member name="T:Stemmer.Cvb.DiscoverFlags">
            <summary>
            Flags controlling the discovery process.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.FindAll">
            <summary>
            Default flags to find all devices and vin drivers.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.IncludeEmpty">
            <summary>
            Include also nodes which have no children.
            </summary>
            <remarks>
            You can use this for example to list all interfaces even if no
            devices are found on them.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.IncludeInaccessible">
            <summary>
            Normally inaccessible devices are filtered out: this flag includes
            them.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.UpToLevelSystem">
            <summary>
            Limit discovery depth to system level (factory).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.UpToLevelVin">
            <summary>
            Limit discovery depth to vin driver level.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.UpToLevelTL">
            <summary>
            Limit discovery depth to transport library level.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.UpToLevelInterface">
            <summary>
            Limit discovery depth to interface library level.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.UpToLevelDevice">
            <summary>
            Limit discovery depth to device level.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.UpToLevelStream">
            <summary>
            Limit discovery depth to stream level.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.IgnoreVins">
            <summary>
            Ignore vin drivers in discovery.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.IgnoreTLs">
            <summary>
            Ignore GenTL producers in discovery.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.IgnoreGevSD">
            <summary>
            Ignore socket driver for GEVTL GenTL Producer.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DiscoverFlags.IgnoreGevFD">
            <summary>
            Ignore filter driver for GEVTL GenTL Producer.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.AcquisitionStack">
            <summary>
            The acquisition stack when opening the device.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.AcquisitionStack.Vin">
            <summary>
            Use vin acquisition stack or fail.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.AcquisitionStack.PreferVin">
            <summary>
            Prefer to load the vin acquisition stack.
            If the vin stack cannot be loaded try opening
            the non-streamable device before failing.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.AcquisitionStack.GenTL">
            <summary>
            Use GenTL acquisition stack or fail.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.AcquisitionStack.PreferGenTL">
            <summary>
            Prefer the GenTL acquisition stack.
            If the GenTL stack cannot be loaded first try
            opening the vin stack, then try opening the
            non-streamable device before failing.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.DeviceFactory">
            <summary>
            Factory object for creating <see cref="T:Stemmer.Cvb.Device"/> objects.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DeviceFactory.AviMpgGuid">
            <summary>
            The GUID for the video image source.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DeviceFactory.FileGuid">
            <summary>
            The GUID for the CVCFile based driver (i.e. load the CVCFile dlo like a vin).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DeviceFactory.EmuGuid">
            <summary>
            The GUID for the Emu file driver.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DeviceFactory.GenICamGuid">
            <summary>
            The GUID for the GenICam.vin.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DeviceFactory.LockAnchor">
            <summary>
            The lock anchor for loading and releasing a driver.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DeviceFactory.DeviceTracker">
            <summary>
            Tracks all opened devices.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Discover">
            <summary>
            Discovers available devices (not vins) with a default time span of
            300ms.
            </summary>
            <remarks>
            <para>
            This method behaves like the CVB Management Console when discovering
            devices: It lists all GenICam devices (like GigE Vision and USB3
            Vision) and filters out the STEMMER IMAGING Socket Driver devices for
            GigE Vision (only shows Filter Driver devices).
            </para><para>
            This method does not throw a <see cref="T:System.TimeoutException"/> if
            the wait time is exceeded: it just waits for the time span. If a
            device answers after this span it is not in the returned list.
            </para>
            </remarks>
            <returns>The list of found devices.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Discover(Stemmer.Cvb.DiscoverFlags)">
            <summary>
            Discovers available devices/nodes depending on the given
            <paramref name="flags"/> with a default time span of 300ms.
            </summary>
            <remarks>
            This method does not throw a <see cref="T:System.TimeoutException"/> if
            the wait time is exceeded: it just waits for the time span. If a
            device answers after this span it is not in the returned list.
            </remarks>
            <param name="flags">Discovery control flags.</param>
            <returns>The list of found devices/nodes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Discover(Stemmer.Cvb.DiscoverFlags,System.TimeSpan)">
            <summary>
            Discovers available devices/nodes depending on the given
            <paramref name="flags"/>.
            </summary>
            <remarks>
            This method does not throw a <see cref="T:System.TimeoutException"/> if
            <paramref name="waitTime"/> is exceeded: it just waits for the given
            time span. If a device answers after this span it is not in the
            returned list.
            </remarks>
            <param name="flags">Discovery control flags.</param>
            <param name="waitTime">Time to wait for discovery answers from
            devices.</param>
            <returns>The list of found devices/nodes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Discover(Stemmer.Cvb.Driver.DiscoveryInformation)">
            <summary>
            Discovers available nodes starting on the level of the given
            discover <paramref name="info"/> with a default time span of 300ms.
            </summary>
            <remarks>
            This method does not throw a <see cref="T:System.TimeoutException"/> if
            the wait time is exceeded: it just waits for the time span. If a
            device answers after this span it is not in the returned list.
            </remarks>
            <param name="info">Start level and parameter set for query.</param>
            <returns>The list of found devices/nodes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Discover(System.String)">
            <summary>
            Discovers available nodes starting on level of the given
            <paramref name="accessToken"/> with a default time span of 300ms.
            </summary>
            <remarks>
            This method does not throw a <see cref="T:System.TimeoutException"/> if
            the wait time is exceeded: it just waits for the time span. If a
            device answers after this span it is not in the returned list.
            </remarks>
            <param name="accessToken">Start level and parameter set for query.
            </param>
            <returns>The list of found devices/nodes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Discover(Stemmer.Cvb.Driver.DiscoveryInformation,Stemmer.Cvb.DiscoverFlags)">
            <summary>
            Discovers available nodes starting on level of the given discover
            <paramref name="info"/> with a default time span of 300ms.
            </summary>
            <remarks>
            This method does not throw a <see cref="T:System.TimeoutException"/> if
            the wait time is exceeded: it just waits for the time span. If a
            device answers after this span it is not in the returned list.
            </remarks>
            <param name="info">Start level and parameter set for query.</param>
            <param name="flags">Discovery control flags.</param>
            <returns>The list of found devices/nodes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Discover(System.String,Stemmer.Cvb.DiscoverFlags)">
            <summary>
            Discovers available nodes starting on level of the given
            <paramref name="accessToken"/> with a default time span of 300ms.
            </summary>
            <remarks>
            This method does not throw a <see cref="T:System.TimeoutException"/> if
            the wait time is exceeded: it just waits for the time span. If a
            device answers after this span it is not in the returned list.
            </remarks>
            <param name="accessToken">Start level and parameter set for query.
            </param>
            <param name="flags">Discovery control flags.</param>
            <returns>The list of found devices/nodes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Discover(Stemmer.Cvb.Driver.DiscoveryInformation,Stemmer.Cvb.DiscoverFlags,System.TimeSpan)">
            <summary>
            Discovers available nodes starting on level of the given discover
            <paramref name="info"/>.
            </summary>
            <remarks>
            This method does not throw a <see cref="T:System.TimeoutException"/> if
            <paramref name="waitTime"/> is exceeded: it just waits for the given
            time span. If a device answers after this span it is not in the
            returned list.
            </remarks>
            <param name="info">Start level and parameter set for query.</param>
            <param name="flags">Discovery control flags.</param>
            <param name="waitTime">Time to wait for discovery answers from
            devices.</param>
            <returns>The list of found devices/nodes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Discover(System.String,Stemmer.Cvb.DiscoverFlags,System.TimeSpan)">
            <summary>
            Discovers available nodes starting on level of the given
            <paramref name="accessToken"/>.
            </summary>
            <remarks>
            This method does not throw a <see cref="T:System.TimeoutException"/> if
            <paramref name="waitTime"/> is exceeded: it just waits for the given
            time span. If a device answers after this span it is not in the
            returned list.
            </remarks>
            <param name="accessToken">Start level and parameter set for query.
            </param>
            <param name="flags">Discovery control flags.</param>
            <param name="waitTime">Time to wait for discovery answers from
            devices.</param>
            <returns>The list of found devices/nodes.</returns>
        </member>
        <member name="P:Stemmer.Cvb.DeviceFactory.NumberOfOpenDevices">
            <summary>
            Gets the number of open devices.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.GetOpenDeviceSnapshot">
            <summary>
            Gets all currently opened devices.
            </summary>
            <returns>All open, non-disposed <see cref="T:Stemmer.Cvb.Device"/>s, available at the
            time the method was called.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.CheckForOpenedDevices(Stemmer.Cvb.Device@)">
            <summary>
            Checks whether a newly opened device has been opened before and is
            still alive.
            </summary>
            <remarks>
            This method exchanges the given <paramref name="device"/> reference
            with the available object if present.
            </remarks>
            <param name="device">Device object to check whether it is in the open.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.TryOpen(Stemmer.Cvb.Driver.DiscoveryInformation,Stemmer.Cvb.Device@,Stemmer.Cvb.AcquisitionStack)">
            <summary>
            Tries to open a device with the given discovery
            <paramref name="info"/>.
            </summary>
            <param name="info">Discovery information.</param>
            <param name="device">Device object on success; <c>null</c> on failure.
            </param>
            <param name="acquisitionStack">Acquisition stack to open.</param>
            <returns><c>true</c> on success; <c>false</c> on failure.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.TryOpen(System.String,Stemmer.Cvb.Device@,Stemmer.Cvb.AcquisitionStack)">
            <summary>
            Tries to open a device with the given <paramref name="provider"/> with
            its default board and port (if applicable).
            </summary>
            <remarks>The opened board/port need not necessary be 0 as this depends
            on the driver configuration!</remarks>
            <param name="provider">Name of the device provider.</param>
            <param name="device">Device object on success; <c>null</c>
            otherwise.</param>
            <param name="acquisitionStack">Acquisition stack to open.</param>
            <returns><c>true</c> on success; <c>false</c> on failure.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.TryOpen(System.String,System.Int32,System.Int32,Stemmer.Cvb.Device@)">
            <summary>
            Tries to open a device with the given <paramref name="provider"/>.
            </summary>
            <remarks>
            <para>
            For this method the <paramref name="provider"/> is a vin-driver on
            which a specific <paramref name="board"/> and <paramref name="port"/>
            is to be opened.
            </para>
            <para>
            If the driver does not support either one of the board/port select
            interfaces, you can set the <paramref name="board"/> or
            <paramref name="port"/> parameters to 0. For non-0 values this method
            will fail.
            </para>
            </remarks>
            <param name="provider">Name of the device provider.</param>
            <param name="board">Board number to open.</param>
            <param name="port">Port number to open.</param>
            <param name="device">Device object on success; <c>null</c>
            otherwise.</param>
            <returns><c>true</c> on success; <c>false</c> on failure.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.TryOpenBoard(System.String,System.Int32,Stemmer.Cvb.Device@)">
            <summary>
            Tries to open a device with the given <paramref name="provider"/> and
            <paramref name="board"/>.
            </summary>
            <remarks>
            <para>
            For this method the <paramref name="provider"/> is a vin-driver on
            which a specific <paramref name="board"/>.
            </para>
            <para>
            If the driver does not support the board select interfaces, you can
            set the <paramref name="board"/> parameter to 0. For non-0 values this
            method will fail.
            </para>
            </remarks>
            <param name="provider">Name of the device provider.</param>
            <param name="board">Board number to open.</param>
            <param name="device">Device object on success; <c>null</c>
            otherwise.</param>
            <returns><c>true</c> on success; <c>false</c> on failure.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.TryOpenPort(System.String,System.Int32,Stemmer.Cvb.Device@)">
            <summary>
            Tries to open a device with the given <paramref name="provider"/> and
            <paramref name="port"/>.
            </summary>
            <remarks>
            <para>
            For this method the <paramref name="provider"/> is a vin-driver on
            which a specific <paramref name="port"/>.
            </para>
            <para>
            If the driver does not support the camera select interfaces, you can
            set the <paramref name="port"/> parameter to 0. For non-0 values this
            method will fail.
            </para>
            </remarks>
            <param name="provider">Name of the device provider.</param>
            <param name="port">Port number to open.</param>
            <param name="device">Device object on success; <c>null</c>
            otherwise.</param>
            <returns><c>true</c> on success; <c>false</c> on failure.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Open(Stemmer.Cvb.Driver.DiscoveryInformation,Stemmer.Cvb.AcquisitionStack)">
            <summary>
            Opens a device based on the given discovery <paramref name="info"/>.
            </summary>
            <param name="info">Info describing a discovered device/node.</param>
            <param name="acquisitionStack">Acquisition stack to open.</param>
            <returns>Device object for given <paramref name="info"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Open(System.String,Stemmer.Cvb.AcquisitionStack)">
            <summary>
            Tries to open a device with the given <paramref name="provider"/> with
            its default board and port (if applicable).
            </summary>
            <remarks>The opened board/port need not necessary be 0 as this depends
            on the driver configuration!</remarks>
            <returns>Device object for given <paramref name="provider"/>.
            </returns>
            <exception cref="T:System.IO.IOException">If the given
            <paramref name="provider"/> could not be opened.</exception>
            <param name="provider">Name of the device provider.</param>
            <param name="acquisitionStack">Acquisition stack to open.</param>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.Open(System.String,System.Int32,System.Int32)">
            <summary>
            Open a device with the given <paramref name="provider"/>.
            </summary>
            <remarks>
            <para>
            For this method the <paramref name="provider"/> is a vin-driver on
            which a specific <paramref name="board"/> and <paramref name="port"/>
            is to be opened.
            </para>
            <para>
            If the driver does not support either one of the board/port select
            interfaces, you can set the <paramref name="board"/> or
            <paramref name="port"/> parameters to 0. For non-0 values an exception
            will be thrown.
            </para>
            </remarks>
            <param name="provider">Name of the device provider.</param>
            <param name="board">Board number to open.</param>
            <param name="port">Port number to open.</param>
            <returns>Device object for given <paramref name="provider"/>,
            <paramref name="board"/> and <paramref name="port"/> combination.
            </returns>
            <exception cref="T:System.IO.IOException">If the given
            <paramref name="provider"/> could not be opened.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given
            <paramref name="board"/> or <paramref name="port"/> are outside their
            allowed range.</exception>
            <exception cref="T:System.NullReferenceException">If board or port
            select interface are missing.</exception>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.OpenBoard(System.String,System.Int32)">
            <summary>
            Open a device with the given <paramref name="provider"/> and
            <paramref name="board"/>.
            </summary>
            <remarks>
            <para>
            For this method the <paramref name="provider"/> is a vin-driver on
            which a specific <paramref name="board"/> is to be opened.
            </para>
            <para>
            If the driver does not support board select interfaces, you can set
            the <paramref name="board"/> parameter to 0. For non-0 values an
            exception will be thrown.
            </para>
            </remarks>
            <param name="provider">Name of the device provider.</param>
            <param name="board">Board number to open.</param>
            <returns>Device object for given <paramref name="provider"/> and
            <paramref name="board"/>.
            </returns>
            <exception cref="T:System.IO.IOException">If the given
            <paramref name="provider"/> could not be opened.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given
            <paramref name="board"/> is outside its allowed range.</exception>
            <exception cref="T:System.NullReferenceException">If board select
            interfaces are missing.</exception>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.OpenPort(System.String,System.Int32)">
            <summary>
            Open a device with the given <paramref name="provider"/> and
            <paramref name="port"/>.
            </summary>
            <remarks>
            <para>
            For this method the <paramref name="provider"/> is a vin-driver on
            which a specific <paramref name="port"/> is to be opened.
            </para>
            <para>
            If the driver does not support camera select interfaces, you can set
            the <paramref name="port"/> parameter to 0. For non-0 values an
            exception will be thrown.
            </para>
            </remarks>
            <param name="provider">Name of the device provider.</param>
            <param name="port">Port number to open.</param>
            <returns>Device object for given <paramref name="provider"/> and
            <paramref name="port"/>.
            </returns>
            <exception cref="T:System.IO.IOException">If the given
            <paramref name="provider"/> could not be opened.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the given
            <paramref name="port"/> is outside its allowed range.</exception>
            <exception cref="T:System.NullReferenceException">If camera select
            interfaces are missing.</exception>
        </member>
        <member name="E:Stemmer.Cvb.DeviceFactory.NewDevice">
            <summary>
            Occurs when a new device is created.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.DeviceFactory.DeviceDisposed">
            <summary>
            Occurs when a new device is disposed.
            </summary>
            <remarks>
            Beware of using the associated object as it is either disposed or in
            the process of disposing.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.InternalTryOpen(System.String,Stemmer.Cvb.Device@,Stemmer.Cvb.AcquisitionStack)">
            <summary>
            Internal variant of <see cref="M:Stemmer.Cvb.DeviceFactory.TryOpen(System.String,Stemmer.Cvb.Device@,Stemmer.Cvb.AcquisitionStack)"/>.
            </summary>
            <param name="provider">Name of the device provider.</param>
            <param name="device">Device object on success; <c>null</c>
            otherwise.</param>
            <param name="acquisitionStack">Flag indicating if the legacy devices should be used.</param>
            <returns><see cref="T:System.Exception"/> object on error; <c>null</c>
            if successful.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.IsAccessToken(System.String)">
            <summary>
            Tests whether <paramref name="provider"/> is in fact an access token
            for opening a device.
            </summary>
            <param name="provider">Provider text to test.</param>
            <returns><c>true</c> if <paramref name="provider"/> could be an
            access token; <c>false</c> if not.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.InternalTryOpenBoard(System.String,System.Int32,Stemmer.Cvb.Device@)">
            <summary>
            Internal variant of
            <see cref="M:Stemmer.Cvb.DeviceFactory.TryOpen(System.String,System.Int32,System.Int32,Stemmer.Cvb.Device@)"/> with just
            a board switch.
            </summary>
            <param name="provider">Name of the device provider.</param>
            <param name="board">Board number to open.</param>
            <param name="device">Device object on success; <c>null</c>
            otherwise.</param>
            <returns><see cref="T:System.Exception"/> object on error; <c>null</c>
            if successful.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.InternalTryOpenPort(System.String,System.Int32,Stemmer.Cvb.Device@)">
            <summary>
            Internal variant of
            <see cref="M:Stemmer.Cvb.DeviceFactory.TryOpen(System.String,System.Int32,System.Int32,Stemmer.Cvb.Device@)"/> with just
            a port switch.
            </summary>
            <param name="provider">Name of the device provider.</param>
            <param name="port">Port number to open.</param>
            <param name="device">Device object on success; <c>null</c>
            otherwise.</param>
            <returns><see cref="T:System.Exception"/> object on error; <c>null</c>
            if successful.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.InternalTryOpen(System.String,System.Int32,System.Int32,Stemmer.Cvb.Device@)">
            <summary>
            Internal variant of
            <see cref="M:Stemmer.Cvb.DeviceFactory.TryOpen(System.String,System.Int32,System.Int32,Stemmer.Cvb.Device@)"/>.
            </summary>
            <param name="provider">Name of the device provider.</param>
            <param name="board">Board number to open.</param>
            <param name="port">Port number to open.</param>
            <param name="device">Device object on success; <c>null</c>
            otherwise.</param>
            <returns><see cref="T:System.Exception"/> object on error; <c>null</c>
            if successful.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.ChangeBoard1(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            IBoardSelect interface implementation.
            </summary>
            <param name="device">Reference to device to change board for.</param>
            <param name="board">Board number to switch to.</param>
            <returns><see cref="T:System.Exception"/> object on error; <c>null</c>
            if successful.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.ChangeBoard2(Stemmer.Cvb.Device@,System.Int32)">
            <summary>
            IBoardSelect2 interface implementation.
            </summary>
            <param name="device">Reference to device to change board for.</param>
            <param name="board">Board number to switch to.</param>
            <returns><see cref="T:System.Exception"/> object on error; <c>null</c>
            if successful.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.ChangeBoard(Stemmer.Cvb.Device@,System.Int32)">
            <summary>
            Checks whether board select is possible on the given
            <paramref name="device"/> and switches to the given
            <paramref name="board"/> if possible.
            </summary>
            <remarks>If no board select interface is present and
            <paramref name="board"/> is 0, no error is returned.</remarks>
            <param name="device">Reference to device to change board for.</param>
            <param name="board">Board number to switch to.</param>
            <returns><see cref="T:System.Exception"/> object on error; <c>null</c>
            if successful.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.ChangePort1(Stemmer.Cvb.Device,System.Int32)">
            <summary>
            ICameraSelect interface implementation.
            </summary>
            <param name="device">Reference to device to change port for.</param>
            <param name="port">Port number to switch to.</param>
            <returns><see cref="T:System.Exception"/> object on error; <c>null</c>
            if successful.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.ChangePort2(Stemmer.Cvb.Device@,System.Int32)">
            <summary>
            ICameraSelect2 interface implementation.
            </summary>
            <param name="device">Reference to device to change port for.</param>
            <param name="port">Port number to switch to.</param>
            <returns><see cref="T:System.Exception"/> object on error; <c>null</c>
            if successful.</returns>
        </member>
        <member name="M:Stemmer.Cvb.DeviceFactory.ChangePort(Stemmer.Cvb.Device@,System.Int32)">
            <summary>
            Checks whether port select is possible on the given
            <paramref name="device"/> and switches to the given
            <paramref name="port"/> if possible.
            </summary>
            <remarks>If no camera select interface is present and
            <paramref name="port"/> is 0, no error is returned.</remarks>
            <param name="device">Reference to device to change port for.</param>
            <param name="port">Port number to switch to.</param>
            <returns><see cref="T:System.Exception"/> object on error; <c>null</c>
            if successful.</returns>
        </member>
        <member name="T:Stemmer.Cvb.ErrorCodes">
            <summary>
            Native CVB error codes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Ok">
            <summary>
            No error occurred.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Error">
            <summary>
            Generic unspecified error.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Parameter">
            <summary>
            Parameter error.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.FileIO">
            <summary>
            file I/O error
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Timeout">
            <summary>
            timeout in function
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Memory">
            <summary>
            memory allocation
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.InvalidPlane">
            <summary>
            invalid plane
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.UnsupportedDatatype">
            <summary>
            unsupported data type
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.InvalidCameraPort">
            <summary>
            invalid camera port
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.BoardSelect">
            <summary>
            board select failed
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.InvalidTriggerMode">
            <summary>
            invalid trigger mode
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.PropertyRead">
            <summary>
            property read error
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.PropertyWrite">
            <summary>
            property write error
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.InvalidPort">
            <summary>
            invalid port
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.PortRead">
            <summary>
            could not read port
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.PortWrite">
            <summary>
            could not write port
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoImage">
            <summary>
            no image at all
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoInterface">
            <summary>
            Interface not available
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Busy">
            <summary>
            Hardware busy
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NotSupported">
            <summary>
            A certain feature is not supported
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.GrabAborted">
            <summary>
            failure because grab was aborted
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoPixelList">
            <summary>
            pointer was not pointing to a pixel list
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NotEnoughData">
            <summary>
            too few data available for a calculation
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoTransformation">
            <summary>
            the object passed to the function was not a NL-transformation object
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.LinearOnly">
            <summary>
            the function only works on linear images
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.DivisionByZero">
            <summary>
            division by zero was attempted
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.InvalidDimension">
            <summary>
            invalid number of infos
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.InvalidColorModel">
            <summary>
            invalid color model
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.InvalidDatatype">
            <summary>
            invalid data type
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.WrongObject">
            <summary>
            wrong object
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NotReady">
            <summary>
            not ready for the requested operation
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoAngle">
            <summary>
            not an angle object
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoVector2D">
            <summary>
            not a 2D vector object
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoLine2D">
            <summary>
            not a 2D line object
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Vector2DZeroLength">
            <summary>
            vector has zero length
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.VectorsIdentical">
            <summary>
            identical vectors
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Line2DVertical">
            <summary>
            vertical line
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Line2DHorizontal">
            <summary>
            horizontal line
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoArgument">
            <summary>
            argument cannot be calculated for x = y = 0
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Line2DUndefined">
            <summary>
            line 2D object has not yet been defined
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoIntersection">
            <summary>
            the lines provided to the function do not intersect
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoClipping">
            <summary>
            no clipping points available
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NotEnoughLines">
            <summary>
            not enough lines to perform intersection
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Overflow">
            <summary>
            input value was too big or did lead to a too big result
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoCircle">
            <summary>
            object is not a 2D circle
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.Access">
            <summary>
            access error
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NotPresent">
            <summary>
            not present
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.UnsupportedFeature">
            <summary>
            the requested feature is not supported
            (may happen if a specific interface implementation cannot implement all
            functionality)
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.InvalidIndex">
            <summary>
            index in an indexed access exceeded limits
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoOverlay">
            <summary>
            image that is expected to have overlay bits does not have overlay bits
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.NoLicenseSerialNumber">
            <summary>
            No serial number > 0 is available on the system.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.InvalidLicenseSerialNumber">
            <summary>
            No serial number > 0 is available on the system.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.WrongLicenseSerialNumber">
            <summary>
            No serial number > 0 is available on the system.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.FormatError">
            <summary>
            No serial number > 0 is available on the system.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ErrorCodes.InvalidAoi">
            <summary>
            No serial number > 0 is available on the system.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.CvbException">
            <summary>
            Base exception for all <see cref="N:Stemmer.Cvb"/> exceptions.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.CvbException.#ctor(System.String,System.Int32)">
            <summary>
            Creates a generic CVB exception object with the given 
            <paramref name="message"/> and <paramref name="errorCode"/>.
            </summary>
            <param name="message">Human readable error reason.</param>
            <param name="errorCode">CVB result code.</param>
        </member>
        <member name="M:Stemmer.Cvb.CvbException.#ctor(System.String)">
            <summary>
            Creates a generic CVB exception object with the generic error code
            and the given <paramref name="message"/>.
            </summary>
            <param name="message">Human readable error reason.</param>
        </member>
        <member name="M:Stemmer.Cvb.CvbException.#ctor(System.Int32)">
            <summary>
            Creates a generic CVB exception object with the given 
            <paramref name="errorCode"/> and no message text.
            </summary>
            <param name="errorCode"></param>
        </member>
        <member name="M:Stemmer.Cvb.CvbException.#ctor">
            <summary>
            Creates a generic CVB exception object with the generic error code and
            no message text.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.CvbException.FromCvbResult(System.Int32)">
            <summary>
            Returns the appropriate <see cref="T:System.Exception"/> object based on the
            given <paramref name="errorCode"/>.
            </summary>
            <remarks>The returned exception object has no message.</remarks>
            <param name="errorCode">CVB result code smaller than zero.</param>
            <returns>Appropriate <see cref="T:System.Exception"/> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.CvbException.FromCvbResult(System.Int32,System.String)">
            <summary>
            Returns the appropriate <see cref="T:System.Exception"/> object based on the
            given <paramref name="errorCode"/> with the given 
            <paramref name="message"/> text.
            </summary>
            <param name="errorCode">CVB result code smaller than zero.</param>
            <param name="message">Human readable error reason.</param>
            <returns>Appropriate <see cref="T:System.Exception"/> object.</returns>
        </member>
        <member name="T:Stemmer.Cvb.ImagePlaneCollectionDebugView">
            <summary>
            Debug view of the image plane collection.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlaneCollectionDebugView._collection">
            <summary>
            Reference to the collection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlaneCollectionDebugView.DataTypesIdentical">
            <summary>
            Gets whether all planes have the same data type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlaneCollectionDebugView.Items">
            <summary>
            This items of the collection as an array.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlaneCollectionDebugView.#ctor(Stemmer.Cvb.ImagePlaneCollection)">
            <summary>
            Ctor.
            </summary>
            <param name="collection">Collection to view.</param>
        </member>
        <member name="T:Stemmer.Cvb.ImagePlaneCollection">
            <summary>
            Collection of plane informations.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlaneCollection.#ctor(Stemmer.Cvb.Image)">
            <summary>
            ctor
            </summary>
            <param name="parent">obivous...</param>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlaneCollection.GetInfo(System.Int32)">
            <summary>
            Retrieval function for plane information.
            </summary>
            <param name="index">Index of the block to be retrieved</param>
            <returns>Info object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the
            <paramref name="index"/> is invalid</exception>
            <exception cref="T:System.ObjectDisposedException">If the parent image has
            already been disposed of</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlaneCollection.GetCount">
            <summary>
            Retrieval function for plane count information.
            </summary>
            <returns>Number of infos in the parent image.</returns>
            <exception cref="T:System.ObjectDisposedException">If the parent image has
            already been disposed of</exception>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlaneCollection.Item(System.Int32)">
            <summary>
            Indexed access to the individual plane information.
            </summary>
            <param name="index">Index of the plane to be accessed</param>
            <returns>Plane information object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the
            <paramref name="index"/> is invalid</exception>
            <exception cref="T:System.ObjectDisposedException">If the parent image has
            already been disposed of</exception>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlaneCollection.DataTypesIdentical">
            <summary>
            True if all image infos in this collection have the same data type,
            false otherwise.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent image has
            already been disposed of</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlaneCollection.Map">
            <summary>
            Creates a mapped image of this image, containing all of the
            original image planes. The mapped image will share its memory with
            the input planes.
            </summary>
            <returns>Mapped image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlaneCollection.Map(System.Int32[])">
            <summary>
            Creates a mapped image of this image, containing only a subset of the
            original image planes. The mapped image will share its memory with
            the input planes.
            </summary>
            <param name="indices">Indices of the planes to map into the new image.
            </param>
            <returns>Mapped image.</returns>
            <exception cref="T:System.ArgumentNullException">If the
            <paramref name="indices"/> enumeration is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If one of the
            <paramref name="indices"/> is outside the range [0...num planes[</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlaneCollection.Map(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Creates a mapped image of this image, containing only a subset of the
            original image planes. The mapped image will share its memory with
            the input planes.
            </summary>
            <param name="indices">Indices of the planes to map into the new image.
            </param>
            <returns>Mapped image.</returns>
            <exception cref="T:System.ArgumentNullException">If the
            <paramref name="indices"/> enumeration is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If one of the
            <paramref name="indices"/> is outside the range [0...num planes[</exception>
        </member>
        <member name="T:Stemmer.Cvb.PixelDataType">
            <summary>
            Defines the numeric data type of one pixel.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PixelDataType.Undefined">
            <summary>
            Indeterminable data type.
            (Mostly here because the native CVB data type descriptor can take all
            sorts of weird values).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PixelDataType.UInt">
            <summary>
            Unsigned integer.
            </summary>
            <value>Positive integer numbers including zero.</value>
        </member>
        <member name="F:Stemmer.Cvb.PixelDataType.Int">
            <summary>
            Signed integer.
            </summary>
            <value>Positive and negative integer numbers including zero.</value>
        </member>
        <member name="F:Stemmer.Cvb.PixelDataType.Float">
            <summary>
            Floating point number.
            </summary>
            <value>Real numbers.</value>
        </member>
        <member name="F:Stemmer.Cvb.PixelDataType.ComplexPackedFloat">
            <summary>
            Complex packed floating point number.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ColorModel">
            <summary>
            Color model that this image is using.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.RGBGuess">
            <summary>
            Color space was not explicitly specified, but is likely to be RGB
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.MonoGuess">
            <summary>
            Color space was not explicitly specified, but is likely to be
            monochrome
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.Unknown">
            <summary>
            color space is not known
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.Mono">
            <summary>
            monochrome "color" space
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.RGB">
            <summary>
            RGB color space
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.YUV">
            <summary>
            YUV color space
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.HSI">
            <summary>
            HSI color space
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.YCbCr">
            <summary>
            YCbCr color model
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.CieLUV">
            <summary>
            CIE LUV color model
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.CieLab">
            <summary>
            CIE Lab color model
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.HLS">
            <summary>
            HLS (Hue, Lightness, Saturation) color model
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.YCC">
            <summary>
            YCC color model
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.HSV">
            <summary>
            HSV (Hue, Saturation, Value) color model
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ColorModel.CieXYZ">
            <summary>
            CIE XYZ color model
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.MappingOption">
            <summary>
            Mapping options when creating a (potentially) mapped image
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.MappingOption.CopyPixels">
            <summary>
            Create a deep copy of the source pixels
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.MappingOption.LinkPixels">
            <summary>
            Create a linked copy of the source pixels that shares the memory
            of the source pixels i.e. changes to one image affect the linked
            image as well
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.RectEventArgs">
            <summary>
            Event arguments transporting a rectangular area.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.RectEventArgs.Area">
            <summary>
            Gets the affected rectangular area.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.RectEventArgs.#ctor(Stemmer.Cvb.Rect)">
            <summary>
            Creates the event args.
            </summary>
            <param name="area">Affected area.</param>
        </member>
        <member name="T:Stemmer.Cvb.Image">
            <summary>
            The Common Vision Blox image.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an uninitialized image with the given <paramref name="width"/>
            and <paramref name="height"/>.
            </summary>
            <remarks>The image has a single plane, 8 bits per pixel
            <see cref="F:Stemmer.Cvb.PixelDataType.UInt"/>.</remarks>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="width"/>, <paramref name="height"/> are negative.</exception>
            <exception cref="T:System.InsufficientMemoryException">If not enough memory is
            available to create the image.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(Stemmer.Cvb.Size2D)">
            <summary>
            Creates an uninitialized image with the given <paramref name="size"/>.
            </summary>
            <param name="size">Size of the image in pixels.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="size"/> width or height are negative.</exception>
            <exception cref="T:System.InsufficientMemoryException">If not enough memory is
            available to create the image.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an uninitialized image with the given <paramref name="width"/>
            and <paramref name="height"/>, <paramref name="numPlanes"/> infos.
            </summary>
            <remarks>The image data type for all infos is 8 bits per pixel
            <see cref="F:Stemmer.Cvb.PixelDataType.UInt"/>.</remarks>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="numPlanes">Number of (color) infos.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="width"/>, <paramref name="height"/> are negative or if
            <paramref name="numPlanes"/> is smaller than one.</exception>
            <exception cref="T:System.InsufficientMemoryException">If not enough memory is
            available to create the image.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(Stemmer.Cvb.Size2D,System.Int32)">
            <summary>
            Creates an uninitialized image with the given <paramref name="size"/>
            and <paramref name="numPlanes"/>.
            </summary>
            <param name="size">Size of the image in pixels.</param>
            <param name="numPlanes">Number of (color) infos.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="size"/> width or height are negative or
            <paramref name="numPlanes"/> is smaller than one.</exception>
            <exception cref="T:System.InsufficientMemoryException">If not enough memory is
            available to create the image.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(System.Int32,System.Int32,System.Int32,Stemmer.Cvb.PixelDataType,System.Int32)">
            <summary>
            Creates an uninitialized image with the given <paramref name="width"/>
            and <paramref name="height"/>, <paramref name="numPlanes"/> infos.
            </summary>
            <remarks><para>This constructor defines also the all plane's pixels
            data format via the <paramref name="dataType"/> and
            <paramref name="bitDepth"/>.</para>
            <para>Allowed bit depth for integer images are:
            <list type="bullet">
            <item><description>8 to 64 bits</description></item>
            </list>
            For float images:
            <list type="bullet">
            <item><description>32 bits</description></item>
            <item><description>64 bits</description></item>
            </list>
            </para></remarks>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="numPlanes">Number of (color) infos.</param>
            <param name="dataType">Pixel data type.</param>
            <param name="bitDepth">Bits per pixel per plane.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="dataType"/> has
            an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="width"/>, <paramref name="height"/> are negative; if
            <paramref name="numPlanes"/> is smaller than one; or if
            <paramref name="bitDepth"/> is out of range.</exception>
            <exception cref="T:System.InsufficientMemoryException">If not enough memory is
            available to create the image.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(Stemmer.Cvb.Size2D,System.Int32,Stemmer.Cvb.PixelDataType,System.Int32)">
            <summary>
            Creates an uninitialized image with the given <paramref name="size"/>
            and <paramref name="numPlanes"/>.
            </summary>
            <remarks><para>This constructor defines also the all plane's pixels
            data format via the <paramref name="dataType"/> and
            <paramref name="bitDepth"/>.</para>
            <para>Allowed bit depth for integer images are:
            <list type="bullet">
            <item><description>8 to 64 bits</description></item>
            </list>
            For float images:
            <list type="bullet">
            <item><description>32 bits</description></item>
            <item><description>64 bits</description></item>
            </list>
            </para></remarks>
            <param name="size">Size of the image in pixels.</param>
            <param name="numPlanes">Number of (color) infos.</param>
            <param name="dataType">Pixel data type.</param>
            <param name="bitDepth">Bits per pixel per plane.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="dataType"/> has
            an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="size"/> width or height are negative or
            <paramref name="numPlanes"/> is smaller than one; or if
            <paramref name="bitDepth"/> is out of range.</exception>
            <exception cref="T:System.InsufficientMemoryException">If not enough memory is
            available to create the image.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(System.Int32,System.Int32,System.Int32,Stemmer.Cvb.DataType)">
            <summary>
            Creates an uninitialized image with the given <paramref name="width"/>
            and <paramref name="height"/>, <paramref name="numPlanes"/> infos.
            </summary>
            <remarks>
            This constructor defines also the all plane's pixels data format via
            the <paramref name="dataType"/>.
            </remarks>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="numPlanes">Number of (color) infos.</param>
            <param name="dataType">Pixel data type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="width"/>, <paramref name="height"/> are negative; or
            if <paramref name="numPlanes"/> is smaller than one.</exception>
            <exception cref="T:System.InsufficientMemoryException">If not enough memory is
            available to create the image.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(Stemmer.Cvb.Size2D,System.Int32,Stemmer.Cvb.DataType)">
            <summary>
            Creates an uninitialized image with the given <paramref name="size"/>
            and <paramref name="numPlanes"/>.
            </summary>
            <remarks>
            This constructor defines also the all plane's pixels data format via
            the <paramref name="dataType"/>.
            </remarks>
            <param name="size">Size of the image in pixels.</param>
            <param name="numPlanes">Number of (color) infos.</param>
            <param name="dataType">Pixel data type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="size"/> width or height are negative or
            <paramref name="numPlanes"/> is smaller than one.</exception>
            <exception cref="T:System.InsufficientMemoryException">If not enough memory is
            available to create the image.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(System.IntPtr)">
            <summary>
            Creates a <see cref="T:Stemmer.Cvb.Image"/> object around a native handle.
            </summary>
            <remarks>
            Does not share the given <paramref name="handle"/>, but guesses memory
            pressure.
            </remarks>
            <param name="handle">Native handle of the image.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject,Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure)">
            <summary>
            Creates a <see cref="T:Stemmer.Cvb.Image"/> object around a native handle and
            guesses the memory pressure if <paramref name="useMemoryPressure"/>
            indicates that.
            </summary>
            <param name="handle">Native handle of the image</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if
            <paramref name="handle"/> is to be shared.</param>
            <param name="useMemoryPressure">Guesses memory pressure if
            <see cref="F:Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure.Yes"/> is set.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.#ctor(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject,System.Int64)">
            <summary>
            Creates a <see cref="T:Stemmer.Cvb.Image"/> object around a native handle with the
            given <paramref name="memoryPressure"/>.
            </summary>
            <param name="handle">Native handle of the image</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if
            <paramref name="handle"/> is to be shared.</param>
            <param name="memoryPressure">Number of bytes to indicate native object
            size; 0 or negative values are ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.CreateHandle(System.Int32,System.Int32,System.Int32,Stemmer.Cvb.PixelDataType,System.Int32)">
            <summary>
            Helper function to handle generic image creation.
            </summary>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="numPlanes">Number of (color) infos.</param>
            <param name="dataType">Pixel data type.</param>
            <param name="bitDepth">Bits per pixel per plane.</param>
            <returns><c>IntPtr</c> containing the native image handle.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="dataType"/> has
            an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="width"/>, <paramref name="height"/> are negative; if
            <paramref name="numPlanes"/> is smaller than one; or if
            <paramref name="bitDepth"/> is out of range.</exception>
            <exception cref="T:System.InsufficientMemoryException">If not enough memory is
            available to create the image.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.CreateHandle(System.Int32,System.Int32,System.Int32,Stemmer.Cvb.DataType)">
            <summary>
            Helper function to handle generic image creation.
            </summary>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="numPlanes">Number of (color) infos.</param>
            <param name="dataType">Image data type.</param>
            <returns><c>IntPtr</c> containing the native image handle.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="dataType"/> has
            an invalid value.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If
            <paramref name="width"/>, <paramref name="height"/> are negative; or
            if <paramref name="numPlanes"/> is smaller than one.
            </exception>
            <exception cref="T:System.InsufficientMemoryException">If not enough memory is
            available to create the image.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.ChangeHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure)">
            <summary>
            This method changes the handle of this image.
            </summary>
            <remarks>
            The old handle will be freed afterwards.
            </remarks>
            <param name="newHandle">New image handle.</param>
            <param name="useMemoryPressure">Flag identifying whether memory
            pressure is to be guessed.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.IncreaseRefCount">
            <summary>
            Increases the native image's reference count by one.
            </summary>
            <remarks>
            <c>Attention:</c> this method is dangerous and can lead to native
            memory leaks.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Image.IncreaseRefCount(System.Int64)">
            <summary>
            Increases the native image's reference count by one.
            </summary>
            <remarks>
            <c>Attention:</c> this method is dangerous and can lead to native
            memory leaks.
            </remarks>
            <param name="memoryPressureToAdd">Memory pressure to be added to the
            currently set pressure.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.DecreaseRefCount">
            <summary>
            Decreases the native image's reference count by one.
            </summary>
            <remarks>
            <c>Attention:</c> this method is dangerous and can lead to corrupted
            native memory.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Image.FromHandle(System.IntPtr)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.Image"/> from a native handle.
            </summary>
            <remarks>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="nativeHandle"/>
            parameter will most likely lead to severe problems in your
            application.</remarks>
            <param name="nativeHandle">Nandle to create the image from.</param>
            <returns>Newly created image or null of no image could be created.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.Image"/> from a native handle and potentially
            increment the unmanaged reference count on the native handle.
            </summary>
            <remarks>
            <para>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="nativeHandle"/>
            parameter will most likely lead to severe problems in your
            application.
            </para>
            <para>
            This function will guess the memory pressure of the native image
            passed via the <paramref name="nativeHandle"/>
            </para>
            </remarks>
            <param name="nativeHandle">Handle to create the image from.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if
            <paramref name="nativeHandle"/> is to be shared.</param>
            <returns>Newly created image or null of no image could be created.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject,Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.Image"/> from a native handle and potentially
            increment the unmanaged reference count on the native handle.
            </summary>
            <remarks>
            <para>Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="nativeHandle"/>
            parameter will most likely lead to severe problems in your
            application.
            </para>
            <para>
            This function will guess the memory pressure of the native image
            passed via the <paramref name="nativeHandle"/> if
            <paramref name="useMemoryPressure"/> is set to
            <see cref="F:Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure.Yes"/>.
            </para>
            </remarks>
            <param name="nativeHandle">Handle to create the image from.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if
            <paramref name="nativeHandle"/> is to be shared.</param>
            <param name="useMemoryPressure">Guesses memory pressure if
            <see cref="F:Stemmer.Cvb.Runtime.InteropServices.UseMemoryPressure.Yes"/> is set.</param>
            <returns>Newly created image or null of no image could be created.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.FromHandle(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject,System.Int64)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.Image"/> from a native handle and potentially
            increment the unmanaged reference count on the native handle.
            </summary>
            <remarks>
            Note that this function is not intended for general use.
            Providing invalid values on the <paramref name="nativeHandle"/>
            parameter will most likely lead to severe problems in your
            application.
            </remarks>
            <param name="nativeHandle">Handle to create the image from.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if
            <paramref name="nativeHandle"/> is to be shared.</param>
            <param name="memoryPressure">Gives the number of bytes the native
            object occupies.</param>
            <returns>Newly created image or null of no image could be created.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.FromObjectBuffer(System.Byte[])">
            <summary>
            Deserialize an image object from an object buffer generated by the
            extension method <see cref="M:Stemmer.Cvb.Image.ToObjectBuffer"/>.
            </summary>
            <param name="arr">Array to recreate the image object from.</param>
            <returns>Recreated object.</returns>
            <exception cref="T:System.ArgumentNullException">if the <paramref name="arr"/>
            parameter is null</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.ToObjectBuffer">
            <summary>
            Create a byte buffer with the serialized image object data.
            </summary>
            <remarks>
            Note that this data do not directly correspond to pixel data - they are
            serialized object data that may be used for streaming and can be
            serialized by means of the <see cref="M:Stemmer.Cvb.Image.FromObjectBuffer(System.Byte[])"/>
            method.
            </remarks>
            <returns>Byte array with the serialized object data</returns>
            <exception cref="T:System.Exception">if serialization failed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.FromFile(System.String)">
            <summary>
            Loads an image with the given <paramref name="fileName"/>.
            </summary>
            <param name="fileName">File name of image to load.</param>
            <exception cref="T:System.IO.FileNotFoundException">when the file specified by
            the <paramref name="fileName"/> parameter does not exist.</exception>
            <exception cref="T:System.IO.FileLoadException">If the file specified by the
            <paramref name="fileName"/> parameter exists, but cannot be loaded.
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fileName"/>
            is null.</exception>
            <returns>
            New <see cref="T:Stemmer.Cvb.FileImage"/> object if load succeeded.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.FromPlanes(Stemmer.Cvb.MappingOption,Stemmer.Cvb.ImagePlane[])">
            <summary>
            Create an image that is the result of concatenating a series of input
            <paramref name="planes"/>.
            </summary>
            <param name="mapping">Selects the relationship between the result
            Image and the input image</param>
            <param name="planes">Planes to be concatenated; all images in the
            input array must be valid and have equal size</param>
            <returns>Concatenated image</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="planes"/>
            is null</exception>
            <exception cref="T:System.InvalidOperationException">If there are no source
            planes</exception>
            <exception cref="T:System.FormatException">If the input planes do not have
            matching width/height</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.FromImages(Stemmer.Cvb.MappingOption,Stemmer.Cvb.Image[])">
            <summary>
            Create an image that is the result of concatenating a series of input
            images.
            </summary>
            <param name="mapping">Selects the relationship between the result
            Image and the input image</param>
            <param name="images">Images to be concatenated; all images in the
            input array must be valid and have equal size</param>
            <returns>Concatenated image</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="images"/>
            is null</exception>
            <exception cref="T:System.InvalidOperationException">If there are no source
            images</exception>
            <exception cref="T:System.FormatException">If the input images do not have
            matching width/height</exception>
        </member>
        <member name="P:Stemmer.Cvb.Image.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Image.Planes">
            <summary>
            Access to the infos of the image.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If this image has
            already been disposed of.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Image.Size">
            <summary>
            Size of the image.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If this image has
            already been disposed of.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Image.Width">
            <summary>
            Width of the image in pixels.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If this image has
            already been disposed of</exception>
        </member>
        <member name="P:Stemmer.Cvb.Image.Height">
            <summary>
            Height of the image in pixels.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If this image has
            already been disposed of</exception>
        </member>
        <member name="P:Stemmer.Cvb.Image.HasOverlayMask">
            <summary>
            True if at least one of the image infos has the overlay mask bit set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the image has already
            been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Image.Handle">
            <summary>
            Native CVB image handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Image.ColorModel">
            <summary>
            Color model that is realized by this image.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.Equals(System.Object)">
            <summary>
            Equality check.
            </summary>
            <param name="obj">Object to which to compare.</param>
            <returns><c>true</c> if this image reference is equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.GetHashCode">
            <summary>
            Build a suitable hash code.
            </summary>
            <returns>Hash code from handle.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Image.Bounds">
            <summary>
            Retrieve the bounding rect of the <see cref="T:Stemmer.Cvb.Image"/>.
            </summary>
            <value>Bounding rect of the <see cref="T:Stemmer.Cvb.Image"/></value>
            <exception cref="T:System.ObjectDisposedException">If this image has
            already been disposed of</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.GetPixel(Stemmer.Cvb.Point2D)">
            <summary>
            Gets the pixel values for all planes at the given
            <paramref name="position"/>.
            </summary>
            <param name="position">Position in pixel coordinates.</param>
            <returns>The pixel values; <see cref="F:System.Double.NaN"/> if a value could
            not be dereferenced.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the pixel values for all planes at the given position.
            </summary>
            <param name="x">Position in pixel coordinates.</param>
            <param name="y">Position in pixel coordinates.</param>
            <returns>The pixel values; <see cref="F:System.Double.NaN"/> if a value could
            not be dereferenced.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.Contains(Stemmer.Cvb.Point2D)">
            <summary>
            Tests if a pixel location is inside the image.
            </summary>
            <param name="pt">Location to test</param>
            <returns><c>true</c> if <paramref name="pt"/> refers to a position
            inside the image, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.Initialize(Stemmer.Cvb.Area2D,System.Double)">
            <summary>
            Initialize the given <paramref name="area"/> in all planes of this
            image to the specified value.
            </summary>
            <param name="area">Area to be initialized</param>
            <param name="value">Value to initialize to.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.Initialize(Stemmer.Cvb.Rect,System.Double)">
            <summary>
            Initialize the given <paramref name="area"/> in all planes of this
            image to the specified value.
            </summary>
            <param name="area">Area to be initialized</param>
            <param name="value">Value to initialize to.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.Initialize(Stemmer.Cvb.Rect,System.Double[])">
            <summary>
            Initialize the given <paramref name="area"/> in all planes of this
            image to the specified values.
            </summary>
            <param name="area">Area to be initialized.</param>
            <param name="values">Value to initialize to.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.Initialize(Stemmer.Cvb.Area2D,System.Double[])">
            <summary>
            Initialize the given <paramref name="area"/> in all planes of this
            image to the specified values.
            </summary>
            <param name="area">Area to be initialized.</param>
            <param name="values">Values to initialize the individual planes to.
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/>
            is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.Initialize(System.Double)">
            <summary>
            Initialize all planes of this image to the specified value.
            </summary>
            <param name="value">Value to initialize to.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.Initialize(System.Double[])">
            <summary>
            Initialize all planes of this image to the specified values.
            </summary>
            <param name="values">Calues to initialize the individual planes to
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="values"/>
            is null</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.Clone">
            <summary>
            Creates a new <see cref="T:Stemmer.Cvb.Image"/> object that is a copy of the current
            instance.
            </summary>
            <remarks>
            <para>This method performs a deep copy of the image data the current
            instance currently points to.</para>
            <para>This means that if you clone a driver image, you receive a new
            plain <see cref="T:Stemmer.Cvb.Image"/> without any driver interfaces!</para>
            </remarks>
            <returns>A new <see cref="T:Stemmer.Cvb.Image"/> object that is a deep copy of this image data.
            </returns>
            <exception cref="T:System.InsufficientMemoryException">The new image buffer
            could not be created.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">If image format could not be cloned.
            </exception>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.Copy">
            <summary>
            Creates a new <see cref="T:Stemmer.Cvb.Image"/> object that is a copy of the current
            instance.
            </summary>
            <remarks>
            <para>This method performs a deep copy of the image data the current
            instance currently points to.</para>
            <para>This means that if you clone a driver image, you receive a new
            plain <see cref="T:Stemmer.Cvb.Image"/> without any driver interfaces!</para>
            </remarks>
            <returns>A new <see cref="T:Stemmer.Cvb.Image"/> object that is a deep copy of this image data.
            </returns>
            <exception cref="T:System.InsufficientMemoryException">The new image buffer
            could not be created.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">If image format could not be cloned.
            </exception>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.CopyTo(Stemmer.Cvb.Image,Stemmer.Cvb.Rect,Stemmer.Cvb.Point2D)">
            <summary>
            Copies the image data from the <paramref name="sourceRect"/> of this
            image to the <paramref name="targetImage"/>
            <paramref name="targetPosition"/>.
            </summary>
            <param name="targetImage">Image to copy to.</param>
            <param name="sourceRect">Source rectangle in pixels to copy from.</param>
            <param name="targetPosition">Position in
            <paramref name="targetImage"/> in pixels to copy to.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">Copy regions or data types
            incompatible.</exception>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.CopyTo(Stemmer.Cvb.Image)">
            <summary>
            Copies the image data from this image to the
            <paramref name="targetImage"/>.
            </summary>
            <param name="targetImage">Image to copy to.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">Copy regions or data types
            incompatible.</exception>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.Map(Stemmer.Cvb.Rect)">
            <summary>
            Creates a mapped image of the <paramref name="rect"/> region of this
            image.
            </summary>
            <remarks>
            The result is an exact view on this image's data and no scaling is
            done.
            </remarks>
            <param name="rect">Region to create map from.</param>
            <returns>Mapped image with the size of the given
            <paramref name="rect"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.Map(Stemmer.Cvb.Rect,Stemmer.Cvb.Size2D)">
            <summary>
            Creates a mapped image of the <paramref name="sourceRect"/> region of
            this image scaled to the <paramref name="targetSize"/>.
            </summary>
            <remarks>
            As this is simply a view to another image no interpolation is done
            when the mapped pixels are accessed. Smaller sizes result in pixel
            skipping while larger sizes result in replicated pixels.
            </remarks>
            <param name="sourceRect">Region to create map from.</param>
            <param name="targetSize">Target size of the mapped image.</param>
            <returns>Mapped image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.Map(Stemmer.Cvb.Size2D)">
            <summary>
            Creates a mapped image of this whole image scaled to the
            <paramref name="targetSize"/>.
            </summary>
            <remarks>
            As this is simply a view to another image no interpolation is done
            when the mapped pixels are accessed. Smaller sizes result in pixel
            skipping while larger sizes result in replicated pixels.
            </remarks>
            <param name="targetSize">Target size of the mapped image.</param>
            <returns>Mapped image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Image.SubImage(Stemmer.Cvb.Rect)">
            <summary>
            Creates a new <see cref="T:Stemmer.Cvb.Image"/> that is a copy from the given
            <paramref name="sourceRect"/> of the image data of the current
            instance.
            </summary>
            <remarks>
            <para>This method performs a deep copy of the image data the current
            instance currently points to.</para>
            <para>This means that if you clone a driver image, you receive a new
            plain <see cref="T:Stemmer.Cvb.Image"/> without any driver interfaces!</para>
            </remarks>
            <param name="sourceRect">Rectangle that identifies the region to
            copy.</param>
            <returns>A new <see cref="T:Stemmer.Cvb.Image"/> object that is a deep copy of this
            image data.
            </returns>
            <exception cref="T:System.InsufficientMemoryException">The new image buffer
            could not be created.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">If image format could not be cloned.
            </exception>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.SubImage(Stemmer.Cvb.Area2D)">
            <summary>
            Creates a new <see cref="T:Stemmer.Cvb.Image"/> that is a copy from the given
            <paramref name="sourceArea"/> of the image data of the current
            instance.
            </summary>
            <remarks>
            <para>This method performs a deep copy of the image data the current
            instance currently points to.</para>
            <para>This means that if you clone a driver image, you receive a new
            plain <see cref="T:Stemmer.Cvb.Image"/> without any driver interfaces!</para>
            </remarks>
            <param name="sourceArea">Area2D that identifies the region to
            copy.</param>
            <returns>A new <see cref="T:Stemmer.Cvb.Image"/> object that is a deep copy of this image data.
            </returns>
            <exception cref="T:System.InsufficientMemoryException">The new image buffer
            could not be created.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">If image format could not be cloned.
            </exception>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.Save(System.String)">
            <summary>
            Write the current content of the image into a file. The file format
            to be used is determined by the extension of the <paramref name="fileName"/>.
            If a lossy format is selected, a default quality setting
            will be used (if you want to specify your own quality setting, please
            use the overload that allows specification of a quality value).
            </summary>
            <param name="fileName">File name into which to save the image</param>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
            <exception cref="T:System.IO.IOException">If saving the image failed
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.Save(System.String,System.Double)">
            <summary>
            Write the current content of the image into a file. The file format
            to be used is determined based on the <paramref name="fileName"/>'s
            extension. The quality (and thereby size) of the resulting file can
            be adjusted using the <paramref name="quality"/> parameter. When
            saving to a lossless file format, the <paramref name="quality"/>
            parameter will be silently ignored.
            </summary>
            <param name="fileName">File name into which to save the image</param>
            <param name="quality">Quality at which to save the image (should be in
            the range 0...1)</param>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
            <exception cref="T:System.IO.IOException">If saving the image failed
            </exception>
        </member>
        <member name="E:Stemmer.Cvb.Image.PixelContentChanged">
            <summary>
            Fired when the image data of this image was consciously updated.
            </summary>
            <remarks>
            This event is only fired when using methods of this CVB API.
            Specifically this event is not fired when you use the
            <see cref="M:Stemmer.Cvb.ImagePlane.GetLinearAccess"/> or
            <see cref="P:Stemmer.Cvb.ImagePlane.Vpat"/> methods as it is not known whether the
            image data has changed. To inform clients of image data change in this
            case you can either call <see cref="M:Stemmer.Cvb.Image.OnPixelContentChanged"/> or use
            the <see cref="M:Stemmer.Cvb.ImagePlane.GetLockedAccess(Stemmer.Cvb.ImageDataLockMode)"/> method.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Image.OnPixelContentChanged">
            <summary>
            Inform clients listening to the <see cref="E:Stemmer.Cvb.Image.PixelContentChanged"/> event
            that this image data has been completely updated (full area).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Image.OnPixelContentChanged(Stemmer.Cvb.Rect)">
            <summary>
            Inform clients listening to the <see cref="E:Stemmer.Cvb.Image.PixelContentChanged"/> event
            that this image data has been updated in the given
            <paramref name="rect"/>.
            </summary>
            <param name="rect">Affected area.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.RaisePixelContentChanged">
            <summary>
            Inform clients listening to the <see cref="E:Stemmer.Cvb.Image.PixelContentChanged"/> event
            that this image data has been completely updated (full area).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Image.RaisePixelContentChanged(Stemmer.Cvb.Rect)">
            <summary>
            Inform clients listening to the <see cref="E:Stemmer.Cvb.Image.PixelContentChanged"/> event
            that this image data has been updated in the given
            <paramref name="rect"/>.
            </summary>
            <param name="rect">Affected area.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.BeginPixelContentChange">
            <summary>
            Starts an image update block.
            </summary>
            <remarks>
            <para>Normally API operations changing this image will result in an
            immediate <see cref="E:Stemmer.Cvb.Image.PixelContentChanged"/> event. If several updates are
            performed they can be grouped together so that only one event is fired
            after the full block.</para>
            <para>Several blocks can also be nested. The event will then fired when
            the last block is closed.</para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Image.EndPixelContentChange">
            <summary>
            Ends an image update block.
            </summary>
            <remarks>
            See <see cref="M:Stemmer.Cvb.Image.BeginPixelContentChange"/> for additional information.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Image.StartPixelContentChangeBlock">
            <summary>
            Starts an image update block to be used in a <c>using</c> statement.
            </summary>
            <remarks>
            Calls <see cref="M:Stemmer.Cvb.Image.BeginPixelContentChange"/>. As soon as the returned
            object is disposed, the <see cref="M:Stemmer.Cvb.Image.EndPixelContentChange"/> is called.
            </remarks>
            <example>
            <code>
            using (myImage.StartPixelContentChangeBlock())
            {
              // perform image writing operations...
            }
            </code>
            </example>
            <returns>Disposable image update block.</returns>
        </member>
        <member name="E:Stemmer.Cvb.Image.HandleChanged">
            <summary>
            Event that is fired when the handle of
            this image changed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Image.ImageToPixelCoordinates(Stemmer.Cvb.Point2Dd)">
            <summary>
            Convert a pixel from image to pixel coordinates.
            </summary>
            <param name="p">Point in image coordinates</param>
            <returns>Same point in pixel coordinates</returns>
            <exception cref="T:System.ObjectDisposedException">If this image has
            already been disposed of.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.ImageToPixelCoordinates(Stemmer.Cvb.Area2D)">
            <summary>
            Convert an Area2D from image to pixel coordinates.
            </summary>
            <param name="area">Area in image coordinates.</param>
            <returns>Same area in pixel coordinates.</returns>
            <exception cref="T:System.ObjectDisposedException">If this image has
            already been disposed of.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.PixelToImageCoordinates(Stemmer.Cvb.Point2Dd)">
            <summary>
            Convert a pixel from pixel to image coordinates.
            </summary>
            <param name="p">Point in pixel coordinates</param>
            <returns>Same point in image coordinates</returns>
            <exception cref="T:System.ObjectDisposedException">If the image has already
            been disposed of.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.PixelToImageCoordinates(Stemmer.Cvb.Area2D)">
            <summary>
            Convert an Area2D from pixel to image coordinates.
            </summary>
            <param name="area">Area in pixel coordinates</param>
            <returns>Same area in image coordinates</returns>
            <exception cref="T:System.ObjectDisposedException">If the image has already
            been disposed of.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Image.CoordinateSystem">
            <summary>
            Coordinate system of the image.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the image has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Image.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="M:Stemmer.Cvb.Image.DisposeHandle(Stemmer.Cvb.Runtime.InteropServices.SafeCvbObjectHandle,System.Int64)">
            <summary>
            Helper to dispose the given image <paramref name="handle"/> outside
            the object scope.
            </summary>
            <param name="handle">Native image handle to release.</param>
            <param name="memoryPressure">Memory pressure to remove.</param>
        </member>
        <member name="E:Stemmer.Cvb.Image.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Image.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
            <remark>Call this method to release the resources allocated by this
            image immediately. Remember that after calling Dispose, any subsequent
            access to references to this image will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Image.Close">
            <summary>
            Alias of the <see cref="M:Stemmer.Cvb.Image.Dispose"/> method.
            </summary>
            <remark>Call this method to release the resources allocated by this
            image immediately. Remember that after calling Dispose, any subsequent
            access to references to this image will result in an
            ObjectDisposedException.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Image.Detach">
            <summary>
            Detaches this <see cref="T:Stemmer.Cvb.Image"/> object from the native <c>IMG</c>.
            </summary>
            <remarks>
            This call marks this object as disposed without changing the
            underlying ref-count.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Image.System#ICloneable#Clone">
            <summary>
            Creates a new <see cref="T:Stemmer.Cvb.Image"/> object that is a copy of the current
            instance.
            </summary>
            <remarks>
            <para>This method performs a deep copy of the image data the current
            instance currently points to.</para>
            <para>This means that if you clone a driver image, you receive a new
            plain <see cref="T:Stemmer.Cvb.Image"/> without any driver interfaces!</para>
            <para>Derived clones may work differently: e.g. a
            <see cref="T:Stemmer.Cvb.MappedImage"/> won't create deep copy, just a new
            mapping.</para>
            </remarks>
            <returns>A new <see cref="T:Stemmer.Cvb.Image"/> object that is a deep copy of this
            image data.
            </returns>
            <exception cref="T:System.InsufficientMemoryException">The new image buffer
            could not be created.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">If image format could not be cloned.
            </exception>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.CreateDataType(Stemmer.Cvb.PixelDataType,System.Int32)">
            <summary>
            Converts the given <paramref name="dataType"/> and
            <paramref name="bitDepth"/> into its native representation.
            </summary>
            <param name="dataType">Pixel data type.</param>
            <param name="bitDepth">Bits per pixel per plane.</param>
            <returns>Native representation of the given values.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the
            <paramref name="dataType"/>, <paramref name="bitDepth"/> combination
            is invalid.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Image.GuessMemoryPressure">
            <summary>
            Calculates a rough estimate of the minimal size the native image
            occupies.
            </summary>
            <returns>Rough estimate of memory pressure of this image.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Image.MemoryPressure">
            <summary>
            Info how much memory pressure this image provides.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Image.memoryPressure_">
            <summary>
            Contains the memory pressure set in the ctor.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Image.fileName_">
            <summary>
            Contains the file name of the image.
            </summary>
            <remarks>
            If the file name is present (e.g. when the file is loaded from disk)
            this contains the full path; empty if created in memory.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Image.handle_">
            <summary>
            safe handle to the image object
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Image.planes_">
            <summary>
            internal collection of plane data
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Image.imageDataLock_">
            <summary>
            Internal image data lock.
            </summary>
            <remarks>
            This is only used by the .Net API.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.DeviceUpdateMode">
            <summary>
            Defines how to treat the optional device image, when the device itself
            is updated.
            </summary>
            <remarks>
            <para>
            A method containing this as a parameter indicates a
            <see cref="P:Stemmer.Cvb.Device.Handle"/> change. This invalidates the old handle
            in a way that no <see cref="T:Stemmer.Cvb.Driver.IDeviceInterface"/>s are available anymore.
            The only thing remaining is the old ring buffer, but only with access to
            the last synchronized buffer.
            </para>
            <para>
            If a method call containing this as a parameter succeeds it is necessary
            for the client application to update the <see cref="P:Stemmer.Cvb.Device.Handle"/>
            in objects, that only use handle.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.DeviceUpdateMode.UpdateDeviceImage">
            <summary>
            Updates the handle of any existing device image.
            </summary>
            <remarks>
            <para>
            If unsure use this as the default.
            </para><para>
            The result of this operation is that the currently active device image
            is moved to the new device image internally. The result is that the
            current image buffer is lost and replaced by an empty/black buffer.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.DeviceUpdateMode.NewDeviceImage">
            <summary>
            Creates a new device image keeping the old one intact.
            </summary>
            <remarks>
            <para>
            Use this option if you still do processing on the old image data while
            performing the switch operation.
            </para><para>
            <c>Attention:</c> If you bound the old device image to a display or
            used it in another control to always access the current image data,
            keep in mind that you need to assign the new device image of the
            device manually.
            </para>
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.TriggerState">
            <summary>
            The current state of the <see cref="P:Stemmer.Cvb.Device.TriggerMode"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.TriggerState.NotSupported">
            <summary>
            Configuring the trigger is not supported by this device.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.TriggerState.Unknown">
            <summary>
            Trigger state is unknown (device/configuration dependent).
            </summary>
            <remarks>
            This is the default for a newly created device which supports the
            <i>ITrigger</i> interface.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.TriggerState.Off">
            <summary>
            Trigger is disabled (camera is in free-run).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.TriggerState.On">
            <summary>
            Trigger is enabled (either hardware or software dependent on
            configuration).
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ConnectionState">
            <summary>
            Current connection state of the <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ConnectionState.NotSupported">
            <summary>
            Connection state handling is not supported by the <see cref="T:Stemmer.Cvb.Device"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ConnectionState.Connected">
            <summary>
            The <see cref="T:Stemmer.Cvb.Device"/> object is currently connected to the remote
            hardware.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ConnectionState.Disconnected">
            <summary>
            The <see cref="T:Stemmer.Cvb.Device"/> object is currently disconnected from the
            remote hardware.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ConnectionStateChangeEventArgs">
            <summary>
            Event arguments of the <see cref="E:Stemmer.Cvb.Device.ConnectionStateChanged"/> event.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ConnectionStateChangeEventArgs.#ctor(Stemmer.Cvb.ConnectionState,Stemmer.Cvb.ConnectionState)">
            <summary>
            Ctor.
            </summary>
            <param name="oldState">Old state.</param>
            <param name="newState">New state.</param>
        </member>
        <member name="P:Stemmer.Cvb.ConnectionStateChangeEventArgs.OldState">
            <summary>
            The state before this event occurred.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ConnectionStateChangeEventArgs.NewState">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.StreamCollectionDebugView">
            <summary>
            Debug view of the stream collection.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.StreamCollectionDebugView._collection">
            <summary>
            Reference to the collection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.StreamCollectionDebugView.Items">
            <summary>
            This items of the collection as an array.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.StreamCollectionDebugView.#ctor(Stemmer.Cvb.StreamCollection)">
            <summary>
            Ctor.
            </summary>
            <param name="collection">Collection to view.</param>
        </member>
        <member name="T:Stemmer.Cvb.StreamCollection">
            <summary>
            A collection of <see cref="T:Stemmer.Cvb.Device"/> <see cref="T:Stemmer.Cvb.Driver.Stream"/>s.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.StreamCollection.#ctor(Stemmer.Cvb.Driver.Stream)">
            <summary>
            Creates the collection from a single stream.
            </summary>
            <param name="stream">The stream; or <c>null</c> for none.</param>
        </member>
        <member name="P:Stemmer.Cvb.StreamCollection.Count">
            <summary>
            Number of elements in the collection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.StreamCollection.Item(System.Int32)">
            <summary>
            Indexed access to the individual stream.
            </summary>
            <param name="index">index of the stream to be accessed</param>
            <returns>The stream at the given <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the
            <paramref name="index"/> is invalid</exception>
            <exception cref="T:System.ObjectDisposedException">If this device has already
            been disposed of.</exception>
        </member>
        <member name="M:Stemmer.Cvb.StreamCollection.GetEnumerator">
            <summary>
            Provides the enumerator for stream access.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Stemmer.Cvb.StreamCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provides the enumerator for stream access.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="F:Stemmer.Cvb.StreamCollection._stream">
            <summary>
            So far the single stream.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Device">
            <summary>
            Generic CVB physical device.
            </summary>
            <remarks>
            <para>A device may provide an image stream or just expose a
            configuration interface.</para>
            <para>See <see cref="T:Stemmer.Cvb.DeviceFactory"/> for creating instances of this
            object.</para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Device.#ctor(System.IntPtr,System.String)">
            <summary>
            Creates the device from the given CVB object <paramref name="handle"/>.
            </summary>
            <param name="handle">Handle to create object from.</param>
            <param name="resourceLocator">Access token or rooted path for the device file.</param>
        </member>
        <member name="M:Stemmer.Cvb.Device.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Device.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the
            <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Device.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
            <remark>Call this method to release the resources allocated by this
            device immediately. Remember that after calling <c>Dispose</c>, any
            subsequent access to references to this image will result in an
            <see cref="T:System.ObjectDisposedException"/>.</remark>
        </member>
        <member name="M:Stemmer.Cvb.Device.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><b>true</b> when called via
            <see cref="M:System.IDisposable.Dispose"/>, <b>false</b> when called by the
            finalizer.</param>
        </member>
        <member name="P:Stemmer.Cvb.Device.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
            <value><c>true</c> if this object has beed disposed; <c>false</c> if
            not.</value>
        </member>
        <member name="P:Stemmer.Cvb.Device.Handle">
            <summary>
            Gets the native CVB object handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="E:Stemmer.Cvb.Device.HandleChange">
            <summary>
            Fired if the native <see cref="P:Stemmer.Cvb.Device.Handle"/> changes due to an operation.
            </summary>
            <remarks>
            <para>
            You only need to register to this event if you are working directly
            with the native handle and assigned it to another object.
            </para><para>
            When this event is being fired, the change is in the middle of the
            process: all internal management has been changed (including the
            device <see cref="P:Stemmer.Cvb.Device.Handle"/>), but the old handle is still pointing to
            a valid object.
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Device.ChangeHandle(System.IntPtr,Stemmer.Cvb.DeviceUpdateMode)">
            <summary>
            Changes the handle of this device.
            </summary>
            <remarks>
            <para>
            This method will fire the <see cref="E:Stemmer.Cvb.Device.HandleChange"/> event and
            release the old handle afterwards. So if you need it otherwise,
            share it natively.
            </para><para>
            Always call the parent implementation if overriding this method to
            actually exchange the handle.
            </para>
            </remarks>
            <param name="newHandle">New handle to use in this device.</param>
            <param name="mode">Information how to handle device images, if any is
            present.</param>
        </member>
        <member name="M:Stemmer.Cvb.Device.GuessFramePressure(System.IntPtr)">
            <summary>
            Guesses the memory pressure of one image frame of the given image
            <paramref name="handle"/>.
            </summary>
            <param name="handle"><i>IImageVPA</i> handle.</param>
            <returns>Guessed memory pressure in bytes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Device.OnImageAcquired(Stemmer.Cvb.Image)">
            <summary>
            A <see cref="T:Stemmer.Cvb.Driver.Stream"/> currently acquiring images
            calls this method to inform the device of newly acquired images.
            </summary>
            <param name="image">Newly acquired image.</param>
        </member>
        <member name="P:Stemmer.Cvb.Device.ResourceLocator">
            <summary>
            Gets the access token or path of the file name including its extension.
            </summary>
            <value>String containing the access token or rooted path for a file
            name.</value>
        </member>
        <member name="P:Stemmer.Cvb.Device.DebugLocator">
            <summary>
            For object display identifying the driver.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Device.DriverGuid">
            <summary>
            Get the globally unique identifier of a CVB driver.
            </summary>
            <value>
            GUID of the driver this device resides in.
            </value>
            <remarks>
            A CVB driver is everything which implements the <c>IGrabber</c>
            interface. These can be Video Interface (Vin) drivers or Videos (Avis)
            or file lists (Emu).
            </remarks>
            <exception cref="T:System.ObjectDisposedException">If this device has already
            been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Device.TriggerMode">
            <summary>
            Gets or sets the trigger mode of the device if possible.
            </summary>
            <remarks>
            Setting the trigger mode is only possible if this value is not
            <see cref="F:Stemmer.Cvb.TriggerState.NotSupported"/>.
            </remarks>
            <value>
            A value of <see cref="F:Stemmer.Cvb.TriggerState.Unknown"/> indicates the trigger
            mode has not yet been set by the user and is device configuration
            dependent.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Device.StreamCount">
            <summary>
            Number of streams this device has.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Device.GetStream``1(System.Int32)">
            <summary>
            Gets the typed stream at the given <paramref name="streamIndex"/>.
            </summary>
            <typeparam name="T">Type of the stream to get.</typeparam>
            <param name="streamIndex">Index of the stream to get.</param>
            <returns>Typed stream.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Device.Stream">
            <summary>
            Convenience property to access the first stream if present.
            </summary>
            <value>
            The first available stream or <c>null</c> otherwise.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Device.Streams">
            <summary>
            Access to the available acquisition streams of this device.
            </summary>
            <value>
            Collection of streams for acquisition.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Device.DeviceImage">
            <summary>
            Gets, if available, the device image pointing to the latest
            synchronized image.
            </summary>
            <remarks>
            <para>
            These kind of images are often used for display purposes (e.g. bound
            to a display's image property.
            </para><para>
            Even when acquisition is running the returned image object will not
            change! Only the buffer content changes.
            </para>
            </remarks>
            <value>
            Device image object if applicable to this driver; <c>null</c> if none
            available. <see cref="T:Stemmer.Cvb.Driver.NonStreamingDevice"/>s do not have images for
            instance.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Device.DeviceControl">
            <summary>
            Gets the <c>IDeviceControl</c> interface if present.
            </summary>
            <value>Object for accessing the interface; <c>null</c> if not
            available.</value>
        </member>
        <member name="P:Stemmer.Cvb.Device.DigitalIO">
            <summary>
            Gets the <c>IDigitalIO</c> interface object if present.
            </summary>
            <value>Object for accessing the interface; <c>null</c> if not
            available.</value>
        </member>
        <member name="P:Stemmer.Cvb.Device.SoftwareTrigger">
            <summary>
            Gets the <c>ISoftwareTrigger</c> interface object if present.
            </summary>
            <value>Object for accessing the interface; <c>null</c> if not
            available.</value>
        </member>
        <member name="P:Stemmer.Cvb.Device.NodeMaps">
            <summary>
            Gets the dictionary holding all available <see cref="T:Stemmer.Cvb.GenApi.NodeMap"/>s.
            </summary>
            <value>
            Dictionary containing all available node maps. <c>null</c> if no
            node map interface is available on this device.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Device.RegPort">
            <summary>
            Gets the register port interface of this device if present.
            </summary>
            <value>Object for accessing the interface; <c>null</c> if not
            available.</value>
        </member>
        <member name="P:Stemmer.Cvb.Device.ImageRect">
            <summary>
            Gets the <c>IImageRect</c> interface object if present.
            </summary>
            <value>Object for accessing the interface; <c>null</c> if not
            available.</value>
        </member>
        <member name="P:Stemmer.Cvb.Device.Notify">
            <summary>
            Gets the <c>INotify</c> <see cref="T:Stemmer.Cvb.Driver.INotifyObservable"/>s if present.
            </summary>
            <value>
            Dictionary containing all available observables. <c>null</c> if no
            node map interface is available on this device.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Device.ConnectionState">
            <summary>
            Gets the current <see cref="T:Stemmer.Cvb.ConnectionState"/> of this
            <b>Device</b> object.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Device.ConnectionStateChanged">
            <summary>
            Event that is fired when the <see cref="P:Stemmer.Cvb.Device.ConnectionState"/> changes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Device.LockAnchor">
            <summary>
            Lock anchor for device specific thread synchronization.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.PlaneConfiguration">
            <summary>
            Structure defining the plane order for painting <see cref="T:Stemmer.Cvb.Image"/> 
            objects.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PlaneConfiguration.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Plane Configuration constructor.
            </summary>
            <param name="redPlane">Index of the red colour plane</param>
            <param name="greenPlane">Index of the green colour plane</param>
            <param name="bluePlane">Index of the blue colour plane</param>
        </member>
        <member name="M:Stemmer.Cvb.PlaneConfiguration.#ctor(Stemmer.Cvb.Image)">
            <summary>
            Create an appropriate default plane configuration for an image.
            </summary>
            <param name="img">Image to create the configuration for</param>
            <exception cref="T:System.NullReferenceException">If <paramref name="img"/> is
            null</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="img"/>
            has already been disposed</exception>
        </member>
        <member name="F:Stemmer.Cvb.PlaneConfiguration.RedPlane">
            <summary>
            Index of the red color plane.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneConfiguration.GreenPlane">
            <summary>
            Index of the green color plane;
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneConfiguration.BluePlane">
            <summary>
            Index of the blue color plane.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.HighBitScaleMode">
            <summary>
            Defines the mode that is being used for scaling high bit images (more 
            than 8 bits per pixel) to an 8 bit display.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.HighBitScaleMode.Default">
            <summary>
            Default treatment applies the mode <see cref="F:Stemmer.Cvb.HighBitScaleMode.Global"/> to 8 bit 
            images and the mode <see cref="F:Stemmer.Cvb.HighBitScaleMode.ViewPort"/> otherwise.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.HighBitScaleMode.Global">
            <summary>
            Apply global scaling (i.e. use the global maximum and minimum value of
            the source data type to scale to 8 bits). This mode cannot be used 
            on images with floating point valued pixels; if an image with floating
            point pixels is encountered, the <see cref="F:Stemmer.Cvb.HighBitScaleMode.ViewPort"/> mode will be
            used instead.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.HighBitScaleMode.ViewPort">
            <summary>
            Scale according to the local view port: The view port is being 
            searched for the minimum and maximum pixel value, and the pixel values
            that are currently visible (i.e. inside the view port) will be scaled
            to the full range of 0...255.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.HighBitScaleMode.WrapAround">
            <summary>
            Display images with > 8 bits per pixel by limiting the display to
            the lowest 8 bits. This is not a particularly beautiful display mode
            for high bit images because it will show extreme contrasts where that
            8 bit wrap around happens, but it used to be the only display mode in
            the CVB display.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.PlaneLinkCollection">
            <summary>
            Collection of linked planes of a <see cref="T:Stemmer.Cvb.MappedImage"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.PlaneLinkCollection._links">
            <summary>
            Links to other images' infos.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PlaneLinkCollection.#ctor(Stemmer.Cvb.ImagePlane[])">
            <summary>
            Ctor.
            </summary>
            <param name="links">Plane links.</param>
        </member>
        <member name="P:Stemmer.Cvb.PlaneLinkCollection.Count">
            <summary>
            Gets the number of infos in this collection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.PlaneLinkCollection.Item(System.Int32)">
            <summary>
            Indexed access to the individual plane information.
            </summary>
            <remarks>
            The plane <paramref name="index"/> identifies the plane of the parent
            image to retrieve the actual linked plane.
            </remarks>
            <param name="index">index of the plane to be accessed</param>
            <returns>Plane information object of the linked plane.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
        </member>
        <member name="M:Stemmer.Cvb.PlaneLinkCollection.GetEnumerator">
            <summary>
            Provides the enumerator for plane information access.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Stemmer.Cvb.PlaneLinkCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provides the enumerator for plane information access.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="T:Stemmer.Cvb.MappedImage">
            <summary>
            A mapped Common Vision Blox image.
            </summary>
            <remarks>
            <para>A mapped image does not own the image data, but references the 
            image data of another image's plane.</para>
            <para>With a mapped image you can cheaply create different views on one
            or several images. So be careful when writing to the pixel data of a
            mapped image.</para>
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.MappedImage.LinkedPlanes">
            <summary>
            Gets the linked infos of this objects image infos.
            </summary>
            <remarks>
            The plane index of the returned collection maps the plane index of
            this image to the actual linked plane.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.MappedImage.#ctor(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject,Stemmer.Cvb.ImagePlane[])">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Mapped image handle.</param>
            <param name="doShare"><see cref="F:Stemmer.Cvb.Runtime.InteropServices.ShareObject.Yes"/> if 
            <paramref name="handle"/> is to be shared.</param>
            <param name="links">Linked image infos.</param>
        </member>
        <member name="M:Stemmer.Cvb.MappedImage.Dispose(System.Boolean)">
            <summary>
            Unregisters the events on the linked images.
            </summary>
            <param name="disposing"><c>true</c> if called from 
            <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="M:Stemmer.Cvb.MappedImage.OnPixelContentChanged(Stemmer.Cvb.Rect)">
            <summary>
            Handles forwarding the updated events in both directions.
            </summary>
            <param name="rect">Rectangle to be updated.</param>
        </member>
        <member name="M:Stemmer.Cvb.MappedImage.Clone">
            <summary>
            Creates a new mapped image mapping the same source image.
            </summary>
            <remarks>
            If you need an actual copied image use the 
            <see cref="M:Stemmer.Cvb.Image.Copy"/> method.
            </remarks>
            <returns>New cloned mapped image.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Point2D">
            <summary>
            Multi-purpose 2D Point class
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.#ctor(Stemmer.Cvb.Point2D)">
            <summary>
            Create a Point2D from a <see cref="T:Stemmer.Cvb.Point2D"/>.
            </summary>
            <param name="p">Point to initialize with</param>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a Point2D from the x and y component.
            </summary>
            <param name="x">data to initialize with</param>
            <param name="y">data to initialize with</param>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.#ctor(System.Int32)">
            <summary>
            Create a new instance of the <see cref="T:Stemmer.Cvb.Point2D"/> structure and
            initialize both components to the same value.
            </summary>
            <param name="n">value to initialize <c>X</c> and <c>Y</c> with.
            </param>
        </member>
        <member name="P:Stemmer.Cvb.Point2D.X">
            <summary>
            x component of the rhs
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point2D.Y">
            <summary>
            y component of the rhs
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point2D.Item(System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The element to access (0 is <see cref="P:Stemmer.Cvb.Point2D.X"/>).</param>
            <returns></returns>
        </member>
        <member name="F:Stemmer.Cvb.Point2D.Empty">
            <summary>
            Empty rhs
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Point2D.UnitVectorX">
            <summary>
            Unit rhs in x direction
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Point2D.UnitVectorY">
            <summary>
            Unit rhs in y direction
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.Equals(System.Object)">
            <summary>
            Compares this point with the given <paramref name="obj"/>.
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a
            <b>Point2D</b> and the components are equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.Equals(Stemmer.Cvb.Point2D)">
            <summary>
            Compares this point with the given <paramref name="rhs"/> one.
            </summary>
            <param name="rhs">Point to compare with.</param>
            <returns><see langword="true"/> if components are equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this PointD</returns>
        </member>
        <member name="P:Stemmer.Cvb.Point2D.Length">
            <summary>
            Gets the length of the vector represented by this PointD object.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.op_Subtraction(Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Subtraction operator for PointD structures.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>Difference of <paramref name="lhs"/> and 
            <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.op_Addition(Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Addition operator for PointD structures.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.op_Inequality(Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Comparison operator for PointD structures.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>true lhs != rhs, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.op_Equality(Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Comparison operator for PointD structures.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>true lhs == rhs, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.op_Multiply(Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Inner product of two PointD structure.
            </summary>
            <param name="lhs">left hand side vector</param>
            <param name="rhs">right hand side vector</param>
            <returns>Inner product of <paramref name="lhs"/> and 
            <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2D.op_Multiply(System.Int32,Stemmer.Cvb.Point2D)">
            <summary>
            Multiply a PointD with a number.
            </summary>
            <param name="rhs">rhs to multiply with</param>
            <param name="lhs">lhs to multiply with</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.Size2D">
            <summary>
            Stores an ordered pair of integers, typical the width and height of a 
            <see cref="T:Stemmer.Cvb.Rect"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Size2D.Empty">
            <summary>
            Gets a <see cref="T:Stemmer.Cvb.Size2D"/> with <see cref="P:Stemmer.Cvb.Size2D.Width"/> and 
            <see cref="P:Stemmer.Cvb.Size2D.Height"/>
            value of 0.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a size with a given <paramref name="width"/> and 
            <paramref name="height"/>.
            </summary>
            <param name="width">Horizontal component of the size.</param>
            <param name="height">Vertical component of the size.</param>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.#ctor(Stemmer.Cvb.Point2D)">
            <summary>
            Creates a size from the given point's <paramref name="pt"/> horizontal
            and vertical components.
            </summary>
            <param name="pt">Point to initialize the size with.</param>
        </member>
        <member name="P:Stemmer.Cvb.Size2D.Width">
            <summary>
            Gets/sets the horizontal component of the size.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Size2D.Height">
            <summary>
            Gets/sets the vertical component of the size.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.Add(Stemmer.Cvb.Size2D,Stemmer.Cvb.Size2D)">
            <summary>
            Adds the width and height of one <see cref="T:Stemmer.Cvb.Size2D"/> structure width 
            and height of another one.
            </summary>
            <param name="sz1">First size to add.</param>
            <param name="sz2">Second size to add.</param>
            <returns>Resulting <c>SizeD</c> from the addition operation.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.Subtract(Stemmer.Cvb.Size2D,Stemmer.Cvb.Size2D)">
            <summary>
            Subtracts the width and height of one <see cref="T:Stemmer.Cvb.Size2D"/> structure
            width and height of another one.
            </summary>
            <param name="sz1">First size to subtract.</param>
            <param name="sz2">Second size to subtract.</param>
            <returns>Resulting <c>SizeD</c> from the subtract operation.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.ToString">
            <summary>
            Gets the string representation of this size.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.op_Explicit(Stemmer.Cvb.Size2D)~Stemmer.Cvb.Point2D">
            <summary>
            Converts the given <paramref name="sz"/> to a <see cref="T:Stemmer.Cvb.Point2D"/>.
            </summary>
            <param name="sz">Size to convert.</param>
            <returns>New <c>PointD</c>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.op_Addition(Stemmer.Cvb.Size2D,Stemmer.Cvb.Size2D)">
            <summary>
            Adds the width and height of one <see cref="T:Stemmer.Cvb.Size2D"/> structure width 
            and height of another one.
            </summary>
            <param name="sz1">First size to add.</param>
            <param name="sz2">Second size to add.</param>
            <returns>Resulting <c>SizeD</c> from the addition operation.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.op_Subtraction(Stemmer.Cvb.Size2D,Stemmer.Cvb.Size2D)">
            <summary>
            Subtracts the width and height of one <see cref="T:Stemmer.Cvb.Size2D"/> structure 
            width and 
            height of another one.
            </summary>
            <param name="sz1">First size to subtract.</param>
            <param name="sz2">Second size to subtract.</param>
            <returns>Resulting <see cref="T:Stemmer.Cvb.Size2D"/> from the subtract operation.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.op_Equality(Stemmer.Cvb.Size2D,Stemmer.Cvb.Size2D)">
            <summary>
            Tests whether two sizes are equal.
            </summary>
            <param name="sz1">First size to test.</param>
            <param name="sz2">Second size to test.</param>
            <returns><c>true</c> if they are exactly equal; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.op_Inequality(Stemmer.Cvb.Size2D,Stemmer.Cvb.Size2D)">
            <summary>
            Tests whether two sizes are unequal.
            </summary>
            <param name="sz1">First size to test.</param>
            <param name="sz2">Second size to test.</param>
            <returns><c>true</c> if they are unequal; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.Equals(System.Object)">
            <summary>
            Tests whether two objects are <see cref="T:Stemmer.Cvb.Size2D"/> and equal.
            </summary>
            <param name="obj">Object to test.</param>
            <returns><c>true</c> if they are exactly equal; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2D.GetHashCode">
            <summary>
            Default implementation.
            </summary>
            <returns>Default hash code.</returns>
        </member>
        <member name="T:Stemmer.Cvb.WrappedImage">
            <summary>
            A wrapped image wraps another pixel buffer without owning it.
            </summary>
            <remarks>
            Note that this class is not intended for general use. Providing invalid 
            values or not ensuring the validity of the associated buffer at all 
            times will most likely lead to severe problems in your application.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.WrappedImage.PixelFormatInfo">
            <summary>
            Information extracted from Bitmap pixel format.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.WrappedImage.PixelFormatInfo.DataType">
            <summary>
            Basic pixel data type.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.WrappedImage.PixelFormatInfo.BitsPerPixel">
            <summary>
            Bits per pixel (per plane).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.WrappedImage.PixelFormatInfo.PixelStride">
            <summary>
            Distance between two neighboring pixels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.WrappedImage.PixelFormatInfo.BaseOffset">
            <summary>
            Offset to the base address for logical CVB image base address.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.WrappedImage.PixelFormatInfo.PlaneOrder">
            <summary>
            Mapping between memory layout and logical CVB image planes.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.WrappedImage.#ctor(System.IntPtr,Stemmer.Cvb.Runtime.InteropServices.ShareObject)">
            <summary>
            Ctor.
            </summary>
            <param name="handle">Handle of wrapped image.</param>
            <param name="doShare">Value indicating whether the handle is shared or 
            not</param>
        </member>
        <member name="M:Stemmer.Cvb.WrappedImage.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.PixelDataType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Wraps, without copying, the given pixel buffer in a 
            <see cref="T:Stemmer.Cvb.Image"/>.
            </summary>
            <remarks>
            <para>The number of planes is deduced from the length of the 
            <paramref name="planeOrder"/> array.</para>
            <para>This method does not add memory pressure as the memory is 
            managed elsewhere.</para>
            </remarks>
            <param name="buffer">Pointer to the start of the pixel buffer.</param>
            <param name="bufferSize">Size of the <paramref name="buffer"/> in
            bytes.</param>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="dataType">Pixel data type.</param>
            <param name="bitDepth">Bits per pixel per plane.</param>
            <param name="pixelStride">Distance in bytes between two neighbouring
            pixels of the same plane, i.e. 1 for normal Mono8 images.</param>
            <param name="lineStride">Distance in bytes between two neighbouring
            lines of the same plane, i.e. <paramref name="width"/> + optional 
            padding for Mono8 images.</param>
            <param name="planeStride">Distance in bytes between two neighbouring
            infos, i.e. 1 for an interleaved RGB8 image.</param>
            <param name="planeOrder">Defines the mapping between the 
            <paramref name="buffer"/> plane layout and the logical CVB infos
            (R/G/B by default), i.e. (0,1,2) for an RGB8 image and (2,1,0) for a
            BGR8 image.</param>
            <returns>Newly created image handle.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the 
            <paramref name="dataType"/>, <paramref name="bitDepth"/> combination 
            is invalid.</exception>
        </member>
        <member name="M:Stemmer.Cvb.WrappedImage.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.PixelDataType,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.PlaneConfiguration)">
            <summary>
            Wraps, without copying, the given 3-plane pixel buffer in a 
            <see cref="T:Stemmer.Cvb.Image"/>.
            </summary>
            <remarks>
            This method does not add memory pressure as the memory is managed 
            elsewhere.
            </remarks>
            <param name="buffer">Pointer to the start of the pixel buffer.</param>
            <param name="bufferSize">Size of the <paramref name="buffer"/> in
            bytes.</param>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="dataType">Pixel data type.</param>
            <param name="bitDepth">Bits per pixel per plane.</param>
            <param name="pixelStride">Distance in bytes between two neighbouring
            pixels of the same plane, i.e. 1 for normal Mono8 images.</param>
            <param name="lineStride">Distance in bytes between two neighbouring
            lines of the same plane, i.e. <paramref name="width"/> + optional 
            padding for Mono8 images.</param>
            <param name="planeStride">Distance in bytes between two neighbouring
            infos, i.e. 1 for an interleaved RGB8 image.</param>
            <param name="planeOrder">Defines the mapping between the 
            <paramref name="buffer"/> plane layout and the logical CVB infos.
            </param>
            <returns>Newly created image.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the 
            <paramref name="dataType"/>, <paramref name="bitDepth"/> combination 
            is invalid.</exception>
        </member>
        <member name="M:Stemmer.Cvb.WrappedImage.Create(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.PixelDataType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Wraps, without copying, the given pixel buffer in a 
            <see cref="T:Stemmer.Cvb.Image"/>.
            </summary>
            <remarks>
            This method does not add memory pressure as the memory is managed 
            elsewhere.
            </remarks>
            <param name="buffer">Pointer to the start of the pixel buffer.</param>
            <param name="bufferSize">Size of the <paramref name="buffer"/> in
            bytes.</param>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="numPlanes">Number of (color) infos.</param>
            <param name="dataType">Pixel data type.</param>
            <param name="bitDepth">Bits per pixel per plane.</param>
            <param name="pixelStride">Distance in bytes between two neighbouring
            pixels of the same plane, i.e. 1 for normal Mono8 images.</param>
            <param name="lineStride">Distance in bytes between two neighbouring
            lines of the same plane, i.e. <paramref name="width"/> + optional 
            padding for Mono8 images.</param>
            <param name="planeStride">Distance in bytes between two neighbouring
            infos, i.e. 1 for an interleaved RGB8 image.</param>
            <param name="planeOrder">Defines the mapping between the 
            <paramref name="buffer"/> plane layout and the logical CVB infos
            (R/G/B by default), i.e. (0,1,2) for an RGB8 image and (2,1,0) for a
            BGR8 image.</param>
            <returns>Newly created image handle.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the 
            <paramref name="dataType"/>, <paramref name="bitDepth"/> combination 
            is invalid.</exception>
        </member>
        <member name="M:Stemmer.Cvb.WrappedImage.FromGreyPixels(System.IntPtr,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.PixelDataType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps, without copying, the given monochrome pixel buffer in a 
            <see cref="T:Stemmer.Cvb.Image"/>.
            </summary>
            <remarks>
            This method does not add memory pressure as the memory is managed 
            elsewhere.
            </remarks>
            <param name="buffer">Pointer to the start of the pixel buffer.</param>
            <param name="bufferSize">Size of the <paramref name="buffer"/> in
            bytes.</param>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="dataType">Pixel data type.</param>
            <param name="bitDepth">Bits per pixel per plane.</param>
            <param name="pixelStride">Distance in bytes between two neighbouring
            pixels of the same plane, i.e. 1 for normal Mono8 images.</param>
            <param name="lineStride">Distance in bytes between two neighbouring
            lines of the same plane, i.e. <paramref name="width"/> + optional 
            padding for Mono8 images.</param>
            <returns>Newly created image.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the 
            <paramref name="dataType"/>, <paramref name="bitDepth"/> combination 
            is invalid.</exception>
        </member>
        <member name="M:Stemmer.Cvb.WrappedImage.FromGrey8Pixels(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps, without copying, the given Mono8 pixel buffer in a 
            <see cref="T:Stemmer.Cvb.Image"/>.
            </summary>
            <remarks>
            This method does not add memory pressure as the memory is managed 
            elsewhere.
            </remarks>
            <param name="buffer">Pointer to the start of the pixel buffer.</param>
            <param name="bufferSize">Size of the <paramref name="buffer"/> in
            bytes.</param>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <returns>Newly created image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.WrappedImage.FromRgbPixels(System.IntPtr,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.PixelDataType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps, without copying, the given RGB pixel buffer in a 
            <see cref="T:Stemmer.Cvb.Image"/>.
            </summary>
            <remarks>
            This method does not add memory pressure as the memory is managed 
            elsewhere.
            </remarks>
            <param name="buffer">Pointer to the start of the pixel buffer.</param>
            <param name="bufferSize">Size of the <paramref name="buffer"/> in
            bytes.</param>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="dataType">Pixel data type.</param>
            <param name="bitDepth">Bits per pixel per plane.</param>
            <param name="pixelStride">Distance in bytes between two neighbouring
            pixels of the same plane, i.e. 1 for normal Mono8 images.</param>
            <param name="lineStride">Distance in bytes between two neighbouring
            lines of the same plane, i.e. <paramref name="width"/> + optional 
            padding for Mono8 images.</param>
            <param name="planeStride">Distance in bytes between two neighbouring
            infos, i.e. 1 for an interleaved RGB8 image.</param>
            <returns>Newly created image.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the 
            <paramref name="dataType"/>, <paramref name="bitDepth"/> combination 
            is invalid.</exception>
        </member>
        <member name="M:Stemmer.Cvb.WrappedImage.FromBgrPixels(System.IntPtr,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.PixelDataType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Wraps, without copying, the given BGR pixel buffer in a 
            <see cref="T:Stemmer.Cvb.Image"/>.
            </summary>
            <remarks>
            This method does not add memory pressure as the memory is managed 
            elsewhere.
            </remarks>
            <param name="buffer">Pointer to the start of the pixel buffer.</param>
            <param name="bufferSize">Size of the <paramref name="buffer"/> in
            bytes.</param>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="dataType">Pixel data type.</param>
            <param name="bitDepth">Bits per pixel per plane.</param>
            <param name="pixelStride">Distance in bytes between two neighbouring
            pixels of the same plane, i.e. 1 for normal Mono8 images.</param>
            <param name="lineStride">Distance in bytes between two neighbouring
            lines of the same plane, i.e. <paramref name="width"/> + optional 
            padding for Mono8 images.</param>
            <param name="planeStride">Distance in bytes between two neighbouring
            infos, i.e. 1 for an interleaved RGB8 image.</param>
            <returns>Newly created image.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When the 
            <paramref name="dataType"/>, <paramref name="bitDepth"/> combination 
            is invalid.</exception>
        </member>
        <member name="M:Stemmer.Cvb.WrappedImage.Clone">
            <summary>
            Creates a new wrapped image mapping the same source image.
            </summary>
            <remarks>
            If you need an actual copied image use the 
            <see cref="M:Stemmer.Cvb.Image.Copy"/> method.
            </remarks>
            <returns>New cloned mapped image.</returns>
        </member>
        <member name="T:Stemmer.Cvb.DataType">
            <summary>
            Data type description for a <see cref="T:Stemmer.Cvb.Image"/> plane.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.DataType.#ctor(System.Int32)">
            <summary>
            Construct from the plain value that ImageDatatype returned.
            </summary>
            <param name="dataTypeDescriptor"></param>
        </member>
        <member name="M:Stemmer.Cvb.DataType.FromUnmanagedDescriptor(System.Int32)">
            <summary>
            Construct a data type descriptor from one of the native library's 
            unmanaged descriptor values.
            </summary>
            <param name="dataTypeDescriptor">Unmanaged descriptor value.</param>
            <returns>Data type descriptor object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.DataType.BitsPerPixel">
            <summary>
            Number of actually valid bits per pixel.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.DataType.BytesPerPixel">
            <summary>
            Number of bytes that each pixel occupies.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.DataType.IsFloat">
            <summary>
            Gets whether the plane's pixels have floating point values.
            </summary>
            <value>true/false</value>
        </member>
        <member name="P:Stemmer.Cvb.DataType.IsSignedInteger">
            <summary>
            Gets whether the plane's pixels have signed integer values.
            </summary>
            <value>true/false</value>
        </member>
        <member name="P:Stemmer.Cvb.DataType.IsUnsignedInteger">
            <summary>
            Gets whether the plane's pixels have unsigned integer values.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.DataType.HasOverlayBit">
            <summary>
            Gets whether bit 0 of the plane's pixels is being used as an overlay
            indicator bit.
            </summary>
            <value>true/false</value>
        </member>
        <member name="P:Stemmer.Cvb.DataType.IsComplexPacked">
            <summary>
            Indicates whether or not the plane contains a complex packed image
            format that makes use of the hermitian symmetries in images resulting 
            from Fourier transformation of a real-valued image. 
            </summary>
            <remarks>Image infos of this type are usually not usable directly.
            </remarks>
            <value>true/false</value>
        </member>
        <member name="P:Stemmer.Cvb.DataType.MinVal">
            <summary>
            Minimum pixel value that fits this data type
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.DataType.MaxVal">
            <summary>
            Maximum pixel value that fits this data type
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.DataType.NumericType">
            <summary>
            Returns the basic numeric type of the pixels.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.DataType.ClrType">
            <summary>
            Returns a type object that indicates the appropriate CLR type (where
            applicable) in which to store pixels of the given data type or
            <c>null</c> if no appropriate CLR type exists.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.DataType.UndefinedVal">
            <summary>
            Pixel value for those pixels whose value cannot be defined properly
            e.g. where in scanning situations pixels outside the image are 
            accessed
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.DataType.NativeDescriptor">
            <summary>
            Native data type value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.DataType.op_Equality(Stemmer.Cvb.DataType,Stemmer.Cvb.DataType)">
            <summary>
            Comparison operator for DataType objects.
            </summary>
            <param name="lhs">Left hand side object</param>
            <param name="rhs">Right hand side object</param>
            <returns>true if the left hand side object and the right hand side
            object are identical, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.DataType.op_Inequality(Stemmer.Cvb.DataType,Stemmer.Cvb.DataType)">
            <summary>
            Comparison operator for DataType objects.
            </summary>
            <param name="lhs">Left hand side object</param>
            <param name="rhs">Right hand side object</param>
            <returns>false if the left hand side object and the right hand side
            object are identical, true otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.DataType.Equals(System.Object)">
            <summary>
            Comparison function.
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>true if obj == this, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.DataType.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Stemmer.Cvb.DataType.ToString">
            <summary>
            Gets a string representation of this data type.
            </summary>
            <remarks>
            The following prefixes are available:
            <list type="table">
            <item>
              <term>f</term><description>Floating point image.</description>
              <term>s</term><description>Signed integer image.</description>
              <term>cp</term><description>Complex packed image.</description>
            </item>
            If no prefix is displayed it is an unsigned integer image. The postfix
            '(o)' means that the image uses an overlay bit.
            </list>
            </remarks>
            <returns>Short string representation of the data type.</returns>
        </member>
        <member name="T:Stemmer.Cvb.DataTypes">
            <summary>
            Contains common CVB <see cref="T:Stemmer.Cvb.DataType"/>s.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DataTypes.Int8BppUnsigned">
            <summary>
            Represents 8-bit unsigned integer pixels (bytes). 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DataTypes.Int8BppSigned">
            <summary>
            Represents 8-bit signed integer pixels. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DataTypes.Int10BppUnsigned">
            <summary>
            Represents 10-bit unsigned integer pixels. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DataTypes.Int12BppUnsigned">
            <summary>
            Represents 12-bit unsigned integer pixels. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DataTypes.Int16BppUnsigned">
            <summary>
            Represents 16-bit unsigned integer pixels. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DataTypes.Int16BppSigned">
            <summary>
            Represents 16-bit signed integer pixels. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DataTypes.Float32Bpp">
            <summary>
            Represents single precision (32-bit) floating point pixels. 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.DataTypes.Float64Bpp">
            <summary>
            Represents double precision (64-bit) floating point pixels. 
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ImagePlaneExtensions">
            <summary>
            Extension methods used on image planes.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlaneExtensions.DereferenceAs``1(System.Collections.Generic.IEnumerable{System.IntPtr})">
            <summary>
            Dereferences the given <paramref name="source"/> range as a <c>T</c>.
            </summary>
            <remarks>
            <para>
            Dereferencing a pointer means getting the value at the location 
            pointed to.
            </para><para>
            <c>Attention:</c> if the type <c>T</c> does not match the actual type
            at the pointer, the result is undefined. Also do not use structs 
            containing reference types.
            </para>
            </remarks>
            <typeparam name="T">Type to use for dereferencing.</typeparam>
            <param name="source">Pointer range to dereference.</param>
            <returns>Enumerable of the dereferenced values.</returns>
        </member>
        <member name="T:Stemmer.Cvb.OverlayBitDrawMode">
            <summary>
            Specifies whether overlay bits are set or erased in the draw operation.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.OverlayBitDrawMode.Set">
            <summary>
            Draw operation sets overlay bits.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.OverlayBitDrawMode.Erase">
            <summary>
            Draw operation erases overlay bits.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.OverlayBitDrawer">
            <summary>
            Immediate mode drawing on <see cref="T:Stemmer.Cvb.Image"/> overlay plane(s).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawLine(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws/erases a line on the given <see cref="T:Stemmer.Cvb.Image"/> overlay
            <paramref name="plane"/> depending on <paramref name="mode"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="x1">X component of start point.</param>
            <param name="y1">Y component of start point.</param>
            <param name="x2">X component of end point.</param>
            <param name="y2">Y component of end point.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
            <exception cref="T:System.FormatException"><paramref name="plane"/> has no 
            overlay bit set (not an overlay <see cref="T:Stemmer.Cvb.Image" />).</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawLine(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Draws/erases a line on the given <see cref="T:Stemmer.Cvb.Image"/> overlay
            <paramref name="plane"/> depending on <paramref name="mode"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="pt1">Start point.</param>
            <param name="pt2">End point.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
            <exception cref="T:System.FormatException"><paramref name="plane"/> has no 
            overlay bit set (not an overlay <see cref="T:Stemmer.Cvb.Image" />).</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawLine(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Geometry2D.Line)">
            <summary>
            Draws/erases a line on the given <see cref="T:Stemmer.Cvb.Image"/> overlay
            <paramref name="plane"/> depending on <paramref name="mode"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="line">Line to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
            <exception cref="T:System.FormatException"><paramref name="plane"/> has no 
            overlay bit set (not an overlay <see cref="T:Stemmer.Cvb.Image" />).</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawLines(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Point2D[])">
            <summary>
            Draws multiple connected lines as by the given 
            <paramref name="points"/> on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="points">Points to draw lines with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="points"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawLine(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="x1">X component of start point.</param>
            <param name="y1">Y component of start point.</param>
            <param name="x2">X component of end point.</param>
            <param name="y2">Y component of end point.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawLine(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Draws a line on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="pt1">Start point.</param>
            <param name="pt2">End point.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawLine(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Geometry2D.Line)">
            <summary>
            Draws a line on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="line">Line to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawLines(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Point2D[])">
            <summary>
            Draws multiple connected lines as by the given 
            <paramref name="points"/> on all <paramref name="image"/> planes.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="points">Points to draw lines with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or
            <paramref name="points"/> is <c>null</c> (<c>Nothing</c> in Visual 
            Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawCircle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a circle border on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the circle.</param>
            <param name="centerY">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawCircle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Point2D,System.Int32)">
            <summary>
            Draws a circle border on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawCircle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Geometry2D.Circle)">
            <summary>
            Draws a circle border on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="circle">Circle to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawCircle(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a circle border on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the circle.</param>
            <param name="centerY">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawCircle(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Point2D,System.Int32)">
            <summary>
            Draws a circle border on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawCircle(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Geometry2D.Circle)">
            <summary>
            Draws a circle border on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="circle">Circle to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillCircle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a circle on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="centerX">Center point of the circle.</param>
            <param name="centerY">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillCircle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Point2D,System.Int32)">
            <summary>
            Fills a circle on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="center">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillCircle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Geometry2D.Circle)">
            <summary>
            Fills a circle on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="circle">Circle to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillCircle(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a circle on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="centerX">Center point of the circle.</param>
            <param name="centerY">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillCircle(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Point2D,System.Int32)">
            <summary>
            Fills a circle on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="center">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillCircle(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Geometry2D.Circle)">
            <summary>
            Fills a circle on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="circle">Circle to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Draws an ellipse border on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse border on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/> with zero degrees rotation.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Point2D,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Draws an ellipse border on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Point2D,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse border on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/> and zero degrees rotation.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Geometry2D.Ellipse)">
            <summary>
            Draws an ellipse border on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="ellipse">Ellipse to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Draws an ellipse border on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse border on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Point2D,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Draws an ellipse border on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Point2D,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse border on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Geometry2D.Ellipse)">
            <summary>
            Draws an ellipse border on the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="ellipse">Ellipse to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/> with zero degrees rotation.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Point2D,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Point2D,System.Int32,System.Int32)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/> and zero degrees rotation.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Geometry2D.Ellipse)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/> 
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="ellipse">Ellipse to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of 
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/> 
            with zero degrees rotation.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Point2D,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Fills an ellipse on all planes of the given 
            <see cref="T:Stemmer.Cvb.Image"/> 
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Point2D,System.Int32,System.Int32)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/> 
            with zero degrees rotation.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation 
            of the ellipse is 0.</param> 
            <param name="radiusB">Length of the second semi major axis. The second 
            semi major is the one that coincides with the y axis if the rotation 
            of the ellipse is 0. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Geometry2D.Ellipse)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="mode">Either <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Set" /> or
            <see cref="F:Stemmer.Cvb.OverlayBitDrawMode.Erase"/> the overlay bits.</param>
            <param name="ellipse">Ellipse to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is 
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given 
            <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FloodFill(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32)">
            <summary>
            Fills a closed region in the given Image, either setting or resetting
            the overlay bits<paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to paint on.</param>
            <param name="mode">Set/Unset bit.</param>
            <param name="centerX">X coordinate of the fill center.</param>
            <param name="centerY">Y coordinate of the fill center.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FloodFill(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Point2D)">
            <summary>
            Fills a closed region in the given Image, either setting or resetting
            the overlay bits<paramref name="plane"/>.
            </summary>
            <param name="plane">Plane to paint on.</param>
            <param name="mode">Set/Unset bit.</param>
            <param name="center">Coordinates of the fill center.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FloodFill(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,System.Int32)">
            <summary>
            Fills a closed region in the given Image, either setting or resetting
            the overlay bits.
            </summary>
            <param name="image">Image to paint on.</param>
            <param name="mode">Set/Unset bit.</param>
            <param name="centerX">X coordinate of the fill center.</param>
            <param name="centerY">Y coordinate of the fill center.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FloodFill(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Point2D)">
            <summary>
            Fills a closed region in the given Image, either setting or resetting
            the overlay bits.
            </summary>
            <param name="image">Image to paint on.</param>
            <param name="mode">Set/Unset bit.</param>
            <param name="center">Coordinates of the fill center.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawRectangle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Area2D)">
            <summary>
            Set/erase the overlay bits on a rectangular frame.
            </summary>
            <param name="plane">Plane to draw to.</param>
            <param name="mode">Draw mode (set/erase).</param>
            <param name="thickness">Line thickness with which to draw.</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawRectangle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Rect)">
            <summary>
            Set/erase the overlay bits on a rectangular frame.
            </summary>
            <param name="plane">Plane to draw to.</param>
            <param name="mode">Draw mode (set/erase).</param>
            <param name="thickness">Line thickness with which to draw.</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawRectangle(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Area2D)">
            <summary>
            Set/erase the overlay bits on a rectangular frame.
            </summary>
            <param name="image">Image to draw to (all planes will be painted to).
            </param>
            <param name="mode">Draw mode (set/erase).</param>
            <param name="thickness">Line thickness with which to draw.</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.DrawRectangle(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,System.Int32,Stemmer.Cvb.Rect)">
            <summary>
            Set/erase the overlay bits on a rectangular frame.
            </summary>
            <param name="image">Image to draw to (all planes will be painted to).
            </param>
            <param name="mode">Draw mode (set/erase).</param>
            <param name="thickness">Line thickness with which to draw.</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillRectangle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Area2D)">
            <summary>
            Set/erase the overlay bits on a filled rectangle.
            </summary>
            <param name="plane">Plane to draw to.</param>
            <param name="mode">Draw mode (set/erase).</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillRectangle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Rect)">
            <summary>
            Set/erase the overlay bits on a filled rectangle.
            </summary>
            <param name="plane">Plane to draw to.</param>
            <param name="mode">Draw mode (set/erase).</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillRectangle(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Area2D)">
            <summary>
            Set/erase the overlay bits on a filled rectangle.
            </summary>
            <param name="image">Image to draw to.</param>
            <param name="mode">Draw mode (set/erase).</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.OverlayBitDrawer.FillRectangle(Stemmer.Cvb.Image,Stemmer.Cvb.OverlayBitDrawMode,Stemmer.Cvb.Rect)">
            <summary>
            Set/erase the overlay bits on a filled rectangle.
            </summary>
            <param name="image">Image to draw to.</param>
            <param name="mode">Draw mode (set/erase).</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="T:Stemmer.Cvb.PropertyValueChangedEventArgs`1">
            <summary>
            Generic event arguments for property value changes.
            </summary>
            <typeparam name="T">Property value type.</typeparam>
        </member>
        <member name="P:Stemmer.Cvb.PropertyValueChangedEventArgs`1.OldValue">
            <summary>
            Value before the change was done.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.PropertyValueChangedEventArgs`1.NewValue">
            <summary>
            Value after the change was done.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.PropertyValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes the event args.
            </summary>
            <param name="oldValue">Value before the change was done.</param>
            <param name="newValue">Value after the change was done.</param>
        </member>
        <member name="T:Stemmer.Cvb.Ref`1">
            <summary>
            Class to store a reference to a value type in.
            </summary>
            <typeparam name="T">Value type to be wrapped.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.Ref`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            Construct a reference object.
            </summary>
            <param name="getter">Value-get function.</param>
            <param name="setter">Value-set function.</param>
        </member>
        <member name="P:Stemmer.Cvb.Ref`1.Value">
            <summary>
            Access the stored value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ScopedState`1">
            <summary>
            Simple object for writing RAII-like scoped states (see example).
            </summary>
            <example>
            <code>
            bool flag = false;
            ...
            using (ScopedState f(new Ref(flag), true))
            {
              // in here, flag will be true
            }
            // upon leaving, flag will revert to false
            </code>
            </example>
            <typeparam name="TState">Must be a value type.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.ScopedState`1.#ctor(Stemmer.Cvb.Ref{`0},`0)">
            <summary>
            Ctor.
            </summary>
            <param name="store">Reference to the value type that contains the 
            flag to be altered in the scope.</param>
            <param name="scopedState">State the flag should assume inside the
            scope.</param>
        </member>
        <member name="F:Stemmer.Cvb.ScopedState`1._ref">
            <summary>
            State reference.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ScopedState`1._originalState">
            <summary>
            Original value (to be restored in Dispose()).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ScopedState`1.Dispose">
            <summary>
            Cleanup - restore the flag's original value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Size2Dd">
            <summary>
            Stores an ordered pair of doubles, typical the width and height of a 
            <see cref="T:Stemmer.Cvb.RectD"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Size2Dd.Empty">
            <summary>
            Gets a <c>SizeD</c> with <see cref="P:Stemmer.Cvb.Size2Dd.Width"/> and <see cref="P:Stemmer.Cvb.Size2Dd.Height"/>
            value of 0.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.#ctor(System.Double,System.Double)">
            <summary>
            Creates a size with a given <paramref name="width"/> and 
            <paramref name="height"/>.
            </summary>
            <param name="width">Horizontal component of the size.</param>
            <param name="height">Vertical component of the size.</param>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.#ctor(Stemmer.Cvb.Point2Dd)">
            <summary>
            Creates a size from the given point's <paramref name="pt"/> horizontal
            and vertical components.
            </summary>
            <param name="pt">Point to initialize the size with.</param>
        </member>
        <member name="P:Stemmer.Cvb.Size2Dd.Width">
            <summary>
            Gets/sets the horizontal component of the size.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Size2Dd.Height">
            <summary>
            Gets/sets the vertical component of the size.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.Add(Stemmer.Cvb.Size2Dd,Stemmer.Cvb.Size2Dd)">
            <summary>
            Adds the width and height of one <c>SizeD</c> structure width and 
            height of another one.
            </summary>
            <param name="sz1">First size to add.</param>
            <param name="sz2">Second size to add.</param>
            <returns>Resulting <c>SizeD</c> from the addition operation.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.Subtract(Stemmer.Cvb.Size2Dd,Stemmer.Cvb.Size2Dd)">
            <summary>
            Subtracts the width and height of one <c>SizeD</c> structure width and 
            height of another one.
            </summary>
            <param name="sz1">First size to subtract.</param>
            <param name="sz2">Second size to subtract.</param>
            <returns>Resulting <c>SizeD</c> from the subtract operation.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.ToString">
            <summary>
            Gets the string representation of this size.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.op_Implicit(Stemmer.Cvb.Size2D)~Stemmer.Cvb.Size2Dd">
            <summary>
            Converts the given <see cref="T:Stemmer.Cvb.Size2D"/> <paramref name="sz"/> to a 
            <see cref="T:Stemmer.Cvb.Size2Dd"/>.
            </summary>
            <param name="sz">Size to convert.</param>
            <returns>New <c>SizeD</c></returns>.
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.op_Explicit(Stemmer.Cvb.Size2Dd)~Stemmer.Cvb.Point2Dd">
            <summary>
            Converts the given <paramref name="sz"/> to a <see cref="T:Stemmer.Cvb.Point2Dd"/>.
            </summary>
            <param name="sz">Size to convert.</param>
            <returns>New <c>PointD</c>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.op_Addition(Stemmer.Cvb.Size2Dd,Stemmer.Cvb.Size2Dd)">
            <summary>
            Adds the width and height of one <c>SizeD</c> structure width and 
            height of another one.
            </summary>
            <param name="sz1">First size to add.</param>
            <param name="sz2">Second size to add.</param>
            <returns>Resulting <c>SizeD</c> from the addition operation.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.op_Subtraction(Stemmer.Cvb.Size2Dd,Stemmer.Cvb.Size2Dd)">
            <summary>
            Subtracts the width and height of one <c>SizeD</c> structure width and 
            height of another one.
            </summary>
            <param name="sz1">First size to subtract.</param>
            <param name="sz2">Second size to subtract.</param>
            <returns>Resulting <c>SizeD</c> from the subtract operation.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.op_Equality(Stemmer.Cvb.Size2Dd,Stemmer.Cvb.Size2Dd)">
            <summary>
            Tests whether two sizes are equal.
            </summary>
            <param name="sz1">First size to test.</param>
            <param name="sz2">Second size to test.</param>
            <returns><c>true</c> if they are exactly equal; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.op_Inequality(Stemmer.Cvb.Size2Dd,Stemmer.Cvb.Size2Dd)">
            <summary>
            Tests whether two sizes are unequal.
            </summary>
            <param name="sz1">First size to test.</param>
            <param name="sz2">Second size to test.</param>
            <returns><c>true</c> if they are unequal; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.Equals(System.Object)">
            <summary>
            Tests whether two objects are <c>SizeD</c> and equal.
            </summary>
            <param name="obj">Object to test.</param>
            <returns><c>true</c> if they are exactly equal; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Size2Dd.GetHashCode">
            <summary>
            Default implementation.
            </summary>
            <returns>Default hash code.</returns>
        </member>
        <member name="T:Stemmer.Cvb.SystemExtensions">
            <summary>
            Extension methods for types located in the System name space.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SystemExtensions.GetDefaultValue(System.Type)">
            <summary>
            Get a suitable default value for a given type.
            </summary>
            <param name="t">Type to retrieve the default for.</param>
            <returns>Default value for the input type.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Transformations">
            <summary>
            Container class for a selection of functions that perform a 
            (non-geometric) transformation on the input image.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Transformations.CreateOverlayCapableCopy(Stemmer.Cvb.Image)">
            <summary>
            Creates a copy of the input image that is guaranteed to be overlay
            capable. If the input image already is an overlay-capable image, the
            input image will simply be copied (preserving all overlay 
            information). Otherwise a new image with the overlay flag set will
            be generated and receive a copy of the input image, but all the 
            overlay bits will be set to zero.
            </summary>
            <param name="img">Image of which to create an overlay capable copy.
            </param>
            <returns>Copy of the input image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Transformations.CreateOverlayFreeCopy(Stemmer.Cvb.Image)">
            <summary>
            Creates a copy of the input image that does not have the overlay flag
            set. If the input image already is a non-overlay image, the input
            image will simply be copied (preserving the information in bit 0). 
            Otherwise a new image with the overlay bits removed (= set to 0) will
            be generated and returned.
            </summary>
            <param name="img">Image of which to create a non-overlay capable 
            copy.</param>
            <returns>Copy of the input image.</returns>
        </member>
        <member name="T:Stemmer.Cvb._DrawMode">
            <summary>
            Defines how the intensity value is drawn in the image plane.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb._DrawMode.Normal">
            <summary>
            Normal drawing mode (set intensity value).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb._DrawMode.And">
            <summary>
            Bit-And draw mode.
            </summary>
            <remarks>
            <para>Use this for example to remove overlay bits from an image.</para>
            <para>Not supported on float images.</para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb._DrawMode.Or">
            <summary>
            Bit-Or draw mode.
            </summary>
            <remarks>
            <para>Use this for example to set overlay bits in an image.</para>
            <para>Not supported on float images.</para>
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.ImageDrawer">
            <summary>
            Immediate mode drawing on a <see cref="T:Stemmer.Cvb.Image"/> plane.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLine(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb._DrawMode)">
            <summary>
            Draws a line on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <remarks>
            The <paramref name="intensity"/> is clipped according to the image's
            data type and also the start and end points may reside outside the
            image (they are then simply not drawn outside the image bounds).
            </remarks>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="x1">X component of start point.</param>
            <param name="y1">Y component of start point.</param>
            <param name="x2">X component of end point.</param>
            <param name="y2">Y component of end point.</param>
            <param name="mode">Mode how the <paramref name="intensity"/> is drawin
            in the plane.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLine(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <remarks>
            The <paramref name="intensity"/> is clipped according to the image's
            data type and also the start and end points may reside outside the
            image (they are then simply not drawn outside the image bounds).
            </remarks>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="x1">X component of start point.</param>
            <param name="y1">Y component of start point.</param>
            <param name="x2">X component of end point.</param>
            <param name="y2">Y component of end point.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLine(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Draws a line on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="pt1">Start point.</param>
            <param name="pt2">End point.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.LineToPoints(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Geometry2D.Line,Stemmer.Cvb.Point2Dd@,Stemmer.Cvb.Point2Dd@)">
            <summary>
            Converts the given <paramref name="line"/> to points regarding the
            given <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="line">Line to draw.</param>
            <param name="p1">Resulting start point.</param>
            <param name="p2">Resulting end point.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.LineToPoints(Stemmer.Cvb.Image,Stemmer.Cvb.Geometry2D.Line,Stemmer.Cvb.Point2Dd@,Stemmer.Cvb.Point2Dd@)">
            <summary>
            Converts the given <paramref name="line"/> to points regarding the
            given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="line">Line to draw.</param>
            <param name="p1">Resulting start point.</param>
            <param name="p2">Resulting end point.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLine(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.Geometry2D.Line)">
            <summary>
            Draws a line on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="line">Line to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
            <exception cref="T:System.DivideByZeroException">The <paramref name="line"/>'s
            normal is too small</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLines(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.Point2D[])">
            <summary>
            Draws multiple connected lines as by the given
            <paramref name="points"/> on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="points">Points to draw lines with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="points"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLine(Stemmer.Cvb.Image,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="x1">X component of start point.</param>
            <param name="y1">Y component of start point.</param>
            <param name="x2">X component of end point.</param>
            <param name="y2">Y component of end point.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or
            <paramref name="intensity"/> is  <c>null</c> (<c>Nothing</c> in Visual
            Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one or the length of <paramref name="intensity"/> is
            not equal to the plane count.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLine(Stemmer.Cvb.Image,System.Double[],System.Int32,Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Draws a line on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="pt1">Start point.</param>
            <param name="pt2">End point.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or
            <paramref name="intensity"/> is  <c>null</c> (<c>Nothing</c> in Visual
            Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one or the length of <paramref name="intensity"/> is
            not equal to the plane count.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLine(Stemmer.Cvb.Image,System.Double[],System.Int32,Stemmer.Cvb.Geometry2D.Line)">
            <summary>
            Draws a line on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="line">Line to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or
            <paramref name="intensity"/> is <c>null</c> (<c>Nothing</c> in Visual
            Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
            <exception cref="T:System.DivideByZeroException">The <paramref name="line"/>'s
            normal is too small</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLines(Stemmer.Cvb.Image,System.Double[],System.Int32,Stemmer.Cvb.Point2D[])">
            <summary>
            Draws multiple connected lines as by the given
            <paramref name="points"/> on all <paramref name="image"/> planes.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="points">Points to draw lines with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or
            <paramref name="intensity"/>, or <paramref name="points"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given
            <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/>,
            <paramref name="intensity"/>, or <paramref name="points"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one or the length of <paramref name="intensity"/> is
            not equal to the plane count.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLine(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line on all planes of the given <paramref name="image"/>.
            </summary>
            <remarks>
            Only works on three-plane images (alpha component is ignored).
            </remarks>
            <param name="image">Image to draw on.</param>
            <param name="color">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="x1">X component of start point.</param>
            <param name="y1">Y component of start point.</param>
            <param name="x2">X component of end point.</param>
            <param name="y2">Y component of end point.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one or the length of <paramref name="color"/> is
            not equal to the plane count.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLine(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,Stemmer.Cvb.Geometry2D.Line)">
            <summary>
            Draws a line on all planes of the given <paramref name="image"/>.
            </summary>
            <remarks>
            Only works on three-plane images (alpha component is ignored).
            </remarks>
            <param name="image">Image to draw on.</param>
            <param name="color">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="line">Line to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one or the length of <paramref name="color"/> is
            not equal to the plane count.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLine(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Draws a line on all planes of the given <paramref name="image"/>.
            </summary>
            <remarks>
            Only works on three-plane images (alpha component is ignored).
            </remarks>
            <param name="image">Image to draw on.</param>
            <param name="color">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="pt1">Start point.</param>
            <param name="pt2">End point.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one or the length of <paramref name="color"/> is
            not equal to the plane count.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawLines(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,Stemmer.Cvb.Point2D[])">
            <summary>
            Draws multiple connected lines as by the given
            <paramref name="points"/> on all <paramref name="image"/> planes.
            </summary>
            <remarks>
            Only works on three-plane images (alpha component is ignored).
            </remarks>
            <param name="image">Image to draw on.</param>
            <param name="color">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="points">Points to draw lines with.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or
            <paramref name="points"/> is <c>null</c> (<c>Nothing</c> in Visual
            Basic).</exception>
            <exception cref="T:System.ObjectDisposedException">Given
            <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawCircle(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb._DrawMode)">
            <summary>
            Draws a line on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the circle.</param>
            <param name="centerY">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <param name="mode">Mode how the <paramref name="intensity"/> is drawin
            in the plane.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawCircle(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a line on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the circle.</param>
            <param name="centerY">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawCircle(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.Point2D,System.Int32)">
            <summary>
            Draws a circle on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawCircle(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.Geometry2D.Circle)">
            <summary>
            Draws a circle on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="circle">Circle to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawCircle(Stemmer.Cvb.Image,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radius">Radius of the circle.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawCircle(Stemmer.Cvb.Image,System.Double[],System.Int32,Stemmer.Cvb.Point2D,System.Int32)">
            <summary>
            Draws a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point.</param>
            <param name="radius">Radius of the circle.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawCircle(Stemmer.Cvb.Image,System.Double[],System.Int32,Stemmer.Cvb.Geometry2D.Circle)">
            <summary>
            Draws a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="circle">Circle to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawCircle(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radius">Radius of the circle.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawCircle(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,Stemmer.Cvb.Point2D,System.Int32)">
            <summary>
            Draws a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point.</param>
            <param name="radius">Radius of the circle.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawCircle(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,Stemmer.Cvb.Geometry2D.Circle)">
            <summary>
            Draws a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="circle">Circle to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillCircle(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,Stemmer.Cvb._DrawMode)">
            <summary>
            Fills a line on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="centerX">Center point of the circle.</param>
            <param name="centerY">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <param name="mode">Mode how the <paramref name="intensity"/> is drawin
            in the plane.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillCircle(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a line on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="centerX">Center point of the circle.</param>
            <param name="centerY">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillCircle(Stemmer.Cvb.ImagePlane,System.Double,Stemmer.Cvb.Point2D,System.Int32)">
            <summary>
            Fills a circle on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="center">Center point of the circle.</param>
            <param name="radius">Radius of the circle in pixels.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillCircle(Stemmer.Cvb.ImagePlane,System.Double,Stemmer.Cvb.Geometry2D.Circle)">
            <summary>
            Fills a circle on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="circle">Circle to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillCircle(Stemmer.Cvb.Image,System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radius">Radius of the circle.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillCircle(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Point2D,System.Int32)">
            <summary>
            Fills a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="center">Center point.</param>
            <param name="radius">Radius of the circle.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillCircle(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Geometry2D.Circle)">
            <summary>
            Fills a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="circle">Circle to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillCircle(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radius">Radius of the circle.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillCircle(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,Stemmer.Cvb.Point2D,System.Int32)">
            <summary>
            Fills a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="center">Center point.</param>
            <param name="radius">Radius of the circle.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillCircle(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,Stemmer.Cvb.Geometry2D.Circle)">
            <summary>
            Fills a circle on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color value to draw.</param>
            <param name="circle">Circle to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle,Stemmer.Cvb._DrawMode)">
            <summary>
            Draws a line on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <param name="mode">Mode how the <paramref name="intensity"/> is drawin
            in the plane.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Draws an ellipse border on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse border on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/> and zero degrees rotation.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.Point2D,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Draws an ellipse border on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.Point2D,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse border on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/> and zero degrees rotation.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.Geometry2D.Ellipse)">
            <summary>
            Draws an ellipse border on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="ellipse">ellipse to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.Image,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Draws an ellipse border on all planes of the given
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.Image,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse border on all planes of the given
            <paramref name="image"/> and zero degrees rotation.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.Image,System.Double[],System.Int32,Stemmer.Cvb.Point2D,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Draws an ellipse border on all planes of the given
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.Image,System.Double[],System.Int32,Stemmer.Cvb.Point2D,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse border on all planes of the given
            <paramref name="image"/> and zero degrees rotation.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.Image,System.Double[],System.Int32,Stemmer.Cvb.Geometry2D.Ellipse)">
            <summary>
            Draws an ellipse border on all planes of the given
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="ellipse">ellipse to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Draws an ellipse border on all planes of the given
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse border on all planes of the given
            <paramref name="image"/> and zero degrees rotation.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,Stemmer.Cvb.Point2D,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Draws an ellipse border on all planes of the given
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,Stemmer.Cvb.Point2D,System.Int32,System.Int32)">
            <summary>
            Draws an ellipse border on all planes of the given
            <paramref name="image"/> and zero degrees rotation.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="center">Center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,Stemmer.Cvb.Geometry2D.Ellipse)">
            <summary>
            Draws an ellipse border on all planes of the given
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color value to draw.</param>
            <param name="thickness">Line thickness in pixels.</param>
            <param name="ellipse">ellipse to draw.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is
            <c>null</c> (<c>Nothing</c> in Visual Basic).</exception>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="thickness"/>
            is smaller than one.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle,Stemmer.Cvb._DrawMode)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <param name="mode">Mode how the <paramref name="intensity"/> is drawin
            in the plane.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/> and zero degrees rotation.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="centerX">Center point of the ellipse.</param>
            <param name="centerY">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,System.Double,Stemmer.Cvb.Point2D,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,System.Double,Stemmer.Cvb.Point2D,System.Int32,System.Int32)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/> and zero degrees rotation.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="center">Center point of the ellipse.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.ImagePlane,System.Double,Stemmer.Cvb.Geometry2D.Ellipse)">
            <summary>
            Fills an ellipse on the given <see cref="T:Stemmer.Cvb.Image"/>
            <paramref name="plane"/>.
            </summary>
            <param name="plane">Image plane to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="ellipse">ellipse to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="plane"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.Image,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Fills an Ellipse on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.Image,System.Double[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills an Ellipse on all planes of the given <paramref name="image"/>
            and zero degrees rotation.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Point2D,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="center">Center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Point2D,System.Int32,System.Int32)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/>
            and zero degrees rotation.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="center">Center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Geometry2D.Ellipse)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="intensity">Intensity value to draw.</param>
            <param name="ellipse">ellipse to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,System.Int32,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/>
            and zero degrees rotation.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="centerX">X component of center point.</param>
            <param name="centerY">Y component of center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,Stemmer.Cvb.Point2D,System.Int32,System.Int32,Stemmer.Cvb.Angle)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="center">Center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
            <param name="rotation">Rotation of the ellipse in degrees.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,Stemmer.Cvb.Point2D,System.Int32,System.Int32)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/>
            and zero degrees rotation.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color to draw.</param>
            <param name="center">Center point.</param>
            <param name="radiusA">Length of the first semi major axis. The first
            semi major is the one that coincides with the x axis if the rotation
            of the ellipse is 0.</param>
            <param name="radiusB">Length of the second semi major axis. The second
            semi major is the one that coincides with the y axis if the rotation
            of the ellipse is 0. </param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillEllipse(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,Stemmer.Cvb.Geometry2D.Ellipse)">
            <summary>
            Fills an ellipse on all planes of the given <paramref name="image"/>.
            </summary>
            <param name="image">Image to draw on.</param>
            <param name="color">Color value to draw.</param>
            <param name="ellipse">ellipse to draw.</param>
            <exception cref="T:System.ObjectDisposedException"><see cref="T:Stemmer.Cvb.Image"/> of
            given <paramref name="image"/> was disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FloodFill(Stemmer.Cvb.ImagePlane,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Fills a closed region in the given Image. This draws a destructive
            overlay in the given image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plaint to paint on.</param>
            <param name="intensity">Intensity value to set.</param>
            <param name="maxDelta">Delta (deviation from target
            <paramref name="intensity"/>) at which to stop.</param>
            <param name="centerX">X coordinate of the fill center.</param>
            <param name="centerY">Y coordinate of the fill center.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FloodFill(Stemmer.Cvb.ImagePlane,System.Double,System.Double,Stemmer.Cvb.Point2D)">
            <summary>
            Fills a closed region in the given Image. This draws a destructive
            overlay in the given image <paramref name="plane"/>.
            </summary>
            <param name="plane">Plaint to paint on.</param>
            <param name="intensity">Intensity value to set.</param>
            <param name="maxDelta">Delta (deviation from target
            <paramref name="intensity"/>) at which to stop.</param>
            <param name="center">Coordinate of the fill center.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawRectangle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,System.Double,System.Int32,Stemmer.Cvb._DrawMode)">
            <summary>
            Internal utility function for drawing rectangles (internal so that
            the OverlayBitDrawer methods may call it as well).
            </summary>
            <param name="plane">Plane to draw to.</param>
            <param name="rectangle">Rectangle to draw.</param>
            <param name="intensity">Intensity with which to draw.</param>
            <param name="thickness">Line thickness.</param>
            <param name="mode">Draw mode.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawRectangle(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.Area2D)">
            <summary>
            Draw a destructive rectangle over the content of an image.
            </summary>
            <param name="plane">Plane to draw to.</param>
            <param name="intensity">Intensity (pixel value) with which to draw
            </param>
            <param name="thickness">Line thickness with which to draw.</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawRectangle(Stemmer.Cvb.ImagePlane,System.Double,System.Int32,Stemmer.Cvb.Rect)">
            <summary>
            Draw a destructive rectangle over the content of an image.
            </summary>
            <param name="plane">Plane to draw to.</param>
            <param name="intensity">Intensity (pixel value) with which to draw
            </param>
            <param name="thickness">Line thickness with which to draw.</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawRectangle(Stemmer.Cvb.Image,System.Double[],System.Int32,Stemmer.Cvb.Area2D)">
            <summary>
            Draw a destructive rectangle over the content of an image.
            </summary>
            <param name="image">Image to draw to.</param>
            <param name="intensity">Intensity (pixel value) with which to draw
            (one for each plane required).</param>
            <param name="thickness">Line thickness with which to draw.</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawRectangle(Stemmer.Cvb.Image,System.Double[],System.Int32,Stemmer.Cvb.Rect)">
            <summary>
            Draw a destructive rectangle over the content of an image.
            </summary>
            <param name="image">Image to draw to.</param>
            <param name="intensity">Intensity (pixel value) with which to draw
            (one for each plane required).</param>
            <param name="thickness">Line thickness with which to draw.</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawRectangle(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,Stemmer.Cvb.Area2D)">
            <summary>
            Draw a destructive rectangle over the content of an image.
            </summary>
            <param name="image">Image to draw to.</param>
            <param name="clr">Color to draw witch
            (RGB image required).</param>
            <param name="thickness">Line thickness with which to draw.</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.DrawRectangle(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,System.Int32,Stemmer.Cvb.Rect)">
            <summary>
            Draw a destructive rectangle over the content of an image.
            </summary>
            <param name="image">Image to draw to.</param>
            <param name="clr">Color to draw witch
            (RGB image required).</param>
            <param name="thickness">Line thickness with which to draw.</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillRectangle(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,System.Double,Stemmer.Cvb._DrawMode)">
            <summary>
            Internal utility function for drawing filled rectangles (internal so
            that the OverlayBitDrawer methods may call it as well).
            </summary>
            <param name="plane">Plane to draw to.</param>
            <param name="rectangle">Rectangle to draw.</param>
            <param name="intensity">Intensity with which to draw.</param>
            <param name="mode">Draw mode.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillRectangle(Stemmer.Cvb.ImagePlane,System.Double,Stemmer.Cvb.Area2D)">
            <summary>
            Draw a filled destructive rectangle over the content of an image.
            </summary>
            <param name="plane">Plane to draw to.</param>
            <param name="intensity">Intensity (pixel value) with which to draw
            </param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillRectangle(Stemmer.Cvb.ImagePlane,System.Double,Stemmer.Cvb.Rect)">
            <summary>
            Draw a filled destructive rectangle over the content of an image.
            </summary>
            <param name="plane">Plane to draw to.</param>
            <param name="intensity">Intensity (pixel value) with which to draw
            </param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillRectangle(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Area2D)">
            <summary>
            Draw a filled destructive rectangle over the content of an image.
            </summary>
            <param name="image">Image to draw to.</param>
            <param name="intensity">Intensity (pixel value) with which to draw
            (one for each plane required).</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillRectangle(Stemmer.Cvb.Image,System.Double[],Stemmer.Cvb.Rect)">
            <summary>
            Draw a filled destructive rectangle over the content of an image.
            </summary>
            <param name="image">Image to draw to.</param>
            <param name="intensity">Intensity (pixel value) with which to draw
            (one for each plane required).</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillRectangle(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,Stemmer.Cvb.Area2D)">
            <summary>
            Draw a filled destructive rectangle over the content of an image.
            </summary>
            <param name="image">Image to draw to.</param>
            <param name="clr">Color to draw witch
            (RGB image required).</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageDrawer.FillRectangle(Stemmer.Cvb.Image,Stemmer.Cvb.RgbColor,Stemmer.Cvb.Rect)">
            <summary>
            Draw a filled destructive rectangle over the content of an image.
            </summary>
            <param name="image">Image to draw to.</param>
            <param name="clr">Color to draw witch
            (RGB image required).</param>
            <param name="rectangle">Rectangle to draw.</param>
        </member>
        <member name="T:Stemmer.Cvb.NativeHandleEventDelegate">
            <summary>
            Delegate for the <see cref="E:Stemmer.Cvb.INativeHandle.ObjectDisposing"/> event.
            </summary>
            <param name="sender">Object which raised the event.</param>
        </member>
        <member name="T:Stemmer.Cvb.INativeHandle">
            <summary>
            Base interface for Cvb objects that are accessible through a native 
            handle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.INativeHandle.Handle">
            <summary>
            The native handle of the object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.INativeHandle.IsDisposed">
            <summary>
            Possibility to check whether the object has already been disposed of.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.INativeHandle.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the 
            <see cref="M:System.IDisposable.Dispose"/> method.  
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.INamed">
            <summary>
            Interface for anything that has a name.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.INamed.Name">
            <summary>
            Name of the object.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.IPosition">
            <summary>
            Interface for anything that denotes a position.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.IPosition.X">
            <summary>
            X coordinate of the position.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.IPosition.Y">
            <summary>
            Y coordinate of the position.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.IQualified">
            <summary>
            Interface for anything that has a quality (e.g. search results).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.IQualified.Quality">
            <summary>
            Name of the object.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.IRotated">
            <summary>
            Interface for anything that has a rotation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.IRotated.Rotation">
            <summary>
            Name of the object.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.IScaled">
            <summary>
            Interface for anything that has a scale.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.IScaled.Scale">
            <summary>
            Name of the object.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ISized">
            <summary>
            Interface for anything that has a size.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ISized.Size">
            <summary>
            Size of the object.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.LocalMaximum">
            <summary>
            Result type returned by the FindLocalMaxima function
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.LocalMaximum.X">
            <summary>
            X Position of the local maximum.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.LocalMaximum.Y">
            <summary>
            Y Position of the local maximum.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.LocalMaximum.Position">
            <summary>
            Position of the local maximum (X, Y).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.LocalMaximum.Quality">
            <summary>
            Quality is just an alias for Value that makes this struct an 
            ISeparable object.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.LocalMaximum.Value">
            <summary>
            Grey value of the local maximum.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.LocalMaximum.#ctor(System.Double[])">
            <summary>
            Constructor for LocalMaximum structs.
            </summary>
            <param name="val">native pixel list content</param>
        </member>
        <member name="M:Stemmer.Cvb.LocalMaximum.ToString">
            <summary>
            Gets the string representation of this <b>LocalMaximum</b>.
            </summary>
            <returns>Gray value and its position.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Matrix2D">
            <summary>
            Double precision 2x2 Matrix struct.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a 2x2 matrix.
            </summary>
            <param name="a11">Top left matrix element</param>
            <param name="a12">Top right matrix element</param>
            <param name="a21">Bottom left matrix element</param>
            <param name="a22">Bottom right matrix element</param>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.#ctor(Stemmer.Cvb.Angle)">
            <summary>
            Construct a 2x2 matrix that represents a rotation.
            </summary>
            <param name="rotation">Angle of the rotation</param>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.#ctor(Stemmer.Cvb.Angle,System.Double)">
            <summary>
            Construct a 2x2 matrix that is a combination of a rotation and scale
            operation.
            </summary>
            <param name="rotation">Rotation angle to create the matrix for
            </param>
            <param name="scale">Scale factor to create the matrix for</param>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.#ctor(System.Double)">
            <summary>
            Construct a 2x2 matrix that represents a scaling.
            </summary>
            <param name="scale">Scale factor to create the matrix for.</param>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a 2x2 matrix that represent a scaling with different 
            scaling in x and y directions.
            </summary>
            <param name="scaleX">Scale factor in X direction to create the matrix
            for.</param>
            <param name="scaleY">Scale factor in Y direction to create the matrix
            for.</param>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.#ctor(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd)">
            <summary>
            Construct a 2x2 matrix from two column vectors.
            </summary>
            <param name="column1">Column vector one</param>
            <param name="column2">Columns vector two</param>
        </member>
        <member name="P:Stemmer.Cvb.Matrix2D.A11">
            <summary>
            Top left matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix2D.A12">
            <summary>
            Top right matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix2D.A21">
            <summary>
            Bottom left matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix2D.A22">
            <summary>
            Bottom right matrix element.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Matrix2D.Item(System.Int32,System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The row, or "Y" index to get.</param>
            <param name="column">The column, or "X" index to get.</param>
            <returns>Value at the specified position.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Matrix2D.Det">
            <summary>
            Matrix determinant.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.Invert">
            <summary>
            Invert this matrix if possible.
            </summary>
            <exception cref="T:System.DivideByZeroException">If the matrix cannot be
            inverted.</exception>
        </member>
        <member name="F:Stemmer.Cvb.Matrix2D.Identity">
            <summary>
            1-element for matrix operations.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Matrix2D.Empty">
            <summary>
            0-element for matrix operations.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.op_Subtraction(Stemmer.Cvb.Matrix2D,Stemmer.Cvb.Matrix2D)">
            <summary>
            Subtraction operator for MatrixD structs.
            </summary>
            <param name="lhs">Left hand side operand</param>
            <param name="rhs">Right hand side operand</param>
            <returns>Difference of <paramref name="lhs"/> and 
            <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.op_Addition(Stemmer.Cvb.Matrix2D,Stemmer.Cvb.Matrix2D)">
            <summary>
            Addition operator for MatrixD structs.
            </summary>
            <param name="lhs">Left hand side operand</param>
            <param name="rhs">Right hand side operand</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.op_Multiply(Stemmer.Cvb.Matrix2D,Stemmer.Cvb.Matrix2D)">
            <summary>
            Multiplication operator for MatrixD structs.
            </summary>
            <param name="lhs">Left hand side operand</param>
            <param name="rhs">Right hand side operand</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.op_Inequality(Stemmer.Cvb.Matrix2D,Stemmer.Cvb.Matrix2D)">
            <summary>
            Comparison operator for MatrixD structs.
            </summary>
            <param name="lhs">Left hand side operand</param>
            <param name="rhs">Right hand side operand</param>
            <returns>true lhs != rhs, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.op_Equality(Stemmer.Cvb.Matrix2D,Stemmer.Cvb.Matrix2D)">
            <summary>
            Comparison operator for MatrixD structs.
            </summary>
            <param name="lhs">Left hand side operand</param>
            <param name="rhs">Right hand side operand</param>
            <returns>true lhs == rhs, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.op_Multiply(System.Double,Stemmer.Cvb.Matrix2D)">
            <summary>
            Multiplication operator between MatrixD and scalar.
            </summary>
            <param name="lhs">Scalar to multiply the matrix with.</param>
            <param name="rhs">Matrix to be multiplied.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.Equals(System.Object)">
            <summary>
            Comparison function.
            </summary>
            <param name="obj">Object to compare to</param>
            <returns><c>true</c> if obj == this, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Stemmer.Cvb.Matrix2D.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this MatrixD</returns>
        </member>
        <member name="T:Stemmer.Cvb.ImageDataLockMode">
            <summary>
            Specifies flags passed to the <see cref="M:Stemmer.Cvb.ImagePlane.GetLockedAccess(Stemmer.Cvb.ImageDataLockMode)"/>
            method.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImageDataLockMode.ReadOnly">
            <summary>
            The image is locked for reading.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImageDataLockMode.WriteOnly">
            <summary>
            The image is locked for writing.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImageDataLockMode.ReadWrite">
            <summary>
            The image is locked for reading or writing.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ImageData">
            <summary>
            Stores the access data for image access.
            </summary>
            <remarks>
            It is mandatory to <see cref="M:Stemmer.Cvb.ImageData.Dispose"/> this object when you are done
            with pixel access so that the locks are freed.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.ImageData._parent">
            <summary>
            Reference to parent for the sake of life time and lock access.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImageData.Vpat">
            <summary>
            Gets the VPAT for the plane access.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImageData.LinearAccess">
            <summary>
            Gets the linear access data for the plane access if possible.
            </summary>
            <value>
            Linear access data or <c>null</c> (<c>Nothing</c> in VB.Net) if not 
            possible.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.ImageData.LockMode">
            <summary>
            Gets the lock mode of the access.
            </summary>
            <remarks>
            This is only a hint. There is no actual restriction in memory access.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.ImageData.#ctor(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImageDataLockMode)">
            <summary>
            Creates the image access data.
            </summary>
            <param name="parent">Parent plane.</param>
            <param name="lockMode">Lock mode to use.</param>
        </member>
        <member name="M:Stemmer.Cvb.ImageData.Finalize">
            <summary>
            It is an error when the finalizer is called.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ImageData.Dispose">
            <summary>
            Disposes this object, i.e. releases the lock and notify on dirty state
            if necessary.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ImagePlane">
            <summary>
            Plane information container.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ImagePlane.PixelPointerEnum">
            <summary>
            IntPtr pixel enumerator for the whole plane
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.#ctor(Stemmer.Cvb.ImagePlane)">
            <summary>
            ctor
            </summary>
            <param name="parent">parent</param>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.parent_">
            <summary>
            memorized parent
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator">
            <summary>
            Linear Access enumerator for the whole plane.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.xInc_">
            <summary>
            Increment to get to next pixel.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.yInc_">
            <summary>
            Increment to get to next line.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.lineOffset_">
            <summary>
            Offset for the end-of-line as seen from <see cref="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.xInc_"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.pBase_">
            <summary>
            Pointer to first pixel of the image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.pLine_">
            <summary>
            Pointer to the current line.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.pLineEnd_">
            <summary>
            Pointer to one behind the last line of the image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.pPix_">
            <summary>
            Pointer to current pixel.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.pPixEnd_">
            <summary>
            Pointer to end-of-line (one behind the last pixel of the line).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.#ctor(Stemmer.Cvb.LinearAccessData,Stemmer.Cvb.Size2D)">
            <summary>
            Ctor.
            </summary>
            <param name="acc">Linear access data.</param>
            <param name="imageSize">Size of the image.</param>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.Current">
            <summary>
            Gets the pointer to the current pixel.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the current 
            position is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the <c>IntPtr</c> to the current pixel.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the current 
            position is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.MoveNext">
            <summary>
            Moves to the next logical pixel.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">If the current 
            position is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.LinearEnumerator.Reset">
            <summary>
            Resets the position of this enumerator to one before the first
            pixel in the image.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator">
            <summary>
            VPAT access enumerator for the whole plane.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.yOffsets_">
            <summary>
            Cached y offset VPA table.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.xOffsets_">
            <summary>
            Cached x offset VPA table.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.pBase_">
            <summary>
            Base pointer for VPAT access.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.pLine_">
            <summary>
            Current line location for faster x access.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.location_">
            <summary>
            Current location of iterator.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.#ctor(Stemmer.Cvb.Vpat,Stemmer.Cvb.Size2D)">
            <summary>
            
            </summary>
            <param name="vpat"></param>
            <param name="size"></param>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.Current">
            <summary>
            Gets the pointer to the current pixel.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the current 
            position is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the <c>IntPtr</c> to the current pixel.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the current 
            position is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.MoveNext">
            <summary>
            Moves to the next logical pixel.
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">If the current 
            position is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.VpatEnumerator.Reset">
            <summary>
            Resets the position of this enumerator to one before the first
            pixel in the image.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.GetEnumerator">
            <summary>
            enumerate the pointers to all the pixels in the plane
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.PixelPointerEnum.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            enumerate the pointers to all the pixels in the plane
            </summary>
            <returns>enumerator</returns>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.#ctor(Stemmer.Cvb.Image,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="parent">reference to the parent image</param>
            <param name="plane">plane of the parent image to which the plane
            information refers</param>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlane.Parent">
            <summary>
            Image to which this descriptor refers to.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlane.Plane">
            <summary>
            Plane index in the <see cref="P:Stemmer.Cvb.ImagePlane.Parent"/> image to which this descriptor 
            refers to.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlane.DataType">
            <summary>
            Data type descriptor for this plane.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If Parent has already
            been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlane.Vpat">
            <summary>
            Accesses the virtual pixel access table.
            </summary>
            <remarks>Normally this property only needs to be accessed if you want
            to access the underlying CVB image on the pixel level. Note that VPAT
            access is one of the slower access modes. If possible, linear access
            is preferred.</remarks>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.TryGetLinearAccess(Stemmer.Cvb.LinearAccessData@)">
            <summary>
            Attempt a linear access on the plane's pixels.
            </summary>
            <remarks>This function scans the image's VPAT for the possibility to 
            access the individual pixels with linear increments in x and y 
            direction. If either of the VPATs are jumbled, it will return 
            <c>false</c>, otherwise the values in <paramref name="access"/> can be 
            used to calculate the address of each pixel.</remarks>
            <param name="access">Data structure receiving the values for accessing
            the pixels</param>
            <returns><c>true</c> if linear access is possible, <c>false</c> 
            otherwise.</returns>
            <exception cref="T:System.ObjectDisposedException">If Parent has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.TryGetLinearAccess``1(Stemmer.Cvb.LinearAccessData{``0}@)">
            <summary>
            Attempt a typed linear access on the plane's pixels.
            </summary>
            <remarks>
            <para>This function scans the image's VPAT for the possibility to 
            access the individual pixels with linear increments in x and y 
            direction. If either of the VPATs are jumbled, it will return 
            <c>false</c>, otherwise the values in <paramref name="access"/> can be 
            used to calculate the address of each pixel.</para>
            <para>Additionally the size of <c>T</c> must be equal to the 
            <see cref="P:Stemmer.Cvb.DataType.BytesPerPixel"/>.</para>
            <para><c>Attention:</c> Do not use reference types in <c>T</c> as this 
            will leak memory!</para>
            </remarks>
            <typeparam name="T">Structure for access a single plane's pixel.
            </typeparam>
            <param name="access">Data structure receiving the values for accessing
            the pixels</param>
            <returns><c>true</c> if linear access is possible, <c>false</c> 
            otherwise.</returns>
            <exception cref="T:System.ObjectDisposedException">If Parent has already
            been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the size of 
            <c>T</c> and <see cref="P:Stemmer.Cvb.DataType.BytesPerPixel"/> are unequal.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.GetLinearAccess">
            <summary>
            Gets linear access to the plane's pixels.
            </summary>
            <remarks>See <see cref="M:Stemmer.Cvb.ImagePlane.TryGetLinearAccess(Stemmer.Cvb.LinearAccessData@)"/>. Unlike 
            <see cref="M:Stemmer.Cvb.ImagePlane.TryGetLinearAccess(Stemmer.Cvb.LinearAccessData@)"/>, <c>GetLinearAccess</c> will throw an
            exception if linear access is not possible on this plane.</remarks>
            <returns>data structure with the values for accessing the pixels
            </returns>
            <exception cref="T:System.FormatException">If the plane's pixels are not 
            accessible linearly</exception>
            <exception cref="T:System.ObjectDisposedException">If Parent has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.GetLinearAccess``1">
            <summary>
            Gets typed linear access to the plane's pixels.
            </summary>
            <remarks>
            <para>
            See <see cref="M:Stemmer.Cvb.ImagePlane.TryGetLinearAccess``1(Stemmer.Cvb.LinearAccessData{``0}@)"/>. 
            Unlike it, <c>GetLinearAccess</c> will throw an exception if linear 
            access is not possible on this plane.
            </para><para>
            Attention: Do not use reference types in <c>T</c> as this will
            leak memory!
            </para>
            </remarks>
            <typeparam name="T">Structure for access a single plane's pixel.
            </typeparam>
            <returns>Data structure with the values for accessing the pixels
            </returns>
            <exception cref="T:System.FormatException">If the plane's pixels are not 
            accessible linearly</exception>
            <exception cref="T:System.ObjectDisposedException">If Parent has already
            been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the size of 
            <c>T</c> and <see cref="P:Stemmer.Cvb.DataType.BytesPerPixel"/> are unequal.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.GetVPATAccess``1">
            <summary>
            Gets typed VPAT access to the plane's pixels.
            </summary>
            <remarks>
            <para>The size of <c>T</c> must be equal to the 
            <see cref="P:Stemmer.Cvb.DataType.BytesPerPixel"/>.</para>
            <para><c>Attention:</c> Do not use reference types in <c>T</c> as this 
            will leak memory!</para>
            </remarks>
            <typeparam name="T">Structure for access a single plane's pixel.
            </typeparam>
            <returns>Data structure with the value for accessing the pixels.
            </returns>
            <exception cref="T:System.ObjectDisposedException">If Parent has already
            been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the size of 
            <c>T</c> and <see cref="P:Stemmer.Cvb.DataType.BytesPerPixel"/> are unequal.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.GetLockedAccess(Stemmer.Cvb.ImageDataLockMode)">
            <summary>
            Gets thread-locked access to the image data.
            </summary>
            <remarks>
            <para>Calling this method will enter a reader/writer lock based on the
            specified lock mode. It is mandatory to <see cref="M:Stemmer.Cvb.ImageData.Dispose"/>
            the returned object when pixel access has finished. Best use the 
            returned object in a <c>using</c> block.</para>
            <para>All other API functions do not use the reader/writer lock of the
            image. Thus if you want to use these on a shared image resource with
            some write access, you need to wrap the calls in a <c>using</c> block
            initialized by this method.</para>
            <para>Also by giving a hint whether you are changing the image data, 
            the <see cref="E:Stemmer.Cvb.Image.PixelContentChanged"/> event is fired when
            the returned object is disposed and the <paramref name="lockMode"/> is
            <see cref="F:Stemmer.Cvb.ImageDataLockMode.WriteOnly"/> or 
            <see cref="F:Stemmer.Cvb.ImageDataLockMode.ReadWrite"/>.</para>
            </remarks>
            <param name="lockMode">Access mode hint.</param>
            <returns>The image access data.</returns>
        </member>
        <member name="P:Stemmer.Cvb.ImagePlane.AllPixels">
            <summary>
            Gets an enumerator to enumerate all pixels of this plane.
            </summary>
            <value>Enumerator to enumerate the pointers to each pixel in an image.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.GetAllPixelsIn(Stemmer.Cvb.Area2D)">
            <summary>
            Gets an enumerator to enumerate all pixel values of this plane in the
            given <paramref name="aoi"/>.
            </summary>
            <remarks>
            <para>
            Touches every pixel in the <paramref name="aoi"/> exactly once.
            </para><para>
            <c>Attention:</c> no interpolation is done!
            </para>
            </remarks>
            <param name="aoi">Area to scan for pixel values.</param>
            <returns>Enumerator to enumerate all pixel values of this plane in the
            given <paramref name="aoi"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">If Parent has already
            been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the size of 
            <c>T</c> and <see cref="P:Stemmer.Cvb.DataType.BytesPerPixel"/> are unequal.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.GetAllPixelsIn(Stemmer.Cvb.Rect)">
            <summary>
            Gets an enumerator to enumerate all pixel values of this plane in the
            given <paramref name="aoi"/>.
            </summary>
            <param name="aoi">Area to scan for pixel values.</param>
            <returns>Enumerator to enumerate all pixel values of this plane in the
            given <paramref name="aoi"/>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">If Parent has already
            been disposed</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the size of 
            <c>T</c> and <see cref="P:Stemmer.Cvb.DataType.BytesPerPixel"/> are unequal.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.CopyTo(Stemmer.Cvb.ImagePlane)">
            <summary>
            Copies the image data from this plane to the 
            <paramref name="targetPlane"/>.
            </summary>
            <param name="targetPlane">Plane to copy to.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">Copy regions or data types 
            incompatible.</exception>
            <exception cref="T:System.ObjectDisposedException">If the parent image has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.CopyTo(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Rect,Stemmer.Cvb.Point2D)">
            <summary>
            Copies the image data from the <paramref name="sourceRect"/> of this 
            plane to the <paramref name="targetPlane"/> 
            <paramref name="targetPosition"/>.
            </summary>
            <param name="targetPlane">Plane to copy to.</param>
            <param name="sourceRect">Source rectangle in pixels to copy from.</param>
            <param name="targetPosition">Position in 
            <paramref name="targetPlane"/> in pixels to copy to.</param>
            <exception cref="T:Stemmer.Cvb.CvbException">Copy regions or data types 
            incompatible.</exception>
            <exception cref="T:System.ObjectDisposedException">If the parent image has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.GetPixel(Stemmer.Cvb.Point2D)">
            <summary>
            Gets the pixel value at the given <paramref name="position"/>.
            </summary>
            <param name="position">Position in pixel coordinates.</param>
            <returns>The pixel value; <see cref="F:System.Double.NaN"/> if the value could
            not be dereferenced.</returns>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.GetPixel(System.Int32,System.Int32)">
            <summary>
            Gets the pixel value at the given position.
            </summary>
            <param name="x">Position in pixel coordinates.</param>
            <param name="y">Position in pixel coordinates.</param>
            <returns>The pixel value; <see cref="F:System.Double.NaN"/> if the value could
            not be dereferenced.</returns>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.Initialize(System.Double)">
            <summary>
            Initialize this plane to a specific value.
            </summary>
            <param name="value">value to initialize the plane to</param>
            <exception cref="T:System.ObjectDisposedException">If the parent image has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.Initialize(Stemmer.Cvb.Area2D,System.Double)">
            <summary>
            Initialize an <paramref name="area"/> of an image to a specific value.
            </summary>
            <param name="area">area to be initialized</param>
            <param name="value">value to initialize the area to</param>
            <exception cref="T:System.ObjectDisposedException">If the parent image has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.ImagePlane.Map">
            <summary>
            Create a map from a single image plane that shares its memory with the
            original plane.
            </summary>
            <returns>Mapped image object.</returns>
            <exception cref="T:System.ObjectDisposedException">If the parent image has 
            already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Point2Dd">
            <summary>
            Multi-purpose 2D Point class
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.#ctor(Stemmer.Cvb.Point2D)">
            <summary>
            Create a <see cref="T:Stemmer.Cvb.Point2Dd"/> CvbPointD from a <see cref="T:Stemmer.Cvb.Point2D"/>.
            </summary>
            <param name="pt"><see cref="T:Stemmer.Cvb.Point2D"/> to be converted.</param>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.#ctor(System.Double,System.Double)">
            <summary>
            Create a Vector2D from the x and y component.
            </summary>
            <param name="x">data to initialize with</param>
            <param name="y">data to initialize with</param>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.#ctor(Stemmer.Cvb.Angle,System.Double)">
            <summary>
            Create a PointD vector from radial coordinates. Note that the 
            <see cref="T:Stemmer.Cvb.Point2Dd"/> vectors are internally stored in Cartesian 
            coordinates and that extensive use of radial coordinates my be slow.
            </summary>
            <param name="phi">Angle coordinate.</param>
            <param name="r">Radius coordinate.</param>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.#ctor(System.Double[])">
            <summary>
            ctor for unmanaged pixel list conversion.
            </summary>
            <param name="tmp">pixel to convert (must have at least two elements!)
            </param>
        </member>
        <member name="P:Stemmer.Cvb.Point2Dd.X">
            <summary>
            x component of the rhs
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point2Dd.Y">
            <summary>
            y component of the rhs
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point2Dd.Item(System.Int32)">
            <summary>
            Index access.
            </summary>
            <param name="row">The element to access (0 is <see cref="P:Stemmer.Cvb.Point2Dd.X"/>).</param>
            <returns></returns>
        </member>
        <member name="P:Stemmer.Cvb.Point2Dd.Length">
            <summary>
            length of the vector represented by this PointD object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Point2Dd.Phi">
            <summary>
            Orientation of the vector represented by this PointD object.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Point2Dd.Empty">
            <summary>
            Empty rhs
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Point2Dd.UnitVectorX">
            <summary>
            Unit rhs in x direction
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Point2Dd.UnitVectorY">
            <summary>
            Unit rhs in y direction
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.Equals(System.Object)">
            <summary>
            Compares this point with the given <paramref name="obj"/>.
            </summary>
            <param name="obj">Object to compare with.</param>
            <returns><see langword="true"/> if <paramref name="obj"/> is a
            <b>Point2Dd</b> and the components are equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.Equals(Stemmer.Cvb.Point2Dd)">
            <summary>
            Compares this point with the given <paramref name="rhs"/> one.
            </summary>
            <param name="rhs">Point to compare with.</param>
            <returns><see langword="true"/> if components are equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this PointD</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.ToPoint2D">
            <summary>
            Converter a PointD to a Point.
            </summary>
            <returns>Point representation of this object</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Subtraction(Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2Dd)">
            <summary>
            Subtraction operator for PointD structures.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>Difference of <paramref name="lhs"/> and 
            <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Addition(Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2Dd)">
            <summary>
            Addition operator for PointD structures.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Subtraction(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2D)">
            <summary>
            Subtraction operator for PointD structures.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Addition(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2D)">
            <summary>
            Addition operator for PointD structures.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>Sum of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Subtraction(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd)">
            <summary>
            Subtraction operator for PointD structs.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>Difference of <paramref name="lhs"/> and 
            <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Addition(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd)">
            <summary>
            Addition operator for PointD structs.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns>Sum of <paramref name="lhs"/> and 
            <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Inequality(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd)">
            <summary>
            Comparison operator for PointD structs.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns><c>true</c> if lhs != rhs, <c>false</c> otherwise´.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Equality(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd)">
            <summary>
            Comparison operator for PointD structs.
            </summary>
            <param name="lhs">left hand side operand</param>
            <param name="rhs">right hand side operand</param>
            <returns><c>true</c> if lhs == rhs, <c>false</c> otherwise´.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Multiply(Stemmer.Cvb.Matrix2D,Stemmer.Cvb.Point2Dd)">
            <summary>
            Multiply a Matrix with a PointD rhs.
            </summary>
            <param name="lhs">matrix</param>
            <param name="rhs">rhs</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Multiply(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd)">
            <summary>
            Inner product of two PointD vectors.
            </summary>
            <param name="lhs">left hand side vector</param>
            <param name="rhs">right hand side vector</param>
            <returns>Inner product of <paramref name="lhs"/> and 
            <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Multiply(System.Double,Stemmer.Cvb.Point2Dd)">
            <summary>
            Multiply a PointD with a number.
            </summary>
            <param name="rhs">rhs to multiply with</param>
            <param name="lhs">lhs to multiply with</param>
            <returns>Product of <paramref name="lhs"/> and <paramref name="rhs"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Multiply(Stemmer.Cvb.AffineMatrix2D,Stemmer.Cvb.Point2Dd)">
            <summary>
            Transform a point using an affine matrix (= coordinate system).
            </summary>
            <param name="m">affine matrix to transform with</param>
            <param name="p">point to transform</param>
            <returns>Product of <paramref name="m"/> and <paramref name="p"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Point2Dd.op_Division(Stemmer.Cvb.Point2Dd,System.Double)">
            <summary>
            Divide a <see cref="T:Stemmer.Cvb.Point2Dd"/> structure by dividing its X and Y
            component.
            </summary>
            <param name="p">Point to be divided</param>
            <param name="d">Divisor</param>
            <returns>Divided point</returns>
        </member>
        <member name="T:Stemmer.Cvb.Process">
            <summary>
            Collection of functions available for image processing.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Process.AffineTransform(Stemmer.Cvb.Image,Stemmer.Cvb.AffineMatrix2D)">
            <summary>
            Creates an affine transformation (homogeneous matrix transformation)
            of the whole image <paramref name="img"/>.
            </summary>
            <remarks>
            Linear interpolation is used for the transformation.
            </remarks>
            <param name="img">Source image.</param>
            <param name="m">Matrix to transform <paramref name="img"/>.</param>
            <returns>Newly created image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Process.AffineTransform(Stemmer.Cvb.Image,Stemmer.Cvb.AffineMatrix2D,Stemmer.Cvb.Area2D)">
            <summary>
            Creates an affine transformation (homogeneous matrix transformation)
            of an area <paramref name="a"/> of the given image
            <paramref name="img"/>.
            </summary>
            <remarks>
            Linear interpolation is used for the transformation.
            </remarks>
            <param name="img">Source image.</param>
            <param name="m">Matrix to transform <paramref name="img"/>.</param>
            <param name="a">Area of <paramref name="img"/> to transform.</param>
            <returns>Newly created image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Process.LinearTransform(Stemmer.Cvb.Image,Stemmer.Cvb.Matrix2D)">
            <summary>
            Creates a linear transformation (matrix transformation).
            </summary>
            <remarks>
            Linear interpolation is used for the transformation.
            </remarks>
            <param name="img">Source image.</param>
            <param name="m">Matrix to transform <paramref name="img"/>.</param>
            <returns>Newly created image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Process.MapTo8Bit(Stemmer.Cvb.Image,System.Boolean)">
            <summary>
            Take an input image and scale the pixel values to fit into the 8 bit
            value range.
            </summary>
            <param name="img">image to be mapped</param>
            <param name="collective">If true, the same normalization factors will
            be used for all planes, if false the normalization will be carried
            out independently for each plane</param>
            <returns>newly create image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Process.MapTo8Bit(Stemmer.Cvb.Image)">
            <summary>
            Take an input image and scale the pixel values to fit into the 8 bit
            value range, using collective normalization.
            </summary>
            <param name="img">image to be mapped</param>
            <returns>newly create image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Process.NormalizeMinMax(Stemmer.Cvb.Image,System.Double,System.Double)">
            <summary>
            Normalize an input image using min/max normalization (the gray values
            of the image will be stretched or compressed to fit the input target
            minimum and maximum values).
            </summary>
            <param name="img">image to be normalized</param>
            <param name="targetMin">target minimum value to achieve</param>
            <param name="targetMax">target maximum value to achieve</param>
            <returns>newly created image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Process.NormalizeMeanVariance(Stemmer.Cvb.Image,System.Double,System.Double)">
            <summary>
            Normalize an input image using mean/variance normalization (the gray 
            values of the image will be stretched modified to generate a histogram
            as close as possible to the input target mean and variance values).
            </summary>
            <param name="img">image to be normalized</param>
            <param name="targetMean">target mean value to achieve</param>
            <param name="targetVariance">target variance value to achieve</param>
            <returns>newly created image</returns>
            <exception cref="T:System.ArgumentNullException">If the input
            <paramref name="img"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the input
            <paramref name="img"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Process.PolarTransform(Stemmer.Cvb.Image,Stemmer.Cvb.Point2Dd,System.Double,System.Double,Stemmer.Cvb.Angle,Stemmer.Cvb.Angle)">
            <summary>
            Create a polar transformation (i.e. unwrap a ring structure from 
            inside source image into a rectangular image).
            </summary>
            <remarks>
            Linear interpolation is being used for the transformation.
            </remarks>
            <param name="img">Source image</param>
            <param name="center">Center image for the polar transform</param>
            <param name="startAngle">Orientation of the start angle</param>
            <param name="totalAngle">The total angle to cover</param>
            <param name="innerRadius">Inner radius of the ring</param>
            <param name="outerRadius">Outer radius of the ring</param>
            <returns>Newly created image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Process.PolarTransform(Stemmer.Cvb.Image,Stemmer.Cvb.Point2Dd,System.Double,System.Double)">
            <summary>
            Create a polar transformation (i.e. unwrap a ring structure from 
            inside source image into a rectangular image).
            </summary>
            <remarks>
            Linear interpolation is being used for the transformation.
            </remarks>
            <param name="img">Source image</param>
            <param name="center">Center image for the polar transform</param>
            <param name="innerRadius">Inner radius of the ring</param>
            <param name="outerRadius">Outer radius of the ring</param>
            <returns>Newly created image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Process.InversePolarTransform(Stemmer.Cvb.Image,Stemmer.Cvb.Angle,System.Double)">
            <summary>
            Create an inverse polar transformed image (i.e. transform an unwrapped
            image back into a ring structure).
            </summary>
            <remarks>Linear interpolation is being used for the transformation.
            </remarks>
            <param name="img">Source image</param>
            <param name="startAngle">Orientation of the start (the total azimuth
            will be determined from the input image)</param>
            <param name="innerRadius">Inner radius of the ring (the outer radius
            will be determined from the input image)</param>
            <returns>the transformed image</returns>
        </member>
        <member name="M:Stemmer.Cvb.Process.InversePolarTransform(Stemmer.Cvb.Image,Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Angle,System.Double,Stemmer.Cvb.Image)">
            <summary>
            Calculates an inverse polar transformed image (i.e. transform an 
            unwrapped image back into a ring structure).
            </summary>
            <remarks>Linear interpolation is being used for the transformation.
            </remarks>
            <param name="imgSrc">Source image</param>
            <param name="center">Center for the inverse transformation (i.e. the
            point around which the ring will be constructed)</param>
            <param name="startAngle">Orientation of the start (the total azimuth
            will be determined from the input image)</param>
            <param name="innerRadius">Inner radius of the ring (the outer radius
            will be determined from the input image)</param>
            <param name="imgDst">Destination image into which the unwrap result
            will be painted</param>
        </member>
        <member name="M:Stemmer.Cvb.Process.FlatfieldCorrection(Stemmer.Cvb.Image,Stemmer.Cvb.Image,System.Double)">
            <summary>
            Performs a flat field correction on the <paramref name="imgSrc"/>.
            </summary>
            <param name="imgSrc">Image to perform flat field correction on.</param>
            <param name="imgFlat">The flat image showing the background.</param>
            <param name="gain">A gain value used to adjust the brightness of
            the output image. Usually roughly the average gray value of
            <paramref name="imgSrc"/> is used.</param>
            <returns>Flatfield corrected image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Process.FlatfieldCorrection(Stemmer.Cvb.Image,Stemmer.Cvb.Image,Stemmer.Cvb.Image,System.Double)">
            <summary>
            Performs a flat field correction on the <paramref name="imgSrc"/>
            with optional correction of the fix pattern noise.
            </summary>
            <param name="imgSrc">Image to perform flat field correction on.</param>
            <param name="imgFlat">The flat image showing the background.</param>
            <param name="imgDark">Optional dark image.</param>
            <param name="gain">A gain value used to adjust the brightness of
            the output image. Usually roughly the average gray value of
            <paramref name="imgSrc"/> is used.</param>
            <returns>Flatfield corrected image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Process.DifferenceMap(Stemmer.Cvb.Image,Stemmer.Cvb.Image)">
            <summary>
            Creates a difference map of the given range maps.
            </summary>
            <param name="rangeMap1">Range map one.</param>
            <param name="rangeMap2">Range map two.</param>
            <returns>Difference map of the given range maps.</returns>
            <exception cref="T:System.ArgumentNullException">When one of the range maps is null.</exception>
            <exception cref="T:System.ObjectDisposedException">When one of the range maps is already disposed.</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">When creating the difference map failed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.RectD">
            <summary>
            Corresponds in intention and use with the type <see cref="T:Stemmer.Cvb.RectD"/>, 
            although <see cref="T:Stemmer.Cvb.RectD"/> is far more widely used.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.RectD.Left">
            <summary>
            Left edge of the rectangle.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.RectD.Top">
            <summary>
            Top edge of the rectangle.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.RectD.Right">
            <summary>
            Right edge of the rectangle.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.RectD.Bottom">
            <summary>
            Bottom edge of the rectangle.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.RectD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a RectD structure.
            </summary>
            <param name="left">Left edge of the rectangle</param>
            <param name="top">top edge of the rectangle</param>
            <param name="right">Right edge of the rectangle</param>
            <param name="bottom">bottom edge of the rectangle</param>
        </member>
        <member name="M:Stemmer.Cvb.RectD.#ctor(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Size2Dd)">
            <summary>
            Constructs a RectD structure.
            </summary>
            <param name="location">Left/top location.</param>
            <param name="size">Width and height.</param>
        </member>
        <member name="P:Stemmer.Cvb.RectD.Width">
            <summary>
            Width of the rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.RectD.Height">
            <summary>
            Height of the rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.RectD.Location">
            <summary>
            Location of the top left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.RectD.IsEmpty">
            <summary>
            True if width and height are both zero, false otherwise.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.RectD.Empty">
            <summary>
            Null-element.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.RectD.Contains(Stemmer.Cvb.Point2Dd)">
            <summary>
            Check if a point is located inside this <see cref="T:Stemmer.Cvb.RectD"/>.
            </summary>
            <param name="pt">Point to be checked</param>
            <returns>true if <paramref name="pt"/> is inside this 
            <see cref="T:Stemmer.Cvb.RectD"/>, false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained with this 
            <see cref="T:Stemmer.Cvb.RectD"/>.
            </summary>
            <param name="x">X-coordinate of the point to test</param>
            <param name="y">Y-coordinate of the point to test</param>
            <returns><c>true</c> of the point defined through the parameters
            <paramref name="x"/> and <paramref name="y"/> is inside this 
            <see cref="T:Stemmer.Cvb.Rect"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.IntersectsWith(Stemmer.Cvb.RectD)">
            <summary>
            Test if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test</param>
            <returns>true if there is any intersection, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.Intersect(Stemmer.Cvb.RectD)">
            <summary>
            Replaces this rectangle with the intersection of itself and the 
            specified rectangle.
            </summary>
            <param name="rect">The rectangle with which to intersect</param>
        </member>
        <member name="M:Stemmer.Cvb.RectD.Intersect(Stemmer.Cvb.RectD,Stemmer.Cvb.RectD)">
            <summary>
            Returns a <see cref="T:Stemmer.Cvb.RectD"/> structure that represents the 
            intersection of the two input rectangles. If there is no intersection, 
            an empty <see cref="T:Stemmer.Cvb.RectD"/> is returned.
            </summary>
            <param name="a"><see cref="T:Stemmer.Cvb.RectD"/> to intersect.</param>
            <param name="b"><see cref="T:Stemmer.Cvb.RectD"/> to intersect.</param>
            <returns>a <see cref="T:Stemmer.Cvb.RectD"/> that represents the intersection of a 
            and b.</returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.Union(Stemmer.Cvb.RectD,Stemmer.Cvb.RectD)">
            <summary>
            Gets a <see cref="T:Stemmer.Cvb.RectD"/> structure that contains the union of two
            <see cref="T:Stemmer.Cvb.RectD"/> structures.
            </summary>
            <param name="a">A rectangle to union</param>
            <param name="b">A rectangle to union</param>
            <returns>A <see cref="T:Stemmer.Cvb.RectD"/> that bounds the union of the two
            <see cref="T:Stemmer.Cvb.RectD"/> structures</returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a <see cref="T:Stemmer.Cvb.RectD"/> structure with the specified edge 
            locations. 
            </summary>
            <param name="left">The x-coordinate of the upper left corner of this
            <see cref="T:Stemmer.Cvb.Rect"/> structure</param>
            <param name="top">The y-coordinate of the upper left corner of this
            <see cref="T:Stemmer.Cvb.Rect"/> structure</param>
            <param name="right">The x-coordinate of the lower right corner of this
            <see cref="T:Stemmer.Cvb.Rect"/> structure</param>
            <param name="bottom">The y-coordinate of the lower right corner of 
            this <see cref="T:Stemmer.Cvb.Rect"/> structure</param>
            <returns>The new <see cref="T:Stemmer.Cvb.Rect"/> that this method creates.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.op_Inequality(Stemmer.Cvb.RectD,Stemmer.Cvb.RectD)">
            <summary>
            Comparison operator for <see cref="T:Stemmer.Cvb.RectD"/> structures.
            </summary>
            <param name="lhs">Left hand side operand</param>
            <param name="rhs">Right hand side operand</param>
            <returns><c>true</c> if <paramref name="lhs"/> != 
            <paramref name="rhs"/>, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.op_Equality(Stemmer.Cvb.RectD,Stemmer.Cvb.RectD)">
            <summary>
            Comparison operator for <see cref="T:Stemmer.Cvb.RectD"/> structures.
            </summary>
            <param name="lhs">Left hand side operand</param>
            <param name="rhs">Right hand side operand</param>
            <returns><c>true</c> if <paramref name="lhs"/> == 
            <paramref name="rhs"/>, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref="T:Stemmer.Cvb.RectD"/> 
            structure with the same location and size of this <see cref="T:Stemmer.Cvb.RectD"/>
            structure.
            </summary>
            <param name="obj">Object to compare to this one.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a <c>RectD</c> and
            if the borders are equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.GetHashCode">
            <summary>
            Returns the hash code for this Rectangle
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>String representation of this <see cref="T:Stemmer.Cvb.RectD"/></returns>
        </member>
        <member name="M:Stemmer.Cvb.RectD.op_Implicit(Stemmer.Cvb.Rect)~Stemmer.Cvb.RectD">
            <summary>
            Implicit conversion from <see cref="T:Stemmer.Cvb.Rect"/> to <c>RectD</c>.
            </summary>
            <param name="rect">Rectangle to be converted.</param>
            <returns>New <c>RectD.</c></returns>
        </member>
        <member name="P:Stemmer.Cvb.RectD.CoordinateSystem">
            <summary>
            Indicates the coordinate system in which this object is being measured
            (when used as an area of interest).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.RectD.Area">
            <summary>
            Area of the rectangle.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.ValueRange`1">
            <summary>
            Container for range definitions.
            </summary>
            <typeparam name="TValue">type of value</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.ValueRange`1.#ctor(`0,`0)">
            <summary>
            Initialize a ValueRange object.
            </summary>
            <param name="min">minimum value</param>
            <param name="max">maximum value</param>
        </member>
        <member name="P:Stemmer.Cvb.ValueRange`1.Min">
            <summary>
            Minimum value.
            </summary>
            <exception cref="T:System.ArgumentException">when trying to set a value that 
            exceeds the currently set <see cref="P:Stemmer.Cvb.ValueRange`1.Max"/> value</exception>
        </member>
        <member name="P:Stemmer.Cvb.ValueRange`1.Max">
            <summary>
            Maximum value.
            </summary>
            <exception cref="T:System.ArgumentException">when trying to set a value that 
            is lower than the currently set <see cref="P:Stemmer.Cvb.ValueRange`1.Min"/> value</exception>
        </member>
        <member name="M:Stemmer.Cvb.ValueRange`1.Contains(`0)">
            <summary>
            Check if a value is within the range.
            </summary>
            <param name="val">Value to be checked</param>
            <returns>true if <paramref name="val"/> is within the range
            defined by this object, false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.ValueRange`1.IntersectsWith(Stemmer.Cvb.ValueRange{`0})">
            <summary>
            Check if this value range intersects with another value range.
            </summary>
            <param name="other">Object for intersection test.</param>
            <returns>true if this range and the <paramref name="other"/> range 
            have at least one value in common, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.ValueRange`1.GetHashCode">
            <summary>
            Standard hashing function.
            </summary>
            <returns>Hash code for the current object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.ValueRange`1.Equals(System.Object)">
            <summary>
            Equality check for ValueRange structures.
            </summary>
            <param name="obj">object to compare to</param>
            <returns><c>true</c> if this object and the object referred to by
            <paramref name="obj"/> are identical, false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.ValueRange`1.op_Equality(Stemmer.Cvb.ValueRange{`0},Stemmer.Cvb.ValueRange{`0})">
            <summary>
            Equality check for two ValueRange structures.
            </summary>
            <param name="lhs">left hand side</param>
            <param name="rhs">right hand side</param>
            <returns><c>true</c> if <paramref name="lhs"/> and 
            <paramref name="rhs"/> are identical, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.ValueRange`1.op_Inequality(Stemmer.Cvb.ValueRange{`0},Stemmer.Cvb.ValueRange{`0})">
            <summary>
            Inequality check for two ValueRange structures.
            </summary>
            <param name="lhs">left hand side</param>
            <param name="rhs">right hand side</param>
            <returns><c>true</c> if <paramref name="lhs"/> and 
            <paramref name="rhs"/> are different, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.VpatRotation">
            <summary>
            Identifiers for discrete VPAT rotations
            </summary>
            <remarks>VPAT rotation may be switched on or off for many drivers in 
            their ini-file.</remarks>
        </member>
        <member name="F:Stemmer.Cvb.VpatRotation.Unknown">
            <summary>
            VPAT is irregular, so it is impossible to tell the rotation.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.VpatRotation.Rotation0">
            <summary>
            VPAT represents an image without rotation.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.VpatRotation.Rotation90">
            <summary>
            VPAT represents an image that has been rotated by 90° counter
            clockwise.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.VpatRotation.Rotation180">
            <summary>
            VPAT represents an image that has been rotated by 180° counter
            clockwise.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.VpatRotation.Rotation270">
            <summary>
            VPAT represents an image that has been rotated by 270° counter
            clockwise.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.VpatLayout">
            <summary>
            Defines diagnostic information about the contents a VPAT.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.VpatLayout.Confuse">
            <summary>
            VPAT is mixed up, increments are not linearly arranged.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.VpatLayout.LinearWithDataType">
            <summary>
            VPAT is linear and uses an increment that matches the data type of 
            the image.
            </summary>
            <remarks>
            That means the delta from one pixel to the next in x direction is
            exactly the number of bytes occupied by one pixel or the delta from
            one pixel to the next in y direcction is exactly width * bytes per
            pixel). Note that this will never be the case for interleaved 
            multi planar images.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.VpatLayout.Linear">
            <summary>
            The VPAT has linear arrangement.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.VpatLayout.ReverseLinear">
            <summary>
            The VPAT has linear arrangement and a negative increment.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Vpat">
            <summary>
            Virtual Pixel Access Table.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Vpat.VpatFringe">
            <summary>
            Just as a reminder...
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Vpat.VpatDirection">
            <summary>
            pretty-printed VPAT access...
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Vpat.VpatDirection.X">
            <summary>
            Enumerate over X entries.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Vpat.VpatDirection.Y">
            <summary>
            Enumerate over Y entries.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Vpat.IndexerBase">
            <summary>
            Indexer object for X and Y VPAT access.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.IndexerBase.#ctor(Stemmer.Cvb.Vpat,Stemmer.Cvb.Vpat.VpatDirection)">
            <summary>
            ctor
            </summary>
            <param name="parent">parent vpat</param>
            <param name="dir">scan direction</param>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.IndexerBase.GetEntry(System.Int32)">
            <summary>
            Gets the VPAT entry at the given <paramref name="index"/>.
            </summary>
            <param name="index">Entry to access.</param>
            <returns>The VPAT entry at <paramref name="index"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="index"/> is out of range.</exception>
        </member>
        <member name="F:Stemmer.Cvb.Vpat.IndexerBase._parent">
            <summary>
            Memorized parent for the sake of image lifetime (to not be garbage
            collected).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Vpat.IndexerBase.VpatBasePtr">
            <summary>
            base pointer for VPAT access (allows us to select x or y vpat by
            means of the offset
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Vpat.IndexerBase.MaxIndex">
            <summary>
            Maximum allowable index for VPAT access
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Vpat.IntPtrIndexer">
            <summary>
            Indexer that returns an <see cref="T:System.IntPtr"/> offset.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.IntPtrIndexer.#ctor(Stemmer.Cvb.Vpat,Stemmer.Cvb.Vpat.VpatDirection)">
            <summary>
            ctor
            </summary>
            <param name="parent">parent vpat</param>
            <param name="dir">scan direction</param>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.IntPtrIndexer.Item(System.Int32)">
            <summary>
            Read/write a VPAT entry.
            </summary>
            <remarks>Be careful when overwriting entries in the VPAT as it may 
            lead to crashes in your application.</remarks>
            <param name="index">index of the entry to be read or written</param>
            <returns>The VPAT table entry.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="index"/> is out of range.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.IntPtrIndexer.System#Collections#Generic#IEnumerable{System#IntPtr}#GetEnumerator">
            <summary>
            Provide the enumerator for indexer access.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.IntPtrIndexer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provide the enumerator for plane information access.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="T:Stemmer.Cvb.Vpat.IntIndexer">
            <summary>
            Indexer that returns an <see cref="T:System.Int32"/> offset.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.IntIndexer.#ctor(Stemmer.Cvb.Vpat,Stemmer.Cvb.Vpat.VpatDirection)">
            <summary>
            ctor
            </summary>
            <param name="parent">parent vpat</param>
            <param name="dir">scan direction</param>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.IntIndexer.Item(System.Int32)">
            <summary>
            Read/write a VPAT entry.
            </summary>
            <remarks>Be careful when overwriting entries in the VPAT as it may 
            lead to crashes in your application.</remarks>
            <param name="index">index of the entry to be read or written</param>
            <returns>The VPAT table entry.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="index"/> is out of range.</exception>
            <exception cref="T:System.OverflowException">on a 64-bit platform, the value 
            of an entry is too large or too small to represent as a 32-bit 
            signed integer.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.IntIndexer.System#Collections#Generic#IEnumerable{System#Int32}#GetEnumerator">
            <summary>
            Provide the enumerator for indexer access.
            </summary>
            <returns>Enumerator</returns>
            <exception cref="T:System.OverflowException">on a 64-bit platform, the value 
            of an entry is too large or too small to represent as a 32-bit 
            signed integer.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.IntIndexer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provide the enumerator for plane information access.
            </summary>
            <returns>Enumerator</returns>
            <exception cref="T:System.OverflowException">on a 64-bit platform, the value 
            of an entry is too large or too small to represent as a 32-bit 
            signed integer.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Vpat.LongIndexer">
            <summary>
            Indexer that returns an <see cref="T:System.Int64"/> offset.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.LongIndexer.#ctor(Stemmer.Cvb.Vpat,Stemmer.Cvb.Vpat.VpatDirection)">
            <summary>
            ctor
            </summary>
            <param name="parent">parent vpat</param>
            <param name="dir">scan direction</param>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.LongIndexer.Item(System.Int32)">
            <summary>
            Read/write a VPAT entry.
            </summary>
            <remarks>Be careful when overwriting entries in the VPAT as it may 
            lead to crashes in your application.</remarks>
            <param name="index">index of the entry to be read or written</param>
            <returns>The VPAT table entry.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="index"/> is out of range.</exception>
            <exception cref="T:System.OverflowException">On a 32-bit platform, value is 
            too large or too small to represent as an <see cref="T:System.IntPtr"/>.
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.LongIndexer.System#Collections#Generic#IEnumerable{System#Int64}#GetEnumerator">
            <summary>
            Provide the enumerator for indexer access.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.LongIndexer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Provide the enumerator for plane information access.
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="T:Stemmer.Cvb.Vpat.Entry">
            <summary>
            One entry of the VPAT.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.Entry.OffsetX">
            <summary>
            X offset from line start.
            </summary>
            <value>Offset in bytes.</value>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.Entry.OffsetY">
            <summary>
            Y offset from <see cref="P:Stemmer.Cvb.Vpat.BasePtr"/>.
            </summary>
            <value>Offset in bytes.</value>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.#ctor(Stemmer.Cvb.Image,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="parent">parent image</param>
            <param name="plane">plane to which the vpat refers</param>
            <exception cref="T:System.AccessViolationException">If the VPAT cannot 
            currently be accessed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.AnalyzeXVpat">
            <summary>
            Analyze the layout of the parent's X vpat.
            </summary>
            <returns>Vpat Layout.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Vpat.AnalyzeYVpat">
            <summary>
            Analyze the layout of the parent's X vpat.
            </summary>
            <returns>Vpat Layout.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.XVpatLayout">
            <summary>
            Increment layout of the x VPAT.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.YVpatLayout">
            <summary>
            Increment layout of the y VPAT.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.VpatLayout">
            <summary>
            Combined VPAT layout. If x or y VPAT layout is confuse, the combined
            layout will also be confuse. If x or y VPAT layout is linear, 
            the combined layout will also be linear. If x and y VPAT layout is 
            linear with data type, the combined layout will be linear with 
            data type.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.Rotation">
            <summary>
            Guesses the rotation of this VPAT.
            </summary>
            <remarks>The assumption about the underlying buffer is that it is 
            positively linear (positive x- and y-increments). If this is not the
            case as with default windows bitmaps, the guess is plain wrong.
            </remarks>
            <value>Entry of the <see cref="T:Stemmer.Cvb.VpatRotation"/> enumeration.</value>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.XEntry">
            <summary>
            X offset table.
            </summary>
            <remarks>VPAT access is returned as IntPtr with this indexer, giving 
            you the correct size of offsets for the platform you are running on,
            but making it necessary to properly convert the offsets when doing
            calculations.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.YEntry">
            <summary>
            Y offset table.
            </summary>
            <remarks>VPAT access is returned as IntPtr with this indexer, giving 
            you the correct size of offsets for the platform you are running on,
            but making it necessary to properly convert the offsets when doing
            calculations.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.IntXEntry">
            <summary>
            X offset table.
            </summary>
            <remarks>VPAT access is returned as Int32 with this indexer. Note that
            it is only safe to use this indexer if your application is running as
            a 32 bit application.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.IntYEntry">
            <summary>
            Y offset table.
            </summary>
            <remarks>VPAT access is returned as Int32 with this indexer. Note that
            it is only safe to use this indexer if your application is running as
            a 32 bit application.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.LongXEntry">
            <summary>
            X offset table.
            </summary>
            <remarks>VPAT access is returned as Int64 with this indexer. This 
            indexer is safe to use for 32 or 64 bit applications, but may increase
            processing time.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.LongYEntry">
            <summary>
            Y offset table.
            </summary>
            <remarks>VPAT access is returned as Int64 with this indexer. This 
            indexer is safe to use for 32 or 64 bit applications, but may increase
            processing time.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.BasePtr">
            <summary>
            VPAT base pointer.
            </summary>
            <remarks>Note that this is <i>not necessarily</i> a pointer to the 
            first pixel in the image or the first pixel in the last line of the
            image, but merely a base pointer for calculating the address of a 
            pixel using the x and y offset tables.</remarks>
        </member>
        <member name="F:Stemmer.Cvb.Vpat.pbase_">
            <summary>
            VPAT base pointer as returned by GetImageVPA
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Vpat.VpatPtr">
            <summary>
            Pointer to the native VPAT structure.
            </summary>
            <remarks>This points to the first <see cref="T:Stemmer.Cvb.Vpat.Entry"/> and can be 
            interpreted as <c>Entry*</c> in unsafe context.</remarks>
        </member>
        <member name="F:Stemmer.Cvb.Vpat.pvpat_">
            <summary>
            VPAT pointer as returned by GetImageVPA
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Vpat.parent_">
            <summary>
            reference to parent for the sake of life time
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Vpat.plane_">
            <summary>
            memorized image plane to which the vpat refers
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.LinearAccessData">
            <summary>
            Linear Access properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.LinearAccessData.#ctor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            ctor
            </summary>
            <param name="pBase">base pointer</param>
            <param name="xInc">x-increment</param>
            <param name="yInc">y-increment</param>
        </member>
        <member name="F:Stemmer.Cvb.LinearAccessData.BasePtr">
            <summary>
            Linear access base pointer as returned by 
            <see cref="M:Stemmer.Cvb.ImagePlane.GetLinearAccess"/> and
            <see cref="M:Stemmer.Cvb.ImagePlane.TryGetLinearAccess(Stemmer.Cvb.LinearAccessData@)"/>.
            </summary>
            <remarks>Remember that the increments to be added to the base pointer
            are given in bytes, <i>not</i> in pixels. BasePtr by design points to 
            the pixel at location (0,0).</remarks>
        </member>
        <member name="F:Stemmer.Cvb.LinearAccessData.XInc">
            <summary>
            X-increment for linear access.
            </summary>
            <remarks>Remember that the increment is given in bytes, <i>not</i>
            in pixels.</remarks>
        </member>
        <member name="F:Stemmer.Cvb.LinearAccessData.YInc">
            <summary>
            Y-increment for linear access.
            </summary>
            <remarks>Remember that the increment is given in bytes, <i>not</i>
            in pixels.</remarks>
        </member>
        <member name="T:Stemmer.Cvb.LinearAccessData`1">
            <summary>
            Typed linear access properties with coordinate pixel access.
            </summary>
            <typeparam name="T">
            <para>Pixel type to use.</para>
            <para>Attention: Do not use reference types in <c>T</c> as this will
            leak memory!</para>
            </typeparam>
        </member>
        <member name="M:Stemmer.Cvb.LinearAccessData`1.#ctor(System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            ctor
            </summary>
            <param name="pBase">base pointer</param>
            <param name="xInc">x-increment</param>
            <param name="yInc">y-increment</param>
        </member>
        <member name="P:Stemmer.Cvb.LinearAccessData`1.BasePtr">
            <summary>
            Linear access base pointer as returned by 
            <see cref="M:Stemmer.Cvb.ImagePlane.GetLinearAccess"/> and
            <see cref="M:Stemmer.Cvb.ImagePlane.TryGetLinearAccess(Stemmer.Cvb.LinearAccessData@)"/>.
            </summary>
            <remarks>Remember that the increments to be added to the base pointer
            are given in bytes, <i>not</i> in pixels. BasePtr by design points to 
            the pixel at location (0,0).</remarks>
        </member>
        <member name="P:Stemmer.Cvb.LinearAccessData`1.XInc">
            <summary>
            X-increment for linear access.
            </summary>
            <remarks>Remember that the increment is given in bytes, <i>not</i>
            in pixels.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.LinearAccessData`1.YInc">
            <summary>
            Y-increment for linear access.
            </summary>
            <remarks>Remember that the increment is given in bytes, <i>not</i>
            in pixels.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.LinearAccessData`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the the pixel value at 
            [<paramref name="x"/>,<paramref name="y"/>].
            </summary>
            <remarks>
            <para>
            This is convenience functionality and not fast as this requires 
            generic marshaling.
            </para><para>
            Attention: This access is unchecked regarding out-of-range violations!
            </para>
            </remarks>
            <param name="x">X component of coordinate.</param>
            <param name="y">Y component of coordinate.</param>
            <returns>
            The value at [<paramref name="x"/>,<paramref name="y"/>].
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.VpatAccessData`1">
            <summary>
            Typed VPAT access properties with coordinate pixel access.
            </summary>
            <typeparam name="T">
            <para>Pixel type to use.</para>
            <para>Attention: Do not use reference types in <c>T</c> as this will
            leak memory!</para>
            </typeparam>
        </member>
        <member name="M:Stemmer.Cvb.VpatAccessData`1.#ctor(Stemmer.Cvb.Vpat)">
            <summary>
            Creats the access data.
            </summary>
            <param name="vpat"></param>
        </member>
        <member name="P:Stemmer.Cvb.VpatAccessData`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the the pixel value at 
            [<paramref name="x"/>,<paramref name="y"/>].
            </summary>
            <remarks>
            <para>
            This is convenience functionality and not fast as this requires 
            generic marshaling.
            </para><para>
            Attention: This access is unchecked regarding out-of-range violations!
            </para>
            </remarks>
            <param name="x">X component of coordinate.</param>
            <param name="y">Y component of coordinate.</param>
            <returns>
            The value at [<paramref name="x"/>,<paramref name="y"/>].
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.WhiteBalanceFactors">
            <summary>
            Factors for white balance correction.
            </summary>
            <remarks>Note that the whitebalance factors inside this structure are
            internally stored as integers with 1/256 increments. Therefore even
            though the values are exposed as doubles, they cannot represent the full
            range of double values.</remarks>
        </member>
        <member name="M:Stemmer.Cvb.WhiteBalanceFactors.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initialize a white balance factors structure.
            </summary>
            <param name="r">Correction factor for the red channel</param>
            <param name="g">Correction factor for the green channel</param>
            <param name="b">Correction factor for the blue channel</param>
        </member>
        <member name="F:Stemmer.Cvb.WhiteBalanceFactors.MaxFactor">
            <summary>
            Highest factor allowable.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.WhiteBalanceFactors.ConversionFactor">
            <summary>
            Factor to convert from double weights.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.WhiteBalanceFactors.Red">
            <summary>
            White balance factor for the red channel.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.WhiteBalanceFactors.Green">
            <summary>
            White balance factor for the red channel.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.WhiteBalanceFactors.Blue">
            <summary>
            White balance factor for the red channel.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.WhiteBalanceFactors.Identity">
            <summary>
            Identity transformation leaving all values as they are.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.WhiteBalance">
            <summary>
            WhiteBalance functions inside the Image Manager.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.WhiteBalance.CalculateFactors(Stemmer.Cvb.Image,Stemmer.Cvb.Area2D)">
            <summary>
            Calculate the red, green and blue gain factor for white balancing.
            </summary>
            <remarks>
            Floating-point valued images must not have negative pixel values for
            this operation to yield useful output.
            </remarks>
            <param name="image">Image on which the gain factors are to be
            calculated.</param>
            <param name="aoi">Area of interest that is assumed to be the neutral
            color.</param>
            <returns>Calculated white balance factors.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            has been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.WhiteBalance.ApplyFactors(Stemmer.Cvb.Image,Stemmer.Cvb.WhiteBalanceFactors)">
            <summary>
            Applies the white-balance <paramref name="factors"/> to the given
            <paramref name="image"/>.
            </summary>
            <param name="image">Image to apply white-balance factors to.</param>
            <param name="factors">Gain factors to apply.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            is <c>null</c>.</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            has been disposed.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Area2D">
            <summary>
            Structure that represents an area of interest in the image.
            </summary>
            <remarks>
            <para>The pixels of this type are always specified in
            <see cref="F:Stemmer.Cvb.CoordinateSystemType.ImageCoordinates"/></para>
            <para>Corresponds to the unmanaged type <c>TArea</c>. </para>.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.#ctor(Stemmer.Cvb.Rect)">
            <summary>
            Create an <c>Area2D</c> from the given rectangle <paramref name="r"/>
            using the identity transformation (equivalent to calling
            <c>new Area2D(r, AffineMatrix.Identity);</c>)
            </summary>
            <param name="r">Rectangle to create the Area2D from</param>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.#ctor(Stemmer.Cvb.Rect,Stemmer.Cvb.AffineMatrix2D)">
            <summary>
            Creates an <c>Area2D</c> from the given rectangle <paramref name="r"/>
            using the transformation <paramref name="m"/>.
            </summary>
            <param name="r">Rectangle to convert to image coordinates via matrix
            <paramref name="m"/>.</param>
            <param name="m">Affine matrix to transform pixel coordinates to image
            coordinates.</param>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor for Area2D.
            </summary>
            <param name="x0">X component of P0 (top left corner)</param>
            <param name="y0">Y component of P0 (top left corner)</param>
            <param name="x1">X component of P1 (top right corner)</param>
            <param name="y1">Y component of P1 (top right corner)</param>
            <param name="x2">X component of P2 (bottom left corner)</param>
            <param name="y2">Y component of P2 (bottom left corner)</param>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.#ctor(Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd)">
            <summary>
            Constructor for Area2D.
            </summary>
            <param name="p0">P0 (top left corner of the area)</param>
            <param name="p1">P1 (top right corner of the area)</param>
            <param name="p2">P2 (bottom left corner of the area)</param>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.#ctor(Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D,Stemmer.Cvb.Point2D)">
            <summary>
            Constructor for Area2D.
            </summary>
            <param name="p0">P0 (top left corner of the area)</param>
            <param name="p1">P1 (top right corner of the area)</param>
            <param name="p2">P2 (bottom left corner of the area)</param>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.#ctor(System.Double)">
            <summary>
            Constructor for Area2D.
            </summary>
            <param name="radius">Radius to construct the area with.</param>
        </member>
        <member name="F:Stemmer.Cvb.Area2D.Empty">
            <summary>
            An "Empty" identifier
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Area2D.P0">
            <summary>
            P0 of the Area (top left corner)
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Area2D.P1">
            <summary>
            P1 of the Area (top right corner)
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Area2D.P2">
            <summary>
            P2 of the Area (bottom left corner)
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Area2D.P3">
            <summary>
            Gets the calculated P3 of the Area (bottom right corner)
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Area2D.BoundingRectangle">
            <summary>
            Gets the bounding box of this area.
            </summary>
            <returns>The bounding rectangle.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Area2D.Size">
            <summary>
            Size (width and height) of the area of interest
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Area2D.Area">
            <summary>
            Size (in pixels) of the area of interest. As the area is a
            parallelogram the area (in pixels) is not simply "width * height"
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Area2D.CoordinateSystem">
            <summary>
            Coordinate system, in which this AOI is defined.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.ToString">
            <summary>
            Convert an Area2D object to a string.
            </summary>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.op_Inequality(Stemmer.Cvb.Area2D,Stemmer.Cvb.Area2D)">
            <summary>
            Comparison operator for <see cref="T:Stemmer.Cvb.Point2D"/> structs.
            </summary>
            <param name="lhs">Left hand side operand</param>
            <param name="rhs">Right hand side operand</param>
            <returns><c>true</c> lhs != rhs, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.op_Equality(Stemmer.Cvb.Area2D,Stemmer.Cvb.Area2D)">
            <summary>
            Comparison operator for <see cref="T:Stemmer.Cvb.Area2D"/> structs.
            </summary>
            <param name="lhs">Left hand side operand</param>
            <param name="rhs">Right hand side operand</param>
            <returns><c>true</c> lhs == rhs, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.Equals(System.Object)">
            <summary>
            Comparison function.
            </summary>
            <param name="obj">Object to compare to</param>
            <returns><c>true</c> if obj == this, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.Transform(Stemmer.Cvb.Matrix2D)">
            <summary>
            Transform this <see cref="T:Stemmer.Cvb.Area2D"/> using a <see cref="T:Stemmer.Cvb.Matrix2D"/>.
            </summary>
            <param name="m">Matrix to transform this area with</param>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.Transform(Stemmer.Cvb.AffineMatrix2D)">
            <summary>
            Transform this <see cref="T:Stemmer.Cvb.Area2D"/> using a AffineMatrix.
            </summary>
            <param name="m">Matrix to transform this area with</param>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.Offset(Stemmer.Cvb.Point2Dd)">
            <summary>
            Offsets the <see cref="T:Stemmer.Cvb.Area2D"/> structure by the specified amount.
            Note that the operation is carried out in-place.
            </summary>
            <param name="vec">Vector by which to offset the area</param>
        </member>
        <member name="M:Stemmer.Cvb.Area2D.SwapOrientation">
            <summary>
            Let the vertices P1 and P2 swap their place, effectively altering
            the scan direction of the AOI without changing the area covered by the
            aoi.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.VPAEntry">
            VPAT entry storage
        </member>
        <member name="T:Stemmer.Cvb.ImgLib">
            <summary>
            Internal class holding the method specifications and types for p/invoke.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Rect">
            <summary>
            Cvb Rectangle structure.
            </summary>
            <remarks>
            <para>Unlike <c>System.Drawing.Rectangle</c>, which upholds 
            the convention that Right and Bottom are not part of the rectangle (in 
            other words: Width = Left - Right and Height = Bottom - Top), Common
            Vision Blox always uses rectangles (or rectangular shaped areas of 
            interest represented by integer parameters left, top, right and bottom)
            in such a way that right and bottom are still part of the area to be 
            investigated (i.e. Width = Right - Left + 1 and Height = Bottom - Top 
            + 1).</para>
            <para>To model this difference correctly we decided to give CVB.Net a
            rectangle of its own which behaves according to the conventions used in
            Common Vision Blox.</para></remarks>
        </member>
        <member name="M:Stemmer.Cvb.Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for Cvb rectangles.
            </summary>
            <param name="left">Leftmost column of the rectangle</param>
            <param name="top">Topmost column of the rectangle</param>
            <param name="right">Rightmost column of the rectangle</param>
            <param name="bottom">Bottom columns of the rectangle</param>
        </member>
        <member name="M:Stemmer.Cvb.Rect.#ctor(Stemmer.Cvb.Point2D,Stemmer.Cvb.Size2D)">
            <summary>
            Constructor for Cvb rectangles.
            </summary>
            <param name="location">Location of the rectangle</param>
            <param name="size">Size of the rectangle</param>
        </member>
        <member name="P:Stemmer.Cvb.Rect.Left">
            <summary>
            First column of the rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Rect.Top">
            <summary>
            First row of the rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Rect.Right">
            <summary>
            Rightmost column of the rectangle (still inside the rectangle).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Rect.Bottom">
            <summary>
            Bottom row of the rectangle (still inside the rectangle).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Rect.Width">
            <summary>
            Width of the rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Rect.Height">
            <summary>
            Height of the rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Rect.Location">
            <summary>
            Location of the top left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Rect.IsEmpty">
            <summary>
            True if width and height are both zero, false otherwise.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Rect.Size">
            <summary>
            Size of the rectangle.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Rect.Empty">
            <summary>
            Null-element.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Rect.TruncateCeiling(Stemmer.Cvb.RectD)">
            <summary>
            Converts the given <paramref name="rect"/> to a <see cref="T:Stemmer.Cvb.Rect"/>
            structure by truncating <see cref="P:Stemmer.Cvb.Rect.Left"/> and <see cref="P:Stemmer.Cvb.Rect.Top"/> and 
            rounding <see cref="P:Stemmer.Cvb.Rect.Right"/> and <see cref="P:Stemmer.Cvb.Rect.Bottom"/> to the next 
            higher integer number.
            </summary>
            <param name="rect"><see cref="T:Stemmer.Cvb.Rect"/> to perform the operation on.
            </param>
            <returns>New rounded <see cref="T:Stemmer.Cvb.Rect"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Ceiling(Stemmer.Cvb.RectD)">
            <summary>
            Converts the given <paramref name="rect"/> to a <see cref="T:Stemmer.Cvb.Rect"/>
            structure by rounding the values of the <see cref="T:Stemmer.Cvb.RectD"/> structure 
            to the next higher integer number.
            </summary>
            <param name="rect"><see cref="T:Stemmer.Cvb.Rect"/> to perform ceiling operation on.
            </param>
            <returns>New rounded <see cref="T:Stemmer.Cvb.Rect"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Contains(Stemmer.Cvb.Point2D)">
            <summary>
            Check if a point is located inside this <see cref="T:Stemmer.Cvb.Rect"/>.
            </summary>
            <param name="pt">Point to be checked</param>
            <returns><c>true</c> if <paramref name="pt"/> is inside this 
            <see cref="T:Stemmer.Cvb.Rect"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Contains(Stemmer.Cvb.Point2Dd)">
            <summary>
            Check if a point is located inside this <see cref="T:Stemmer.Cvb.Rect"/>.
            </summary>
            <param name="pt">Point to be checked</param>
            <returns><c>true</c> if <paramref name="pt"/> is inside this 
            <see cref="T:Stemmer.Cvb.Rect"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Contains(Stemmer.Cvb.Point2Dd,System.Double)">
            <summary>
            Check if a point is located inside this <see cref="T:Stemmer.Cvb.Rect"/>.
            </summary>
            <param name="pt">Point to be checked</param>
            <param name="epsilon">Epsilon for comparison</param>
            <returns><c>true</c> if <paramref name="pt"/> is inside this 
            <see cref="T:Stemmer.Cvb.Rect"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Contains(System.Int32,System.Int32)">
            <summary>
            Determines if the specified point is contained with this 
            <see cref="T:Stemmer.Cvb.Rect"/>.
            </summary>
            <param name="x">X-coordinate of the point to test</param>
            <param name="y">Y-coordinate of the point to test</param>
            <returns><c>true</c> of the point defined through the parameters
            <paramref name="x"/> and <paramref name="y"/> is inside this 
            <see cref="T:Stemmer.Cvb.Rect"/>; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref="T:Stemmer.Cvb.Rect"/> structure
            with the same/ location and size as this <see cref="T:Stemmer.Cvb.Rect"/> structure.
            </summary>
            <param name="obj">Object to compare this one with.</param>
            <returns><c>true</c> if <paramref name="obj"/> is a <see cref="T:Stemmer.Cvb.Rect"/>
            and has the same border values; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Round(Stemmer.Cvb.RectD)">
            <summary>
            Converts the given <paramref name="rect"/> to a <see cref="T:Stemmer.Cvb.Rect"/>
            structure by rounding the values of the <see cref="T:Stemmer.Cvb.RectD"/> structure 
            mathematically.
            </summary>
            <param name="rect"><see cref="T:Stemmer.Cvb.Rect"/> to perform ceiling operation on.
            </param>
            <returns>New rounded <see cref="T:Stemmer.Cvb.Rect"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Truncate(Stemmer.Cvb.RectD)">
            <summary>
            Converts the given <paramref name="rect"/> to a <see cref="T:Stemmer.Cvb.Rect"/>
            structure by rounding the values of the <see cref="T:Stemmer.Cvb.RectD"/> structure
            to the next lower integer number.
            </summary>
            <param name="rect"><see cref="T:Stemmer.Cvb.Rect"/> to perform ceiling operation on.
            </param>
            <returns>New rounded <see cref="T:Stemmer.Cvb.Rect"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Stemmer.Cvb.Rect"/>.
            </summary>
            <returns>Hash code for this <see cref="T:Stemmer.Cvb.Rect"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>string representation of this <see cref="T:Stemmer.Cvb.Rect"/></returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.IntersectsWith(Stemmer.Cvb.Rect)">
            <summary>
            Test if this rectangle intersects with <paramref name="rect"/>.
            </summary>
            <param name="rect">The rectangle to test</param>
            <returns><c>true</c> if there is any intersection, <c>false</c> 
            otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Intersect(Stemmer.Cvb.Rect)">
            <summary>
            Replaces this rectangle with the intersection of itself and the 
            specified rectangle.
            </summary>
            <param name="rect">The rectangle with which to intersect</param>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Intersect(Stemmer.Cvb.Rect,Stemmer.Cvb.Rect)">
            <summary>
            Returns a <see cref="T:Stemmer.Cvb.Rect"/> structure that represents the 
            intersection of the two input rectangles. If there is no intersection, 
            an empty <see cref="T:Stemmer.Cvb.Rect"/> is  returned.
            </summary>
            <param name="a"><see cref="T:Stemmer.Cvb.Rect"/> to intersect</param>
            <param name="b"><see cref="T:Stemmer.Cvb.Rect"/> to intersect</param>
            <returns>A <see cref="T:Stemmer.Cvb.Rect"/> that represents the intersection of a 
            and b</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.Union(Stemmer.Cvb.Rect,Stemmer.Cvb.Rect)">
            <summary>
            Gets a <see cref="T:Stemmer.Cvb.Rect"/> structure that contains the union of two
            <see cref="T:Stemmer.Cvb.Rect"/> structures.
            </summary>
            <param name="a">A rectangle to union</param>
            <param name="b">A rectangle to union</param>
            <returns>a <see cref="T:Stemmer.Cvb.Rect"/> that bounds the union of the two
            <see cref="T:Stemmer.Cvb.Rect"/> structures</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Stemmer.Cvb.Rect"/> structure with the specified edge 
            locations. 
            </summary>
            <param name="left">The x-coordinate of the upper left corner of this
            <see cref="T:Stemmer.Cvb.Rect"/> structure</param>
            <param name="top">The y-coordinate of the upper left corner of this
            <see cref="T:Stemmer.Cvb.Rect"/> structure</param>
            <param name="right">The x-coordinate of the lower right corner of this
            <see cref="T:Stemmer.Cvb.Rect"/> structure</param>
            <param name="bottom">The y-coordinate of the lower right corner of 
            this <see cref="T:Stemmer.Cvb.Rect"/> structure</param>
            <returns>The new <see cref="T:Stemmer.Cvb.Rect"/> that this method creates.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.CropExtent(Stemmer.Cvb.Rect,Stemmer.Cvb.Point2D,Stemmer.Cvb.Size2D)">
            <summary>
            Assuming that a <see cref="T:Stemmer.Cvb.Rect"/> structure contains the extent of 
            something relative to a position inside an image, this function crops 
            the <see cref="T:Stemmer.Cvb.Rect"/> so that the whole content is inside the image.
            </summary>
            <param name="ext"><see cref="T:Stemmer.Cvb.Rect"/> to be cropped.</param>
            <param name="pos">Position in the image relative to which the 
            extent is to be applied.</param>
            <param name="imageSize">Available size (i.e. upper limit for
            cropping).</param>
            <returns>Cropped <see cref="T:Stemmer.Cvb.Rect"/>.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Rect.CoordinateSystem">
            <summary>
            Indicates the coordinate system in which this object is being measured
            (when used as an area of interest).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Rect.Area">
            <summary>
            Area of the rectangle.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Rect.op_Inequality(Stemmer.Cvb.Rect,Stemmer.Cvb.Rect)">
            <summary>
            Comparison operator for <see cref="T:Stemmer.Cvb.Rect"/> structures.
            </summary>
            <param name="lhs">Left hand side operand.</param>
            <param name="rhs">Right hand side operand.</param>
            <returns><c>true</c> if <paramref name="lhs"/> != 
            <paramref name="rhs"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.op_Equality(Stemmer.Cvb.Rect,Stemmer.Cvb.Rect)">
            <summary>
            Comparison operator for <see cref="T:Stemmer.Cvb.Rect"/> structures.
            </summary>
            <param name="lhs">Left hand side operand</param>
            <param name="rhs">Right hand side operand</param>
            <returns><c>true</c> if <paramref name="lhs"/> != 
            <paramref name="rhs"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Rect.op_Explicit(Stemmer.Cvb.RectD)~Stemmer.Cvb.Rect">
            <summary>
            Explicit conversion operator (truncates the values).
            </summary>
            <param name="rect"><see cref="T:Stemmer.Cvb.Rect"/> to be converted.</param>
            <returns>New truncated <see cref="T:Stemmer.Cvb.Rect"/>.</returns>
        </member>
    </members>
</doc>
