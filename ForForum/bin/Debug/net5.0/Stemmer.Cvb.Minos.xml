<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stemmer.Cvb.Minos</name>
    </assembly>
    <members>
        <member name="T:Stemmer.Cvb.Minos.QualityFeedback">
            <summary>
            Feedback type for search functions
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.QualityFeedback.Unnormalized">
            <summary>
            unnormalized quality feedback in the range [0...255]
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.QualityFeedback.Normalized">
            <summary>
            normalized quality feedback from correlation over a classifier's
            features in the range [0..1]
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.SearchMode">
            <summary>
            Different modes for the search calls that return a single result.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.SearchMode.FindFirst">
            <summary>
            Stop after the first result has been found.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.SearchMode.FindBest">
            <summary>
            Search the whole region of interest and return the best result.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.SearchMode.FindBestSubPixel">
            <summary>
            Search the whole region of interest and return the best result with
            sub pixel accuracy.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.ReadMode">
            <summary>
            Options for the read functions.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ReadMode.ReturnFirstPosition">
            <summary>
            Return the position of the first character.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ReadMode.ReturnLastPosition">
            <summary>
            Return the position of the last character.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.Classifier">
            <summary>
            Minos classifier object.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.Classifier.ModelInformation">
            <summary>
            Information about a Minos classifier model.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ModelInformation.#ctor(System.String,Stemmer.Cvb.Point2D)">
            <summary>
            Create a new model information object.
            </summary>
            <param name="name">name of the model</param>
            <param name="advanceVector">advance vector of the model</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ModelInformation.#ctor(Stemmer.Cvb.Minos.Classifier,System.Int32)">
            <summary>
            Extract a Model Information container from the DLL
            </summary>
            <param name="parent"></param>
            <param name="index"></param>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.ModelInformation.Name">
            <summary>
            Name of the model.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.ModelInformation.AdvanceVector">
            <summary>
            Advance vector of the model.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ModelInformation.ToString">
            <summary>
            Conversion to string
            </summary>
            <returns>string representation of this object</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ModelInformation.Equals(System.Object)">
            <summary>
            Equality comparison.
            </summary>
            <param name="obj">object to compare to.</param>
            <returns>true if the objects are identical, false otherwise
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ModelInformation.GetHashCode">
            <summary>
            Hash code generation.
            </summary>
            <returns>hash code for the object</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ModelInformation.op_Inequality(Stemmer.Cvb.Minos.Classifier.ModelInformation,Stemmer.Cvb.Minos.Classifier.ModelInformation)">
            <summary>
            Compare two ModelInformation structs for inequality.
            </summary>
            <param name="lhs">first object to be compared</param>
            <param name="rhs">second object to be compared</param>
            <returns>true if the objects differ, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ModelInformation.op_Equality(Stemmer.Cvb.Minos.Classifier.ModelInformation,Stemmer.Cvb.Minos.Classifier.ModelInformation)">
            <summary>
            Compare two ModelInformation structs for inequality.
            </summary>
            <param name="lhs">first object to be compared</param>
            <param name="rhs">second object to be compared</param>
            <returns>false if the objects differ, true otherwise</returns>  
        </member>
        <member name="T:Stemmer.Cvb.Minos.Classifier.ModelInformationCollection">
            <summary>
            Collection of model informations.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ModelInformationCollection.#ctor(Stemmer.Cvb.Minos.Classifier)">
            <summary>
            ctor
            </summary>
            <param name="parent">obivous...</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ModelInformationCollection.GetCount">
            <summary>
            Retrieves the number of elements in the collection.
            </summary>
            <returns>Number of elements in the collection.</returns>
            <exception cref="T:System.ObjectDisposedException">If the parent image has 
            already been disposed of</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ModelInformationCollection.GetInfo(System.Int32)">
            <summary>
            Retrieves the indexed model information block.
            </summary>
            <param name="index">index of the collection to be accessed</param>
            <returns>model information</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
            <exception cref="T:System.ObjectDisposedException">If the parent image has 
            already been disposed of</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.ModelInformationCollection.Item(System.Int32)">
            <summary>
            Indexed access to the individual model information.
            </summary>
            <param name="index">index of the model to be accessed</param>
            <returns>model information object</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
            <exception cref="T:System.ObjectDisposedException">If the parent image has 
            already been disposed of</exception>
        </member>
        <member name="F:Stemmer.Cvb.Minos.Classifier.MaxSearch">
            <summary>
            Maximum number of search results (as an input for SearchAll)
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.#ctor(System.IntPtr)">
            <summary>
            Create a classifier around a native handle.
            </summary>
            <param name="handle">Handle around which to generate the classifier
            object</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.#ctor(System.String)">
            <summary>
            Load a saved classifier from a file.
            </summary>
            <param name="fileName">name of the file to be loaded</param>
            <exception cref="T:System.IO.FileNotFoundException">If the classifier file does 
            not exist</exception>
            <exception cref="T:System.IO.FileLoadException">If loading an existing classifier
            file failed</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fileName"/>
            is null</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.#ctor(System.Byte[])">
            <summary>
            Recreate a serialized Minos classifier from a byte array.
            </summary>
            <param name="buffer">byte array from which to create the classifier.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Recreate a serialized Minos classifier from a byte array.
            </summary>
            <param name="buffer">Byte array from which to create the classifier
            </param>
            <param name="offset">offset at which to start</param>
            <param name="size">number of bytes to use</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="buffer"/>
            is null</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="offset"/> is 
            less than zero or <paramref name="size"/> is less than zero
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="offset"/> and <paramref name="size"/> have values that
            together exceed the length of <paramref name="buffer"/></exception>
            <exception cref="T:System.IO.InvalidDataException">If <paramref name="buffer"/>
            does not contain a deserializable Minos classifier at the given
            offset.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Init(System.IntPtr)">
            <summary>
            Initializations common to all constructors
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via 
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="E:Stemmer.Cvb.Minos.Classifier.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the 
            <see cref="M:System.IDisposable.Dispose"/> method.  
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Dispose">
            <summary>
            IDisposable implementation.
            </summary>
            <remark>Call this method to release the resources allocated by this
            object immediately. Remember that after calling Dispose, any 
            subsequent access to references to this object will result in an 
            ObjectDisposedException.</remark>
        </member>
        <member name="F:Stemmer.Cvb.Minos.Classifier.handle_">
            <summary>
            Internal Minos classifier handle
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.Handle">
            <summary>
            Native Minos classifier handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in 
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.FileName">
            <summary>
            Name of the file from which this classifier was loaded (string.Empty 
            if this image list was neither loaded nor saved since its 
            construction).
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.Models">
            <summary>
            Collection of the models contained in this classifier.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.IsMinos16BitClassifier">
            <summary>
            returns true if the classifier was generated by Minos16Bit
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.ContrastTrigger">
            <summary>
            Trigger value for the contrast of features to be taken into account.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentException">when trying to set an invalid 
            trigger value</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.Threshold">
            <summary>
            Threshold for search operations witz normalized quality feedback.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set a 
            value less than 0.0 or greater than 1.0</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.QualityMeasure">
            <summary>
            Selects the type of quality feedback from the classifier.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.Extent">
            <summary>
            Extent of the classes in the classifier relative to the anchor point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.TrainingSetName">
            <summary>
            Name of the training set from which this classifier was generated.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.CreationDate">
            <summary>
            Creation date of the classifier.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.LearnParameters">
            <summary>
            Gets the set of parameters that has been used during classifier
            generation.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Classifier.Comment">
            <summary>
            Comment assigned to the classifier at generation time
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Save(System.String)">
            <summary>
            Write the classifier to a file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">when 
            <paramref name="fileName"/> is null</exception>    
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.ToBuffer">
            <summary>
            Builds a byte buffer with the classifier.
            </summary>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Transform(Stemmer.Cvb.Matrix2D)">
            <summary>
            Generate a new classifier by transforming this classifier with a 
            2x2 transformation matrix.
            </summary>
            <param name="transformation">matrix with which to transform the
            geometry of this classifier</param>
            <returns>transformed classifier</returns>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
            <exception cref="T:System.DivideByZeroException">when providing a 
            transformation matrix that is singular.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.SetGlobalAdvanceVector(Stemmer.Cvb.Point2D)">
            <summary>
            Create a new classifier that is a copy of this classifier, but with
            a global advance vector applied to all classes in the classifier.
            </summary>
            <param name="advance">advance vector to apply globally</param>
            <returns>new classifier</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Read(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Minos.ReadMode,Stemmer.Cvb.Area2D,System.Double,Stemmer.Cvb.Area2D,Stemmer.Cvb.Minos.SearchResult@)">
            <summary>
            Reads a string of characters, using the following approach: 
            <list type="number">
            <item>To begin with, the first object in the 
            <paramref name="startAOI"/> will be searched.</item>
            <item>This result's advance vector will be added to this result's
            position; around the result position, the <paramref name="ocrAOI"/>
            will be centered.</item>
            <item>The result area will be used as the AOI for a new FindFirst 
            search operation.</item>
            </list>
            The whole process will be repeated until no more results are 
            encountered. String of up to 32k characters are read.
            </summary>
            <param name="plane">image plane to read on</param>
            <param name="mode">read mode</param>
            <param name="startAOI">area in which to start the read operation
            </param>
            <param name="density">density to be used for the read operation
            </param>
            <param name="ocrAOI">area to be used for the intermediate read steps;
            this area will be applied relative to the expected position of the next
            character and is typically only a few pixels wide and high</param>
            <param name="startOrStop">first or last character that has been read
            (depending on the value of the <paramref name="mode"/> parameter)
            </param>
            <returns>the string that has been read by this function</returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of 
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            if <paramref name="density"/> is either less than 0 or greater than 1
            </exception>
            <exception cref="T:System.ObjectDisposedException">If the classifier or the
            image it should work on has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Read(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,System.Double,Stemmer.Cvb.Area2D)">
            <summary>
            Reads a list of characters, using the following approach: 
            <list type="number">
            <item>To begin with, the first object in the 
            <paramref name="startAOI"/> will be searched.</item>
            <item>This result's advance vector will be added to this result's
            position; around the result position, the <paramref name="ocrAOI"/>
            will be centered.</item>
            <item>The result area will be used as the AOI for a new FindFirst 
            search operation.</item>
            </list>
            The whole process will be repeated until no more results are 
            encountered. String of up to 32k characters are read.
            </summary>
            <param name="plane">image plane to read on</param>
            <param name="startAOI">area in which to start the read operation
            </param>
            <param name="density">density to be used for the read operation
            </param>
            <param name="ocrAOI">area to be used for the intermediate read steps;
            this area will be applied relative to the expected position of the next
            character and is typically only a few pixels wide and high</param>
            <returns>the list of characters that has been read by this function
            </returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of
            <paramref name="plane"/> is
            null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="density"/> is either less than 0 or greater than 1
            </exception>
            <exception cref="T:System.ObjectDisposedException">If the classifier or the 
            image it should work on has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Search(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Minos.SearchMode,Stemmer.Cvb.Area2D,System.Double)">
            <summary>
            Search one object using this Minos classifier.
            </summary>
            <param name="plane">image plane to search on</param>
            <param name="mode">search mode to be used</param>
            <param name="aoi">area to search in</param>
            <param name="density">density at which to search ([0...1])</param>
            <returns>the found result (SearchResult.Empty if none was found).
            </returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of 
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="density"/> is either less than 0 or greater than 1
            </exception>
            <exception cref="T:System.ObjectDisposedException">If the classifier or the 
            image it should be used on has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Search(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Minos.SearchMode,System.Double)">
            <summary>
            Search one object using this Minos classifier.
            </summary>
            <param name="plane">image plane to search on</param>
            <param name="mode">search mode to be used</param>
            <param name="density">density at which to search ([0...1])</param>
            <returns>the found result (SearchResult.Empty if none was found).
            </returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of 
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="density"/> is either less than 0 or greater than 1
            </exception>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>    
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.Search(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Minos.SearchMode)">
            <summary>
            Search one object using this Minos classifier.
            </summary>
            <param name="plane">image plane to search on</param>
            <param name="mode">search mode to be used</param>
            <returns>the found result (SearchResult.Empty if none was found).
            </returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of 
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the classifier or the 
            Image it should be used on has already been disposed</exception>    
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.SearchAll(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.Area2D,System.Double,System.Int32)">
            <summary>
            Search all objects using this Minos classifier
            </summary>
            <param name="plane">image plane to search on</param>
            <param name="aoi">Area to search in</param>
            <param name="density">density at which to search ([0...1])</param>
            <param name="locality">Radius within which no better solution may 
            exist</param>
            <returns>list of found results</returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of 
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="plane"/> is either less than 0 or greater than the 
            number of planes minus 1, or if <paramref name="density"/> is either
            less than 0 or greater than 1 or if <paramref name="locality"/> is 
            less than 0</exception>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.SearchAll(Stemmer.Cvb.ImagePlane,System.Double,System.Int32)">
            <summary>
            Overloaded SearchAll function (re-routes with default arguments for
            area)
            </summary>
            <param name="plane">image plane to search in</param>
            <param name="density">density with which to search</param>
            <param name="locality">minimum distance between results</param>
            <returns>result list</returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of 
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="density"/> is either less than 0 or greater than 1 or 
            if <paramref name="locality"/> is less than 0</exception>
            <exception cref="T:System.ObjectDisposedException">If the classifier or the 
            Image it should be used on has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Classifier.SearchAll(Stemmer.Cvb.ImagePlane,System.Int32)">
            <summary>
            Overloaded SearchAll function (re-routes with default arguments for
            area and density)
            </summary>
            <param name="plane">Image plane to search in</param>
            <param name="locality">minimum distance between results</param>
            <returns>result list</returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of 
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="locality"/> is less than 0</exception>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Minos.Correlation">
            <summary>
            Correlation functions that come with the Minos library.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.Correlation.CorrelationMaxSearch">
            <summary>
            Maximum number of results a correlation SearchAll will be able to 
            return.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.Correlation.CorrelationResultId">
            <summary>
            The result ID to use for correlation results.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Correlation.SearchAll(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,System.Double,Stemmer.Cvb.Area2D,System.Double,System.Int32)">
            <summary>
            Find all correlation matches of the <paramref name="template"/> in the
            image 
            <paramref name="plane"/>. If the number of results exceeds 32767, then
            the result list will be truncated at that number. The order of the 
            results depends on the scan direction defined by the 
            <paramref name="aoi"/>.
            </summary>
            <param name="plane">image plane
            in  which to look for correlation matches</param>
            <param name="template">template with which to look for correlation
            matches</param>
            <param name="density">scan density with which to look for correlation
            matches</param>
            <param name="aoi">area in which to look for correlation matches
            </param>
            <param name="threshold">minimum correlation for the results to be 
            reported</param>
            <param name="radius">minimum distance between two positive results
            </param>
            <returns>the list of extracted results</returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of 
            <paramref name="plane"/> or <paramref name="template"/> ist null
            </exception>
            <exception cref="T:System.ObjectDisposedException">If the Parent of
            <paramref name="plane"/> or <paramref name="template"/> has already 
            been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="density"/> or 
            <paramref name="threshold"/> exceeds the range [0...1].</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Correlation.SearchAll(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,System.Double,System.Double,System.Int32)">
            <summary>
            Find all correlation matches of the <paramref name="template"/> in the
            image 
            <paramref name="plane"/>. If the number of results exceeds 32767, then
            the result list will be truncated at that number. The order of the 
            results is left/top to right/bottom.
            </summary>
            <param name="plane">image plane
            in  which to look for correlation matches</param>
            <param name="template">template with which to look for correlation
            matches</param>
            <param name="density">scan density with which to look for correlation
            matches</param>
            <param name="threshold">minimum correlation for the results to be 
            reported</param>
            <param name="radius">minimum distance between two positive results
            </param>
            <returns>the list of extracted results</returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of 
            <paramref name="plane"/> or <paramref name="template"/> ist null
            </exception>
            <exception cref="T:System.ObjectDisposedException">If the Parent of
            <paramref name="plane"/> or <paramref name="template"/> has already 
            been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="density"/> or 
            <paramref name="threshold"/> exceeds the range [0...1].</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Correlation.SearchAll(Stemmer.Cvb.Image,Stemmer.Cvb.Image,System.Double,System.Double,System.Int32)">
            <summary>
            Find all correlation matches of the <paramref name="template"/> in the
            <paramref name="image"/>. If the number of results exceeds 32767, then
            the result list will be truncated at that number. The order of the 
            results is left/top to right/bottom.
            </summary>
            <param name="image">image in which to look for correlation matches
            </param>
            <param name="template">template with which to look for correlation
            matches</param>
            <param name="density">scan density with which to look for correlation
            matches</param>
            <param name="threshold">minimum correlation for the results to be 
            reported</param>
            <param name="radius">minimum distance between two positive results
            </param>
            <returns>the list of extracted results</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            or <paramref name="template"/> are null</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            or <paramref name="template"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the parameter
            <paramref name="density"/> or <paramref name="threshold"/> exceeds the 
            range [0...1].</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Correlation.SearchAll(Stemmer.Cvb.Image,Stemmer.Cvb.Image,System.Double,Stemmer.Cvb.Area2D,System.Double,System.Int32)">
            <summary>
            Find all correlation matches of the <paramref name="template"/> in the
            <paramref name="image"/>. If the number of results exceeds 32767, then
            the result list will be truncated at that number. The order of the 
            results depends on the scan direction defined by the 
            <paramref name="aoi"/>.
            </summary>
            <param name="image">image in which to look for correlation matches
            </param>
            <param name="template">template with which to look for correlation
            matches</param>
            <param name="density">scan density with which to look for correlation
            matches</param>
            <param name="aoi">area in which to look for correlation matches
            </param>
            <param name="threshold">minimum correlation for the results to be 
            reported</param>
            <param name="radius">minimum distance between two positive results
            </param>
            <returns>the list of extracted results</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            or <paramref name="template"/> are null</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            or <paramref name="template"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the parameter
            <paramref name="density"/> or <paramref name="threshold"/> exceeds the 
            range [0...1].</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Correlation.Search(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,System.Double,Stemmer.Cvb.Area2D)">
            <summary>
            Find the best correlation match of the <paramref name="template"/> in 
            the <paramref name="plane"/> with sub-pixel accuracy. The amount of 
            sub pixel accuracy that may be achieved depends on the size of the 
            template.
            </summary>
            <param name="plane">image plane in which to look for correlation 
            matches</param>
            <param name="template">template with which to look for correlation
            matches</param>
            <param name="density">scan density with which to look for correlation
            matches</param>
            <param name="aoi">area in which to look for correlation matches
            </param>
            <returns>best result that was detected 
            (<see cref="F:Stemmer.Cvb.Minos.SearchResult.Empty"/> if none was found)</returns>
            <exception cref="T:System.ArgumentNullException">If the Parent of 
            <paramref name="plane"/>
            or <paramref name="template"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the Parent of
            <paramref name="plane"/> or <paramref name="template"/> has already 
            been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="density"/> exceeds 
            the range [0...1].</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Correlation.Search(Stemmer.Cvb.Image,Stemmer.Cvb.Image,System.Double,Stemmer.Cvb.Area2D)">
            <summary>
            Find the best correlation match of the <paramref name="template"/> in 
            the <paramref name="image"/> with sub-pixel accuracy. The amount of 
            sub pixel accuracy that may be achieved depends on the size of the 
            template.
            </summary>
            <param name="image">image in which to look for correlation matches
            </param>
            <param name="template">template with which to look for correlation
            matches</param>
            <param name="density">scan density with which to look for correlation
            matches</param>
            <param name="aoi">area in which to look for correlation matches
            </param>
            <returns>best result that was detected 
            (<see cref="F:Stemmer.Cvb.Minos.SearchResult.Empty"/> if none was found)</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            or <paramref name="template"/> are null</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            or <paramref name="template"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            parameter value is invalid or the <paramref name="density"/> exceeds 
            the range [0...1].</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Correlation.Search(Stemmer.Cvb.Image,Stemmer.Cvb.Image,System.Double)">
            <summary>
            Find the best correlation match of the <paramref name="template"/> in 
            the <paramref name="image"/> with sub-pixel accuracy. The amount of 
            sub pixel accuracy that may be achieved depends on the size of the 
            template.
            </summary>
            <param name="image">image in which to look for correlation matches
            </param>
            <param name="template">template with which to look for correlation
            matches</param>
            <param name="density">scan density with which to look for correlation
            matches</param>
            <returns>best result that was detected 
            (<see cref="F:Stemmer.Cvb.Minos.SearchResult.Empty"/> if none was found)</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            or <paramref name="template"/> are null</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="image"/>
            or <paramref name="template"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            parameter value is invalid or the <paramref name="density"/> exceeds 
            the range [0...1].</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Correlation.Search(Stemmer.Cvb.ImagePlane,Stemmer.Cvb.ImagePlane,System.Double)">
            <summary>
            Find the best correlation match of the <paramref name="template"/> in 
            the <paramref name="plane"/> with sub-pixel accuracy. The amount of 
            sub pixel accuracy that may be achieved depends on the size of the 
            template.
            </summary>
            <param name="plane">image plane in which to look for correlation 
            matches</param>
            <param name="template">template with which to look for correlation
            matches</param>
            <param name="density">scan density with which to look for correlation
            matches</param>
            <returns>best result that was detected 
            (<see cref="F:Stemmer.Cvb.Minos.SearchResult.Empty"/> if none was found)</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="plane"/>
            or <paramref name="template"/> are null</exception>
            <exception cref="T:System.ObjectDisposedException">If <paramref name="plane"/>
            or <paramref name="template"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            parameter value is invalid or the <paramref name="density"/> exceeds 
            the range [0...1].</exception>
        </member>
        <member name="T:Stemmer.Cvb.Minos.Filter">
            <summary>
            Filter functions that come with the Minos library.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.Filter.KernelSize">
            <summary>
            Available kernel sizes for the filter functions exported by the 
            Minos library. Note that not all filters will work with all kernel 
            sizes (see filter function description for a list) and some filters
            only work with a fixed kernel size in the Minos library. Note also
            that the Minos filters will only work on images with 8 bits per pixel
            input.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.Filter.KernelSize.Kernel2x2">
            <summary>
            kernel with 2x2 elements
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.Filter.KernelSize.Kernel3x3">
            <summary>
            kernel with 3x3 elements
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.Filter.KernelSize.Kernel4x4">
            <summary>
            kernel with 4x4 elements
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.Filter.KernelSize.Kernel5x5">
            <summary>
            kernel with 5x5 elements
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.Filter.FilterOrder">
            <summary>
            Order of the <see cref="M:Stemmer.Cvb.Minos.Filter.ButterworthLowPass(Stemmer.Cvb.Image,System.Double,Stemmer.Cvb.Minos.Filter.FilterOrder)"/> or
            <see cref="M:Stemmer.Cvb.Minos.Filter.ButterworthHighPass(Stemmer.Cvb.Image,System.Double,System.Int32,System.Double,Stemmer.Cvb.Minos.Filter.FilterOrder)"/>filter to be applied.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.Filter.FilterOrder.Order1st">
            <summary>
            1st order filter
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.Filter.FilterOrder.Order2nd">
            <summary>
            2nd order filter
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.VerifyFilterInput(Stemmer.Cvb.Image)">
            <summary>
            Private utility function that performs the sanity checks on the input
            image parameter of all the Minos filter functions.
            </summary>
            <param name="image">parameter to be verified</param>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.Laplace(Stemmer.Cvb.Image)">
            <summary>
            Apply a 3x3 Laplace filter to the input image. An offset gray value of
            128 is added to the result to reduce loss of information. Underflow 
            and overflow gray values are truncated to 0 and 255 respectively.
            </summary>
            <param name="image">image to be filtered</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.Sharpen(Stemmer.Cvb.Image)">
            <summary>
            Apply a 3x3 sharpen filter to the input image. Underflow 
            and overflow gray values are truncated to 0 and 255 respectively.
            </summary>
            <param name="image">image to be filtered</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.Dilate(Stemmer.Cvb.Image)">
            <summary>
            Apply a 3x3 dilation filter to the input image. 
            </summary>
            <param name="image">image to be filtered</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.Erode(Stemmer.Cvb.Image)">
            <summary>
            Apply a 3x3 erode filter to the input image. 
            </summary>
            <param name="image">image to be filtered</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.ButterworthHighPass(Stemmer.Cvb.Image,System.Double,System.Int32,System.Double,Stemmer.Cvb.Minos.Filter.FilterOrder)">
            <summary>
            Apply a ButterWorth high pass filter to the <paramref name="image"/>.
            Underflow and overflow gray values are truncated to 0 and 255 
            respectively.
            </summary>
            <param name="image">image to be filtered</param>
            <param name="cutOff">cut off parameter of the ButterWorth algorithm
            </param>
            <param name="gain">gain to be applied to the frequency response
            </param>
            <param name="offset">offset to be applied to the frequency response
            </param>
            <param name="order">order of the ButterWorth filter to be used</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.ButterworthLowPass(Stemmer.Cvb.Image,System.Double,Stemmer.Cvb.Minos.Filter.FilterOrder)">
            <summary>
            Apply a ButterWorth low pass filter to the <paramref name="image"/>.
            Underflow and overflow gray values are truncated to 0 and 255 
            respectively.
            </summary>
            <param name="image">image to be filtered</param>
            <param name="cutOff">cut off parameter of the ButterWorth algorithm
            </param>
            <param name="order">order of the ButterWorth filter to be used</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.LowPass(Stemmer.Cvb.Image,Stemmer.Cvb.Minos.Filter.KernelSize)">
            <summary>
            Apply a low pass filter to the input <paramref name="image"/>. Low 
            pass filters are available with kernel sizes 2x2, 3x3 and 5x5.
            </summary>
            <param name="image">image to be filtered</param>
            <param name="kernelSize">kernel size to be used</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
            <exception cref="T:System.ArgumentException">If an invalid 
            <paramref name="kernelSize"/> was selected</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.Edge(Stemmer.Cvb.Image,Stemmer.Cvb.Minos.Filter.KernelSize)">
            <summary>
            Apply an Edge filter to the input <paramref name="image"/>. Edge
            filters are available with kernel sizes 2x2 and 3x3.
            </summary>
            <param name="image">image to be filtered</param>
            <param name="kernelSize">kernel size to be used</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
            <exception cref="T:System.ArgumentException">If an invalid 
            <paramref name="kernelSize"/> was selected</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.Pyramid(Stemmer.Cvb.Image,Stemmer.Cvb.Minos.Filter.KernelSize)">
            <summary>
            Apply an Pyramid filter to the input <paramref name="image"/>. Pyramid
            filters are available with kernel sizes 3x3, 4x4 and 5x5.
            </summary>
            <param name="image">image to be filtered</param>
            <param name="kernelSize">kernel size to be used</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
            <exception cref="T:System.ArgumentException">If an invalid 
            <paramref name="kernelSize"/> was selected</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.User(Stemmer.Cvb.Image,Stemmer.Cvb.Minos.Filter.KernelSize,System.Double[])">
            <summary>
            Apply a user-defined filter to the input <paramref name="image"/>. 
            The convolution kernel may have the size 2x2, 3x3 or 5x5. The filter
            coefficients need to be specified as an array of double values passed
            as the <paramref name="kernel"/> argument. Please note that although
            the kernel elements are of type double, the filter will only work on
            and only create output data with 8 bits per pixel. Overflow and under-
            flow values will be truncated to 0 and 255 respectively.
            </summary>
            <param name="image">image to be filtered</param>
            <param name="kernelSize">kernel size to be used</param>
            <param name="kernel">kernel coefficients; the number of coefficients
            that are needed depends on the <paramref name="kernelSize"/>. If too
            many coefficients are given then any surplus coefficients will be 
            ignored. The kernel coefficients should be passed as a 1D array with
            width * height elements starting in the top left corner of the filter
            mask and listing the elements line by line</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter or the <paramref name="kernel"/>
            parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
            <exception cref="T:System.ArgumentException">If an invalid 
            <paramref name="kernelSize"/> was selected or if an insufficient
            number of coefficients was given</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.Filter.User(Stemmer.Cvb.Image,Stemmer.Cvb.Minos.Filter.KernelSize,System.Double[0:,0:])">
            <summary>
            Apply a user-defined filter to the input <paramref name="image"/>. 
            The convolution kernel may have the size 2x2, 3x3 or 5x5. The filter
            coefficients need to be specified as an array of double values passed
            as the <paramref name="kernel"/> argument. Please note that although
            the kernel elements are of type double, the filter will only work on
            and only create output data with 8 bits per pixel. Overflow and under-
            flow values will be truncated to 0 and 255 respectively.
            </summary>
            <param name="image">image to be filtered</param>
            <param name="kernelSize">kernel size to be used</param>
            <param name="kernel">kernel coefficients; the number of coefficients
            that are needed depends on the <paramref name="kernelSize"/>. If too
            many coefficients are given then any surplus coefficients will be 
            ignored. The kernel coefficients may be passed as a 1D array with
            width * height elements or as a 2D array with width and height 
            elements</param>
            <returns>filtered image</returns>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter or the <paramref name="kernel"/>
            parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed of</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">when trying to call the filter 
            function on an image with a pixel format other than 8 bits per pixel
            unsigned</exception>
            <exception cref="T:System.ArgumentException">If an invalid 
            <paramref name="kernelSize"/> was selected or if an insufficient
            number of coefficients was given</exception>
        </member>
        <member name="T:Stemmer.Cvb.Minos.ClassifierFactory">
            <summary>
            Learner object that creates a classifier from an image list.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.ClassifierFactory.#ctor">
            <summary>
            Construct a learner that has no training set set yet.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.ClassifierFactory.Init">
            <summary>
            Initialize the internal properties of the learner with what the 
            native image list has stored.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.ClassifierFactory.Learn(Stemmer.Cvb.Minos.TrainingSet)">
            <summary>
            Learn a new classifier from the <paramref name="trainingSet"/> using 
            the parameters stored in the properties of this object.
            </summary>
            <param name="trainingSet">training set from which to learn</param>
            <returns>newly learned classifier object</returns>
            <exception cref="T:System.ArgumentNullException">when trying to pass a null
            reference as the <paramref name="trainingSet"/> parameter</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.ClassifierFactory.NativeLearnProgress(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            callback to be passed to unmanaged code
            </summary>
            <param name="pPrivate">private data - no being used here</param>
            <param name="instance">native handle of the instance that is 
            currently being processed</param>
            <param name="total">total number of instances that need processing
            </param>
            <param name="correct">number of instances that Minos could already
            correctly identify with the proto-classifier</param>
            <param name="current">index of the instance that is currently being
            processed</param>
            <returns>true if the learning is to be continues, false otherwise.
            </returns>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory._wasInterrupted">
            <summary>
            Flag that tells us whether a learning operation was interrupted by 
            the handler of the LearnProgress event
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory._currentlyProcessed">
            <summary>
            The training set from which a classifier is currently being learned.
            (we need this to translate the data from the unmanaged progress 
            callback into managed objects)
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory._learnProgressCallback">
            <summary>
            long-life handle to the notification callback
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Minos.ClassifierFactory.LearnProgress">
            <summary>
            Event that will inform about the progress of an ongoing learn 
            operation.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ClassifierFactory.IndifferenceRadius">
            <summary>
            Minimum distance to be assumed between a (labeled) positive sample and 
            a counter sample in a training set image.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set an
            indifference radius less than 0</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ClassifierFactory.NegativesDensity">
            <summary>
            Scan density with which to extract counter samples from the training
            set images. Higher densities will lead to a classifier that is 
            potentially more robust versus false positive detections, but will
            also result in increased learning times.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set an
            invalid scan density (valid values are within the range [0...1]
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ClassifierFactory.ContrastTrigger">
            <summary>
            Minimum contrast a Minos feature must achieve before it is eligible
            to become part of the classifier. Lower values will lead to a 
            classifier that is more sensitive in low-contrast situation but might
            also increase the number of false positive results that need to be
            filtered out e.g. by means of their quality measure.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ClassifierFactory.EnsembleSize">
            <summary>
            No idea what the ensemble size actually does. So far this was one of
            Minos' hidden parameters.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ClassifierFactory.Polydromy">
            <summary>
            No idea what the ensemble size actually does. So far this was one of
            Minos' hidden parameters.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ClassifierFactory.MinPairFeatures">
            <summary>
            Minimum number of features to extract for each model when building a 
            classifier.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory.IndifferenceRadiusDefault">
            <summary>
            Default value for the <see cref="P:Stemmer.Cvb.Minos.ClassifierFactory.IndifferenceRadius"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory.NegativesDensityDefault">
            <summary>
            Default value for the <see cref="P:Stemmer.Cvb.Minos.ClassifierFactory.NegativesDensity"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory.ContrastTriggerDefault">
            <summary>
            Default value for the <see cref="P:Stemmer.Cvb.Minos.ClassifierFactory.ContrastTrigger"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory.EnsembleSizeDefault">
            <summary>
            Default value for the <see cref="P:Stemmer.Cvb.Minos.ClassifierFactory.EnsembleSize"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory.PolydromyDefault">
            <summary>
            Default value for the <see cref="P:Stemmer.Cvb.Minos.ClassifierFactory.Polydromy"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory.MinPairFeaturesDefault">
            <summary>
            Default value for the <see cref="P:Stemmer.Cvb.Minos.ClassifierFactory.MinPairFeatures"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory.ClfQualityMeasureDefault">
            <summary>
            Default value for the QualityMeasure property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.ClassifierFactory.ThresholdDefault">
            <summary>
            Default value for the Threshold property.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.LearnProgressEventArgs">
            <summary>
            Arguments for the LearnProgress event.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.LearnProgressEventArgs.#ctor(Stemmer.Cvb.Minos.TrainingSet.InstanceInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for event arguments.
            </summary>
            <param name="instance">the instance that is currently being 
            processed</param>
            <param name="currentIndex">the index of the instance that is
            currently being processed</param>
            <param name="total">the total number of instances that will be 
            processed</param>
            <param name="correct">number of instances that Minos was able to 
            correctly identify using the proto-classifier that is currently 
            being built.</param>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnProgressEventArgs.Continue">
            <summary>
            Gets or sets whether the current learn operation should be 
            continued (true) or interrupted (false).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnProgressEventArgs.Instance">
            <summary>
            The instance that is currently being processed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnProgressEventArgs.CurrentInstanceIndex">
            <summary>
            The index of the instance that is currently being processed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnProgressEventArgs.TotalInstances">
            <summary>
            The total number of instances that will be processed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnProgressEventArgs.CorrectInstances">
            <summary>
            Number of instances that Minos was able to correctly identify using
            the proto-classifier that is currently being built.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.LearnParameters">
            <summary>
            The set of parameters that controls how a classifier is being learned
            from a training set.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnParameters.IndifferenceRadiusDefault">
            <summary>
            Default value for the IndifferenceRadius.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnParameters.NegativesDensityDefault">
            <summary>
            Default value for NegativesDensity.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnParameters.ContrastTriggerDefault">
            <summary>
            Default value for ContrastTrigger.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnParameters.EnsembleSizeDefault">
            <summary>
            Default value for EnsembleSize.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnParameters.PolydromyDefault">
            <summary>
            Default value for Polydromy.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnParameters.MinFeatureCountDefault">
            <summary>
            Default value for MinFeatureCount.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.LearnParameters.#ctor(Stemmer.Cvb.Minos.LearnControlData)">
            <summary>
            construct a LearnParameters structure from the native structure 
            returned by the unmanaged function call.
            </summary>
            <param name="data">unmanaged structure</param>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnParameters.MinFeatureCount">
            <summary>
            This value defines how many features must be extracted at the very 
            least per class in a classifier.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set a 
            value less than 1</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnParameters.Polydromy">
            <summary>
            The Polydromy parameter controls the complexity of the feature search
            tree in the classifier. Valid polydromy values must be greater than 0,
            the default value is 2.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set a 
            value less than 1</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnParameters.EnsembleSize">
            <summary>
            Maximum size of the Ensembles of similar instance images to be used 
            for pair feature calculation. Valid ensemble sizes must be greater 
            than 0, the default value is 15.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set a 
            value less than 1</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnParameters.ContrastTrigger">
            <summary>
            Contrast trigger is the minimum gray value difference the two regions 
            of one pair feature must have to be eligible to become a classifier
            feature. Valid contrast triggers must be greater than 0, the default
            value is 8.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set a 
            value less than 1</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnParameters.IndifferenceRadius">
            <summary>
            Indifference radius is the radius (L1 norm!) around a positive 
            instance from which no counter sample is to be extracted. Valid
            indifference radii must be greater than 0. The default value is 6 
            here.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set a 
            value less than 1</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.LearnParameters.NegativesDensity">
            <summary>
            Negatives density is the density at which counter samples are 
            extracted from the training set images during the learning phase.
            Valid negatives densities range from 0.0 to 1.0. The default value is
            1.0.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set a 
            value less than 0.0 or greater than 1.0</exception>
        </member>
        <member name="T:Stemmer.Cvb.Minos.NamespaceDoc">
            <summary>
            The namespace and assembly <c>Stemmer.Cvb.Minos</c> contains the 
            classes and definitions needed for using the Common Vision Blox Minos
            tool.
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.Minos.ScanCallback">
            <summary>
            Informs about the remaining number of scan lines (linesToDo). If the
            callback function returns false, execution terminates, otherwise it
            continues. privateData is a pointer to personal user data.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.CheckProgressCallback">
            <summary>
            Allows to display information about the progress of the function, or
            to terminate it prematurely (return false). The currentXXX parameters
            refer to the current MTSIMAGE and MTSMODEL. linesToDo informs about
            the remaining number of scan lines.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.LearnProgress">
            <summary>
            Is called for every instance being processed during learning.
            privateData is a pointer to a private memory area. instance is a
            handle to the MTS-instance being processed. total is the total
            number of instances to process. correct is the number of instances
            which have been correctly recognized on the basis of current knowledge
            of the classifier. current gives the current instances index. Execution
            is terminated if true is returned.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.FilterDefinition">
            <summary>
            Filter kernel (cXXYY) for the user defined filters FilterUser2x2,
            FilterUser3x3, FilterUser5x5. The coefficients are in units of 1/1000,
            e.g. 1000 means 1.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.reserved">
            <summary>
            Reserved for internal use.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.cLLTT">
            <summary>
            Coefficient LLTT.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0LTT">
            <summary>
            Coefficient 0LTT.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c00TT">
            <summary>
            Coefficient 00TT.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0RTT">
            <summary>
            Coefficient 0RTT.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.cRRTT">
            <summary>
            Coefficient RRTT.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.cLL0T">
            <summary>       
            Coefficient LL0T.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0L0T">
            <summary>
            Coefficient 0L0T.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c000T">
            <summary>
            Coefficient 000T.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0R0T">
            <summary>
            Coefficient 0R0T.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.cRR0T">
            <summary>
            Coefficient RR0T.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.cLL00">
            <summary>
            Coefficient LL00.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0L00">
            <summary>
            Coefficient 0L00.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0000">
            <summary>
            Coefficient 0000.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0R00">
            <summary>
            Coefficient 0R00.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.cRR00">
            <summary>
            Coefficient RR00.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.cLL0B">
            <summary>
            Coefficient LL0B.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0L0B">
            <summary>
            Coefficient 0L0B.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c000B">
            <summary>
            Coefficient 000B.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0R0B">
            <summary>
            Coefficient 0R0B.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.cRR0B">
            <summary>
            Coefficient RR0B.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.cLLBB">
            <summary>
            Coefficient LLBB.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0LBB">
            <summary>
            Coefficient 0LBB.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c00BB">
            <summary>
            Coefficient 00BB.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.c0RBB">
            <summary>
            Coefficient 0RBB.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.cRRBB">
            <summary>
            Coefficient RRBB.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.FilterDefinition.offset">
            <summary>
            Offset to be added to the convolution result.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.LearnControlData">
            <summary>
            Controls some details of the learning process (see LearnCLFFromMTS).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnControlData.IndifferenceRadius">
            <summary>
            IndifferenceRadius. Default value = 6.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnControlData.NegativesDensity">
            <summary>
            NegativesDensity. Default value = 1000.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnControlData.ContrastTrigger">
            <summary>
            Default value = 8.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnControlData.EnsembleSize">
            <summary>
            Default value = 15.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnControlData.Polydromy">
            <summary>
            Default value = 2.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnControlData.MinPairFeatures">
            <summary>
            Default value = 50.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnControlData.Reserved">
            <summary>
            Reserved for internal use.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnControlData.PrivateData">
            <summary>
            Pointer to the users private data, communicated back to the user in
            every call of the callback function LearnProgress.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.LearnControlData.ShowProgress">
            <summary>
            Callback function of type LearnProgress.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.Properties.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.AddSampleFailure">
            <summary>
              Looks up a localized string similar to The sample at location {0} could not be added to class {1} because either the sample location lies too close to the image boundaries to be added or the sample at location {0} correlates too poorly with the instances that have been trained thus far..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.ClassifierLearningFailed">
            <summary>
              Looks up a localized string similar to Minos classifier generation failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.ConsistencyCheckFailed">
            <summary>
              Looks up a localized string similar to Consistency check execution failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.CrossTrainingSetReference">
            <summary>
              Looks up a localized string similar to The {0} must be part of the same training set as the {1}..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.DeserializationFailure">
            <summary>
              Looks up a localized string similar to Deserializing {0} from buffer failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.EmptyString">
            <summary>
              Looks up a localized string similar to Empty strings are not valid as {0}..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.FileNotFound">
            <summary>
              Looks up a localized string similar to The {0} file &apos;{1}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.FilterKernelRank">
            <summary>
              Looks up a localized string similar to Filter kernels need to be passed as a 1D or 2D array..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.FilterWith8bppOnly">
            <summary>
              Looks up a localized string similar to Minos filter functions will only operate on images with 8 bits per pixel (unsigned)..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.GenericObjectDisposed">
            <summary>
              Looks up a localized string similar to The {0} object has already been disposed of and may not be used any longer..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.ImplementationError">
            <summary>
              Looks up a localized string similar to An internal error occurred. Please report this to support@stemmer-imaging.de along with the call stack if possible..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.IncompatibleFeatureWindow">
            <summary>
              Looks up a localized string similar to The feature window {0} cannot be set..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.InsufficientData">
            <summary>
              Looks up a localized string similar to Not enough data for {0}..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.InvalidKernelSize">
            <summary>
              Looks up a localized string similar to The kernel size {0} cannot be selected with this filter..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.LoadFailure">
            <summary>
              Looks up a localized string similar to Loading the {0} from file {1} failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.NullReference">
            <summary>
              Looks up a localized string similar to The handle for the {0} object is null..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.OutsideExtractableRectangle">
            <summary>
              Looks up a localized string similar to The position {0} is outside the extractable rectange {1} for this image..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.SaveFailure">
            <summary>
              Looks up a localized string similar to Saving the {0} to file {1} failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.SerializationFailure">
            <summary>
              Looks up a localized string similar to Serializing {0} into buffer failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.Unavailable">
            <summary>
              Looks up a localized string similar to A matching {0} does not exist in the {1}..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.UnsupportedValue">
            <summary>
              Looks up a localized string similar to {0} is not in the supported range [{1}]..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.ValueNotFound">
            <summary>
              Looks up a localized string similar to No matching value exists..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.Properties.Messages.ValueOutOfRange">
            <summary>
              Looks up a localized string similar to Value is out of range ({0} &lt;= {1} &lt; {2})..
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.SearchResult">
            <summary>
            Search Result as returned by Minos
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.SearchResult.#ctor(System.String,System.Double,Stemmer.Cvb.Point2Dd,Stemmer.Cvb.Point2Dd)">
            <summary>
            Constructor
            </summary>
            <param name="className">name_ of the class that has been found</param>
            <param name="quality">quality_ at which the class has been found
            </param>
            <param name="position">position_ at which the class has been found
            </param>
            <param name="advanceVector">expected position of the next object
            relative to this result's position (relevant for OCR operations)
            </param>
        </member>
        <member name="F:Stemmer.Cvb.Minos.SearchResult.Empty">
            <summary>
            Object describing an empty Search Result
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.SearchResult.CreateResultListFromNativeResults(System.IntPtr@,System.Boolean)">
            <summary>
            Convert a Minos Result list into a list of Managed Search Results
            </summary>
            <param name="Results">Result list to be converted</param>
            <param name="releaseNativeResults">set to true if you want this 
            function to also release the native result list</param>
            <returns>converted list</returns>
        </member>
        <member name="P:Stemmer.Cvb.Minos.SearchResult.Name">
            <summary>
            Name of the class that has been found
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.SearchResult.Quality">
            <summary>
            Quality at which the object has been found
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.SearchResult.Position">
            <summary>
            Position at which the object has been found
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.SearchResult.X">
            <summary>
            X position at which the object has been found
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.SearchResult.Y">
            <summary>
            Y position at which the object has been found
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.SearchResult.AdvanceVector">
            <summary>
            Advance vector of the model that has been found
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.SearchResult.ToString">
            <summary>
            Conversion to string
            </summary>
            <returns>string representation of this object</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.SearchResult.Equals(System.Object)">
            <summary>
            Equality comparison.
            </summary>
            <param name="obj">object to compare to.</param>
            <returns>true if the objects are identical, falso otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.SearchResult.GetHashCode">
            <summary>
            Hash code generation.
            </summary>
            <returns>hash code for the object</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.SearchResult.op_Equality(Stemmer.Cvb.Minos.SearchResult,Stemmer.Cvb.Minos.SearchResult)">
            <summary>
            Compare two SearchResult structs for inequality.
            </summary>
            <param name="lhs">first object to be compared</param>
            <param name="rhs">second object to be compared</param>
            <returns>false if the objects differ, true otherwise</returns>  
        </member>
        <member name="M:Stemmer.Cvb.Minos.SearchResult.op_Inequality(Stemmer.Cvb.Minos.SearchResult,Stemmer.Cvb.Minos.SearchResult)">
            <summary>
            Compare two SearchResult structs for inequality.
            </summary>
            <param name="lhs">first object to be compared</param>
            <param name="rhs">second object to be compared</param>
            <returns>true if the objects differ, false otherwise</returns>
        </member>
        <member name="T:Stemmer.Cvb.Minos.ConsistencyCheckEventArgs">
            <summary>
            Event data for the ConsistencyCheckProgress events on various objects.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.ConsistencyCheckEventArgs.#ctor(System.Int32,System.IntPtr,System.IntPtr,Stemmer.Cvb.Minos.TrainingSet)">
            <summary>
            Constructor.
            </summary>
            <param name="linesToDo">lines left to be processed</param>
            <param name="mtsImage">training set image that is currently being
            processed</param>
            <param name="mtsModel">training set model that is currently being
            processed</param>
            <param name="mts">training set from which <paramref name="mtsImage"/>
            and <paramref name="mtsModel"/> are taken</param>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ConsistencyCheckEventArgs.LinesToBeDone">
            <summary>
            The number of lines that still need to be processed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ConsistencyCheckEventArgs.Image">
            <summary>
            Image that is currently being processed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ConsistencyCheckEventArgs.Model">
            <summary>
            Model that is currently being processed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ConsistencyCheckEventArgs.Continue">
            <summary>
            Set this flag to <code>false</code> to interrupt the current
            consistency check.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.ImageAddedEventArgs">
            <summary>
            Event data for the TrainingSet's <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ImageAdded"/> 
            event.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.ImageAddedEventArgs.#ctor(Stemmer.Cvb.Minos.TrainingSet.ImageInfo)">
            <summary>
            ctor
            </summary>
            <param name="img"></param>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ImageAddedEventArgs.NewImage">
            <summary>
            Image that has been added.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.ImageRemovedEventArgs">
            <summary>
            Event data for the TrainingSet's <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ImageRemoved"/> 
            event.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.ImageRemovedEventArgs.#ctor(Stemmer.Cvb.Image)">
            <summary>
            ctor
            </summary>
            <param name="img"></param>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ImageRemovedEventArgs.RemovedImage">
            <summary>
            Image that has been removed.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.ModelAddedEventArgs">
            <summary>
            Event data for the TrainingSet's <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ModelAdded"/> 
            event.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.ModelAddedEventArgs.#ctor(Stemmer.Cvb.Minos.TrainingSet.ModelInfo)">
            <summary>
            ctor
            </summary>
            <param name="mdl"></param>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ModelAddedEventArgs.NewModel">
            <summary>
            Model that has been added.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.ModelRemovedEventArgs">
            <summary>
            Event data for the TrainingSet's <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ModelRemoved"/> 
            event.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.ModelRemovedEventArgs.#ctor(Stemmer.Cvb.Minos.TrainingSet.ModelInfo)">
            <summary>
            ctor
            </summary>
            <param name="mdl"></param>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ModelRemovedEventArgs.Name">
            <summary>
            Name of the removed model.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ModelRemovedEventArgs.FeatureWindow">
            <summary>
            Feature window of the removed model.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.ModelRemovedEventArgs.Origin">
            <summary>
            Origin of the removed model.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.InstanceAddedEventArgs">
            <summary>
            Event data for the TrainingSet's <see cref="E:Stemmer.Cvb.Minos.TrainingSet.InstanceAdded"/> 
            event.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.InstanceAddedEventArgs.#ctor(Stemmer.Cvb.Minos.TrainingSet.InstanceInfo)">
            <summary>
            ctor
            </summary>
            <param name="mdl"></param>
        </member>
        <member name="P:Stemmer.Cvb.Minos.InstanceAddedEventArgs.NewInstance">
            <summary>
            Model that has been added.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.InstanceRemovedEventArgs">
            <summary>
            Event data for the TrainingSet's <see cref="E:Stemmer.Cvb.Minos.TrainingSet.InstanceRemoved"/> 
            event.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.InstanceRemovedEventArgs.#ctor(Stemmer.Cvb.Minos.TrainingSet.InstanceInfo)">
            <summary>
            ctor
            </summary>
            <param name="inst"></param>
        </member>
        <member name="P:Stemmer.Cvb.Minos.InstanceRemovedEventArgs.Image">
            <summary>
            Image where the instance was located.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.InstanceRemovedEventArgs.Location">
            <summary>
            Location of the instance inside the training set image.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.InstanceRemovedEventArgs.Model">
            <summary>
            Model to which the instance belonged.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet">
            <summary>
            A Minos Training Set from which a classifier can be generated.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject">
            <summary>
            Base class for all objects that can be inside a training set.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.GetNativeHandleCallback">
            <summary>
            creation callback for training set objects
            </summary>
            <param name="parentHandle">handle to the *collection* parent</param>
            <param name="index">index of the object to be retrieved</param>
            <returns>native object handle</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.#ctor(Stemmer.Cvb.Minos.TrainingSet,System.IntPtr,System.Int32,Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.GetNativeHandleCallback)">
            <summary>
            ctor for training set objects
            </summary>
            <param name="parent">parent training set</param>
            <param name="collectionParent">native handle to the object that
            serves as the parent to the collection of this object</param>
            <param name="index">index of the object inside the collection
            <param name="getNativeHandle">creation callback for native object
            handles</param>
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="parent"/>
            or <paramref name="getNativeHandle"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the parent training
            set has already been disposed</exception>
            <exception cref="T:System.ArgumentException">If the native handle to the
            collection parent is null</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.#ctor(Stemmer.Cvb.Minos.TrainingSet,System.Int32,Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.GetNativeHandleCallback)">
            <summary>
            ctor for training set objects
            </summary>
            <remarks>this specific variant of the ctor is for cases where the
            training set is at the same time the collection parent</remarks>
            <param name="parent">parent training set</param>
            <param name="index">index of the object inside the collection
            </param>
            <param name="getNativeHandle">creation callback for native object
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="parent"/>
            or <paramref name="getNativeHandle"/> is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the parent training
            set has already been disposed</exception>
            <exception cref="T:System.ArgumentException">If the native handle to the
            collection parent is null</exception>
        </member>
        <member name="F:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.parentMTS_">
            <summary>
            The MTS inside which this object "lives"
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.nativeHandle_">
            <summary>
            Native handle through which the MinosCVC dll addresses this object
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.collectionParent_">
            <summary>
            Native handle to the parent of the collection (which is not 
            necessarily the training set!)
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.Index">
            <summary>
            Index of this object in the parent's collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.Image">
            <summary>
            Image representation of this object.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.GetIndex">
            <summary>
            Method through which the inherited classes retrieve the index this
            object has in its "master" collection underneath the TrainingSet.
            </summary>
            <returns>index of this object</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.CreateImageRepresentation">
            <summary>
            Creates the image used for representing this object.
            </summary>
            <returns>Image representing this object.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.ImageInfo">
            <summary>
            Image that has been added to a training set.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.#ctor(Stemmer.Cvb.Minos.TrainingSet,System.Int32)">
            <summary>
            ctor 
            </summary>
            <param name="mts">parent training set</param>
            <param name="index">index of the object to be created</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.GetHashCode">
            <summary>
            Provide a hash code for this object.
            </summary>
            <returns>hash code for this object</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.Equals(System.Object)">
            <summary>
            Check two ImageInformation objects for equality.
            </summary>
            <param name="obj">other object to check</param>
            <returns>true if the objects are equal, false otherwise</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.GetIndex">
            <summary>
            Index of this MTS image inside the training set
            </summary>
            <returns>index</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.CreateImageRepresentation">
            <summary>
            Creates the image used for representing this object.
            </summary>
            <returns>Image representing this object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.op_Equality(Stemmer.Cvb.Minos.TrainingSet.ImageInfo,Stemmer.Cvb.Minos.TrainingSet.ImageInfo)">
            <summary>
            Comparison operator for instance information objects.
            </summary>
            <param name="lhs">object to compare</param>
            <param name="rhs">object to compare</param>
            <returns>true if the two objects refer to the same instance
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.op_Inequality(Stemmer.Cvb.Minos.TrainingSet.ImageInfo,Stemmer.Cvb.Minos.TrainingSet.ImageInfo)">
            <summary>
            Comparison operator for instance information objects.
            </summary>
            <param name="lhs">object to compare</param>
            <param name="rhs">object to compare</param>
            <returns>false if the two objects refer to the same instance
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.TransformImageAndInstances(Stemmer.Cvb.Matrix2D)">
            <summary>
            Transform this image and all instances trained from this image using
            a 2x2 matrix.
            </summary>
            <param name="matrix">matrix to transform the model with</param>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.DivideByZeroException">If the Matrix cannot be used
            to sensibly transform the image</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.CheckConsistency(System.Double,System.Double)">
            <summary>
            Test this image for potentially forgotten instances to be trained.
            </summary>
            <param name="threshold">correlation threshold to be used for the
            consistency check</param>
            <param name="density">density to be used for the consistency check
            </param>
            <returns>potentially forgotten positive samples that may be added
            to the training set</returns>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If invalid values for
            <paramref name="threshold"/> or <paramref name="density"/> have been 
            passed (both parameters must be within the range [0...1.0]
            </exception>
            <exception cref="T:Stemmer.Cvb.CvbException">If the execution of the consistency
            check failed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.Instances">
            <summary>
            The instances belonging to this model.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.ConsistencyCheckProgressRouting(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Function that routes the callback invocations in 
            <see cref="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.CheckConsistency(System.Double,System.Double)"/> to the 
            <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.ConsistencyCheckProgress"/> event.
            </summary>
            <param name="privateData">not used in this implementation</param>
            <param name="currentImage">native handle of the image that is 
            currently being processed</param>
            <param name="currentModel">native handle of the model that is 
            currently being processed</param>
            <param name="linesToDo">lines left to process</param>
            <returns></returns>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.ConsistencyCheckProgress">
            <summary>
            This event will be used for indicating progress of consistency
            checks triggered by a call to <see cref="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfo.CheckConsistency(System.Double,System.Double)"/>.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo">
            <summary>
            InstanceInformation that has been added to a training set.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.#ctor(Stemmer.Cvb.Minos.TrainingSet,System.IntPtr,System.Int32,Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.GetNativeHandleCallback)">
            <summary>
            ctor 
            </summary>
            <param name="mts">parent training set</param>
            <param name="collectionParent">handle to the collection parent
            </param>
            <param name="index">index of the object to be created</param>
            <param name="getNativeHandle">delegate to be used for generating
            the native handle for an object</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.GetIndex">
            <summary>
            Index of this MTS instance inside the training set
            </summary>
            <returns>index</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.CreateImageRepresentation">
            <summary>
            Creates the image used for representing this object.
            </summary>
            <returns>Image representing this object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.Equals(System.Object)">
            <summary>
            Comparison for the wrapper object for our unmanaged instance data
            should not be left to CLR.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns><c>true</c> if this object and the object referred to 
            by <paramref name="obj"/> are to be considered equal (which in 
            this case means that <see cref="P:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.SourceImage"/>and
            <see cref="P:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.Location"/> are identical), <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.GetHashCode">
            <summary>
            Build a sensible hash value from the native handle.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.op_Equality(Stemmer.Cvb.Minos.TrainingSet.InstanceInfo,Stemmer.Cvb.Minos.TrainingSet.InstanceInfo)">
            <summary>
            Comparison operator for instance information objects.
            </summary>
            <param name="lhs">object to compare</param>
            <param name="rhs">object to compare</param>
            <returns>true if the two objects refer to the same instance
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.op_Inequality(Stemmer.Cvb.Minos.TrainingSet.InstanceInfo,Stemmer.Cvb.Minos.TrainingSet.InstanceInfo)">
            <summary>
            Comparison operator for instance information objects.
            </summary>
            <param name="lhs">object to compare</param>
            <param name="rhs">object to compare</param>
            <returns>false if the two objects refer to the same instance
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.GetCorrelation">
            <summary>
            Retrieve the correlation between this instance image and the model
            image.
            </summary>
            <returns>Correlation result.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.SourceImage">
            <summary>
            The image from which this instance has been trained.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.Location">
            <summary>
            Position in the SourceImage from which this instance has been 
            extracted.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo.Model">
            <summary>
            The Training Set Model into which this instance has been trained.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.ModelInfo">
            <summary>
            InstanceInformation that has been added to a training set.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.#ctor(Stemmer.Cvb.Minos.TrainingSet,System.Int32)">
            <summary>
            ctor 
            </summary>
            <param name="mts">parent training set</param>
            <param name="index">index of the object to be created</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.op_Equality(Stemmer.Cvb.Minos.TrainingSet.ModelInfo,Stemmer.Cvb.Minos.TrainingSet.ModelInfo)">
            <summary>
            Comparison operator for instance information objects.
            </summary>
            <param name="lhs">object to compare</param>
            <param name="rhs">object to compare</param>
            <returns>true if the two objects refer to the same instance
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.op_Inequality(Stemmer.Cvb.Minos.TrainingSet.ModelInfo,Stemmer.Cvb.Minos.TrainingSet.ModelInfo)">
            <summary>
            Comparison operator for instance information objects.
            </summary>
            <param name="lhs">object to compare</param>
            <param name="rhs">object to compare</param>
            <returns>false if the two objects refer to the same instance
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.GetIndex">
            <summary>
            Index of this MTS instance inside the training set
            </summary>
            <returns>index</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.CreateImageRepresentation">
            <summary>
            Creates the image used for representing this object.
            </summary>
            <returns>Image representing this object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.Equals(System.Object)">
            <summary>
            Compare a ModelInformation object versus anything else.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Comparison result.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.GetHashCode">
            <summary>
            Build a sensible hash value from the native handle.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.Name">
            <summary>
            Gets or sets the name of the model.
            </summary>
            <remarks>Note that model names are not required to be unique for 
            Minos! However, if you give two models the same name, there will be
            no way to determine to which specific model of a class with more 
            than one model a result reported by a Minos classifier belongs.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">when trying to set a null
            string</exception>
            <exception cref="T:System.ArgumentException">when trying to set an empty
            string or if the string contains an unmappable unicode character
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.AdvanceVector">
            <summary>
            Advance vector associated with this model.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.FeatureWindow">
            <summary>
            Gets or sets the feature window for a Minos Training Set model.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentException">when trying to set a feature 
            window that is not compatible with the geometry of the already
            trained models and the training set images</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.Origin">
            <summary>
            Gets or sets the origin of the model in terms of coordinates inside
            the feature window
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.Instances">
            <summary>
            The instances belonging to this model.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.CheckConsistency(Stemmer.Cvb.Minos.TrainingSet.ImageInfo,System.Double,System.Double)">
            <summary>
            Test the image referenced by <paramref name="trainingSetImage"/> for
            instances of this model that might have been forgotten during the
            training process.
            </summary>
            <param name="threshold">correlation threshold to be used for the
            consistency check</param>
            <param name="density">density to be used for the consistency check
            </param>
            <param name="trainingSetImage">training set image on which to 
            perform the consistency check</param>
            <returns>potentially forgotten positive samples that may be added
            to the training set</returns>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If invalid values for
            <paramref name="threshold"/> or <paramref name="density"/> have been 
            passed (both parameters must be within the range [0...1.0]
            </exception>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="trainingSetImage"/> argument was null</exception>
            <exception cref="T:Stemmer.Cvb.CvbException">If the execution of the consistency
            check failed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.CheckConsistency(System.Double,System.Double)">
            <summary>
            Test all images in the parent training set for instances of this 
            model that might have been forgotten during the training process.
            </summary>
            <param name="threshold">correlation threshold to be used for the
            consistency check</param>
            <param name="density">density to be used for the consistency check
            </param>
            <returns>potentially forgotten positive samples that may be added
            to the training set</returns>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If invalid values for
            <paramref name="threshold"/> or <paramref name="density"/> have been 
            passed (both parameters must be within the range [0...1.0]
            </exception>
            <exception cref="T:Stemmer.Cvb.CvbException">If the execution of the consistency
            check failed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.GetMaxFeatureWindow(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Retrieve the maximum values that may be set as feature window for 
            this model. The maximum range is calculated based on the actual 
            locations of the model's instances inside the training set images
            (i.e. on their distance to the image borders...). The minimum value
            in each direction is of course 0.
            </summary>
            <param name="left">maximum possible value for the left edge of the
            feature window</param>
            <param name="top">maximum possible value for the top edge of the
            feature window</param>
            <param name="right">maximum possible value for the right edge of the
            feature window</param>
            <param name="bottom">maximum possilbe value for the bottom edge of
            the feature window</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.GetMaxFeatureWindow">
            <summary>
            Retrieve the maximum values that may be set as feature window for 
            this model. The maximum range is calculated based on the actual 
            locations of the model's instances inside the training set images
            (i.e. on their distance to the image borders...). The minimum value
            in each direction is of course 0.
            </summary>
            <returns>Maximum feature window extent.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.GetExtractableArea(Stemmer.Cvb.Minos.TrainingSet.ImageInfo)">
            <summary>
            Determine the maximum area from which an instance of this model
            may be extracted from a given training set image.
            </summary>
            <param name="img">Training set image for which to query the 
            extractable area.</param>
            <returns>Extractable area.</returns>
            <exception cref="T:System.NullReferenceException">If the input image is null
            </exception>
            <exception cref="T:System.ObjectDisposedException">If the input image or the
            parent Training Set has already been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.ConsistencyCheckProgressRouting(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Function that routes the callback invocations in the 
            CheckConsistency calls to the
            <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.ConsistencyCheckProgress"/> event.
            </summary>
            <param name="privateData">not used in this implementation</param>
            <param name="currentImage">native handle of the image that is 
            currently being processed</param>
            <param name="currentModel">native handle of the model that is 
            currently being processed</param>
            <param name="linesToDo">lines left to process</param>
            <returns></returns>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.ConsistencyCheckProgress">
            <summary>
            This event will be used for indicating progress of consistency
            checks triggered by a call to CheckConsistency.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.ImageUpdated">
            <summary>
            Event that will be raised whenever the image for the model was 
            updated.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfo.OnImageUpdated">
            <summary>
            Raise the ImageUpdated event.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObjectInfoCollection`2">
            <summary>
            Additional inheritance level of the InformationCollection object from
            the Image Manager wrapper that specifies stronger constraints on the
            TInfo generic parameter
            </summary>
            <typeparam name="TParent"></typeparam>
            <typeparam name="TInfo"></typeparam>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObjectInfoCollection`2.#ctor(`0)">
            <summary>
            Constructor - simply rouges the collection parent handle to the 
            base implementation.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObjectInfoCollection`2.IndexOf(`1)">
            <summary>
            Determine the index of an image information object inside this 
            collection.
            </summary>
            <param name="obj">Object for which to determine the index.</param>
            <returns>Index through which the object can be accessed within this
            collection if it is part of this collection, -1 otherwise. Note
            that the returned index may be invalidated by Remove calls.
            </returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.TrainingSetObjectInfoCollection`2.IndexOf(System.IntPtr)">
            <summary>
            Internal IndexOf method that works on the native handles
            (useful for the ConsistencyCheckProgress events);
            </summary>
            <param name="nativeHandle"></param>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.ImageInfoCollection">
            <summary>
            Class that maintains the collection of  Training Images inside a Minos 
            Training Set.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfoCollection.#ctor(Stemmer.Cvb.Minos.TrainingSet)">
            <summary>
            Constructor that establishes the connection between the collection 
            and the training set from which it draws its information.
            </summary>
            <param name="parent">parent object for this collection</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfoCollection.GetCount">
            <summary>
            Parent class calls this method to determine the number of objects
            in the collection.
            </summary>
            <returns>number of objects in the collection</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfoCollection.GetInfo(System.Int32)">
            <summary>
            Parent class calls this method to extract one info object by index.
            </summary>
            <param name="index">index at which to extract</param>
            <returns>extracted object</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ImageInfoCollection.Item(System.Int32)">
            <summary>
            Index-based item access.
            </summary>
            <param name="index">index to be accessed</param>
            <returns>indexed class object</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfoCollection.Add(Stemmer.Cvb.Image)">
            <summary>
            Add a new training set image to the parent training set.
            </summary>
            <remarks>This variant of the function will always simply add plane
            0 of the image to the training set, regardless of the plane count.
            </remarks>
            <param name="img">image to be added</param>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> or the image has already been disposed
            </exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="img"/> is
            null</exception>
            <exception cref="T:System.OutOfMemoryException">If the insertion operation
            failed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfoCollection.Add(Stemmer.Cvb.ImagePlane)">
            <summary>
            Add a new training set image to the parent training set.
            </summary>
            <remarks>Minos only supports gray value images. When adding a color
            or multi planar Image you will need to choose which of the planes of
            the image to add.</remarks>
            <param name="plane">plane of an image to be added</param>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> or the image has already been disposed
            </exception>
            <exception cref="T:System.ArgumentNullException">If the parent of 
            <paramref name="plane"/> is null</exception>
            <exception cref="T:System.OutOfMemoryException">If the insertion operation
            failed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfoCollection.Remove(Stemmer.Cvb.Minos.TrainingSet.ImageInfo)">
            <summary>
            Remove a training set image along with its instances from the
            training set.
            </summary>
            <remarks>Calling this method will potentially invalidate any 
            references to training set images or instances you are currently
            holding - so make sure you renew those where necessary!</remarks>
            <param name="image">training set image to be removed</param>
            <returns>true if the image has been removed successfully, false
            otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/> 
            is null</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInfoCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a training set image along with its instances from the
            training set.
            </summary>
            <remarks>Calling this method will potentially invalidate any 
            references to training set images or instances you are currently
            holding - so make sure you renew those where necessary!</remarks>
            <param name="index">index of the training set image to be removed
            </param>
            <returns>true if the image has been removed successfully, false
            otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="index"/> exceeds the range [0...Count]</exception>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection">
            <summary>
            Class that maintains the collection of  Training Images inside a Minos 
            Training Set.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.GetInstanceCountCallback">
            <summary>
            callback for retrieving the number of items in the collection
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.#ctor(Stemmer.Cvb.Minos.TrainingSet,System.IntPtr,Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.GetInstanceCountCallback,Stemmer.Cvb.Minos.TrainingSet.TrainingSetObject.GetNativeHandleCallback)">
            <summary>
            Constructor that establishes the connection between the collection 
            and the training set from which it draws its information.
            </summary>
            <param name="parent">parent object for this collection</param>
            <param name="getCount">the method for acquiring the number of 
            objects in this collection</param>
            <param name="collectionParent">handle to the colleciton parent
            </param>
            <param name="getNativeHandle">delegate to be used for generating
            a native handle</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.#ctor(Stemmer.Cvb.Minos.TrainingSet)">
            <summary>
            Constructor that established the connection between the collection
            and the training set.
            </summary>
            <param name="parent">owning training set</param>
        </member>
        <member name="F:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.collectionParent_">
            <summary>
            The instance collection needs the collection parent handle in 
            addition to the MTS handle as the instance collection appears twice:
            once inside the model, and once inside the image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.getCount_">
            <summary>
            callback to be used for determining the number of items in the 
            collection (actual Minos DLL function differs depending on the
            type of collection parent
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.getNativeHandle_">
            <summary>
            creation callback for the native handles of instances
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.GetCount">
            <summary>
            Parent class calls this method to determine the number of objects
            in the collection.
            </summary>
            <returns>number of objects in the collection</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.GetInfo(System.Int32)">
            <summary>
            Parent class calls this method to extract one info object by index.
            </summary>
            <param name="index">index at which to extract</param>
            <returns>extracted object</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.Item(System.Int32)">
            <summary>
            Index-based item access.
            </summary>
            <param name="index">index to be accessed</param>
            <returns>indexed class object</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.Remove(Stemmer.Cvb.Minos.TrainingSet.InstanceInfo)">
            <summary>
            Remove an instance from the training set.
            </summary>
            <remarks>Calling this method will likely invalidate any 
            references to training set instances you are currently holding - so
            make sure you renew those where necessary!</remarks>
            <param name="instance">instance to be removed from the training set
            </param>
            <returns>true if the instance has been removed successfully, false
            otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">If 
            <paramref name="instance"/> is null</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.InstanceInfoCollection.Remove(System.Int32)">
            <summary>
            Remove an instance from the training set.
            </summary>
            <remarks>Calling this method will potentially invalidate any 
            references to training set instances you are currently
            holding - so make sure you renew those where necessary!</remarks>
            <param name="index">index of the training set instance to be removed
            </param>
            <returns>true if the instance has been removed successfully, false
            otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="index"/> exceeds the range [0...Count]</exception>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.ImageInstanceInfoCollection">
            <summary>
            Instance information collection that is attached to a training set 
            image.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInstanceInfoCollection.#ctor(Stemmer.Cvb.Minos.TrainingSet,System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The training set to which the collection to
            be created will belong.</param>
            <param name="collectionParent">The native handle through which
            this collection is to access the information.</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInstanceInfoCollection.Add(System.String,System.Boolean,Stemmer.Cvb.Point2Dd@)">
            <summary>
            Extract a new instance from the parent image and added it to the 
            model with the specified name.
            </summary>
            <param name="name">name of the model to which to add the instance
            </param>
            <param name="location">location from which to extract the new
            instance; upon return from this function, location will contain
            the corrected location as corrected by the correlation test</param>
            <param name="askForce">flag controlling the response to a failed 
            correlation test; if AskForce is true, a messagebox appears asking 
            if the user wants to force creation of a model, even though the 
            sample has failed the correlation test</param>
            <exception cref="T:System.ObjectDisposedException">If the parent training set
            has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="name"/>
            is null</exception>
            <exception cref="T:System.InvalidOperationException">If no model by the given
            <paramref name="name"/> exists in this training set</exception>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="name"/> parameter is null</exception>
            <exception cref="T:System.InvalidOperationException">If the model
            <paramref name="name"/> has not yet been defined for this training
            set</exception>
            <returns>An <see cref="T:Stemmer.Cvb.Minos.TrainingSet.InstanceInfo"/> object that represents
            the newly added instance.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ImageInstanceInfoCollection.TryAdd(System.String,System.Boolean,Stemmer.Cvb.Point2Dd@)">
            <summary>
            Extract a new instance from the parent image and added it to the 
            model with the specified name.
            </summary>
            <param name="name">name of the model to which to add the instance
            </param>
            <param name="location">location from which to extract the new
            instance; upon return from this function, location will contain
            the corrected location as corrected by the correlation test</param>
            <param name="askForce">flag controlling the response to a failed 
            correlation test; if AskForce is true, a messagebox appears asking 
            if the user wants to force creation of a model, even though the 
            sample has failed the correlation test</param>
            <returns>Newly trained instance or null.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.ModelInstanceInfoCollection">
            <summary>
            Instance information collection that is attached to a training set 
            model.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInstanceInfoCollection.#ctor(Stemmer.Cvb.Minos.TrainingSet,System.IntPtr)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> that the newly
            created collection belongs to.</param>
            <param name="collectionParent">Native handle through which this
            collection is to access its training set data.</param>
        </member>
        <member name="T:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection">
            <summary>
            ModelInformationCollection class that aggregates the collection of 
            Models inside a Minos Training Set.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection.#ctor(Stemmer.Cvb.Minos.TrainingSet)">
            <summary>
            Constructor that establishes the connection between the collection 
            and the training set from which it draws its informations.
            </summary>
            <param name="parent">parent object for this collection</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection.GetCount">
            <summary>
            Parent class calls this method to determine the number of objects
            in the collection.
            </summary>
            <returns>number of objects in the collection</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection.GetInfo(System.Int32)">
            <summary>
            Parent class calls this method to extract one info object by index.
            </summary>
            <param name="index">index at which to extract</param>
            <returns>extracted object</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection.Item(System.Int32)">
            <summary>
            Index-based item access.
            </summary>
            <param name="index">index to be accessed</param>
            <returns>indexed class object</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection.Item(System.String)">
            <summary>
            String-based item access.
            </summary>
            <remarks>Note that this will only return the *first* model with a 
            matching model name. If several models by the same name exist, they
            will need to be accessed index-based.</remarks>
            <param name="name">Name of the model to retrieve.</param>
            <returns>ModelInformation object.</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the name does not 
            exist in the model collection.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection.Contains(System.String)">
            <summary>
            Check if the collection contains a model with the specified name.
            </summary>
            <param name="name">name for which to check the collection</param>
            <returns>true if the collection contains at least one model with the
            specified name, false otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">If the training set has
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection.Add(Stemmer.Cvb.Minos.TrainingSet.ImageInfo,System.String,Stemmer.Cvb.Point2D,Stemmer.Cvb.Rect)">
            <summary>
            Add a new model (plus the first instance of that model) to the 
            training set.
            </summary>
            <param name="image">image from which to extract the first instance
            (needs to be taken from the TrainingSet.Images collection)</param>
            <param name="name">name of the model to be generation</param>
            <param name="location">position in the <paramref name="image"/> from
            which to extract the first instance</param>
            <param name="featureWindow">feature of the model to be generated
            </param>
            <exception cref="T:System.ObjectDisposedException">If the training set has
            already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="image"/>
            or <paramref name="name"/> are null</exception>
            <exception cref="T:System.InvalidOperationException">when one of the 
            following applies:
            <list type="bullet">
            <item>the <paramref name="image"/> has been taken from a training
            set that is not the parent of this collection</item>
            <item>the <paramref name="name"/> is an empty string</item>
            <item><paramref name="location"/> references a location that lies 
            outside the image or too close to the image border to extract a
            model with the given feature window.</item>
            </list></exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection.Remove(Stemmer.Cvb.Minos.TrainingSet.ModelInfo)">
            <summary>
            Remove a model (and all the instances extracted for that model!) 
            from the training set.
            </summary>
            <remarks>Calling this method will likely invalidate any 
            references to training set images or instances you are currently
            holding - so make sure you renew those where necessary!</remarks>
            <param name="model">model to be removed from the training set
            </param>
            <returns>true if the model has been removed successfully, false
            otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="model"/> 
            is null</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection.Remove(System.Int32)">
            <summary>
            Remove a training set image along with its instances from the
            training set.
            </summary>
            <remarks>Calling this method will potentially invalidate any 
            references to training set images or instances you are currently
            holding - so make sure you renew those where necessary!</remarks>
            <param name="index">index of the training set image to be removed
            </param>
            <returns>true if the image has been removed successfully, false
            otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.Minos.TrainingSet"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="index"/> exceeds the range [0...Count]</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ModelInfoCollection.SetGlobalAdvanceVector(Stemmer.Cvb.Point2Dd)">
            <summary>
            Set an advance vector for all available models.
            </summary>
            <param name="vec">Advance vector to be set for all models.</param>
        </member>
        <member name="F:Stemmer.Cvb.Minos.TrainingSet.ExpectationRadiusDefault">
            <summary>
            Default expectation radius (taken from TeachNT).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.TrainingSet.CorrelationThresholdDefault">
            <summary>
            Default Correlation threshold(taken from TeachNT).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.#ctor">
            <summary>
            Create an empty training set.
            </summary>
            <exception cref="T:System.OutOfMemoryException">If a new training set could not
            be allocated</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.#ctor(System.String)">
            <summary>
            Load a saved training set from a file.
            </summary>
            <param name="fileName">name of the file to be loaded</param>
            <exception cref="T:System.IO.FileNotFoundException">If the training set file does 
            not exist</exception>
            <exception cref="T:System.IO.FileLoadException">If loading an existing training
            set file failed</exception>
            <exception cref="T:System.ArgumentNullException">If <paramref name="fileName"/>
            is null</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.#ctor(System.IntPtr)">
            <summary>
            Construct a training set from an unmanaged handle.
            </summary>
            <param name="handle">handle to create the training set from</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.#ctor(System.Byte[])">
            <summary>
            Recreate a serialized Minos Training Set from a byte array.
            </summary>
            <param name="buffer">byte array from which to create the training set.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Recreate a serialized Minos training set from a byte array.
            </summary>
            <param name="buffer">Byte array from which to create the training set
            </param>
            <param name="offset">offset at which to start</param>
            <param name="size">number of bytes to use</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="buffer"/>
            is null</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="offset"/> is 
            less than zero or <paramref name="size"/> is less than zero
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If 
            <paramref name="offset"/> and <paramref name="size"/> have values that
            together exceed the length of <paramref name="buffer"/></exception>
            <exception cref="T:System.IO.InvalidDataException">If <paramref name="buffer"/>
            does not contain a deserializable Minos training set at the given
            offset.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.Init(System.IntPtr)">
            <summary>
            Initializations common to all constructors
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Minos.TrainingSet.handle_">
            <summary>
            the handle to the unmanaged object
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ToBuffer">
            <summary>
            Serializes the training set into a buffer.
            </summary>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.Transform(Stemmer.Cvb.Matrix2D)">
            <summary>
            Generate a new training set by transforming this training set with a 
            2x2 transformation matrix.
            </summary>
            <param name="transformation">matrix with which to transform the
            geometry of this training set</param>
            <returns>transformed training set</returns>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.DivideByZeroException">when providing a 
            transformation matrix that is singular.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.Save(System.String)">
            <summary>
            Write the training set to a file.
            </summary>
            <remarks>As a side effect this function sets the 
            <see cref="P:Stemmer.Cvb.Minos.TrainingSet.IsModified"/> flag to false if the training set was saved
            successfully.</remarks>
            <param name="fileName"></param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentNullException">when 
            <paramref name="fileName"/> is null</exception>    
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.CheckConsistency(System.Double,System.Double)">
            <summary>
            Test all images in the parent training set for instances of this 
            model that might have been forgotten during the training process.
            </summary>
            <param name="threshold">correlation threshold to be used for the
            consistency check</param>
            <param name="density">density to be used for the consistency check
            </param>
            <returns>potentially forgotten positive samples that may be added
            to the training set</returns>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If invalid values for
            <paramref name="threshold"/> or <paramref name="density"/> have been 
            passed (both parameters must be within the range [0...1.0]
            </exception>
            <exception cref="T:Stemmer.Cvb.CvbException">If the execution of the consistency
            check failed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.ConsistencyCheckProgressRouting(System.IntPtr,System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            Function that routes the callback invocations in 
            <see cref="M:Stemmer.Cvb.Minos.TrainingSet.CheckConsistency(System.Double,System.Double)"/> to the 
            <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ConsistencyCheckProgress"/> event.
            </summary>
            <param name="privateData">not used in this implementation</param>
            <param name="currentImage">native handle of the image that is 
            currently being processed</param>
            <param name="currentModel">native handle of the model that is 
            currently being processed</param>
            <param name="linesToDo">lines left to process</param>
            <returns></returns>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.ConsistencyCheckProgress">
            <summary>
            This event will be used for indicating progress of consistency
            checks triggered by a call to <see cref="M:Stemmer.Cvb.Minos.TrainingSet.CheckConsistency(System.Double,System.Double)"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.OnImageAdded(Stemmer.Cvb.Minos.TrainingSet.ImageInfo)">
            <summary>
            Event router for the <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ImageAdded"/> event.
            </summary>
            <param name="img"></param>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.ImageAdded">
            <summary>
            Event that will be raised when a new image has been added to the 
            training set.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.OnImageRemoved(Stemmer.Cvb.Minos.ImageRemovedEventArgs)">
            <summary>
            Event router for the <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ImageRemoved"/> event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.ImageRemoved">
            <summary>
            Event that will be raised when an image has been removed from the
            training set. Note that removing an image usually also means that a 
            number of instances (the instances that were marked on the removed
            image) have been removed as well, but the if the reason for the
            removal of these instances was the removal of an image, there will
            be no notification event for the implicitly removed instances.
            Likewise, the removal of an image may also trigger the removal of a 
            model. Again, there will be no separate notification about this if the
            reason was the removal of an image. This means that to be on the safe
            side, it usually makes sense to update the model and instance views
            as well, if an image has been removed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.OnModelAdded(Stemmer.Cvb.Minos.TrainingSet.ModelInfo)">
            <summary>
            Event router for the <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ModelAdded"/> event.
            </summary>
            <param name="mdl"></param>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.ModelAdded">
            <summary>
            Event that will be raised when a new model has been added to the
            training set.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.OnModelRemoved(Stemmer.Cvb.Minos.ModelRemovedEventArgs)">
            <summary>
            Event router for the <see cref="E:Stemmer.Cvb.Minos.TrainingSet.ModelRemoved"/> event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.ModelRemoved">
            <summary>
            Event that will be raised when an image has been removed from the
            training set. Note that removing an image usually also means that a 
            number of instances (the instances that were marked on the removed
            image) have been removed as well, but the if the reason for the
            removal of these instances was the removal of an image, there will
            be no notification event for the implicitly removed instances.
            Likewise, the removal of an image may also trigger the removal of a 
            model. Again, there will be no separate notification about this if the
            reason was the removal of an image. This means that to be on the safe
            side, it usually makes sense to update the model and instance views
            as well, if an image has been removed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.OnInstanceAdded(Stemmer.Cvb.Minos.TrainingSet.InstanceInfo)">
            <summary>
            Event router for the <see cref="E:Stemmer.Cvb.Minos.TrainingSet.InstanceAdded"/> event.
            </summary>
            <param name="mdl"></param>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.InstanceAdded">
            <summary>
            Event that will be raised when a new model has been added to the
            training set.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.OnInstanceRemoved(Stemmer.Cvb.Minos.InstanceRemovedEventArgs)">
            <summary>
            Event router for the <see cref="E:Stemmer.Cvb.Minos.TrainingSet.InstanceRemoved"/> event.
            </summary>
            <param name="args"></param>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.InstanceRemoved">
            <summary>
            Event that will be raised when an image has been removed from the
            training set. Note that removing an image usually also means that a 
            number of instances (the instances that were marked on the removed
            image) have been removed as well, but the if the reason for the
            removal of these instances was the removal of an image, there will
            be no notification event for the implicitly removed instances.
            Likewise, the removal of an image may also trigger the removal of a 
            model. Again, there will be no separate notification about this if the
            reason was the removal of an image. This means that to be on the safe
            side, it usually makes sense to update the model and instance views
            as well, if an image has been removed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ClassCount">
            <summary>
            The number of identifiable classes inside this training set.
            </summary>
            <remarks>The number of classes cannot be higher than the number of
            trained models (see property this.Models.Count). If two models have
            the same name, the classifier can no longer discriminate these two
            models, reducing the ClassCount property.</remarks>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.Instances">
            <summary>
            The instances contained in this training set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.InstancesTotal">
            <summary>
            Total number of instances currently trained in this training set.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.Images">
            <summary>
            The images contained in this training set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.Models">
            <summary>
            The models contained in this training set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.FileName">
            <summary>
            Name of the file from which this image list was loaded (string.Empty 
            if this image list was neither loaded nor saved since its 
            construction).
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.IsModified">
            <summary>
            Get or sets a flag that informs about unsaved modifications to the 
            training set. Saving the training set will set this flag to false.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.Extent">
            <summary>
            Extent of the classes in the training set relative to the anchor point.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.LastFeatureWindow">
            <summary>
            Feature window of the last model that has been created for the 
            training set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.Comment">
            <summary>
            Comment assigned to the training set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.ExpectationRadius">
            <summary>
            Expectation radius is the radius that is searched for the best
            occurrence of a sample when adding a new sample to the training set.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set an 
            expectation radius less than 0</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.CorrelationThreshold">
            <summary>
            Correlation threshold is the correlation value below which Minos will
            suggest the generation of a new model rather over the generation of
            a new instance of an existing model with which the new instance
            correlates poorly.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the training set has 
            already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">when trying to set a 
            correlation threshold less than 0 or greater than 1</exception>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.Handle">
            <summary>
            Native Minos training set handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in 
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Minos.TrainingSet.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Minos.TrainingSet.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the 
            <see cref="M:System.IDisposable.Dispose"/> method.  
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.Dispose">
            <summary>
            Dispose function to get rid of resources allocated by this object.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via 
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.GetHashCode">
            <summary>
            Retrieve a hash code for this object.
            </summary>
            <returns>Hash code for this object</returns>
        </member>
        <member name="M:Stemmer.Cvb.Minos.TrainingSet.Equals(System.Object)">
            <summary>
            Check two TrainingSet objects for equality.
            </summary>
            <param name="obj">other object to check</param>
            <returns>true if the objects are equal, false otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">If this training set has
            already been disposed</exception>
        </member>
        <member name="T:Stemmer.Cvb.MinosLib">
            <summary>
            Import class for the DLLImport functions of MinosCVC
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeMinosClassifierHandle">
            <summary>
            Safe-destruct handle wrapper for IntPtr-based resources that are Minos
            Classifiers (which are not proper pseudo on the 32 bit plaform since
            CVB 7.2.1)
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeMinosClassifierHandle.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">native handle for which to create the image 
            object</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeMinosClassifierHandle.ReleaseHandle">
            <summary>
            Release internally memorized handle.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeMinosTrainingSetHandle">
            <summary>
            Safe-destruct handle wrapper for IntPtr-based resources that are Minos
            Classifiers (which are not proper pseudo on the 32 bit platform since
            CVB 7.2.1)
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeMinosTrainingSetHandle.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">native handle for which to create the image 
            object</param>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeMinosTrainingSetHandle.ReleaseHandle">
            <summary>
            Release internally memorized handle.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
