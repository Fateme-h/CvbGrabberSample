<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stemmer.Cvb.SampleDatabase</name>
    </assembly>
    <members>
        <member name="T:Stemmer.Cvb.SampleDatabase.NamespaceDoc">
            <summary>
            The namespace and assembly <c>Stemmer.Cvb.SampleDatabase</c> contains 
            the classes and definitions needed for using the SIL.dll
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions">
            <summary>
            Extension methods for use with generic collections
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions.StringBuilderFactor">
            <summary>
            Size Factor with which to generate the string builder for pretty-
            printing labels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions.LeftBracketDefault">
            <summary>
            Opening bracket.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions.RightBracketDefault">
            <summary>
            Closing bracket.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions.SeparatorDefault">
            <summary>
            Default separator.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions.ToLabelString(System.Single[],System.String,System.String,System.Char,System.Char)">
            <summary>
            Pretty-print a float vector label.
            </summary>
            <param name="arr">The array to apply the extension method to.</param>
            <param name="format">Format string to use for printing.</param>
            <param name="separator">The separator character to separate the 
            vector entries with.</param>
            <param name="openingBracket">The opening bracket for outputting the
            vector content.</param>
            <param name="closingBracket">The closing bracket for outputting the 
            vector content.</param>
            <returns>String representation of the vector label.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions.ToLabelString``1(``0[],System.String,System.Char,System.Char)">
            <summary>
            Pretty-print a vector label.
            </summary>
            <typeparam name="TValue">type of the elements stored in the array
            </typeparam>
            <param name="arr">the array to attach the extension method to</param>
            <param name="separator">character that separates the entries</param>
            <param name="openingBracket">left bracket character</param>
            <param name="closingBracket">right bracket character</param>
            <returns>String representation of the label array.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions.ToLabelString``1(``0[],System.String)">
            <summary>
            Pretty-print a vector label.
            </summary>
            <typeparam name="TValue">type of the elements stored in the array
            </typeparam>
            <param name="arr">the array to attach the extension method to</param>
            <param name="separator">character that separates the entries</param>
            <returns>String representation of the vector label.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions.ToLabelString(System.Single[],System.String,System.String)">
            <summary>
            Pretty-print a vector label.
            </summary>
            <param name="arr">the array to attach the extension method to</param>
            <param name="separator">character that separates the entries</param>
            <param name="format">format string to use</param>
            <returns>String representation of the vector label.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions.ToLabelString``1(``0[])">
            <summary>
            Pretty-print a vector label.
            </summary>
            <param name="arr">Array to print.</param>
            <returns>String representation of the vector label.</returns>
            <typeparam name="TValue">Type of the array entries.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleDatabaseExtensions.HasSameValues(System.Single[],System.Single[])">
            <summary>
            Check two 1-dimensional arrays for content equality.
            </summary>
            <param name="a">array 1 to be checked</param>
            <param name="b">array 2 to be checked</param>
            <returns>True if the arrays have identical size and content, false
            otherwise (or if one of the arrays has > 1 dimension)</returns>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.Fringes">
            <summary>
            Object describing the fringes that are available around images in a 
            sample image list.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.Fringes.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fringe container object.
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Fringes.Left">
            <summary>
            Fringe at the left edge.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Fringes.Top">
            <summary>
            Fringe at the top edge.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Fringes.Right">
            <summary>
            Fringe at the right edge.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Fringes.Bottom">
            <summary>
            Fringe at the bottom edge.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.Fringes.ToString">
            <summary>
            String conversion.
            </summary>
            <returns>String representation of the fringe definition.</returns>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList">
            <summary>
            Classifier type that operates on images.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionInfoCollection">
            <summary>
            Collection of regression information inside a regression sample list.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionInfoCollection.#ctor(Stemmer.Cvb.SampleDatabase.SampleList)">
            <summary>
            Constructor that establishes the connection between the collection and
            the list from which it draws its informations.
            </summary>
            <param name="parent">parent object for this collection</param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionInfoCollection.GetInfo(System.Int32)">
            <summary>
            Parent class calls this method to extract one info object by index.
            </summary>
            <param name="index">index at which to extract</param>
            <returns>extracted object</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleImageList"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionInfoCollection.Parent">
            <summary>
            Properly typed parent reference.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionInfoCollection.Item(System.Single[])">
            <summary>
            Access a sample collection by label.
            </summary>
            <param name="label">Label to access</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionInfoCollection.Add(System.Single[],Stemmer.Cvb.Image,Stemmer.Cvb.Point2D,Stemmer.Cvb.SampleDatabase.SampleExtractionMode)">
            <summary>
            Add a sample under a new value. If the value indicated by the 
            <paramref name="label"/> already exists the sample will be added to
            the existing label.
            </summary>
            <param name="label">label of the new class.</param>
            <param name="srcImage">Image from which to extract the first sample
            for the new class.</param>
            <param name="extractionLocation">Location at which to extract the 
            first sample for the new class. Note that what the extraction 
            location actually refers dependent on the value of the
            <paramref name="mode"/> parameter.</param>
            <param name="mode">Interpretation hint for the 
            <paramref name="extractionLocation"/> parameter.</param>
            <exception cref="T:System.ObjectDisposedException">If the image list has 
            already been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionInfoCollection.HasValue(System.Single[])">
            <summary>
            Check if a given value is already present in the values collection.
            </summary>
            <param name="value">Value to test for.</param>
            <returns>True if an entry with the specified <paramref name="value"/>
            already exists; false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionInfoCollection.Remove(System.Single[])">
            <summary>
            Remove all samples for a specific label.
            </summary>
            <param name="label">label to be removed from the data base</param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionInfoCollection.MergeClasses(System.Single[],System.Single[])">
            <summary>
            Merge two classes into one class. The class label will be taken from
            the 2nd class index. Note that this operation will invalidate all
            indices higher than <paramref name="fromLabel"/>.
            </summary>
            <param name="fromLabel">Class to merge to the other classes.</param>
            <param name="toLabel">Class to merge the samples to.</param>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo">
            <summary>
            Regression Label Information.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo.labelInfo_">
            <summary>
            Aggregated label information.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo.#ctor(Stemmer.Cvb.SampleDatabase.SampleList,System.Single[])">
            <summary>
            ctor
            </summary>
            <param name="parentList"></param>
            <param name="label"></param>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo.Samples">
            <summary>
            Samples under this label.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo.Index">
            <summary>
            Get the index of this label. Note that this index may change when 
            samples are removed from the image list - therefore you should check
            this index often. Generally it is more recommendable to work label
            based, not index based.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo.Label">
            <summary>
            Label under which this class is stored. You may change this label,
            but not to one that already exists in the <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>. 
            To Merge labels in the <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/> use the merge 
            method(s) of the sample list.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">when trying to set a null as
            class label</exception>
            <exception cref="T:System.ArgumentException">when trying to set an empty 
            class label</exception>
            <exception cref="T:System.InvalidOperationException">when trying to set a 
            class label that already exists in the parent
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo.LabelType">
            <summary>
            Type of the labels.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo.ParentList">
            <summary>
            Sample List object from which this information was taken.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo.ToString">
            <summary>
            Return a pretty-print version of the value...
            </summary>
            <returns>String representation of the label.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo.Add(Stemmer.Cvb.Image,Stemmer.Cvb.Point2D,Stemmer.Cvb.SampleDatabase.SampleExtractionMode)">
            <summary>
            Add a new sample to an existing class. 
            </summary>
            <param name="srcImage">Image from which to extract the first sample
            for the new class.</param>
            <param name="extractionLocation">Location at which to extract the 
            sample for the class. Note that what the extraction 
            location actually refers dependent on the value of the
            <paramref name="mode"/> parameter.</param>
            <param name="mode">Interpretation hint for the 
            <paramref name="extractionLocation"/> parameter.</param>
            <exception cref="T:System.ObjectDisposedException">If the image list has 
            already been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.ImageRegressionLabelInfo.Relabel(System.Single[])">
            <summary>
            Modify the label of a sample set, but not to one that already exists 
            in the <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>. To Merge labels in the 
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/> use the merge method(s) of the sample list.
            </summary>
            <param name="label"></param>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">when trying to set a null as
            class label</exception>
            <exception cref="T:System.ArgumentException">when trying to set an empty 
            class label</exception>
            <exception cref="T:System.InvalidOperationException">when trying to set a 
            class label that already exists in the parent
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.#ctor(Stemmer.Cvb.SampleDatabase.SampleListImageDataType,System.Int32)">
            <summary>
            Create a sample image list suitable for regression tasks.
            </summary>
            <param name="imageDataType">Data type of the images to be added to the
            sample image list.</param>
            <param name="regressionDimension">Dimension of the regression vector. 
            Must be greater than 0 and less than or equal REGRESSIONDIMENSIONMAX.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            regressionDimension parameter is outside the range 
            ]0...REGRESSIONDIMENSIONMAX]</exception>
            <exception cref="T:System.OutOfMemoryException">If the creation of the sample
            image list failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.#ctor(System.IntPtr,System.String)">
            <summary>
            ctor
            </summary>
            <param name="handle"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.Init">
            <summary>
            Read static information from the classifier.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.RegressionDimensionMax">
            <summary>
            Maximum regression dimension to be used.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.RegressionDimension">
            <summary>
            Dimension of the regression labels used in this sample image list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.Values">
            <summary>
            Class collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the image list has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.LabelType">
            <summary>
            Type of the labels used by this SampleList.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.GetVectorLabel(Stemmer.Cvb.SampleDatabase.SampleList,System.Int32)">
            <summary>
            Query a vector label.
            </summary>
            <param name="list">List on which to query.</param>
            <param name="index">Index of the label to query.</param>
            <returns>vector label</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.IsIdentical(System.Single[],System.Single[])">
            <summary>
            Compare two float vectors for equality in dimension and content.
            </summary>
            <param name="vecA"></param>
            <param name="vecB"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.LabelToIndex(System.Single[])">
            <summary>
            Convert a class label to a class index.
            </summary>
            <param name="label">Label to be converted.</param>
            <returns>Index of the label; -1 if the label is not found in the 
            class list.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.LabelToIndex``1(``0)">
            <summary>
            Convert a class label to a class index.
            </summary>
            <param name="label">Label to be converted.</param>
            <returns>Index of the label; -1 if the label is not found in the 
            class list.</returns>
            <typeparam name="TLabel">Label type.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.Transform(Stemmer.Cvb.SampleDatabase.SampleList.DataTransformImageToImage)">
            <summary>
            Transform this Sample Image List into a new sample image list by
            transforming each sample inside it.
            </summary>
            <param name="dlg">Sample transformation delegate.</param>
            <returns>New sample list or null on error.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.Transform(Stemmer.Cvb.SampleDatabase.SampleList.LabelTransformVectorToVector)">
            <summary>
            Transform this Sample Image List into a new sample image list by
            transforming each label inside it.
            </summary>
            <param name="dlg">Label transformation delegate.</param>
            <returns>New sample list or null on error.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.Transform(Stemmer.Cvb.SampleDatabase.SampleList.LabelTransformVectorToString)">
            <summary>
            Transform this Sample Image List into a new sample image list by
            transforming each label inside it.
            </summary>
            <param name="dlg">Label transformation delegate.</param>
            <returns>New sample list or null on error.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList.GetValueForSample(System.Int32)">
            <summary>
            Retrieve the label information that goes with a given sample.
            </summary>
            <param name="sampleIndex">The sample to retrieve the value for.
            </param>
            <returns>The regression label value for the sample referred to by
            <paramref name="sampleIndex"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">if 
            <paramref name="sampleIndex"/> is outside the range 
            [0...NumSamples-1].</exception>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList">
            <summary>
            Classifier type that operates on images.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo">
            <summary>
            Classification label information
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.labelInfo_">
            <summary>
            Aggregated label information.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.#ctor(Stemmer.Cvb.SampleDatabase.SampleList,System.String)">
            <summary>
            ctor
            </summary>
            <param name="parentList"></param>
            <param name="label"></param>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.Samples">
            <summary>
            Samples under this label.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.Index">
            <summary>
            Get the index of this label. Note that this index may change when 
            samples are removed from the image list - therefore you should check
            this index often. Generally it is more recommendable to work label
            based, not index based.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.Label">
            <summary>
            Label under which this class is stored. You may change this label,
            but not to one that already exists in the <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>. 
            To Merge labels in the <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/> use the merge 
            method(s) of the sample list.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">when trying to set a null as
            class label</exception>
            <exception cref="T:System.ArgumentException">when trying to set an empty 
            class label</exception>
            <exception cref="T:System.InvalidOperationException">when trying to set a 
            class label that already exists in the parent
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.IsExcluded">
            <summary>
            Get/set the exclusion state of this class. 
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.LabelType">
            <summary>
            Type of the labels.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.ParentList">
            <summary>
            Sample List object from which this information was taken.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.ToString">
            <summary>
            Return the label information as a string.
            </summary>
            <returns>Label string.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.Add(Stemmer.Cvb.Image,Stemmer.Cvb.Point2D,Stemmer.Cvb.SampleDatabase.SampleExtractionMode)">
            <summary>
            Add a new sample to an existing class. 
            </summary>
            <param name="srcImage">Image from which to extract the first sample
            for the new class.</param>
            <param name="extractionLocation">Location at which to extract the 
            sample for the class. Note that what the extraction 
            location actually refers dependent on the value of the
            <paramref name="mode"/> parameter.</param>
            <param name="mode">Interpretation hint for the 
            <paramref name="extractionLocation"/> parameter.</param>
            <exception cref="T:System.ObjectDisposedException">If the image list has 
            already been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationLabelInfo.Relabel(System.String)">
            <summary>
            Modify the label of a sample set, but not to one that already exists 
            in the <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>. To Merge labels in the 
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/> use the merge method(s) of the sample list.
            </summary>
            <param name="label"></param>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">when trying to set a null as
            class label</exception>
            <exception cref="T:System.ArgumentException">when trying to set an empty 
            class label</exception>
            <exception cref="T:System.InvalidOperationException">when trying to set a 
            class label that already exists in the parent
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>
            </exception>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationInfoCollection">
            <summary>
            Collection of class information inside a classification sample list.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationInfoCollection.#ctor(Stemmer.Cvb.SampleDatabase.SampleList)">
            <summary>
            Constructor that establishes the connection between the collection and
            the list from which it draws its informations.
            </summary>
            <param name="parentList">parent object for this collection</param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationInfoCollection.GetInfo(System.Int32)">
            <summary>
            Parent class calls this method to extract one info object by index.
            </summary>
            <param name="index">index at which to extract</param>
            <returns>extracted object</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleImageList"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationInfoCollection.Parent">
            <summary>
            Properly typed parent reference.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationInfoCollection.Add(System.String,Stemmer.Cvb.Image,Stemmer.Cvb.Point2D,Stemmer.Cvb.SampleDatabase.SampleExtractionMode)">
            <summary>
            Add a sample to a new class. If the class indicated by the 
            <paramref name="label"/> already exists the sample will be added to
            the existing class.
            </summary>
            <param name="label">Name of the new class.</param>
            <param name="srcImage">Image from which to extract the first sample
            for the new class.</param>
            <param name="extractionLocation">Location at which to extract the 
            first sample for the new class. Note that what the extraction 
            location actually refers dependent on the value of the
            <paramref name="mode"/> parameter.</param>
            <exception cref="T:System.ObjectDisposedException">If the image list has 
            already been disposed.</exception>
            <param name="mode">Interpretation hint for the 
            <paramref name="extractionLocation"/> parameter.</param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationInfoCollection.HasLabel(System.String)">
            <summary>
            Check if a given label is already present in the classes collection.
            </summary>
            <param name="label">Label to test for.</param>
            <returns>True if a class with the specified <paramref name="label"/>
            already exists; false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationInfoCollection.Remove(System.String)">
            <summary>
            Remove a class and all the data objects associated with it based on 
            its name.
            </summary>
            <param name="label">name of the class to be removed</param>
            <returns>true/false</returns>
            <exception cref="T:System.ObjectDisposedException">If the sample list has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImageClassificationInfoCollection.MergeClasses(System.String,System.String)">
            <summary>
            Merge two classes into one class. The class label will be taken from
            the 2nd class index. Note that this operation will invalidate all
            indices higher than <paramref name="fromLabel"/>.
            </summary>
            <param name="fromLabel">Class to merge to the other classes.</param>
            <param name="toLabel">Class to merge the samples to.</param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.#ctor(Stemmer.Cvb.SampleDatabase.SampleListImageDataType)">
            <summary>
            Create a sample image list suitable for classification tasks.
            </summary>
            <param name="imageDataType">Data type of the images to be added to the
            sample image list.</param>
            <exception cref="T:System.OutOfMemoryException">If the creation of the sample
            image list failed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.#ctor(System.IntPtr,System.String)">
            <summary>
            ctor
            </summary>
            <param name="handle"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.Init">
            <summary>
            Read static information from the classifier.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.ImportMantoSil(System.String)">
            <summary>
            Load a Manto2 sample list from disc.
            </summary>
            <param name="fileName">File to import.</param>
            <returns>The imported Manto image list.</returns>
            <exception cref="T:System.IO.FileNotFoundException">if the file referred to by
            <paramref name="fileName"/> was not found</exception>
            <exception cref="T:System.IO.FileLoadException">if importing the Manto SIL from 
            the file referred to by <paramref name="fileName"/> failed.
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.Classes">
            <summary>
            Class collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the image list has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.LabelType">
            <summary>
            Type of the labels used by this SampleList.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.LabelToIndex(System.String)">
            <summary>
            Convert a class label to a class index.
            </summary>
            <param name="label">Label to be converted.</param>
            <returns>Index of the label; -1 if the label is not found in the 
            class list.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.LabelToIndex``1(``0)">
            <summary>
            Convert a class label to a class index.
            </summary>
            <param name="label">Label to be converted.</param>
            <returns>Index of the label; -1 if the label is not found in the 
            class list.</returns>
            <typeparam name="TLabel">Label type.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.Transform(Stemmer.Cvb.SampleDatabase.SampleList.DataTransformImageToImage)">
            <summary>
            Transform this Sample Image List into a new sample image list by
            transforming each sample inside it.
            </summary>
            <param name="dlg">Sample transformation delegate.</param>
            <returns>New sample list or null on error.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.Transform(Stemmer.Cvb.SampleDatabase.SampleList.LabelTransformStringToString)">
            <summary>
            Transform this Sample Image List into a new sample image list by
            transforming each label inside it.
            </summary>
            <param name="dlg">Label transformation delegate.</param>
            <returns>New sample list or null on error.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.Transform(Stemmer.Cvb.SampleDatabase.SampleList.LabelTransformStringToVector)">
            <summary>
            Transform this Sample Image List into a new sample image list by
            transforming each label inside it.
            </summary>
            <param name="dlg">Label transformation delegate.</param>
            <returns>New sample list or null on error.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.GetClassFromSample(System.Int32)">
            <summary>
            Retrieve the label information that goes with a given sample.
            </summary>
            <param name="sampleIndex">Index of the sample for which to retrieve
            the class information.</param>
            <returns>The indexed class.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">if 
            <paramref name="sampleIndex"/> is outside the range 
            [0...NumSamples-1]</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList.GetIndicesForSampleIndex(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            For a given sample index (running from 0 to NumSamples-1) this method
            determines the indices of the class and the sample inside the class.
            </summary>
            <param name="sampleIndex">Sample index to get the indices for.</param>
            <param name="clsIdx">Class Index</param>
            <param name="splIdx">Sample index inside the claass's Sample 
            collection.</param>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleExtractionMode">
            <summary>
            Possible approaches to the sample extraction in the "Add" methods of
            derived classes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleExtractionMode.TopLeftCorner">
            <summary>
            Position parameter is assumed to refer to the top left corner of
            the feature window.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleExtractionMode.OriginPosition">
            <summary>
            Position parameter is assumed to refer to the origin of the 
            feature window.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleImageList">
            <summary>
            Classifier type that operates on images.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageLabelInfo`1">
            <summary>
            Base class for providing SIL label information.
            </summary>
            <typeparam name="TLabel">Label type.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageLabelInfo`1.#ctor(Stemmer.Cvb.SampleDatabase.SampleList,`0)">
            <summary>
            Constructor
            </summary>
            <param name="parentList">List to which this label object is 
            attached</param>
            <param name="label">Label to which this information 
            refers</param>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageLabelInfo`1.Samples">
            <summary>
            Samples under this label.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageLabelInfo`1.Index">
            <summary>
            Get the index of this label. Note that this index may change when 
            samples are removed from the image list - therefore you should check
            this index often. Generally it is more recommendable to work label
            based, not index based.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageLabelInfo`1.Label">
            <summary>
            Label under which this class is stored. You may change this label
            using the <see cref="M:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageLabelInfo`1.Relabel(`0)"/> method.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageLabelInfo`1.LabelType">
            <summary>
            Type of the labels.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageLabelInfo`1.Relabel(`0)">
            <summary>
            Modify the label of a sample set, but not to one that already exists 
            in the <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>. To Merge labels in the 
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/> use the merge method(s) of the sample list.
            </summary>
            <param name="label"></param>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">when trying to set a null as
            class label</exception>
            <exception cref="T:System.ArgumentException">when trying to set an empty 
            class label</exception>
            <exception cref="T:System.InvalidOperationException">when trying to set a 
            class label that already exists in the parent
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageLabelInfo`1.ParentList">
            <summary>
            SampleList object to which this class file object is bound
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageCollection">
            <summary>
            Collection of image samples
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageCollection.#ctor(Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfo)">
            <summary>
            Constructor creates the bond to the class to which the collection 
            refers.
            </summary>
            <param name="parentClass"></param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageCollection.GetData(System.IntPtr)">
            <summary>
            Retrieve the image behind a SIL data sample.
            </summary>
            <param name="dataHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.#ctor(System.IntPtr,System.String)">
            <summary>
            ctor
            </summary>
            <param name="handle"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.BaseInit">
            <summary>
            Allows the inheritor to do a reinitialization of the base class 
            parameters.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.Init">
            <summary>
            Read static information from the classifier.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.Fringes">
            <summary>
            Fringes (= size difference between the images and the feature window)
            of the sample images.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.FeatureWindowSize">
            <summary>
            Size of the feature window.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.FeatureWindowLocation">
            <summary>
            Location of the feature window (position of left top corner inside 
            the image).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.FeatureWindowOrigin">
            <summary>
            Location of the feature window origin in pixel coordinates measured
            from the left top corner of the feature window.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageSize">
            <summary>
            Size of the images (in pixels) that can be added to the image list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageDimension">
            <summary>
            Size of the images (in pixels) that can be added to the image list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.ImageDataType">
            <summary>
            Data type of the images that can be added to the image list. (all 
            planes must have same data type)
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleImageList.SampleType">
            <summary>
            Type of the samples used by this SampleList.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.SetFeatureWindow(Stemmer.Cvb.Point2D,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            Redefine the feature window of the sample image list. Note that the
            values provided must be consistent with the image size for which this
            sample image list has been created, otherwise an exception will be
            raised.
            </summary>
            <param name="location">Feature window location (pixel coordinate of 
            the left top corner) inside the sample images.</param>
            <param name="size">Featurew window size in pixels.</param>
            <param name="origin">Location of the origin of the feature window
            (relative to the left top corner of the feature window, in pixels).
            </param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.IsCompatible(Stemmer.Cvb.Image)">
            <summary>
            Check whether a CVB image is compatible with this image list, i.e. if
            it is generally possible to add samples from that image to the list.
            </summary>
            <param name="img">Image object to be checked for compatibility.
            </param>
            <returns><c>true</c> if the image referred to by 
            <paramref name="img"/> is compatible with this image list, 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.CreateNativeImageData(Stemmer.Cvb.Image,Stemmer.Cvb.Point2D)">
            <summary>
            Utility function for inheritors that creates a native image data 
            object to be added to the SIL. Make sure to manually release the 
            handle once it is no longer needed!
            </summary>
            <param name="srcImage">image to create the data from</param>
            <param name="extractionLocation">location at which to extract data
            </param>
            <returns>native handle (IntPtr.Zero will not happen).</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleImageList.GetSampleImage(System.Int32)">
            <summary>
            Retrieve an image by its overall sample index (ranging from 0 to
            NumSamples-1.
            </summary>
            <param name="sampleIndex">Index of the image to be retrieved.</param>
            <returns>Indexed image.</returns>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList">
            <summary>
            Base class for sample lists. Sample lists can serve two
            different purposes: Classification or Regression. For each case, a 
            separate derived class has been implemented 
            (<see cref="T:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList"/> and
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList"/>), while this class contains those
            elements that are common to both types of classifier.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.ISampleListChild">
            <summary>
            Interface for anything that is child of a native sample image list
            (i.e. has a handle to the parent list through which the managed calls
            may be routed).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.ISampleListChild.ParentList">
            <summary>
            Object through which the native handle may be accessed.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfo">
            <summary>
            Interface for label information.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfo.Index">
            <summary>
            Numeric index of the label.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfo.LabelType">
            <summary>
            Type of the label (either typeof(string) or typeof(float[])).
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfo`1">
            <summary>
            Typed label information.
            </summary>
            <typeparam name="TLabel"></typeparam>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfo`1.Relabel(`0)">
            <summary>
            Change the label of a class.
            </summary>
            <param name="newLabel">new label</param>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfoCollection`2">
            <summary>
            Interface for label information collections.
            </summary>
            <typeparam name="TLabelInfo">Label information type.</typeparam>
            <typeparam name="TData">Data type.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfoCollection`2.Clear">
            <summary>
            Remove all labels.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfoCollection`2.Remove(System.Int32)">
            <summary>
            Remove a specific label.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfoCollection`2.Item(System.Int32)">
            <summary>
            Indexed access to the labels.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.LabelTransformStringToString">
            <summary>
            Delegate for label transformation.
            </summary>
            <param name="labelIn">Label to be transformed.</param>
            <returns>Transformed label.</returns>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.LabelTransformStringToVector">
            <summary>
            Delegate for label transformation.
            </summary>
            <param name="labelIn">Label to be transformed.</param>
            <returns>Transformed label.</returns>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.LabelTransformVectorToVector">
            <summary>
            Delegate for label transformation.
            </summary>
            <param name="labelIn">Label to be transformed.</param>
            <returns>Transformed label.</returns>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.LabelTransformVectorToString">
            <summary>
            Delegate for label transformation.
            </summary>
            <param name="labelIn">Label to be transformed.</param>
            <returns>Transformed label.</returns>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.DataTransformImageToImage">
            <summary>
            Image data transformation delegate.
            </summary>
            <param name="imgIn">Image to be transformed.</param>
            <returns>Transformed image.</returns>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.LabelInfoCollection`2">
            <summary>
            Information collection for class labels.
            </summary>
            <typeparam name="TData">Type of data entries in the list.</typeparam>
            <typeparam name="TLabelInformation">Type of label entries in the list.
            </typeparam>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.LabelInfoCollection`2.#ctor(Stemmer.Cvb.SampleDatabase.SampleList)">
            <summary>
            Constructor that establishes the connection between the collection and
            the list from which it draws its informations.
            </summary>
            <param name="parentList">parent object for this collection</param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.LabelInfoCollection`2.GetCount">
            <summary>
            Parent class calls this method to determine the number of objects
            in the collection.
            </summary>
            <returns>number of objects in the collection</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleImageList"/> has already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.LabelInfoCollection`2.Item(System.Int32)">
            <summary>
            Index-based item access.
            </summary>
            <param name="index">index to be accessed</param>
            <returns>indexed class object</returns>
            <exception cref="T:System.ObjectDisposedException">If the 
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleImageList"/> has already been disposed</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.LabelInfoCollection`2.Clear">
            <summary>
            Remove all labels (and their associated data) from the Sample List.
            </summary>
            <remarks>Note that this invalidates all LabelInfo objects and
            SampleInfo objects that have been taken from this collection!
            </remarks>
            <exception cref="T:System.ObjectDisposedException">If the image list has 
            already been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.LabelInfoCollection`2.Remove(System.Int32)">
            <summary>
            Remove a class by Index.
            </summary>
            <param name="Index">index of the class to be removed</param>
            <exception cref="T:System.ObjectDisposedException">If the image list has 
            already been disposed</exception>
            <returns>true if the class has been removed, false it is has not 
            been removed or if it was not found in the image list</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.LabelInfoCollection`2.MergeClasses(System.Int32,System.Int32)">
            <summary>
            Merge two classes into one class. The class label will be taken from
            the 2nd class index. Note that this operation will invalidate all
            indices higher than <paramref name="fromIndex"/>.
            </summary>
            <param name="fromIndex">Class to merge to the other classes.</param>
            <param name="toIndex">Class to merge the samples to.</param>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.LabelInfoCollection`2.ParentList">
            <summary>
            SampleList object to which this class file object is bound
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1">
            <summary>
            Collection of data samples.
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleImageList"/>.
            </summary>
            <typeparam name="TData">Type of data stored in the samples.
            </typeparam>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1.#ctor(Stemmer.Cvb.SampleDatabase.SampleList.ILabelInfo)">
            <summary>
            Constructor creates the bond to the class to which the collection 
            refers.
            </summary>
            <param name="parentClass"></param>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1.parent_">
            <summary>
            Parent class
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1.Count">
            <summary>
            Get the number of samples for this collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1.Item(System.Int32)">
            <summary>
            Access one of the sample images.
            </summary>
            <param name="index">index to be accessed</param>
            <returns>image</returns>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If the index is invalid
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1.GetData(System.IntPtr)">
            <summary>
            Retrieve the data behind a TSILDATA handle.
            </summary>
            <param name="dataHandle">Native handle of the data object.</param>
            <returns>The data object referred to.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1.GetImage(System.IntPtr)">
            <summary>
            Retrieve the image behind a TSILDATA handle.
            </summary>
            <param name="dataHandle">Native handle of the data object.</param>
            <returns>The image associated with the 
            <paramref name="dataHandle"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1.GetFloatVector(System.IntPtr)">
            <summary>
            Retrieve the float vector behind a TSILDATA handle.
            </summary>
            <param name="dataHandle">The native data handle.</param>
            <returns>The vector data associated with the
            <paramref name="dataHandle"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1.Remove(System.Int32)">
            <summary>
            Remove a sample.
            </summary>
            <param name="index">index of the sample to be removed</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If the 
            <paramref name="index"/> is invalid</exception>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
            <returns>The removed data object.</returns>
            <exception cref="T:System.ObjectDisposedException">If the parent 
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleImageList"/> has already been disposed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">if the 
            <paramref name="index"/> is outside the range [0...Count-1].
            </exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1.System#Collections#Generic#IEnumerable{TData}#GetEnumerator">
            <summary>
            Use the yield-mechanism to generate the enumerator
            </summary>
            <returns>enumerator object</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.SampleCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Refer to the Generics-based implementation
            </summary>
            <returns><see cref="T:System.Collections.IEnumerator"/> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.#ctor(System.IntPtr,System.String)">
            <summary>
            ctor
            </summary>
            <param name="handle">native sample list handle</param>
            <param name="fileName">name of the file the sample list was loaded 
            from</param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.Init">
            <summary>
            Initializes the read-once values of the sample list.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.FromFile(System.String)">
            <summary>
            Load a Manto2 sample list from disc.
            </summary>
            <param name="fileName">File to load the sample list from.</param>
            <returns>The loaded sample list object. Depending on the content
            of the file referred to by <paramref name="fileName"/> the resulting
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/> can be cast to 
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleRegressionImageList"/> or
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleClassificationImageList"/> after loading.</returns>
            <exception cref="T:System.IO.FileNotFoundException">if the file referred to by
            <paramref name="fileName"/> does not exist.</exception>
            <exception cref="T:System.IO.FileLoadException">if loading the file referred to
            by <paramref name="fileName"/> failed - probably due to incompatible
            file content.</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.SampleDatabase.SampleList.ObjectDisposing">
            <summary>
            Raised when this object is about to be disposed via the 
            <see cref="M:System.IDisposable.Dispose"/> method.  
            </summary>
            <remarks>
            This event is raised right before this object is disposed. The dispose
            itself cannot be canceled.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.Dispose(System.Boolean)">
            <summary>
            IDispose helper function.
            </summary>
            <param name="disposing"><c>true</c> when called via 
            <see cref="M:System.IDisposable.Dispose"/>, <c>false</c> when called by the
            finalizer.</param>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.Dispose">
            <summary>
            Dispose method that releases the classifier
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.Handle">
            <summary>
            Native Manto2 classifier handle.
            </summary>
            <remarks>It is normally not necessary to work with this handle in 
            CVB.Net. Note that using this handle in connection with the legacy
            CVB managed wrappers may actually be disruptive to your application.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.IsDisposed">
            <summary>
            Tests if the native handle has already been disposed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleList.handle_">
            <summary>
            Internal Manto2 classifier handle.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.LabelToIndex``1(``0)">
            <summary>
            Convert a class label to a class index.
            </summary>
            <param name="label">Label to be converted.</param>
            <returns>Index of the label; -1 if the label is not found in the 
            sample list.</returns>
            <typeparam name="TLabel">Label type.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.ContainsLabel``1(``0)">
            <summary>
            Check if the sample list contains a given label...
            </summary>
            <param name="label">Label to be checked.</param>
            <returns>True if the label was found in the sample list, false 
            otherwise.</returns>
            <typeparam name="TLabel">Label type.</typeparam>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.Relabel``1(System.Int32,``0,System.Boolean)">
            <summary>
            Modify the label of a sample set, but not to one that already exists 
            in the <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>. To Merge labels in the 
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/> use the merge method(s) of the sample list.
            </summary>
            <param name="index"></param>
            <param name="label"></param>
            <param name="mergePermitted"></param>
            <exception cref="T:System.ObjectDisposedException">If the parent list has 
            already been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">when trying to set a null as
            class label</exception>
            <exception cref="T:System.ArgumentException">when trying to set an empty 
            class label</exception>
            <exception cref="T:System.InvalidOperationException">when trying to set a 
            class label that already exists in the parent
            <see cref="T:Stemmer.Cvb.SampleDatabase.SampleList"/>
            </exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.FileName">
            <summary>
            Name of the file from which this image list was loaded (string.Empty 
            if this image list was neither loaded nor saved since its 
            construction).
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the classifier has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.Comment">
            <summary>
            Classifier comment text.
            </summary>
            <exception cref="T:System.ObjectDisposedException">If the sample list has 
            already been disposed</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.CreationDate">
            <summary>
            Date on which the SampleList was created.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.ModificationDate">
            <summary>
            Date on which the SampleList was last modified.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.NumClasses">
            <summary>
            Number of distinguishable classes in the sample list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.NumSamples">
            <summary>
            Total number of samples in the sample list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.MinSampleCount">
            <summary>
            Number samples in the smallest class of the sample list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.MaxSampleCount">
            <summary>
            Number samples in the largest class of the sample list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.AverageSampleCount">
            <summary>
            Average number samples in per class of the sample list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.LabelType">
            <summary>
            Type of the labels used by this SampleList.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleList.SampleType">
            <summary>
            Type of the samples used by this SampleList.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.Save(System.String)">
            <summary>
            Save the Manto2 sample list to a file.
            </summary>
            <param name="fileName">File name to save to.</param>
            <exception cref="T:System.ObjectDisposedException">If the object to be saved
            has already been disposed.</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.RemoveLabel(System.Int32)">
            <summary>
            Remove a label and all the data objects associated with it based on 
            its index.
            </summary>
            <param name="index">index of the label to be removed</param>
            <exception cref="T:System.ObjectDisposedException">If the sample list has 
            already been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.TypeToNativeEnum(System.Type)">
            <summary>
            Mini Utility function.
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.NativeLabelToObject(System.IntPtr,Stemmer.Cvb.TSilLabelType)">
            <summary>
            Conversion utility function.
            </summary>
            <param name="nativeLabel"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.Transform``1(Stemmer.Cvb.SampleDatabase.SampleList.TransformGeneric,Stemmer.Cvb.SampleDatabase.SampleList.ResultCreator{``0})">
            <summary>
            Generic Transformation handler.
            </summary>
            <typeparam name="TOut"></typeparam>
            <param name="dlg"></param>
            <param name="res"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.TransformData``1(Stemmer.Cvb.SampleDatabase.SampleList.DataTransformImageToImage,Stemmer.Cvb.SampleDatabase.SampleList.ResultCreator{``0})">
            <summary>
            Create a new sample image list by transforming the samples in the 
            current list.
            </summary>
            <typeparam name="TOut">return type</typeparam>
            <param name="dlg">transformation delegate</param>
            <param name="res"></param>
            <returns>transformed image list (or null if transformation failed
            or was interrupted)</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.TransformLabels``3(Stemmer.Cvb.SampleDatabase.SampleList.LabelTransform{``1,``2},Stemmer.Cvb.SampleDatabase.SampleList.ResultCreator{``0})">
            <summary>
            Create a new sample image list by transforming the samples in the 
            current list.
            </summary>
            <typeparam name="TOut">return type</typeparam>
            <typeparam name="TLabelOut">type of transformed labels</typeparam>
            <typeparam name="TLabelIn">type of input labels</typeparam>
            <param name="dlg">transformation delegate</param>
            <param name="res">result creation delegate</param>
            <returns>transformed image list (or null if transformation failed
            or was interrupted)</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.NativeLabelTransformCallback``2(Stemmer.Cvb.SampleDatabase.SampleList.LabelTransform{``0,``1},System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Callback passed to the native transformation function.
            </summary>
            <param name="dlg">Managed delegate that does the actual 
            transformation.</param>
            <param name="pPrivate">Private data pointer (not used).</param>
            <param name="labelIn">Input label.</param>
            <param name="labelOut">Transformed output label.</param>
            <returns>true if transformation successful, false otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleList.NativeDataTransformCallback(Stemmer.Cvb.SampleDatabase.SampleList.DataTransformImageToImage,System.IntPtr,System.IntPtr,System.IntPtr@)">
            <summary>
            Callback passed to the native transformation function.
            </summary>
            <param name="dlg">Managed delegate that does the actual 
            transformation.</param>
            <param name="pPrivate">Private data pointer (not used).</param>
            <param name="dataIn">Input data.</param>
            <param name="dataOut">Transformed output data.</param>
            <returns>true if transformation successful, false otherwise.</returns>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleListImageDataType">
            <summary>
            Descriptor for image data to be digested by an image list.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleListImageDataType.#ctor(Stemmer.Cvb.Size2D,System.Int32,Stemmer.Cvb.DataType,Stemmer.Cvb.Point2D,Stemmer.Cvb.Size2D,Stemmer.Cvb.Point2D)">
            <summary>
            Construct an image list data type descriptor for image lists that
            digest images.
            </summary>
            <param name="imageSize">Size of the images to be processed inside
            an image list.</param>
            <param name="imageDimension">Dimension of the images to be processed
            inside an image list.</param>
            <param name="imageDataType">Data type of the images to be processed
            inside an image list.</param>
            <param name="featureWindowLoc">Position (left, top) of the feature
            window inside the image.</param>
            <param name="featureWindowSize">Size of the feature window.</param>
            <param name="featureWindowOrigin">Origin of the feature window.
            </param>
            <exception cref="T:System.ArgumentException">If the image size, feature 
            window and feature window position are not compatible (feature window
            must be fully contained inside the image, feature window origin must
            lie inside the feature window).</exception>
        </member>
        <member name="M:Stemmer.Cvb.SampleDatabase.SampleListImageDataType.#ctor(Stemmer.Cvb.Size2D,System.Int32,Stemmer.Cvb.DataType,Stemmer.Cvb.Point2D)">
            <summary>
            Construct an image list data type descriptor for image lists that
            digest images.
            </summary>
            <param name="imageSize">Size of the images to be processed inside
            an image list.</param>
            <param name="imageDimension">Dimension of the images to be processed
            inside an image list.</param>
            <param name="imageDataType">Data type of the images to be processed
            inside an image list.</param>
            <param name="featureWindowOrigin">Origin of the feature window.
            </param>
            <exception cref="T:System.ArgumentException">If the image size, feature 
            window and feature window position are not compatible (feature window
            must be fully contained inside the image, feature window origin must
            lie inside the feature window).</exception>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleListImageDataType.ImageSize">
            <summary>
            Size of the images to be added to the image list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleListImageDataType.ImageDimension">
            <summary>
            Dimension of the images to be added to the image list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleListImageDataType.ImageDataType">
            <summary>
            Data type of the images to be added to the image list.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleListImageDataType.FeatureWindowSize">
            <summary>
            Size of the feature window.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleListImageDataType.FeatureWindowLocation">
            <summary>
            Location of the feature window (position of left top corner inside 
            the image).
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.SampleListImageDataType.FeatureWindowOrigin">
            <summary>
            Location of the feature window origin in pixel coordinates measured
            from the left top corner of the feature window.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.SampleListDataType">
            <summary>
            Base class for image list data type descriptors.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.SampleDatabase.SampleListDataType.handle_">
            <summary>
            Handle to the native data type descriptor.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.SampleDatabase.Properties.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.ClassMerge">
            <summary>
              Looks up a localized string similar to Classes must be merged using the MergeClasses method..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.ClassNotFound">
            <summary>
              Looks up a localized string similar to Cannot remove class {0} because it is not part of the sample database..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.DeletingLastSample">
            <summary>
              Looks up a localized string similar to The last sample of a label cannot be deleted. Delete whole label instead!.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.FileNotFound">
            <summary>
              Looks up a localized string similar to The {0} file &apos;{1}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.FloatVectorSilNotImplemented">
            <summary>
              Looks up a localized string similar to Sample lists that do not operate on images are currently not implemented..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.GenericObjectDisposed">
            <summary>
              Looks up a localized string similar to The {0} object has already been disposed of and may not be used any longer..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.HoldoutSizeTooBig">
            <summary>
              Looks up a localized string similar to The holdout set size should not exceed half the number of samples in a sample list..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.ImplementationError">
            <summary>
              Looks up a localized string similar to An internal error occurred. Please report this to support@stemmer-imaging.de along with the call stack if possible..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.IncompatibleImage">
            <summary>
              Looks up a localized string similar to The input image is not compatible with this sample list..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.IncompatibleSearchParameters">
            <summary>
              Looks up a localized string similar to The combination of classifier, image and search parameters is incompatible..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.IncompatibleValues">
            <summary>
              Looks up a localized string similar to The input values for Image Size and Feature Window are not compatible..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.InvalidCharsInPreprocessingCode">
            <summary>
              Looks up a localized string similar to The preprocessing code {0} contains some invalid characters..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.InvalidDimension">
            <summary>
              Looks up a localized string similar to Vector dimension must be {0}..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.InvalidLabel">
            <summary>
              Looks up a localized string similar to The value {0} is not a valid class label..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.InvalidRank">
            <summary>
              Looks up a localized string similar to Label arrays must have rank 1..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.KeyNotFound">
            <summary>
              Looks up a localized string similar to A value for key {0} does not exist in this collection..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.LoadFailure">
            <summary>
              Looks up a localized string similar to Loading the {0} from file {1} failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.OutsideImage">
            <summary>
              Looks up a localized string similar to {0} must be located inside the image (location: {1}, image size: {2})..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.SaveFailure">
            <summary>
              Looks up a localized string similar to Saving the {0} to file {1} failed..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.UnsupportedValue">
            <summary>
              Looks up a localized string similar to {0} is not in the supported range [{1}]..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.SampleDatabase.Properties.Messages.ValueOutOfRange">
            <summary>
              Looks up a localized string similar to Value is out of range ({0} &lt;= {1} &lt; {2})..
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeSilHandle">
            <summary>
            Safe-destruct handle wrapper for IntPtr-based resources that are Manto2
            Sample Image Lists.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeSilHandle.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">native handle for which to create the handle 
            object</param>
        </member>
        <member name="T:Stemmer.Cvb.Runtime.InteropServices.SafeSilDataTypeHandle">
            <summary>
            Safe-destruct handle wrapper for IntPtr-based resources that are Manto2
            Classifiers
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Runtime.InteropServices.SafeSilDataTypeHandle.#ctor(System.IntPtr)">
            <summary>
            Constructor
            </summary>
            <param name="handle">native handle for which to create the handle 
            object</param>
        </member>
    </members>
</doc>
