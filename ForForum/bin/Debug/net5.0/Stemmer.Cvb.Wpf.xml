<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stemmer.Cvb.Wpf</name>
    </assembly>
    <members>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.HookPoint">
            <summary>
            Defines the point to which the move thumb is attached.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.HookPoint.None">
            <summary>
            not attached (default)
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.HookPoint.P0">
            <summary>
            attached to Point 0
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.HookPoint.P1">
            <summary>
            attached to Point 1
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.HookPoint.P2">
            <summary>
            attached to Point 2
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.Area2DMoveThumb">
            <summary>
            Thumb that rotates the Area2D overlay
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.Area2DMoveThumb.OnDragDelta(System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Point is being dragged.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.Area2DMoveThumb.GetDragDelta(System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Thumb is being dragged.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>The drag delta in image pixel coordinates.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.Area2DMoveThumb.ApplyCoordinateRestrictions(System.Double@,System.Double@)">
            <summary>
            Make sure the point does not leave the image, if this is desired.
            </summary>
            <param name="x">Target x coordinate - may be modified by the function
            call if necessary.</param>
            <param name="y">Target y coordinate - may be modified by the function
            call if necessary.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.Area2DMoveThumb.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Make sure the left button up event bubbles - otherwise the user of
            an overlay hardly has a way of finding out when dragging stopped.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.Area2DMoveThumb.HookPointDefault">
            <summary>
            default value
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.Area2DMoveThumb.HookPoint">
            <summary>
            The point to which the thumb is attached
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.Area2DMoveThumb.HookPointProperty">
            <summary>
            Backing store
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.ContentAdorner">
            <summary>
            Adorner hosting any <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.ContentProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.Content"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.Content">
            <summary>
            Gets/sets the <see cref="T:System.Windows.FrameworkElement"/> to show as adorner.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.XProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.X"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.X">
            <summary>
            Gets/sets the x-coordinate of the content relative to the adorned
            element.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.YProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.Y"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.Y">
            <summary>
            Gets/sets the y-coordinate of the content relative to the adorned
            element.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.HasContentProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.HasContent"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.HasContent">
            <summary>
            Gets whether this adorner has a content element.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.#ctor(System.Windows.UIElement)">
            <summary>
            Creates an empty adorner for the given 
            <paramref name="adornedElement"/>.
            </summary>
            <param name="adornedElement">Element to adorn.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.#ctor(System.Windows.FrameworkElement,System.Windows.UIElement)">
            <summary>
            Creates an adorner showing the given <paramref name="content"/> on
            the given <paramref name="adornedElement"/>.
            </summary>
            <param name="content">Element to show.</param>
            <param name="adornedElement">Element to adorn.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Places the content on the control.
            </summary>
            <param name="finalSize">Actual size of the adorner.</param>
            <returns>Used size.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.GetVisualChild(System.Int32)">
            <summary>
            Gets the content as the visual child if present.
            </summary>
            <param name="index">Only 0 is accepted if content is present.</param>
            <returns>The content as a <see cref="T:System.Windows.Media.Visual"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the content of this adorner.
            </summary>
            <param name="constraint">Outer limit.</param>
            <returns>Desired size.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ContentAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual children.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.PlacementMode">
            <summary>
            Limitations to the placement of controls that are adorned with a 
            move thumb.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.PlacementMode.Free">
            <summary>
            adorned overlay may be placed virtually anywhere
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.PlacementMode.StayInsideImage">
            <summary>
            adorned overlay must stay within the limits of the image it has been 
            put on
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.CoordinateMode">
            <summary>
            Limitations to pixel coordinates.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.CoordinateMode.Pixel">
            <summary>
            Always work on pixel positions.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.CoordinateMode.SubPixel">
            <summary>
            Allow sub pixel positions.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject">
            <summary>
            A thumb that is tailored to the requirements of the 
            Stemmer.Cvb.Wpf.DisplayCanvas object.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.PlacementLimitsDefault">
            <summary>
            Default limit mode.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.CoordinatesDefault">
            <summary>
            Default coordinate mode.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.PlacementLimitsProperty">
            <summary>
            Dependency property object for <see cref="P:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.PlacementLimits"/>
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.PlacementLimits">
            <summary>
            X position of the feature window origin.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.CoordinatesProperty">
            <summary>
            Dependency property object for <see cref="P:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.Coordinates"/>
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.Coordinates">
            <summary>
            X position of the feature window origin.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.Canvas">
            <summary>
            The display canvas we are displayed on (if there is none, this will
            simply be null...
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.Overlay">
            <summary>
            The control we are operating on.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.DisplayCanvasThumbObject_DragStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Dragging started.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.DisplayCanvasThumbObject_DragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Overlay is being dragged.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.OnDragStarted(System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            Drag started handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.OnDragDelta(System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Drag delta handler.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.DisplayCanvasThumbObject.ApplyCoordinateRestrictions(System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean)">
            <summary>
            Make sure the control stays within the limits of the image it is
            "living" on.
            </summary>
            <param name="left">Coordinate of the left edge. May be modified by
            the function call if needed.</param>
            <param name="top">Coordinate of the top edge. May be modified by
            the function call if needed.</param>
            <param name="right">Coordinate of the right edge. May be modified by
            the function call if needed.</param>
            <param name="bottom">Coordinate of the bottom edge. May be modified by
            the function call if needed.</param>
            <param name="ignoreSize">When set to <c>true</c>, the width and 
            height of the overlay will be ignored.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner">
            <summary>
            Adorner to show image stats.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.DefaultAnchorDistance">
            <summary>
            Constant for the default distance to the lower right corner.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.AdornerVisibility">
            <summary>
            Gets/sets the general show state of this adorner as configured by the
            display.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.AdornerVisibilityProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.AdornerVisibility"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.AnchorRight">
            <summary>
            Gets/sets the anchor points right edge.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.AnchorRightProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.AnchorRight"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.AnchorBottom">
            <summary>
            Gets/sets the anchor points bottom edge.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.AnchorBottomProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.AnchorBottom"/> property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.#ctor(Stemmer.Cvb.Wpf.Controls.Display)">
            <summary>
            Ctor.
            </summary>
            <param name="adornedDisplay">Adorned display.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ImageInfoAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the info.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner">
            <summary>
            Adorner with which pixel distance and angle regarding the x-axis is 
            calculated.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.Angle">
            <summary>
            Gets the current angle regarding the x-axis.
            </summary>
            <value>
            Angle of the line through <see cref="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.StartPoint"/> and 
            <see cref="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.EndPoint"/> regarding the x-axis.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.AngleProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.Angle"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.CoordinateMode">
            <summary>
            Gets/sets the coordinate mode for measuring.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.CoordinateModeProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.CoordinateMode"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.Distance">
            <summary>
            Gets the distance between the start and the end point.
            </summary>
            <value>
            Distance in image pixels; <c>NaN</c> if no line is present.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.DistanceProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.Distance"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.EndPoint">
            <summary>
            Gets the measure line end point.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.EndPointProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.EndPoint"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.StartPoint">
            <summary>
            Gets/sets the point from which to measure.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.StartPointProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.StartPoint"/> property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.#cctor">
            <summary>
            Initializes the dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.#ctor(Stemmer.Cvb.Wpf.Controls.Display)">
            <summary>
            Creates the measure line adorner.
            </summary>
            <param name="adornedDisplay">The display to adorn.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.MeasureLineAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the measure line in case a start/end point is set.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.MouseOverInfoAdorner">
            <summary>
            Mouse over info adorner.
            </summary>
            <remarks>
            Presents information about the pixel the mouse currently hovers over.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.MouseOverInfoAdorner.AdornerVisibility">
            <summary>
            Gets/sets the general show state of this adorner as configured by the
            display.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MouseOverInfoAdorner.AdornerVisibilityProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Adorners.MouseOverInfoAdorner.AdornerVisibility"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.MouseOverInfoAdorner.ImageLocation">
            <summary>
            Gets/sets the point in the image the adorner shows the info about.
            </summary>
            <value>
            The point is in image coordinates.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MouseOverInfoAdorner.ImageLocationProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.MouseOverInfoAdorner.ImageLocation"/> property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.MouseOverInfoAdorner.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.MouseOverInfoAdorner.#ctor(Stemmer.Cvb.Wpf.Controls.Display)">
            <summary>
            Creates the adorner.
            </summary>
            <param name="adornedDisplay">The display to adorn.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.MouseOverInfoAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the adorner.
            </summary>
            <param name="drawingContext">Drawing context to draw on the display.
            </param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.MoveDirection">
            <summary>
            Move directions.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MoveDirection.Horizontal">
            <summary>
            Control can be moved horizontal only.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MoveDirection.Vertical">
            <summary>
            Control can be moved vertically only.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MoveDirection.Both">
            <summary>
            Control can be moved horizontal and vertical.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.MoveThumb">
            <summary>
            Semi-Generic move thumb for ImageOverlays
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MoveThumb.MoveDirectionDefault">
            <summary>
            Default value for the property
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MoveThumb.IgnoreSizeDefault">
            <summary>
            Default value for the property
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.MoveThumb.MoveDirection">
            <summary>
            Gets/sets the move direction of this thumb.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MoveThumb.MoveDirectionProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.MoveThumb.MoveDirection"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.MoveThumb.IgnoreSizeProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.MoveThumb.IgnoreSize"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.MoveThumb.IgnoreSize">
            <summary>
            Gets/sets whether the move thumb should ignore the size when 
            applying placement limits.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.MoveThumb.OnDragDelta(System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Overlay is being dragged across a display.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.MoveThumb.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Make sure the left button up event bubbles - otherwise the user of
            an overlay hardly has a way of finding out when dragging stopped.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner">
            <summary>
            Adorner that simply displays a rectangle.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.PlacementMode">
            <summary>
            Placement of the vertices relative to the image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.PlacementModeProperty">
            <summary>
            Backing store.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.OnPlacementModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            If the placement mode changes, the P0 and P1 properties need to be
            coerced...
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.CoordinateMode">
            <summary>
            Gets/sets the coordinate mode for measuring.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.CoordinateModeProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.CoordinateMode"/> property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.OnCoordinateModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            If the coordinate mode changes, the P0 and P1 properties need to be
            coerced...
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.PixelCoordinateSystem">
            <summary>
            Defines how the rectangle is painted.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.PixelCoordinateSystemProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.PixelCoordinateSystem"/> dependency
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.P0">
            <summary>
            Start Point of the rectangle (interacts with Left/Right).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.P0Property">
            <summary>
            Backing Store
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.OnP0Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Setting P0 is a signal that dragging starts.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.CoerceP0(System.Windows.DependencyObject,System.Object)">
            <summary>
            coerce the P0 value if necessary.
            </summary>
            <param name="d">Dependency object to work on.</param>
            <param name="baseValue">Base value to work with.</param>
            <returns>Coerced value.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.P1">
            <summary>
            Start Point of the rectangle (interacts with Left/Right).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.P1Property">
            <summary>
            Backing Store
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.CoerceP1(System.Windows.DependencyObject,System.Object)">
            <summary>
            coerce the P0 value if necessary
            </summary>
            <param name="d">Dependency object to work on.</param>
            <param name="baseValue">Base value to work with.</param>
            <returns>Coerced value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.#ctor(Stemmer.Cvb.Wpf.Controls.Display)">
            <summary>
            Creates the rectangle adorner.
            </summary>
            <param name="adornedDisplay">The display to adorn.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.RectangleAdorner_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse moves inside the display.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.RectangleAdorner_LostMouseCapture(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when mouse capture is lost
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.RectangleAdorner_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the mouse button is released (ends line mode).
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Paint the rectangle...
            </summary>
            <param name="drawingContext">Context to paint the rectangle to.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.RectangleAdorner.CoercePoint(System.Windows.Point)">
            <summary>
            Coerce a point variable into sensible values.
            </summary>
            <param name="p">Point to coerce.</param>
            <returns>Coercion result.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.ResizerRole">
            <summary>
            Resizer role defines what the resizer can actually do.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ResizerRole.Undefined">
            <summary>
            unable to identify...
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ResizerRole.All">
            <summary>
            Resize in all directions simultaneously
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ResizerRole.LeftTop">
            <summary>
            Resize at the left top handle
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ResizerRole.CenterTop">
            <summary>
            Resize at the center top handle
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ResizerRole.RightTop">
            <summary>
            Resize at the right top handle
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ResizerRole.LeftCenter">
            <summary>
            Resize at the left center handle
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ResizerRole.RightCenter">
            <summary>
            Resize at the right center handle
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ResizerRole.LeftBottom">
            <summary>
            Resize at the left bottom handle
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ResizerRole.CenterBottom">
            <summary>
            Resize at the center bottom handle
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ResizerRole.RightBottom">
            <summary>
            Resize at the right bottom handle
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.ResizeThumb">
            <summary>
            A resizer thumb, tailored to the requirements of objects living on a
            DisplayCanvas.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ResizeThumb.IdentifyResizerRole(System.Windows.Controls.Control)">
            <summary>
            Check what position a resizer is in...
            </summary>
            <param name="ctrl"></param>
            <returns></returns>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ResizeThumb.Role">
            <summary>
            The role this resizer plays.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ResizeThumb.#ctor">
            <summary>
            Generic ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ResizeThumb.ResizeThumb_DragCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            When dragging finished, this resizer's role becomes irrelevant.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ResizeThumb.OnDragStarted(System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            When dragging starts it is time to pin down the role the currently
            dragged resizer is playing...
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ResizeThumb.OnDragDelta(System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            Thumb is being dragged.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.TextAdorner">
            <summary>
            Base class for all adorners displaying text.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontBackgroundColorProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontBackgroundColor"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontBackgroundColor">
            <summary>
            Gets/sets the background color for the font's background.
            </summary>
            <value>
            Default is <see cref="P:System.Windows.Media.Colors.White"/>.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontFamilyProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontFamily"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontFamily">
            <summary>
            Gets/sets the font family of the text.
            </summary>
            <value>
            Default is control default.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontShadowThicknessProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontShadowThickness"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontShadowThickness">
            <summary>
            Gets/sets the thickness of the border of the text.
            </summary>
            <remarks>
            Thickness in pixels (default is 2).
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontSizeProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontSize"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontSize">
            <summary>
            Gets/sets the font size of the text.
            </summary>
            <value>
            Default is control default.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontStretchProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontStretch"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontStretch">
            <summary>
            Gets/sets the font stretch of the text.
            </summary>
            <value>
            Default is control default.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontStyleProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontStyle"/> property.
            </summary>
            <value>
            Default is control default.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontStyle">
            <summary>
            Gets/sets the font style of the text.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontWeightProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontWeight"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.FontWeight">
            <summary>
            Gets/sets the font weight of the text.
            </summary>
            <value>
            Default is <see cref="P:System.Windows.FontWeights.SemiBold"/>.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.TextAdorner.ForegroundProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.Foreground"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.TextAdorner.Foreground">
            <summary>
            Gets/sets the foreground brush to draw the text with.
            </summary>
            <value>
            Default is a solid color <see cref="P:System.Windows.Media.Brushes.Black"/> brush.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.TextAdorner.#cctor">
            <summary>
            Dependency property initialization.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.TextAdorner.#ctor(System.Windows.UIElement)">
            <summary>
            Ctor.
            </summary>
            <param name="adornedElement">Element to place adorner on.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.TextAdorner.NewDefaultText(System.String)">
            <summary>
            Creates a new <see cref="T:System.Windows.Media.FormattedText"/> based on the current culture
            and control font settings.
            </summary>
            <param name="text">Text from which the formatted text is created.</param>
            <returns>New formatted text.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.TextAdorner.DrawString(System.Windows.Media.DrawingContext,System.Windows.Media.FormattedText,System.Windows.Point)">
            <summary>
            Draws the given <paramref name="text"/> with a drop shadow to ensure 
            its visibility.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
            <param name="text">Formatted text to print.</param>
            <param name="location">Point where the text is drawn.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.ZoomAdorner">
            <summary>
            Display adorner that shows a zoom slider.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ZoomAdorner.#ctor(Stemmer.Cvb.Wpf.Controls.Display)">
            <summary>
            Creates the zoom adorner for the given 
            <paramref name="adornedDisplay"/>.
            </summary>
            <param name="adornedDisplay">Display to adorn.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent">
            <summary>
            Designer compatible content for the <see cref="T:Stemmer.Cvb.Wpf.Adorners.ZoomAdorner"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.CommandButtonBackgroundBrushProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.CommandButtonBackgroundBrush"/> 
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.CommandButtonBackgroundBrush">
            <summary>
            Gets/sets the command button background brush (the part visible inside
            the + or - sign).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.TicksProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.Ticks"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.Ticks">
            <summary>
            Gets the tick collection of available zoom factors.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.ZoomFactorProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.ZoomFactor"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.ZoomFactor">
            <summary>
            Reflects the adorned display's zoom factor and adjusts the value
            so that the slider can represent the value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.#ctor">
            <summary>
            Default ctor for the designer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.#ctor(Stemmer.Cvb.Wpf.Controls.Display)">
            <summary>
            Creates the content for the given <paramref name="adornedDisplay"/>.
            </summary>
            <param name="adornedDisplay">The display to adorn.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.AdornedDisplay">
            <summary>
            Gets/set the display to adorn.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Adorners.ZoomAdornerContent.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Adorners.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Wpf.Adorners</c> contains 
            adorners that may be used with CVB's WPF display.
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Behaviors.LimitedOverlayAOI">
            <summary>
            Behavior that restricts an overlay's coordinates to a certain region.
            </summary>
            <remarks>
            <c>Attention:</c> Drag/resize implementation still needs to check this
            property as otherwise exceptions are thrown (the 
            <see cref="T:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay"/> behavior handles this.).
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Behaviors.LimitedOverlayAOI.GetRestrictedFringe(Stemmer.Cvb.Wpf.Overlays.ImageOverlay)">
            <summary>
            Gets the <i>RestrictedFringe</i> property from the given 
            <paramref name="overlay"/>.
            </summary>
            <param name="overlay">Overlay to get the property from.</param>
            <returns>Fringe as <c>Thickness</c> as seen from the borders of the
            overlayed image.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Behaviors.LimitedOverlayAOI.SetRestrictedFringe(Stemmer.Cvb.Wpf.Overlays.ImageOverlay,System.Windows.Thickness)">
            <summary>
            Sets the <i>RestrictedFringe</i> property to the given 
            <paramref name="overlay"/>.
            </summary>
            <remarks>
            Setting a non-0 fringe will restrict the <paramref name="overlay"/>'s
            coordinate properties.
            </remarks>
            <param name="overlay">Overlay to set the property on.</param>
            <param name="value">Fringe as <c>Thickness</c> as seen from the borders of the
            overlayed image.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Behaviors.LimitedOverlayAOI.RestrictedFringeProperty">
            <summary>
            Attached <c>RestrictedFringe</c> property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Behaviors.LimitedOverlayAOI.GetEffectiveRect(Stemmer.Cvb.Wpf.Overlays.ImageOverlay)">
            <summary>
            Gets the effective coordinate rect based on the displayed image size
            and its restricted fringe.
            </summary>
            <param name="overlay">Overlay to query</param>
            <returns>The effective coordinate rect.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Behaviors.LimitedOverlayAOI.SetRestrictedFringeBasedOnOverlay(Stemmer.Cvb.Wpf.Overlays.ImageOverlay,Stemmer.Cvb.Wpf.Overlays.ImageOverlay,System.Boolean)">
            <summary>
            Restricts <paramref name="overlayToRestrict"/> to the rectangle of
            <paramref name="boundsOverlay"/>.
            </summary>
            <remarks>
            The fringe is not auto-updated: thus if 
            <paramref name="boundsOverlay"/> changes size or location the fringe
            needs to be updated.
            </remarks>
            <param name="overlayToRestrict">Overlay to set the fringe to.</param>
            <param name="boundsOverlay">Overlay that functions as the allowed
            region.</param>
            <param name="relative"><c>true</c> if 
            <paramref name="overlayToRestrict"/> is inside a 
            <see cref="T:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas"/> of another overlay; <c>false</c> for 
            unrelated overlays.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Behaviors.LimitedOverlayAOI.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Behaviors.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Wpf.Behaviors</c> contains 
            definitions of behaviors to use in WPF objects.
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.Wpf.BitOverlays.BitBrushShape">
            <summary>
            Defines the shape of the brush.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.BitBrushShape.Ellipse">
            <summary>
            The brush is shaped like a ellipse.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.BitBrushShape.Rectangle">
            <summary>
            The brush is shaped like rectangle.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay">
            <summary>
            Drawing brush for draw/erase overlay bits.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.PixelHeight">
            <summary>
            Gets/sets the height of this brush in image pixels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.PixelHeightProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.PixelHeight"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.PixelLocation">
            <summary>
            Gets the current location in image pixel the brush is over.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.PixelLocationProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.PixelLocation"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.PixelWidth">
            <summary>
            Gets/sets the height of this brush in image pixels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.PixelWidthProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.PixelWidth"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.Shape">
            <summary>
            Gets/sets the shape of this brush.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.ShapeProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.Shape"/> property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.#cctor">
            <summary>
            Initializes the dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.#ctor(Stemmer.Cvb.Wpf.Controls.ImageEditor)">
            <summary>
            Creates a bit brush overlay.
            </summary>
            <param name="editor">Editor to use the object on.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.ParentEditor_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the mouse is pressed over the display canvas.
            </summary>
            <param name="sender">Display canvas.</param>
            <param name="e">Mouse location and flags.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.ParentEditor_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse moves over the display canvas.
            </summary>
            <param name="sender">Display canvas.</param>
            <param name="e">Mouse location and flags.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.ParentEditor_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the mouse button is released over the display canvas.
            </summary>
            <param name="sender">Display canvas.</param>
            <param name="e">Mouse location and flags.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary>
            This adorner does not take part in hit-testing.
            </summary>
            <param name="hitTestParameters">Ignored.</param>
            <returns>Always <c>null</c>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the brush tool.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BrushBitOverlay.DrawBits">
            <summary>
            Draws the overlay bits as configured.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase">
            <summary>
            Base class of all overlays painting in the overlay bit of an overlay 
            image.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase.DrawMode">
            <summary>
            Gets/sets the overlay's draw mode.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase.DrawModeProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase.DrawMode"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase.CanDraw">
            <summary>
            Gets whether drawing is possible on the current image editor.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase.CanDrawProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase.CanDraw"/> property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase.CoerceToolCursor(System.Windows.DependencyObject,System.Object)">
            <summary>
            Helper to coerce the tool cursor in a way, that the default arrow is
            shown when drawing is not possible.
            </summary>
            <param name="d">Bit overlay instance.</param>
            <param name="baseValue">The defualt value.</param>
            <returns>The value to be used.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase.#cctor">
            <summary>
            Initializes the dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase.#ctor(Stemmer.Cvb.Wpf.Controls.ImageEditor)">
            <summary>
            Registers the overlay to the parent editor.
            </summary>
            <param name="editor">Parent image editor to adorn.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.BitOverlayBase.GetImagePosition(System.Windows.Input.MouseEventArgs)">
            <summary>
            Gets the current mouse coordinates in image coordinates (no fractions).
            </summary>
            <param name="e">Mouse position arguments.</param>
            <returns>Image pixel coordinates.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.BitOverlays.FillBitOverlay">
            <summary>
            Fill tool for flood filling overlay bits.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.FillBitOverlay.#cctor">
            <summary>
            Initializes the dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.FillBitOverlay.#ctor(Stemmer.Cvb.Wpf.Controls.ImageEditor)">
            <summary>
            Creates a flood fill bit overlay object.
            </summary>
            <param name="editor">Editor to be adorned.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.FillBitOverlay.ParentEditor_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Fills the region under the current mouse position.
            </summary>
            <param name="sender">The parent canvas.</param>
            <param name="e">Mouse data.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.BitOverlays.Direction">
            <summary>
            Clock face direction.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.Direction.Clockwise">
            <summary>
            Clockwise (right) direction.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.Direction.CounterClockwise">
            <summary>
            Counter clockwise (left) direction.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.BitOverlays.VectorExtension">
            <summary>
            Helper for vector calculations.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.VectorExtension.GetOrthogonal(System.Windows.Vector,Stemmer.Cvb.Wpf.BitOverlays.Direction)">
            <summary>
            Helper to get an orthogonal vector.
            </summary>
            <param name="v">This vector to get orthogonal from.</param>
            <param name="direction">Which orthogonal vector in direction of the 
            vector.</param>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay">
            <summary>
            Drawer to draw a single line in the bit mask.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.EndPoint">
            <summary>
            Gets the measure line end point.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.EndPointProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.EndPoint"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.StartPoint">
            <summary>
            Gets/sets the point from which to measure.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.StartPointProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.StartPoint"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.Thickness">
            <summary>
            Thickness of the line in pixels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.ThicknessProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.Thickness"/> dependency property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.#cctor">
            <summary>
            Initializes dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.#ctor(Stemmer.Cvb.Wpf.Controls.ImageEditor)">
            <summary>
            Creates the line bit overlay object.
            </summary>
            <param name="editor">Editor to draw on.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.BitOverlays.LineBitOverlay.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the line overlay if necessary.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.BitOverlays.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Wpf.BitOverlays</c> contains 
            classes and definitions to work with the CVB bit overlays.
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.Wpf.EventPolicy">
            <summary>
            Approaches to event treatment.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.EventPolicy.MarkAsHandled">
            <summary>
            Event will be marked as handled.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.EventPolicy.PassOn">
            <summary>
            Event will be passed on.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.MouseEventFilter">
            <summary>
            Filter Mouse events according to certain criteria.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.MouseEventFilter.None">
            <summary>
            Do not filter at all.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.MouseEventFilter.MouseOver">
            <summary>
            The IsMouseOver property must be true.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.MouseEventFilter.MouseDirectlyOver">
            <summary>
            The IsMouseDirectlyOver property must be true.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.MouseClickEventArgs">
            <summary>
            Arguments for the mouse click event.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MouseClickEventArgs.#ctor(System.Windows.Point,System.Windows.Input.MouseButton)">
            <summary>
            Event argument constructor.
            </summary>
            <param name="position">Click position.</param>
            <param name="button">The button that clicked.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MouseClickEventArgs.Position">
            <summary>
            Position at which the click occurred.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MouseClickEventArgs.Button">
            <summary>
            The mouse button that performed the click.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.ClickDetector">
            <summary>
            Utility class for detecting mouse click events on controls that do not
            exhibit a MouseClick event.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.ClickDetector.PolicyDefault">
            <summary>
            Default event policy.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.ClickDetector.MaxDistanceDefault">
            <summary>
            Default delta limit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.ClickDetector.EventFilterDefault">
            <summary>
            Mouse event filter default.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.ClickDetector._parent">
            <summary>
            Framework element to which this ClickDetector is attached.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.ClickDetector._mouseDown">
            <summary>
            Location of the last mouse button down event.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.ClickDetector._button">
            <summary>
            Button that was affected.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ClickDetector.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Construct a click detector.
            </summary>
            <param name="fwElement">Framework element to which the detector is
            attached.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ClickDetector.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ClickDetector.Dispose">
            <summary>
            clean up a click detector object.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.ClickDetector.MouseClick">
            <summary>
            Emitted whenever the detector detects a mouse click.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ClickDetector.OnMouseClick(Stemmer.Cvb.Wpf.MouseClickEventArgs)">
            <summary>
            Event raiser.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ClickDetector.Parent_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            React to mouse up event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ClickDetector.Parent_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            React to mouse down event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.ClickDetector.Policy">
            <summary>
            Define the event treatment policy.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.ClickDetector.EventFilter">
            <summary>
            Filter applied to the mouse event.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.ClickDetector.MaxDistance">
            <summary>
            Maximum distance the mouse may travel; if this distance is exceeded,
            the combination of MouseDown and MouseUp will not be considered a 
            click.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ClickDetector.ApplyEventFilter">
            <summary>
            Apply the event filter(s).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.MaxVisibility">
            <summary>
            Defines which features should be shown in the <see cref="T:Stemmer.Cvb.Wpf.Controls.GenApiGrid"/>.
            </summary>
            <remarks>
            Higher levels include lower ones: e.g. <see cref="F:Stemmer.Cvb.Wpf.Controls.MaxVisibility.Expert"/> includes all
            <see cref="F:Stemmer.Cvb.Wpf.Controls.MaxVisibility.Beginner"/> features.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MaxVisibility.Beginner">
            <summary>
            Simple feature usable by everybody.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MaxVisibility.Expert">
            <summary>
            More complex feature that requires deeper knowledge about the feature.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MaxVisibility.Guru">
            <summary>
            Very complex and/or dangerous feature.
            </summary>
            <remarks>
            <c>Attention:</c> Wrong usage of these features may damage the device.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.GenApiGrid">
            <summary>
            Property grid control to show all GenICam GenApi feature 
            <see cref="T:Stemmer.Cvb.GenApi.Node"/>s from a <see cref="P:Stemmer.Cvb.Wpf.Controls.GenApiGrid.NodeMap"/>.
            </summary>
            <remarks>
            <para>
            Windows Presentation Foundation implementation of the CVB GenApiGrid.
            </para><para>
            To use the display in your projects, follow these steps:
            <list type="number">
            <item>
            <description>Reference this assembly in your solution</description>
            </item>
            <item>
            <description>Add the control's namespace to your root element of the 
            markup file:
            <code lang="XAML">xmlns:cvb="http://www.commonvisionblox.com/wpf"</code>
            </description>
            </item>
            <item>
            <description>Use the display in the XAML file:
            <code lang="XAML"><![CDATA[<cvb:GenApiGrid />]]></code></description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.GenApiGrid.PART_NativeGrid">
            <summary>
            The name of the DisplayCanvas part.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.GenApiGrid.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call 
            <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>. 
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.GenApiGrid.IsPollingEnabled">
            <summary>
            Gets or sets whether automatic polling is enabled.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.GenApiGrid.IsPollingEnabledProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.GenApiGrid.IsPollingEnabled"/> dependency 
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.GenApiGrid.MaxVisibility">
            <summary>
            Gets or sets the <see cref="T:Stemmer.Cvb.Wpf.Controls.MaxVisibility"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.GenApiGrid.MaxVisibilityProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.GenApiGrid.MaxVisibility"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.GenApiGrid.NodeMap">
            <summary>
            Gets or sets the <see cref="T:Stemmer.Cvb.GenApi.NodeMap"/> to display.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.GenApiGrid.NodeMapProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.GenApiGrid.NodeMap"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.GenApiGrid.SelectedNode">
            <summary>
            Gets or sets the currently selected node.
            </summary>
            <remarks>
            You can only select nodes that are currently visible (see
            <see cref="M:Stemmer.Cvb.Wpf.Controls.GenApiGrid.GetVisibleNodes"/>).
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.GenApiGrid.SelectedNodeProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.GenApiGrid.SelectedNode"/> dependency property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.GenApiGrid.GetVisibleNodes">
            <summary>
            Gets the currently visible <see cref="T:Stemmer.Cvb.GenApi.Node"/>s in the order they are
            displayed.
            </summary>
            <returns>Array containing the visible nodes.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.DisableableMouseWheelScrollViewer">
            <summary>
            A scroll viewer on which mouse wheel handling can be disabled.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisableableMouseWheelScrollViewer.IsMouseWheelEnabledProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.DisableableMouseWheelScrollViewer.IsMouseWheelEnabled"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisableableMouseWheelScrollViewer.IsMouseWheelEnabled">
            <summary>
            Gets/sets whether the mouse wheel handling of the scroll viewer is
            enabled or not.
            </summary>
            <remarks>
            If this property is <c>false</c> you can handle the mouse wheel event
            in encapsulating/parent controls.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisableableMouseWheelScrollViewer.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisableableMouseWheelScrollViewer.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Overridden mouse wheel handling.
            </summary>
            <param name="e">Mouse wheel arguments.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.MouseOverInformation">
            <summary>
            Available mouse over information for the <see cref="T:Stemmer.Cvb.Wpf.Controls.Display"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MouseOverInformation.None">
            <summary>
            No mouse over information is shown.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MouseOverInformation.MouseCursor">
            <summary>
            Pixel location and value information is shown.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MouseOverInformation.ImageDimension">
            <summary>
            Image width, height and plane data is shown.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MouseOverInformation.All">
            <summary>
            All mouse over information is shown.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.Display">
            <summary>
            Displays images with optional overlays and zoom control.
            </summary>
            <remarks>
            <para>Windows Presentation Foundation implementation of the CVB display.
            </para>
            <para>To use the display in your projects, follow these steps:
            <list type="number">
            <item>
            <description>Reference this assembly in your solution</description>
            </item>
            <item>
            <description>Add the control's namespace to your root element of the 
            markup file:
            <code lang="XAML">xmlns:cvb="http://www.commonvisionblox.com/wpf"</code>
            </description>
            </item>
            <item>
            <description>Use the display in the XAML file:
            <code lang="XAML"><![CDATA[<cvb:Display />]]></code></description>
            </item>
            </list></para>
            <example>
            Example on how to place a standard WPF <c>Rectangle</c> on the display:
            <code lang="XAML"><![CDATA[
            <cvb:Display ImageSource="C:\Program Files\Stemmer Imaging\Common Vision Blox\Tutorial\Clara.bmp">
              <Rectangle StrokeThickness="1" Stroke="Red" 
                cvb:DisplayCanvas.Left="50" cvb:DisplayCanvas.Right="90"
                cvb:DisplayCanvas.Top="85" cvb:DisplayCanvas.Bottom="110" 
                cvb:DisplayCanvas.AutoScaleContent="Off" />
            </cvb:Display>
            ]]></code>
            </example>
            <example>
            If you want to do less typing and be more clear about your intentions 
            you can write the above example like that:
            <code lang="XAML"><![CDATA[
            <cvb:Display ImageSource="C:\Program Files\Stemmer Imaging\Common Vision Blox\Tutorial\Clara.bmp">
              <cvb:ImageOverlay OverlayX="50" OverlayY="85" OverlayWidth="40" OverlayHeight="25"
                                AutoScaleContent="Off" >
                <Rectangle StrokeThickness="1" Stroke="Red" />
              </cvb:ImageOverlay>
            </cvb:Display>
            ]]></code>
            </example>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomCenterChangedEvent">
            <summary>
            Backing store for <see cref="E:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomCenterChanged"/>.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomCenterChanged">
            <summary>
            Bubbling routed event that is fired when the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomCenter"/> changes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactorChangedEvent">
            <summary>
            Backing store for <see cref="E:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactorChanged"/>.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactorChanged">
            <summary>
            Bubbling routed event that is fired when the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactor"/> changes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ImageDataUpdatedEvent">
            <summary>
            Backing store for the <see cref="E:Stemmer.Cvb.Wpf.Controls.Display.ImageDataUpdated"/> event.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.Display.ImageDataUpdated">
            <summary>
            Bubbling event that is fired when the display's image data is updated.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ImageSourceChangedEvent">
            <summary>
            Backing store for the <see cref="E:Stemmer.Cvb.Wpf.Controls.Display.ImageSourceChanged"/> event.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.Display.ImageSourceChanged">
            <summary>
            Bubbling event that is fired when the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageSource"/>
            changes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ZoomCenterChangedEvent">
            <summary>
            Backing store for <see cref="E:Stemmer.Cvb.Wpf.Controls.Display.ZoomCenterChanged"/>.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.Display.ZoomCenterChanged">
            <summary>
            Bubbling event that is fired when the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomCenter"/> 
            property is changed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactorChangedEvent">
            <summary>
            Backing store for <see cref="E:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactorChanged"/>.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactorChanged">
            <summary>
            Bubbling event that is fired when the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactor"/> 
            property is changed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomCenterProperty">
            <summary>
            Backing store for read-only <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomCenter"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomCenter">
            <summary>
            Gets the rendered zoom center of this display.
            </summary>
            <value>
            This is the actual value of the rendered control. Default is a point 
            with <see cref="F:System.Double.NaN"/> coordinates.
            </value>
            <remarks>
            <para>This property is a calculated value based on the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomCenter"/> and 
            <see cref="P:System.Windows.FrameworkElement.ActualWidth"/> and
            <see cref="P:System.Windows.FrameworkElement.ActualHeight"/> by the 
            layout system. The value is set by the layout system itself, based on 
            an actual rendering pass, and may therefore lag slightly behind the 
            set value of properties such as <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactor"/> that are the 
            basis of the input change.</para>
            <para>Because this value is calculated, you should be aware that there
            could be multiple or incremental reported changes to it as a result
            of various operations by the layout system. The layout system may be 
            calculating required measure space for child elements, constraints by 
            the parent element, and so on.</para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactorProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactor"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactor">
            <summary>
            Gets the rendered zoom factor of this display.
            </summary>
            <value>
            This is the actual value of the rendered control. Default is
            <see cref="F:System.Double.NaN"/>.
            </value>
            <remarks>
            <para>This property is a calculated value based on the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactor"/> and 
            <see cref="P:System.Windows.FrameworkElement.ActualWidth"/> and
            <see cref="P:System.Windows.FrameworkElement.ActualHeight"/> by the 
            layout system. The value is set by the layout system itself, based on 
            an actual rendering pass, and may therefore lag slightly behind the 
            set value of properties such as <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactor"/> that are the 
            basis of the input change.</para>
            <para>Because this value is calculated, you should be aware that there
            could be multiple or incremental reported changes to it as a result
            of various operations by the layout system. The layout system may be 
            calculating required measure space for child elements, constraints by 
            the parent element, and so on.</para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ImageProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.Image"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.Image">
            <summary>
            Gets/sets a <see cref="T:Stemmer.Cvb.Image"/> as the image source
            of this display.
            </summary>
            <remarks>
            If this property is set the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageSource"/> property is 
            readonly.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ImageObserver">
            <summary>
            Gets the observer to receive new <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.Image"/> pushes.
            </summary>
            <remarks>
            <para>
            If multiple <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.Image"/>s are to be displayed in one 
            render phase, only the newest is rendered.
            </para><para>
            It is safe to push <see cref="T:Stemmer.Cvb.Image"/>s from non-UI 
            threads.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ImageObserverProperty">
            <summary>
            Backing store for the read only <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageObserver"/>
            dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.FrameTimeMin">
            <summary>
            Gets or sets the minimal frame time for displaying new frames.
            </summary>
            <remarks>
            This time defines the minimal duration a frame is displayed. This 
            means that redraw operations are postponed to this value's duration
            since the last redraw. This effectively reduces the display frame rate.
            </remarks>
            <value>Default is no minimal frame time.</value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.FrameTimeMinProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.FrameTimeMin"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.HighBitScaleModeProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.HighBitScaleMode"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.HighBitScaleMode">
            <summary>
            Gets/sets the <see cref="T:Stemmer.Cvb.HighBitScaleMode"/> used by this
            display.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.HorizontalScrollBarHeight">
            <summary>
            Gets the height of the horizontal scroll bar.
            </summary>
            <remarks>
            I know, lookless controls and you shouldn't do that, but it is so very
            useful for laying out things...
            </remarks>
            <value>
            Height of the actual horizontal scroll bar; 0 if none is shown.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.HorizontalScrollBarHeightProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.HorizontalScrollBarHeight"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ImageSourceProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageSource"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ImageSource">
            <summary>
            Image source of this display.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportHeight">
            <summary>
            Gets the the displayed image region shown width.
            </summary>
            <value>
            Shown part of the image in device independent pixels.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportHeightProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportHeight"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportHorizontalOffset">
            <summary>
            Gets the horizontal offset to the displayed image.
            </summary>
            <value>
            Horizontal offset from the display's left border in device independent
            pixels. 
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportHorizontalOffsetProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportHorizontalOffset"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportVerticalOffset">
            <summary>
            Gets the vertical offset to the displayed image.
            </summary>
            <value>
            Vertical offset from the display's top border in device independent
            pixels. 
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportVerticalOffsetProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportVerticalOffset"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportWidth">
            <summary>
            Gets the the displayed image region shown width.
            </summary>
            <value>
            Shown part of the image in device independent pixels.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportWidthProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageViewportWidth"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.IsAnimatedProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.IsAnimated"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.IsAnimated">
            <summary>
            Gets/sets whether <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomCenter"/> or <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactor"/>
            changes are animated.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.IsAnimationInProgressProperty">
            <summary>
            Backing store for the read only <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.IsAnimationInProgress"/> 
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.IsAnimationInProgress">
            <summary>
            Gets whether the default animation is currently active.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.IsInStretchModeProperty">
            <summary>
            Backing store for read only <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.IsInStretchMode"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.IsInStretchMode">
            <summary>
            Gets whether the stretch mode is active and not the zoom mode.
            </summary>
            <value>
            <c>True</c> if stretch mode is active; <c>false</c> if zoom mode is
            active.
            </value>
            <remarks>
            The stretch mode was called panorama mode in the CVB Display ActiveX
            control.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.IsMouseOverInfoEnabledProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.IsMouseOverInfoEnabled"/> property.
            </summary>
            <remarks>
            See <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.MouseOverInfoTypes"/> for additional information which 
            overlays are shown.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.IsMouseOverInfoEnabled">
            <summary>
            Gets/sets whether the mouse over info adorners are active.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.IsZoomActiveProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.IsZoomActive"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.IsZoomActive">
            <summary>
            Gets whether this control is currently in zoom mode despite stretch
            mode.
            </summary>
            <value>
            This control is either in zoom mode (<c>true</c> value) or in
            panorama/stretch mode (<c>false</c> value).
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.IsZoomAdornerVisibleProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.IsZoomAdornerVisible"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.IsZoomAdornerVisible">
            <summary>
            Gets/sets whether the zoom adorner is visible or not.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.MeasureLineAdorner">
            <summary>
            Gets the MeasureLineAdorner object.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.MeasureLineAdornerProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.MeasureLineAdorner"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.MouseOverImageInfoAnchorBottom">
            <summary>
            Gets/sets the right anchor line for the image information adorner.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.MouseOverImageInfoAnchorBottomProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.MouseOverImageInfoAnchorBottom"/> 
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.MouseOverImageInfoAnchorRight">
            <summary>
            Gets/sets the right anchor line for the image information adorner.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.MouseOverImageInfoAnchorRightProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.MouseOverImageInfoAnchorRight"/> 
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.MouseOverInfoTypes">
            <summary>
            Gets/sets the mouse-over adorner types.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.MouseOverInfoTypesProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.MouseOverInfoTypes"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvasProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvas"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvas">
            <summary>
            Gets the overlay canvas of this display.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.PixelRasterMinExtent">
            <summary>
            Gets/sets the minimum extent (width/height) of a pixel until the pixel
            raster is shown.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.PixelRasterMinExtentProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.PixelRasterMinExtent"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.PixelRasterVisible">
            <summary>
            Gets/sets whether a pixel raster is shown in higher zoom levels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.PixelRasterVisibleProperty">
            <summary>
            Backing store the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.PixelRasterVisible"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.RedrawOnImageDataUpdated">
            <summary>
            Gets/sets whether the display is to be redrawn as soon as the image 
            data has been updated.
            </summary>
            <value>
            Default is <c>true</c>.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.RedrawOnImageDataUpdatedProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.RedrawOnImageDataUpdated"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.StretchZoomFactorProperty">
            <summary>
            Backing store for read only <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.StretchZoomFactor"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.StretchZoomFactor">
            <summary>
            Gets the zoom factor as if in the case as if this control would be in 
            stretch mode.
            </summary>
            <value>
            The zoom factor that would be used in stretch mode.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.VerticalScrollBarWidth">
            <summary>
            Gets the width of the vertical scroll bar.
            </summary>
            <remarks>
            I know, lookless controls and you shouldn't do that, but it is so very
            useful for laying out things...
            </remarks>
            <value>
            Width of the actual vertical scroll bar; 0 if none is shown.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.VerticalScrollBarWidthProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.VerticalScrollBarWidth"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ZoomCenterProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomCenter"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomCenter">
            <summary>
            Gets/sets the zoom center.
            </summary>
            <value>
            Point in the bitmap source which is the center of the zoomed view 
            port. Coordinates are in bitmap pixels.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactorProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactor"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactor">
            <summary>
            The current zoom factor of the image.
            </summary>
            <value>
            A zoom factor larger than 1.0 magnifies the displayed image; values
            smaller than 1.0 zoom out whereas 1.0 displays the image as is (this
            resembles <see cref="F:System.Windows.Media.Stretch.None"/>). The 
            special value 0.0 identifies the panorama or stretch mode which 
            resembles <see cref="F:System.Windows.Media.Stretch.Uniform"/> (the 
            default). Values smaller 0.0 are invalid.
            </value>
            <remarks>
            To get the actual value, e.g. in panorama/stretch mode, use the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactor"/> property.
            </remarks>
            <seealso cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactor" />
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ActualSizeZoom">
            <summary>
            Gets the command that is used to set the zoom factor to 100%.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.DecreaseZoom">
            <summary>
            Gets the command that is used to decrease the zoom factor one step.
            </summary>
            <remarks>
            This resembles Ctrl-MouseWheelDown.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.IncreaseZoom">
            <summary>
            Gets the command that is used to increase the zoom factor one step.
            </summary>
            <remarks>
            This resembles Ctrl-MouseWheelUp.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.StretchZoom">
            <summary>
            Gets the command that is used to switch to the stretch zoom mode.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.Display.PART_DisplayCanvas">
            <summary>
            The name of the DisplayCanvas part.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.#ctor">
            <summary>
            Creates an empty display.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.AddZoomHandlers">
            <summary>
            Hardwired, always intercepted events for zooming.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.AddMouseHandlers">
            <summary>
            Adds the events for mouse handling.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.AddImageViewportHandlers">
            <summary>
            Adds the events for the image viewport.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.ArrangeOverride(System.Windows.Size)">
            <summary>
            Intercepted to arrange the adorners.
            </summary>
            <param name="arrangeBounds">Bounding size of the display.</param>
            <returns>The size of the control.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.MeasureOverride(System.Windows.Size)">
            <summary>
            Intercepted to measure the adorners.
            </summary>
            <param name="constraint">Constraint size of this control.</param>
            <returns>The desired size of this control.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.RedrawImage">
            <summary>
            Redraws the display based on the set <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.Image"/>.
            </summary>
            <remarks>
            This method only works with a set <see cref="T:Stemmer.Cvb.Image"/>
            and redraws this display with the image's content. This method does
            nothing if only a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> is set.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.RedrawImageAsync">
            <summary>
            Redraws the display based on the set <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.Image"/>
            when the display is rendered the next time.
            </summary>
            <remarks>
            <para>
            If multiple redraws are to be done in one render phase, only one is
            performed.
            </para><para>
            <c>Attention:</c> Image drawing is performed in the UI thread. Thus if
            you <see cref="M:System.Threading.Tasks.Task.Wait"/> on the returned <see cref="T:System.Threading.Tasks.Task"/> from 
            the UI thread, the application will dead lock.
            </para><para>
            Otherwise it is safe to call this method from non-UI threads.
            </para>
            </remarks>
            <returns>Task to wait on for completion. The task's state will be 
            canceled if it was not used for actually updating the display.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.SetImageAsync(Stemmer.Cvb.Image)">
            <summary>
            Sets a new <paramref name="image"/> asynchronously.
            </summary>
            <remarks>
            <para>
            If multiple <paramref name="image"/>s are to be displayed in one 
            render phase, only the newest is rendered.
            </para><para>
            <c>Attention:</c> Image drawing is performed in the UI thread. Thus if
            you <see cref="M:System.Threading.Tasks.Task.Wait"/> on the returned <see cref="T:System.Threading.Tasks.Task"/> from 
            the UI thread, the application will dead lock.
            </para><para>
            Otherwise it is safe to call this method from non-UI threads.
            </para>
            </remarks>
            <param name="image">Image to display; <c>null</c> if just the image 
            data is to be redisplayed.</param>
            <returns>Task to wait on for completion. The task's state will be 
            canceled if it was not used for actually updating the display.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call 
            <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>. 
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.TranslatePointToImage(System.Windows.Point)">
            <summary>
            Translates a <paramref name="point"/> relative to this display to 
            coordinates that are relative to the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageSource"/>
            content pixels.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactor"/> the translated 
            coordinates may contain fractions.
            </remarks>
            <param name="point">Point as relative to this display.</param>
            <returns>Translated point value relative to the image source pixels.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.TranslatePointToImage(System.Windows.Point,Stemmer.Cvb.CoordinateSystemType)">
            <summary>
            Translates a <paramref name="point"/> relative to this display to 
            coordinates that are relative to the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageSource"/>
            content pixels.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactor"/> the translated 
            coordinates may contain fractions.
            </remarks>
            <param name="point">Point as relative to this display.</param>
            <param name="coordinateType">Defines whether the image coordinate 
            system is incorporated in the calculation.</param>
            <returns>Translated point value relative to the image source pixels.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.TranslatePointFromImage(System.Windows.Point)">
            <summary>
            Translates a <paramref name="point"/> relative to the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageSource"/> content pixels to coordinates relative to
            this display.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactor"/> the translated 
            coordinates may contain fractions.
            </remarks>
            <param name="point">Point relative to the image source pixels.</param>
            <returns>Translated point value relative to this display.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.TranslatePointFromImage(System.Windows.Point,Stemmer.Cvb.CoordinateSystemType)">
            <summary>
            Translates a <paramref name="point"/> relative to the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageSource"/> content pixels to coordinates relative to
            this display.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactor"/> the translated 
            coordinates may contain fractions.
            </remarks>
            <param name="point">Point relative to the image source pixels.</param>
            <param name="coordinateType">Defines whether the image coordinate 
            system is incorporated in the calculation.</param>
            <returns>Translated point value relative to this display.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.TranslateRectToImage(System.Windows.Rect)">
            <summary>
            Translates a <paramref name="rect"/> relative to this display to 
            coordinates that are relative to the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageSource"/>
            content pixels.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactor"/> the translated 
            coordinates may contain fractions.
            </remarks>
            <param name="rect">Rectangle relative to this display.</param>
            <returns>Translated rectangle value relative to the image source pixels.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.TranslateRectFromImage(System.Windows.Rect)">
            <summary>
            Translates a <paramref name="rect"/> relative to the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ImageSource"/> content pixels to coordinates relative to
            this display.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.Display.ActualZoomFactor"/> the translated 
            coordinates may contain fractions.
            </remarks>
            <param name="rect">Rectangle relative to the image source pixels.</param>
            <returns>Translated rectangle value relative to this panel.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvas_GotMouseCapture(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when we got mouse capture.
            </summary>
            <remarks>
            Here pan-mode starts.
            </remarks>
            <param name="sender">Ignored.</param>
            <param name="e">Ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvas_LostMouseCapture(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when we lost mouse capture.
            </summary>
            <remarks>
            Here we end the pan-mode.
            </remarks>
            <param name="sender">Ignored.</param>
            <param name="e">Ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvas_MouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse enters a control.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvas_MouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse leaves a control.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvas_MouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is pushed.
            </summary>
            <param name="sender">Sender object.</param>
            <param name="e">Mouse click arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvas_MouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the left mouse button is released.
            </summary>
            <remarks>
            Ends panning mode if active.
            </remarks>
            <param name="sender">Ignored</param>
            <param name="e">Mouse click arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvas_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when the mouse is moved.
            </summary>
            <param name="sender">Ignored.</param>
            <param name="e">Mouse event arguments</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.OverlayCanvas_MouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Called when the mouse wheel is scrolled.
            </summary>
            <param name="sender">Ignored.</param>
            <param name="e">Mouse wheel arguments</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactorTable">
            <summary>
            Gets the current zoom factor table.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.Display.ZoomFactorTableUpdated">
            <summary>
            Event that is fired when the zoom factor table is updated.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.UpdateZoomFactorTable">
            <summary>
            Updates the zoom factor table based on the current image and view port
            size.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.MatchZoomFactor(System.Boolean)">
            <summary>
            Gets the best matching zoom factor based on the current one and the 
            given direction.
            </summary>
            <param name="zoomIn"><c>true</c> if zooming in.</param>
            <returns>Best match.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.InitAdorners">
            <summary>
            Initializes the adorner objects for this display.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.Display_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when this control is loaded.
            </summary>
            <param name="sender">Ingored.</param>
            <param name="e">Event argument.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.Display.Display_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when this control is unloaded.
            </summary>
            <param name="sender">Ignored.</param>
            <param name="e">Event argument.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.DisplayZoomEventArgs">
            <summary>
            Event arguments for all display zoom related events.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayZoomEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Double,System.Windows.Point)">
            <summary>
            Creates a new instance of the <see cref="T:Stemmer.Cvb.Wpf.Controls.DisplayZoomEventArgs"/> class
            using the given <paramref name="routedEvent"/> identifier and event
            <paramref name="source"/>. I also takes the
            <paramref name="zoomFactor"/> at the point in time the arguments are
            created.
            </summary>
            <param name="routedEvent">The routed ecvent identifier for this
            instance of the <see cref="T:Stemmer.Cvb.Wpf.Controls.DisplayZoomEventArgs"/> class.</param>
            <param name="source">The alternate source that will be reported when
            the event is handled. This pre-populates the
            <see cref="P:System.Windows.RoutedEventArgs.Source"/> property.</param>
            <param name="zoomFactor">The zoom factor associated with the event.
            </param>
            <param name="zoomCenter">The zoom center associated with the event.
            </param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayZoomEventArgs.ZoomCenter">
            <summary>
            Gets the zoom center in bitmap source pixel coordinates associated
            with the event.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayZoomEventArgs.ZoomFactor">
            <summary>
            Gets the zoom factor associated with the event.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.AutoScaleContent">
            <summary>
            Determines whether the content is automatically scaled by the canvas
            via a render transform or not.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.AutoScaleContent.RenderTransform">
            <summary>
            Element is scaled via a render transform.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.AutoScaleContent.LayoutTransform">
            <summary>
            Element is scaled via a layout transform.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.AutoScaleContent.Off">
            <summary>
            Element is not scaled via a render transform.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.ImageSourceChangedEventArgs">
            <summary>
            Bubbling event to inform about image source changes.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.ImageSourceChangedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Creates the image source changed event arguments.
            </summary>
            <param name="routedEvent">Routed event associated with this argumens</param>
            <param name="source">Source object.</param>
            <param name="oldValue">The old image source.</param>
            <param name="newValue">The new image source.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.ImageSourceChangedEventArgs.OldValue">
            <summary>
            Gets the old image source value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.ImageSourceChangedEventArgs.NewValue">
            <summary>
            Gets the new image source value.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.LengthUnit">
            <summary>
            Defines the unit of the <see cref="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas"/> length properties
            for child elements.
            </summary>
            <seealso cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LeftProperty"/>
            <seealso cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TopProperty"/>
            <seealso cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RightProperty"/>
            <seealso cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.BottomProperty"/>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.LengthUnit.ImagePixel">
            <summary>
            Length is in image source pixels (the default).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.LengthUnit.DeviceIndependentPixel">
            <summary>
            Length is in device independent pixels as displayed by the canvas.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.PixelCoordinateSystem">
            <summary>
            Defines the location of a point in an image pixel.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.PixelCoordinateSystem.LeftTop">
            <summary>
            The point is at the left-top edge of the pixel.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.PixelCoordinateSystem.Barycentric">
            <summary>
            The point is at the center of the pixel (center of mass).
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas">
            <summary>
            This canvas displays an image in the background and arranges its
            children according to the pixel coordinates of the image.
            </summary>
            <remarks>
            <para>To use the display canvas in your projects, follow these steps:
            <list type="number">
            <item>
            <description>Reference this assembly in your solution</description>
            </item>
            <item>
            <description>Add the control's namespace to your root element of the
            markup file:
            <code lang="XAML">xmlns:cvb="http://www.commonvisionblox.com/wpf"</code>
            </description>
            </item>
            <item>
            <description>Use the display canvas in the XAML file:
            <code lang="XAML"><![CDATA[<cvb:DisplayCanvas />]]></code></description>
            </item>
            </list></para>
            <example>
            Example on how to place a standard WPF <c>Rectangle</c> on the canvas:
            <code lang="XAML"><![CDATA[
            <cvb:DisplayCanvas ImageSource="C:\Program Files\Stemmer Imaging\Common Vision Blox\Tutorial\Clara.bmp">
              <Rectangle StrokeThickness="1" Stroke="Red"
                cvb:DisplayCanvas.Left="50" cvb:DisplayCanvas.Right="90"
                cvb:DisplayCanvas.Top="85" cvb:DisplayCanvas.Bottom="110"
                cvb:DisplayCanvas.AutoScaleContent="Off" />
            </cvb:DisplayCanvas>
            ]]></code>
            </example>
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RedrawImageToken">
            <summary>
            Quasi disposed image
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RedrawImageToken.#ctor">
            <summary>
            Creates a disposed image.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RedrawImageToken.Dispose(System.Boolean)">
            <summary>
            Just detaches.
            </summary>
            <param name="disposing"><c>true</c> if called via
            <see cref="M:System.IDisposable.Dispose"/>; otherwise <c>false</c>.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CvbImageObserver">
            <summary>
            Observer implementation.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CvbImageObserver.OnCompleted">
            <summary>
            Ignored.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CvbImageObserver.OnError(System.Exception)">
            <summary>
            Ignored.
            </summary>
            <param name="error">Ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CvbImageObserver.OnNext(Stemmer.Cvb.Image)">
            <summary>
            Pushes a new <paramref name="image"/> to the parent canvas.
            </summary>
            <param name="image">New image to display.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomCenterChangedEvent">
            <summary>
            Backing store for <see cref="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomCenterChanged"/>.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomCenterChanged">
            <summary>
            Bubbling routed event that is fired when the
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomCenter"/> changes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactorChangedEvent">
            <summary>
            Backing store for <see cref="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactorChanged"/>.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactorChanged">
            <summary>
            Bubbling routed event that is fired when the
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> changes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageDataUpdatedEvent">
            <summary>
            Backing store for the <see cref="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageDataUpdated"/> event.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageDataUpdated">
            <summary>
            Bubbling event that is fired when the display's image data is updated.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSourceChangedEvent">
            <summary>
            Backing store for the <see cref="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSourceChanged"/> event.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSourceChanged">
            <summary>
            Bubbling event that is fired when the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/>
            changes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenterChangedEvent">
            <summary>
            Backing store for <see cref="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenterChanged"/>.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenterChanged">
            <summary>
            Bubbling event that is fired when the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenter"/>
            property is changed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactorChangedEvent">
            <summary>
            Backing store for <see cref="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactorChanged"/>.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactorChanged">
            <summary>
            Bubbling event that is fired when the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactor"/>
            property is changed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomCenterProperty">
            <summary>
            Backing store for read-only <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomCenter"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomCenter">
            <summary>
            Gets the rendered zoom center of this display.
            </summary>
            <value>
            This is the actual value of the rendered control. Default is a point
            with <see cref="F:System.Double.NaN"/> coordinates.
            </value>
            <remarks>
            <para>This property is a calculated value based on the
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenter"/> and
            <see cref="P:System.Windows.FrameworkElement.ActualWidth"/> and
            <see cref="P:System.Windows.FrameworkElement.ActualHeight"/> by the
            layout system. The value is set by the layout system itself, based on
            an actual rendering pass, and may therefore lag slightly behind the
            set value of properties such as <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactor"/> that are the
            basis of the input change.</para>
            <para>Because this value is calculated, you should be aware that there
            could be multiple or incremental reported changes to it as a result
            of various operations by the layout system. The layout system may be
            calculating required measure space for child elements, constraints by
            the parent element, and so on.</para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactorProperty">
            <summary>
            Backing store for read-only <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor">
            <summary>
            Gets the rendered zoom factor of this display.
            </summary>
            <value>
            This is the actual value of the rendered control. Default is
            <see cref="F:System.Double.NaN"/>.
            </value>
            <remarks>
            <para>This property is a calculated value based on the
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactor"/> and
            <see cref="P:System.Windows.FrameworkElement.ActualWidth"/> and
            <see cref="P:System.Windows.FrameworkElement.ActualHeight"/> by the
            layout system. The value is set by the layout system itself, based on
            an actual rendering pass, and may therefore lag slightly behind the
            set value of properties such as <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactor"/> that are the
            basis of the input change.</para>
            <para>Because this value is calculated, you should be aware that there
            could be multiple or incremental reported changes to it as a result
            of various operations by the layout system. The layout system may be
            calculating required measure space for child elements, constraints by
            the parent element, and so on.</para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.AnimationDurationProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.AnimationDuration"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.AnimationDuration">
            <summary>
            Duration for panning and zoom animations.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.Image"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsDisplayedColored(Stemmer.Cvb.Image)">
            <summary>
            Gets whether the given <paramref name="image"/> is displayed as a
            color image.
            </summary>
            <param name="image">Image to check.</param>
            <returns><c>true</c> if the <paramref name="image"/> is treated as a
            color image.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.Image">
            <summary>
            Gets/sets a <see cref="T:Stemmer.Cvb.Image"/> as the image source
            of this display.
            </summary>
            <remarks>
            If this property is set the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> property is
            readonly.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.DisplayBitmapSizeLimit">
            <summary>
            Out Display is capable of transferring responsibility for zoom
            handling to the GPU by committing the CVB image data to a
            WriteableBitmap object. However, WriteableBitmaps are afflicted by
            a bug in the WPF runtime that seems to be triggered depending on the
            bitmap's size (see for example this discussion here:
            https://social.msdn.microsoft.com/Forums/vstudio/en-US/d4f943eb-630e-48ac-a8f8-00e539bb7856/wpf-crashes-with-error-hresult-0x88980406-at?forum=wpf
            We are currently working around this issue by limiting the size of
            the WriteableBitmap that is generated (if a Cvb image that is too
            big is set on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.Image"/> property an
            OutOfMemoryException will be raised). As the size limit cannot be
            determined by any means available to us, we are working with a
            definable limit. The default has been chosen to a size that we have
            found to generally work well on our systems.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.DisplayBitmapSizeLimitProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.DisplayBitmapSizeLimit"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageObserver">
            <summary>
            Gets the observer to receive new <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.Image"/> pushes.
            </summary>
            <remarks>
            <para>
            If multiple <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.Image"/>s are to be displayed in one
            render phase, only the newest is rendered.
            </para><para>
            It is safe to push see <see cref="T:Stemmer.Cvb.Image"/>s from non-UI
            threads.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageObserverProperty">
            <summary>
            Backing store for the read only <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageObserver"/>
            dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.FrameTimeMin">
            <summary>
            Gets or sets the minimal frame time for displaying new frames.
            </summary>
            <remarks>
            This time defines the minimal duration a frame is displayed. This
            means that redraw operations are postponed to this value's duration
            since the last redraw. This effectively reduces the display frame rate.
            </remarks>
            <value>Default is no minimal frame time.</value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.FrameTimeMinProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.FrameTimeMin"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSourceProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource">
            <summary>
            Image source of this display.
            </summary>
            <remarks>
            If <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.Image"/> is set, this property is
            readonly.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportHeight">
            <summary>
            Gets the the displayed image region shown width.
            </summary>
            <value>
            Shown part of the image in device independent pixels.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportHeightProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportHeight"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportHorizontalOffset">
            <summary>
            Gets the horizontal offset to the displayed image.
            </summary>
            <value>
            Horizontal offset from the canvas' left border in device independent
            pixels.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportHorizontalOffsetProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportHorizontalOffset"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportVerticalOffset">
            <summary>
            Gets the vertical offset to the displayed image.
            </summary>
            <value>
            Vertical offset from the canvas' top border in device independent
            pixels.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportVerticalOffsetProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportVerticalOffset"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportWidth">
            <summary>
            Gets the the displayed image region shown width.
            </summary>
            <value>
            Shown part of the image in device independent pixels.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportWidthProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageViewportWidth"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsAnimationInProgressProperty">
            <summary>
            Backing store for the read only <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsAnimationInProgress"/>
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsAnimationInProgress">
            <summary>
            Gets whether the default animation is currently active.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsInStretchModeProperty">
            <summary>
            Backing store for read only <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsInStretchMode"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsInStretchMode">
            <summary>
            Gets whether the stretch mode is active and not the zoom mode.
            </summary>
            <value>
            <c>True</c> if stretch mode is active; <c>false</c> if zoom mode is
            active.
            </value>
            <remarks>
            The stretch mode was called panorama mode in the CVB Display ActiveX
            control.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsZoomActiveProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsZoomActive"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsZoomActive">
            <summary>
            Gets whether this control is currently in zoom mode despite stretch
            mode.
            </summary>
            <value>
            This control is either in zoom mode (<c>true</c> value) or in
            panorama/stretch mode (<c>false</c> value).
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PixelRasterMinExtent">
            <summary>
            Gets/sets the minimum extent (width/height) of a pixel until the pixel
            raster is shown.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PixelRasterMinExtentProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PixelRasterMinExtent"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PixelRasterVisible">
            <summary>
            Gets/sets whether a pixel raster is shown in higher zoom levels.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PixelRasterVisibleProperty">
            <summary>
            Backing store the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PixelRasterVisible"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RedrawOnImageDataUpdated">
            <summary>
            Gets/sets whether the display is to be redrawn as soon as the image
            data has been updated.
            </summary>
            <value>
            Default is <c>true</c>.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RedrawOnImageDataUpdatedProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RedrawOnImageDataUpdated"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.StretchZoomFactorProperty">
            <summary>
            Backing store for read only <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.StretchZoomFactor"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.StretchZoomFactor">
            <summary>
            Gets the zoom factor as if in the case as if this control would be in
            stretch mode.
            </summary>
            <value>
            The zoom factor that would be
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomTransformProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomTransform"/>.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomTransform">
            <summary>
            The transform affecting the zoom parameters.
            </summary>
            <value>
            Default value is the <see cref="P:System.Windows.Media.Transform.Identity"/> transform.
            </value>
            <remarks>
            The behavior is like the render transform of a
            <see cref="T:System.Windows.UIElement"/> as the actual <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenter"/> and
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactor"/> values are not changed.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.BottomProperty">
             <summary>
             Backing store for the Bottom attached property.
             </summary>
            
             <AttachedPropertyComments>
             <summary>
             Gets/sets the offset from the bottom border for a child element.
             </summary>
             <value>
             Default is <see cref="F:System.Double.NaN"/> for <i>not used</i>.
             </value>
             </AttachedPropertyComments>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetBottom(System.Windows.Media.Visual)">
            <summary>
            Gets the value of the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.BottomProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            read.</param>
            <returns>Offset from the canvas bottom border. Default is
            <see cref="F:System.Double.NaN"/></returns>.
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetBottom(System.Windows.Media.Visual,System.Double)">
            <summary>
            Sets the value of the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.BottomProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element from which the property value is
            written.</param>
            <param name="length">Offset from the canvas bottom border.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.HighBitScaleModeProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.HighBitScaleMode"/>
            attached property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.HighBitScaleMode">
            <summary>
            Gets/sets the <see cref="T:Stemmer.Cvb.HighBitScaleMode"/> used by this
            display canvas.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetHighBitScaleMode(System.Windows.Media.Visual)">
            <summary>
            Gets the <see cref="T:Stemmer.Cvb.HighBitScaleMode"/> from the given
            <paramref name="visual"/>.
            </summary>
            <param name="visual">The element from which the property value is
            read.</param>
            <returns>The <see cref="T:Stemmer.Cvb.HighBitScaleMode"/> of the object;
            default is <see cref="F:Stemmer.Cvb.HighBitScaleMode.Default"/>.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetHighBitScaleMode(System.Windows.Media.Visual,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Sets the <paramref name="scaleMode"/> to the given
            <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            written.</param>
            <param name="scaleMode">New scale mode.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsAnimatedProperty">
             <summary>
             Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsAnimated"/> attached property.
             </summary>
            
             <AttachedPropertyComments>
             <summary>
             Gets/sets whether interactive zoom center/factor changes are animated.
             </summary>
             <value>
             Default is <c>true</c>.
             </value>
             </AttachedPropertyComments>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.IsAnimated">
            <summary>
            Gets/sets whether interactive zoom center/factor changes are animated.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetIsAnimated(System.Windows.Media.Visual)">
            <summary>
            Gets the animated status of the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenter"/> and
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactor"/> changes.
            </summary>
            <param name="visual">The element to get the value from.</param>
            <returns><c>true</c> if value sets are animated; <c>false</c> if not.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetIsAnimated(System.Windows.Media.Visual,System.Boolean)">
            <summary>
            Sets the animated status of the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenter"/> and
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactor"/> changes.
            </summary>
            <param name="visual">The element to set the value on.</param>
            <param name="isAnimated"><c>true</c> if value sets are animated;
            <c>false</c> for not.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.AutoScaleContentProperty">
             <summary>
             Defines whether or not the overlays in the canvas are automatically
             scaled according to the zoom factor.
             </summary>
            
             <AttachedPropertyComments>
             <summary>
             Gets/sets whether or not the overlay in the canvas is automatically
             scaled according to the zoom factor.
             </summary>
             <value>
             Default is <see cref="F:Stemmer.Cvb.Wpf.Controls.AutoScaleContent.RenderTransform"/>.
             </value>
             </AttachedPropertyComments>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetAutoScaleContent(System.Windows.Media.Visual)">
            <summary>
            Gets the value of the <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.AutoScaleContentProperty"/> from the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element from which the property value is
            read.</param>
            <returns>Whether or not the item is scaled.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetAutoScaleContent(System.Windows.Media.Visual,Stemmer.Cvb.Wpf.Controls.AutoScaleContent)">
            <summary>
            Sets the <paramref name="autoScale"/> value to the given
            <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is set.
            </param>
            <param name="autoScale">Whether or not the item is scaled.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LeftProperty">
             <summary>
             Backing store for the Left attached property.
             </summary>
            
             <AttachedPropertyComments>
             <summary>
             Gets/sets the offset from the left border for a child element.
             </summary>
             <value>
             Default is <see cref="F:System.Double.NaN"/> for <i>not used</i>.
             </value>
             </AttachedPropertyComments>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetLeft(System.Windows.Media.Visual)">
            <summary>
            Gets the value of the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LeftProperty"/> from the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element from which the property value is
            read.</param>
            <returns>Offset from the canvas left border. Default is
            <see cref="F:System.Double.NaN"/></returns>.
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetLeft(System.Windows.Media.Visual,System.Double)">
            <summary>
            Sets the value of the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LeftProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            written.</param>
            <param name="length">Offset from the canvas left border.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LengthUnitProperty">
             <summary>
             Backing store for the <see cref="T:Stemmer.Cvb.Wpf.Controls.LengthUnit"/> attached property.
             </summary>
            
             <AttachedPropertyComments>
             <summary>
             Defines whether the layout properties are measured in image pixels
             (default) or in device independent pixels as displayed by the canvas.
             </summary>
             <remarks>
             By setting this property you can define whether the overlay should be
             aligned according to the underlying image (image pixels) or against
             the canvas (device independent pixels).
             </remarks>
             <value>
             Default is <see cref="F:Stemmer.Cvb.Wpf.Controls.LengthUnit.ImagePixel"/>.
             </value>
             </AttachedPropertyComments>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetLengthUnit(System.Windows.Media.Visual)">
            <summary>
            Gets the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LengthUnitProperty"/> for the given
            <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            read.</param>
            <returns>Current unit being used.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetLengthUnit(System.Windows.Media.Visual,Stemmer.Cvb.Wpf.Controls.LengthUnit)">
            <summary>
            Sets the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LengthUnitProperty"/> for the given
            <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            written.</param>
            <param name="unit">Unit to be used.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MaxDecodePixelHeightProperty">
             <summary>
             Backing store for the <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MaxDecodePixelHeightProperty"/>
             attached property.
             </summary>
            
             <AttachedPropertyComments>
             <summary>
             Gets/sets maximal decode height for the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/>.
             </summary>
             <remarks>
             Decodes the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> image at this maximal resolution
             if unequal 0. If only one of the decode properties is set, the aspect
             ratio is preserved.
             </remarks>
             <value>
             0 is default and doesn't change the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> size.
             </value>
             </AttachedPropertyComments>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetMaxDecodePixelHeight(System.Windows.Media.Visual)">
            <summary>
            Gets the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MaxDecodePixelHeightProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            read.</param>
            <returns>Current value being used.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetMaxDecodePixelHeight(System.Windows.Media.Visual,System.Int32)">
            <summary>
            Sets the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MaxDecodePixelHeightProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            written.</param>
            <param name="value">Value to be used.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MaxDecodePixelWidthProperty">
             <summary>
             Backing store for the <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MaxDecodePixelWidthProperty"/>
             attached property.
             </summary>
            
             <AttachedPropertyComments>
             <summary>
             Gets/sets maximal decode height for the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/>.
             </summary>
             <remarks>
             Decodes the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> image at this maximal resolution
             if unequal 0. If only one of the decode properties is set, the aspect
             ratio is preserved.
             </remarks>
             <value>
             0 is default and doesn't change the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> size.
             </value>
             </AttachedPropertyComments>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetMaxDecodePixelWidth(System.Windows.Media.Visual)">
            <summary>
            Gets the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MaxDecodePixelWidthProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            read.</param>
            <returns>Current value being used.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetMaxDecodePixelWidth(System.Windows.Media.Visual,System.Int32)">
            <summary>
            Sets the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MaxDecodePixelWidthProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            written.</param>
            <param name="value">Value to be used.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PixelCoordinateSystemProperty">
             <summary>
             Backing store for the <see cref="T:Stemmer.Cvb.Wpf.Controls.PixelCoordinateSystem"/> attached
             property.
             </summary>
            
             <AttachedPropertyComments>
             <summary>
             Defines the location of a point in a pixel.
             </summary>
             <remarks>
             <para>This attached works in conjunction with the
             <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LengthUnitProperty"/> if it is set to
             <see cref="F:Stemmer.Cvb.Wpf.Controls.LengthUnit.ImagePixel"/>. It is ignored for
             <see cref="F:Stemmer.Cvb.Wpf.Controls.LengthUnit.DeviceIndependentPixel"/>.</para>
             <para>This defines where overlays are placed in the canvas. Either at
             the left-top location or in the center of the pixel/barycentric
             (default).</para>
             </remarks>
             </AttachedPropertyComments>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetPixelCoordinateSystem(System.Windows.Media.Visual)">
            <summary>
            Gets the  attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PixelCoordinateSystemProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to read the property value from.</param>
            <returns>Pixel coordinate system.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetPixelCoordinateSystem(System.Windows.Media.Visual,Stemmer.Cvb.Wpf.Controls.PixelCoordinateSystem)">
            <summary>
            Sets the  attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PixelCoordinateSystemProperty"/> to the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            written.</param>
            <param name="coordinateSystem">Coordinate system to use.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RightProperty">
             <summary>
             Backing store for the Right attached property.
             </summary>
            
             <AttachedPropertyComments>
             <summary>
             Gets/sets the offset from the right border for a child element.
             </summary>
             <value>
             Default is <see cref="F:System.Double.NaN"/> for <i>not used</i>.
             </value>
             </AttachedPropertyComments>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetRight(System.Windows.Media.Visual)">
            <summary>
            Gets the value of the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RightProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            read.</param>
            <returns>Offset from the canvas right border. Default is
            <see cref="F:System.Double.NaN"/></returns>.
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetRight(System.Windows.Media.Visual,System.Double)">
            <summary>
            Sets the value of the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RightProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            written.</param>
            <param name="length">Offset from the canvas right border.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TopProperty">
             <summary>
             Backing store for the Top attached property.
             </summary>
            
             <AttachedPropertyComments>
             <summary>
             Gets/sets the offset from the top for a child element.
             </summary>
             <value>
             Default is <see cref="F:System.Double.NaN"/> for <i>not used</i>.
             </value>
             </AttachedPropertyComments>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetTop(System.Windows.Media.Visual)">
            <summary>
            Gets the value of the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TopProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            read.</param>
            <returns>Offset from the canvas top border. Default is
            <see cref="F:System.Double.NaN"/></returns>.
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetTop(System.Windows.Media.Visual,System.Double)">
            <summary>
            Sets the value of the attached <see cref="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TopProperty"/> for the
            given <paramref name="visual"/>.
            </summary>
            <param name="visual">The element to which the property value is
            written.</param>
            <param name="length">Offset from the canvas top border.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenterProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenter"/> attached property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomCenter">
            <summary>
            Gets/sets the zoom center.
            </summary>
            <value>
            Point in the bitmap source which is the center of the zoomed view
            port. Coordinates are in bitmap pixels.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetZoomCenter(System.Windows.DependencyObject)">
            <summary>
            Gets the attached zoom center property from the given dependency
            object <paramref name="d"/>.
            </summary>
            <remarks>
            This method makes the attached property accessible from XAML.
            </remarks>
            <param name="d">Dependency object to get attached property from.
            </param>
            <returns>Point in the bitmap source which is the center of the zoomed
            ViewportHeight port. Coordinates are in bitmap pixels.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetZoomCenter(System.Windows.DependencyObject,System.Windows.Point)">
            <summary>
            Sets the attached zoom <paramref name="center"/> property on the given
            dependency object <paramref name="d"/>.
            </summary>
            <remarks>
            This method makes the attached property accessible from XAML.
            </remarks>
            <param name="d">Dependency object to set attached property on.</param>
            <param name="center">Point in the bitmap source which is the center of
            the zoomed view port. Coordinates are in bitmap pixels.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactorProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactor"/> attached property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ZoomFactor">
            <summary>
            The current zoom factor of the image.
            </summary>
            <value>
            A zoom factor larger than 1.0 magnifies the displayed image; values
            smaller than 1.0 zoom out whereas 1.0 displays the image as is (this
            resembles <see cref="F:System.Windows.Media.Stretch.None"/>). The
            special value 0.0 identifies the panorama or stretch mode which
            resembles <see cref="F:System.Windows.Media.Stretch.Uniform"/> (the
            default). Values smaller 0.0 are invalid.
            </value>
            <remarks>
            To get the actual value, e.g. in panorama/stretch mode, use the
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> property.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetZoomFactor(System.Windows.DependencyObject)">
            <summary>
            Gets the zoom factor from the given dependency object
            <paramref name="d"/>.
            </summary>
            <remarks>
            <para>
            A zoom factor larger than 1.0 magnifies the displayed image; values
            smaller than 1.0 zoom out whereas 1.0 displays the image as is (this
            resembles <see cref="F:System.Windows.Media.Stretch.None"/>). The
            special value 0.0 identifies the panorama or stretch mode which
            resembles <see cref="F:System.Windows.Media.Stretch.Uniform"/> (the
            default). Values smaller 0.0 are invalid.
            </para>
            <para>
            This method makes the attached property accessible from XAML.
            </para>
            </remarks>
            <param name="d">Dependency object to get the zoom factor from.</param>
            <returns>The current zoom factor.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetZoomFactor(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the zoom factor to the given dependency object
            <paramref name="d"/>.
            </summary>
            <remarks>
            <para>
            A zoom factor larger than 1.0 magnifies the displayed image; values
            smaller than 1.0 zoom out whereas 1.0 displays the image as is (this
            resembles <see cref="F:System.Windows.Media.Stretch.None"/>). The
            special value 0.0 identifies the panorama or stretch mode which
            resembles <see cref="F:System.Windows.Media.Stretch.Uniform"/> (the
            default). Values smaller 0.0 are invalid.
            </para>
            <para>
            This method makes the attached property accessible from XAML.
            </para>
            </remarks>
            <param name="d">Dependency object to set the zoom factor to.</param>
            <param name="factor">The new zoom factor.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.#ctor">
            <summary>
            Creates an empty display canvas.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.DisplayCanvas_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when this control is loaded.
            </summary>
            <param name="sender">Ingored.</param>
            <param name="e">Ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.DisplayCanvas_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when this control is unloaded.
            </summary>
            <param name="sender">Ignored.</param>
            <param name="e">Ignored.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PixelSize">
            <summary>
            Gets the size of one <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> pixel.
            </summary>
            <value>
            Size in device independent pixels; <see cref="F:System.Double.NaN"/> if no
            display is possible.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslatePointToImage(System.Windows.Point)">
            <summary>
            Translates a <paramref name="point"/> relative to this panel to
            coordinates that are relative to the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/>
            content pixels.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> the translated
            coordinates may contain fractions. This method behaves as if you would
            call
            <code>
            TranslatePointToImage(point, CoordinateSystemType.PixelCoordinates)
            </code>.
            </remarks>
            <param name="point">Point as relative to this panel.</param>
            <returns>Translated point value relative to the image source pixels.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslatePointToImage(System.Windows.Point,Stemmer.Cvb.Wpf.Controls.PixelCoordinateSystem)">
            <summary>
            Translates a <paramref name="point"/> relative to this panel to
            coordinates that are relative to the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/>
            content pixels.
            </summary>
            <param name="point">Point as relative to this panel.</param>
            <param name="correction">Coordinate type for correction. By default,
            a pixel coordinate is considered to be in the left top corner
            (parameter value LeftTop). With Barycentric correction it may be
            shifted to the center, which is sometimes useful.</param>
            <returns>Translated coordinate.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslatePointToImage(System.Windows.Point,Stemmer.Cvb.CoordinateSystemType)">
            <summary>
            Translates a <paramref name="point"/> relative to this panel to
            coordinates that are relative to the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> content
            pixels.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> and the image
            coordinate system the translated coordinates may contain fractions.
            </remarks>
            <param name="point">Point as relative to this panel.</param>
            <param name="coordinateType">Defines whether the image coordinate
            system is incorporated in the calculation.</param>
            <returns>Translated point value relative to the image source pixels.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslatePointFromImage(System.Windows.Point)">
            <summary>
            Translates a <paramref name="point"/> relative to the
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> content pixels to coordinates relative to
            this panel.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> the translated
            coordinates may contain fractions. This method behaves as if you would
            call
            <code>
            TranslatePointFromImage(point, CoordinateSystemType.PixelCoordinates)
            </code>.
            </remarks>
            <param name="point">Point relative to the image source pixels.</param>
            <returns>Translated point value relative to this panel.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslatePointFromImage(System.Windows.Point,Stemmer.Cvb.CoordinateSystemType)">
            <summary>
            Translates a <paramref name="point"/> relative to the
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> content pixels to coordinates relative to
            this panel.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> and the image
            coordinate system the translated coordinates may contain fractions.
            </remarks>
            <param name="point">Point relative to the image source pixels.</param>
            <param name="coordinateType">Defines whether the image coordinate
            system is incorporated in the calculation.</param>
            <returns>Translated point value relative to this panel.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslateRectToImage(System.Windows.Rect)">
            <summary>
            Translates a <paramref name="rect"/> relative to this panel to
            coordinates that are relative to the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/>
            content pixels.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> the translated
            coordinates may contain fractions. This method behaves as if you would
            call
            <code>
            TranslateRectToImage(point, CoordinateSystemType.PixelCoordinates)
            </code>.
            </remarks>
            <param name="rect">Rectangle relative to this panel.</param>
            <returns>Translated rectangle value relative to the image source pixels.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslateRectToImage(System.Windows.Rect,Stemmer.Cvb.CoordinateSystemType)">
            <summary>
            Translates a <paramref name="rect"/> relative to this panel to
            coordinates that are relative to the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/>
            content pixels.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> the translated
            coordinates may contain fractions.
            </remarks>
            <param name="rect">Rectangle relative to this panel.</param>
            <param name="coordinateType">Defines whether the image coordinate
            system is incorporated in the calculation.</param>
            <returns>Translated rectangle value relative to the image source pixels.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslateRectFromImage(System.Windows.Rect)">
            <summary>
            Translates a <paramref name="rect"/> relative to the
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> content pixels to coordinates relative to
            this panel.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> the translated
            coordinates may contain fractions. This method behaves as if you would
            call
            <code>
            TranslateRectFromImage(point, CoordinateSystemType.PixelCoordinates)
            </code>.
            </remarks>
            <param name="rect">Rectangle relative to the image source pixels.</param>
            <returns>Translated rectangle value relative to this panel.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslateRectFromImage(System.Windows.Rect,Stemmer.Cvb.CoordinateSystemType)">
            <summary>
            Translates a <paramref name="rect"/> relative to the
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> content pixels to coordinates relative to
            this panel.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> the translated
            coordinates may contain fractions.
            </remarks>
            <param name="rect">Rectangle relative to the image source pixels.</param>
            <param name="coordinateType">Defines whether the image coordinate
            system is incorporated in the calculation.</param>
            <returns>Translated rectangle value relative to this panel.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslateSizeToImage(System.Windows.Size)">
            <summary>
            Translates a <paramref name="size"/> relative to this panel to a
            size relative to the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> content pixels.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> the translated
            size may contain fractions.
            </remarks>
            <param name="size">Size relative to this panel.</param>
            <returns>Translated size relative to the image source pixels.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TranslateSizeFromImage(System.Windows.Size)">
            <summary>
            Translates a <paramref name="size"/> relative to the
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/> content pixels to a size relative to this
            panel.
            </summary>
            <remarks>
            Dependent on the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ActualZoomFactor"/> the translated
            size may contain fractions.
            </remarks>
            <param name="size">Size relative to the image source pixels.</param>
            <returns>Translated size relative to this panel.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LastRenderingTime">
            <summary>
            Gets the last set rendering time from the composition target.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.AnimateZoomStoryboard(System.Windows.Media.Animation.Storyboard)">
            <summary>
            Starts the given <paramref name="animation"/> and registers it
            properly.
            </summary>
            <param name="animation">Animation.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CalculateMouseZoomReferenceCenter(System.Windows.Point,System.Double)">
            <summary>
            Calculates the new zoom center point so that the pixel under the
            <paramref name="imageMousePos"/> keeps being under the mouse.
            </summary>
            <param name="imageMousePos">Current mouse position in image
            coordinates.</param>
            <param name="zoomFactor">Zoom factor after zoom operation.</param>
            <returns>Calculated zoom center.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CreateZoomStoryboard(System.Windows.Point,System.Double)">
            <summary>
            Helper to create the story board that handles zoom and pan animations.
            </summary>
            <param name="imageMousePos">Point to zoom around in image coordinates.</param>
            <param name="zoomFactor">Factor to zoom to.</param>
            <returns>The storyboard that handles the zoom.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.EpsilonEqual(System.Double,System.Double)">
            <summary>
            Helper to do an epsilon compare (epsilon 0.02).
            </summary>
            <param name="lhs">Left hand side.</param>
            <param name="rhs">Right hand side.</param>
            <returns><c>True</c> if both are equal.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetMousePan(System.Windows.Point,System.Windows.Point)">
            <summary>
            Pans the the view port
            </summary>
            <remarks>
            <paramref name="oldImageMousePos"/> is a NaN point if panning just
            begun. <paramref name="newImageMousePos"/> is a NaN point if panning
            ended.
            </remarks>
            <param name="oldImageMousePos">Last position while panning.</param>
            <param name="newImageMousePos">Current position while panning.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetMouseZoom(System.Windows.Point,System.Double)">
            <summary>
            Zooms around <paramref name="imageMousePos"/> to the given
            <paramref name="zoomFactor"/>.
            </summary>
            <param name="imageMousePos">Mouse location in image coordinates.</param>
            <param name="zoomFactor">Magnification level.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.TargetZoomFactor">
            <summary>
            Gets the current target zoom factor ignoring the animation in progress.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ArrangeOverride(System.Windows.Size)">
            <summary>
            Called to arrange and size the content of an object.
            </summary>
            <remarks>
            Used to update layout dependent properties.
            </remarks>
            <param name="arrangeBounds">The computed size that is used to arrange
            the content.</param>
            <returns>The size of the control.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size in layout required for child elements and determines
            a size for this control.
            </summary>
            <param name="availableSize">The available size that this element can
            give to child elements. Infinity can be specified as a value to
            indicate that the element will size to whatever content is available.
            </param>
            <returns>The size that this element determines it needs during layout,
            based on the <paramref name="availableSize"/> and the displayed image
            source size.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Called when children are added/removed.
            </summary>
            <param name="visualAdded">Added visual.</param>
            <param name="visualRemoved">Removed visual.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CompositionTarget_Rendering(System.Object,System.EventArgs)">
            <summary>
            Called often per rendered frame right after layouting and before the
            actual rendering.
            </summary>
            <param name="sender">Ignored.</param>
            <param name="e">Ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Renders the zoomed image to the background.
            </summary>
            <param name="dc">Drawing context of this canvas.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.Image_HandleChanged(System.Object,System.EventArgs)">
            <summary>
            Updates the image source when the handle of
            the image changes.
            </summary>
            <param name="sender">Ignored.</param>
            <param name="e">Ignored.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RedrawImage">
            <summary>
            Redraws the display based on the set <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.Image"/>.
            </summary>
            <remarks>
            This method only works with a set <see cref="T:Stemmer.Cvb.Image"/>
            and redraws this display with the image's content. This method does
            nothing if only a <see cref="T:Stemmer.Cvb.Wpf.Imaging.BitmapSource"/> is set.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.RedrawImageAsync">
            <summary>
            Redraws the display based on the set <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.Image"/>
            when the display is rendered the next time.
            </summary>
            <remarks>
            <para>
            If multiple redraws are to be done in one render phase, only one is
            performed.
            </para><para>
            <c>Attention:</c> Image drawing is performed in the UI thread. Thus if
            you <see cref="M:System.Threading.Tasks.Task.Wait"/> on the returned <see cref="T:System.Threading.Tasks.Task"/> from
            the UI thread, the application will dead lock.
            </para><para>
            Otherwise it is safe to call this method from non-UI threads.
            </para>
            </remarks>
            <returns>Task to wait on for completion. The task's state will be
            canceled if it was not used for actually updating the display.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetImageAsync(Stemmer.Cvb.Image)">
            <summary>
            Sets a new <paramref name="image"/> asynchronously.
            </summary>
            <remarks>
            <para>
            If multiple <paramref name="image"/>s are to be displayed in one
            render phase, only the newest is rendered.
            </para><para>
            <c>Attention:</c> Image drawing is performed in the UI thread. Thus if
            you <see cref="M:System.Threading.Tasks.Task.Wait"/> on the returned <see cref="T:System.Threading.Tasks.Task"/> from
            the UI thread, the application will dead lock.
            </para><para>
            Otherwise it is safe to call this method from non-UI threads.
            </para>
            </remarks>
            <param name="image">Image to display.</param>
            <returns>Task to wait on for completion. The task's state will be
            canceled if it was not used for actually updating the display.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CanHorizontallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the
            horizontal axis is possible.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CanVerticallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the
            vertical axis is possible.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ExtentHeight">
            <summary>
            Gets the vertical size of the image, including the content that is not
            visible, in device independent pixels.
            </summary>
            <value>
            A <see cref="T:System.Double"/> that represents, in device independent
            pixels, the full vertical size of the image.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ExtentWidth">
            <summary>
            Gets the horizontal size of the image, including the content that is
            not visible, in device independent pixels.
            </summary>
            <value>
            A <see cref="T:System.Double"/> that represents, in device independent
            pixels, the full horizontal size of the image.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.HorizontalOffset">
            <summary>
            Gets the horizontal offset of the scrolled content.
            </summary>
            <value>
            A <see cref="T:System.Double"/> that represents, in device independent
            pixels, the horizontal offset.
            </value>
            <remarks>
            Valid values are between zero and the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ExtentWidth"/> minus
            the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ViewportWidth"/>.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LineDown">
            <summary>
            Scrolls down within content by one logical unit (image pixel).
            </summary>
            <remarks>
            Snaps to image pixel units.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LineLeft">
            <summary>
            Scrolls left within content by one logical unit (image pixel).
            </summary>
            <remarks>
            Snaps to image pixel units.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LineRight">
            <summary>
            Scrolls right within content by one logical unit (image pixel).
            </summary>
            <remarks>
            Snaps to image pixel units.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LineUp">
            <summary>
            Scrolls up within content by one logical unit (image pixel).
            </summary>
            <remarks>
            Snaps to image pixel units.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Forces content to scroll until the coordinate space of a
            <see cref="T:System.Windows.Media.Visual"/> object is visible.
            </summary>
            <remarks>
            In most cases, the returned rectangle is a transformed version of the
            input rectangle. In some cases, such as when the input rectangle
            cannot fit entirely within the view port, the return value may be
            smaller.
            </remarks>
            <param name="visual">A <see cref="T:System.Windows.Media.Visual"/> to become visible.</param>
            <param name="rectangle">A bounding rectangle that identifies the
            coordinate space to make visible.</param>
            <returns>A <see cref="T:Stemmer.Cvb.Rect"/> that is visible.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MouseWheelDown">
            <summary>
            Scrolls a line down.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MouseWheelLeft">
            <summary>
            Same es <see cref="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LineLeft"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MouseWheelRight">
            <summary>
            Same es <see cref="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.LineRight"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.MouseWheelUp">
            <summary>
            Scrolls a line up.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PageDown">
            <summary>
            Scrolls down within content by one page (view port).
            </summary>
            <remarks>
            Snaps to image pixel units.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PageLeft">
            <summary>
            Scrolls left within content by one page (view port).
            </summary>
            <remarks>
            Snaps to image pixel units.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PageRight">
            <summary>
            Scrolls right within content by one page (view port).
            </summary>
            <remarks>
            Snaps to image pixel units.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.PageUp">
            <summary>
            Scrolls up within content by one page (view port).
            </summary>
            <remarks>
            Snaps to image pixel units.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ScrollOwnerChanged">
            <summary>
            Event to signal an updated scroll viewer.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ScrollOwner">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Controls.ScrollViewer"/>
            element that controls scrolling behavior.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the amount of horizontal offset.
            </summary>
            <param name="offset">The degree to which content is horizontally
            offset from the containing view port in device independent pixels.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetVerticalOffset(System.Double)">
            <summary>
            Sets the amount of vertical offset.
            </summary>
            <param name="offset">The degree to which content is vertically
            offset from the containing view port in device independent pixels.
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.SetOffset(System.Double,System.Double)">
            <summary>
            Sets the amount of horizontal and vertical offset.
            </summary>
            <param name="offsetX">The degree to which content is horizontally
            offset from the containing view port in device independent pixels.
            </param>
            <param name="offsetY">The degree to which content is vertically
            offset from the containing view port in device independent pixels.
            </param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.VerticalOffset">
            <summary>
            Gets the vertical offset of the scrolled content.
            </summary>
            <value>
            A <see cref="T:System.Double"/> that represents, in device independent
            pixels, the vertical offset.
            </value>
            <remarks>
            Valid values are between zero and the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ExtentHeight"/> minus
            the <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ViewportHeight"/>.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ViewportHeight">
            <summary>
            Gets the vertical size of the view port for this content.
            </summary>
            <value>
            A <see cref="T:System.Double"/> that represents, in device independent
            pixels, the visible vertical size of the image.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ViewportWidth">
            <summary>
            Gets the horizontal size of the view port for this content.
            </summary>
            <value>
            A <see cref="T:System.Double"/> that represents, in device independent
            pixels, the visible horizontal size of the image.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.AdjustBitmapInterpolation(System.Double,System.Double)">
            <summary>
            Adjusts the bitmap scaling for zooming into images.
            </summary>
            <remarks>
            Preserves any externally set scaling mode.
            </remarks>
            <param name="oldZoomFactor">Zoom factor before last call.</param>
            <param name="newZoomFactor">Zoom</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ArrangeChildren(System.Windows.Size)">
            <summary>
            Arranges the child <see cref="T:System.Windows.Media.Visual"/>s.
            </summary>
            <param name="arrangeBounds">Boundaries of the canvas.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CalculateScrollOffset(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Calculates the offset vector to bring <paramref name="visualRect"/>
            into view.
            </summary>
            <param name="viewRect">The current view port rectangle.</param>
            <param name="visualRect">The visual's rectangle.</param>
            <returns>Offset vector to bring visual into view.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CalculateStretchZoomFactor(System.Windows.Size)">
            <summary>
            Calculates the stretch/panorama zoom factor based on the given
            <paramref name="clientSize"/> and the associated
            <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ImageSource"/>.
            </summary>
            <param name="clientSize">Client size in device independet pixels.
            </param>
            <returns>The stretch/panorama zoom factor.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CalculateZoomRect(System.Windows.Size,System.Double)">
            <summary>
            Calculates the zoom rectangle.
            </summary>
            <remarks>
            <para>As not a source rectangle can be chosen for drawing, the image
            area is scaled accordingly to the zoom factor and translated. The draw
            itself is then clipped.</para>
            <para>First check if zoomed size is smaller than client size and else
            center view port around zoom center and ensure that no empty
            background is visible.</para>
            </remarks>
            <param name="clientSize">The client size to calculate for.</param>
            <param name="multiplier">The zoom factor to use.</param>
            <return>The rectangle where the bitmap is to be drawn.</return>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.CalculateZoomRect(System.Windows.Size,System.Windows.Point,System.Double)">
            <summary>
            Calculates the zoom rectangle.
            </summary>
            <remarks>
            <para>As not a source rectangle can be chosen for drawing, the image
            area is scaled accordingly to the zoom factor and translated. The draw
            itself is then clipped.</para>
            <para>First check if zoomed size is smaller than client size and else
            center view port around zoom center and ensure that no empty
            background is visible.</para>
            </remarks>
            <param name="clientSize">The client size to calculate for.</param>
            <param name="offset">The zoom center to calculate rect for.</param>
            <param name="multiplier">The zoom factor to use.</param>
            <return>The rectangle where the bitmap is to be drawn.</return>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ClearLayoutCache">
            <summary>
            Clears the layout cache.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.DrawPixelRaster(System.Windows.Media.DrawingContext)">
            <summary>
            Draws a raster above the displayed image
            </summary>
            <param name="dc">Context to draw on.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.GetRenderSize(System.Windows.UIElement)">
            <summary>
            Gets the render size from the given <paramref name="element"/> or a
            0-size if <paramref name="element"/> is <c>null</c>.
            </summary>
            <param name="element">Element to get render size from.</param>
            <returns>Render size.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.ReadLocalBitmapScalingMode">
            <summary>
            Helper to read the local bitmap scaling mode if any is present.
            </summary>
            <returns>Nullable bitmap scaling mode.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.StepCeil(System.Double,System.Double)">
            <summary>
            Ceiling operation on a val and a step value.
            </summary>
            <remarks>
            Like a ceiling operation on fractions, but with arbitrary numbers:
            <example>
            <code>
            StepCeil(4, 3) // -> 6
            StepCeil(9, 3) // -> 9
            </code>
            </example>
            </remarks>
            <param name="val">Value to adjust.</param>
            <param name="step">Step value.</param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.StepFloor(System.Double,System.Double)">
            <summary>
            Floor operation on a val and a step value.
            </summary>
            <remarks>
            Like a floor operation on fractions, but with arbitrary numbers:
            <example>
            <code>
            StepFloor(4, 3) // -> 3
            StepFloor(9, 3) // -> 9
            </code>
            </example>
            </remarks>
            <param name="val">Value to adjust.</param>
            <param name="step">Step value.</param>
            <returns></returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.IDisplay">
            <summary>
            Common CVB WPF Display interface.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.IDisplay.ActualZoomCenterChanged">
            <summary>
            Bubbling routed event that is fired when the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ActualZoomCenter"/> changes.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.IDisplay.ActualZoomFactorChanged">
            <summary>
            Bubbling routed event that is fired when the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ActualZoomFactor"/> changes.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomCenterChanged">
            <summary>
            Bubbling event that is fired when the <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomCenter"/> 
            property is changed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomFactorChanged">
            <summary>
            Bubbling event that is fired when the <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomFactor"/> 
            property is changed.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ActualZoomCenter">
            <summary>
            Gets the rendered zoom center of this display.
            </summary>
            <value>
            This is the actual value of the rendered control. Default is a point 
            with <see cref="F:System.Double.NaN"/> coordinates.
            </value>
            <remarks>
            <para>This property is a calculated value based on the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomCenter"/> and 
            <see cref="P:System.Windows.FrameworkElement.ActualWidth"/> and
            <see cref="P:System.Windows.FrameworkElement.ActualHeight"/> by the 
            layout system. The value is set by the layout system itself, based on 
            an actual rendering pass, and may therefore lag slightly behind the 
            set value of properties such as <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomFactor"/> that are the 
            basis of the input change.</para>
            <para>Because this value is calculated, you should be aware that there
            could be multiple or incremental reported changes to it as a result
            of various operations by the layout system. The layout system may be 
            calculating required measure space for child elements, constraints by 
            the parent element, and so on.</para>
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ActualZoomFactor">
            <summary>
            Gets the rendered zoom factor of this display.
            </summary>
            <value>
            This is the actual value of the rendered control. Default is
            <see cref="F:System.Double.NaN"/>.
            </value>
            <remarks>
            <para>This property is a calculated value based on the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomFactor"/> and 
            <see cref="P:System.Windows.FrameworkElement.ActualWidth"/> and
            <see cref="P:System.Windows.FrameworkElement.ActualHeight"/> by the 
            layout system. The value is set by the layout system itself, based on 
            an actual rendering pass, and may therefore lag slightly behind the 
            set value of properties such as <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomFactor"/> that are the 
            basis of the input change.</para>
            <para>Because this value is calculated, you should be aware that there
            could be multiple or incremental reported changes to it as a result
            of various operations by the layout system. The layout system may be 
            calculating required measure space for child elements, constraints by 
            the parent element, and so on.</para>
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.Image">
            <summary>
            Gets/sets a <see cref="T:Stemmer.Cvb.Image"/> as the image source
            of this display.
            </summary>
            <remarks>
            If this property is set the <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ImageSource"/> property is 
            readonly.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.HighBitScaleMode">
            <summary>
            Gets/sets the <see cref="T:Stemmer.Cvb.HighBitScaleMode"/> used by this
            display.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ImageSource">
            <summary>
            Image source of this display.
            </summary>
            <remarks>
            If <see cref="P:Stemmer.Cvb.Wpf.Controls.DisplayCanvas.Image"/> is set, this property is 
            readonly.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.IsAnimated">
            <summary>
            Gets/sets whether <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomCenter"/> or <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomFactor"/>
            changes are animated.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.IsAnimationInProgress">
            <summary>
            Gets whether the control's internal animation is in progress.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.IsInStretchMode">
            <summary>
            Gets whether the stretch mode is active and not the zoom mode.
            </summary>
            <value>
            <c>True</c> if stretch mode is active; <c>false</c> if zoom mode is
            active.
            </value>
            <remarks>
            The stretch mode was called panorama mode in the CVB Display ActiveX
            control.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.IsZoomActive">
            <summary>
            Gets whether this control is currently in zoom mode and the zoom 
            factor is greater than one.
            </summary>
            <value>
            This control is either in zoom mode (<c>true</c> value) or in
            panorama/stretch mode (<c>false</c> value).
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.StretchZoomFactor">
            <summary>
            Gets the zoom factor as if in the case as if this control would be in 
            stretch mode.
            </summary>
            <value>
            The zoom factor that would be used in stretch mode.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomCenter">
            <summary>
            Gets/sets the zoom center.
            </summary>
            <value>
            Point in the bitmap source which is the center of the zoomed view 
            port. Coordinates are in bitmap pixels.
            </value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ZoomFactor">
            <summary>
            The current zoom factor of the image.
            </summary>
            <value>
            A zoom factor larger than 1.0 magnifies the displayed image; values
            smaller than 1.0 zoom out whereas 1.0 displays the image as is (this
            resembles <see cref="F:System.Windows.Media.Stretch.None"/>). The 
            special value 0.0 identifies the panorama or stretch mode which 
            resembles <see cref="F:System.Windows.Media.Stretch.Uniform"/> (the 
            default). Values smaller 0.0 are invalid.
            </value>
            <remarks>
            To get the actual value, e.g. in panorama/stretch mode, use the 
            <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.ActualZoomFactor"/> property.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.IDisplay.RedrawImage">
            <summary>
            Redraws the display based on the set <see cref="P:Stemmer.Cvb.Wpf.Controls.IDisplay.Image"/>.
            </summary>
            <remarks>
            This method only works with a set <see cref="T:Stemmer.Cvb.Image"/>
            and redraws this display with the image's content. This method does
            nothing if only a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> is set.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.MeasureLinePlacement">
            <summary>
            Possible placements of a measure line (relative to the UIElement which 
            they are measuring).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLinePlacement.Left">
            <summary>
            Measure line is placed left of a control.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLinePlacement.Top">
            <summary>
            Measure line is placed atop a control.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLinePlacement.Right">
            <summary>
            Measure line is placed right of a control.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLinePlacement.Bottom">
            <summary>
            Measure line is placed below a control.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.MeasureLineValueSource">
            <summary>
            Possible value sources for the value displayed by a measure line.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLineValueSource.ActualSize">
            <summary>
            Determine the value to display from the control's actual size.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLineValueSource.Value">
            <summary>
            Take the value to display from the value property (which might be
            bound).
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.MeasureLineExtensions">
            <summary>
            Extension methods for types involved in the implementation of 
            MeasureLine.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.MeasureLineExtensions.ToOrientation(Stemmer.Cvb.Wpf.Controls.MeasureLinePlacement)">
            <summary>
            Convert a placement into an orientation.
            </summary>
            <param name="v">Placement to be converted.</param>
            <returns>Orientation value.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.MeasureLine">
            <summary>
            Defines a measure line with display of the control's width/height.
            May be used inside a grid to display another control's extent.
            </summary>
            <summary>
            MeasureLine
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.MeasureLine.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLine.PlacementDefault">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLine.ValueSourceDefault">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.MeasureLine.Placement">
            <summary>
            Placement of the measure line relative to the object that is being
            measured.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLine.PlacementProperty">
            <summary>
            Backing dependency property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.MeasureLine.OnPlacementChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to property changes.
            </summary>
            <param name="d">Dependency object on which the change occurred.</param>
            <param name="e">Change event arguments.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.MeasureLine.Value">
            <summary>
            Value to display in the text box. Set <see cref="P:Stemmer.Cvb.Wpf.Controls.MeasureLine.ValueSource"/> 
            property accordingly to select what value to display.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLine.ValueProperty">
            <summary>
            Backing dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.MeasureLine.ValueSource">
            <summary>
            Value source to use for the size indicator of the measure line.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.MeasureLine.ValueSourceProperty">
            <summary>
            Backing dependency property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.MeasureLine.OnValueSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to property changes.
            </summary>
            <param name="d"><see cref="T:System.Windows.DependencyObject"/> on which the change
            occurred.</param>
            <param name="e">Change event arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.MeasureLine.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.ImageEditor">
            <summary>
            A display control with support for drawing in the overlay bit-plane of an
            image.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.ImageEditor.DefaultToolType">
            <summary>
            Gets/sets the default tool type.
            </summary>
            <remarks>
            The default tool defines which tool is to be used if <c>null</c> is 
            assigned to tool.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.ImageEditor.DefaultToolTypeProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Controls.ImageEditor.DefaultToolType"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Controls.ImageEditor.Tool">
            <summary>
            Gets/sets the tool to draw on the image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Controls.ImageEditor.ToolProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Controls.ImageEditor.Tool"/> property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.ImageEditor.#cctor">
            <summary>
            Initializes the dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.ImageEditor.#ctor">
            <summary>
            Creates the bit-overlay image editor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Controls.ImageEditor.ApplyTool">
            <summary>
            Applies the current <see cref="P:Stemmer.Cvb.Wpf.Controls.ImageEditor.Tool"/>, if <see cref="T:Stemmer.Cvb.Wpf.ImageEditorTools.IApplicable"/>.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Controls.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Wpf.Controls</c> contains 
            controls for use in WPF applications.
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.GlowConverter">
            <summary>
            Converter that converts a brush into a slightly brighter and more 
            transparent version of itself.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.GlowConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion.
            </summary>
            <param name="value">value to be converted</param>
            <param name="targetType">target type to convert the value to</param>
            <param name="parameter">conversion specification (must be of type
            <see cref="T:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion"/>)</param>
            <param name="culture">ignored</param>
            <returns>conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.GlowConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion (not supported).
            </summary>
            <param name="value">ignored</param>
            <param name="targetType">ignored</param>
            <param name="parameter">ignored</param>
            <param name="culture">ignored</param>
            <returns>Nothing (always throws).</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.ProductConverter">
            <summary>
            Converter that builds the product of an arbitrary number of input values
            or over an input value and a constant.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.ProductConverter.SupportedTypes">
            <summary>
            Array of types that can be converted from by this converter.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ProductConverter.Process(System.Object[],System.Type)">
            <summary>
            The actual processing function.
            </summary>
            <param name="values">values to be processed</param>
            <param name="targetType">target type</param>
            <returns>Product of all the input values.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ProductConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion (see MSDN help for more information about this method...).
            </summary>
            <param name="value">Input value.</param>
            <param name="targetType">Target data type (currently only double is
            supported</param>
            <param name="parameter">Mathmetical expression.</param>
            <param name="culture">Ignored</param>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ProductConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion (see MSDN help for more information about this method...).
            </summary>
            <param name="values">Input values to be converted</param>
            <param name="targetType">Target data type (currently only double is
            supported</param>
            <param name="parameter">Mathmetical expression.</param>
            <param name="culture">Ignored</param>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ProductConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion - not supported by this converter.
            </summary>
            <param name="value">Ignored.</param>
            <param name="targetType">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ProductConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion - not supported by this converter.
            </summary>
            <param name="value">Ignored.</param>
            <param name="targetTypes">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion">
            <summary>
            The different conversion modes supported by this converter.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion.TrueVisibleFalseHidden">
            <summary>
            true is translated to visible, false to hidden (default mode)
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion.TrueVisibleFalseCollapsed">
            <summary>
            true is translated to visible, false to collapsed
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion.TrueHiddenFalseVisible">
            <summary>
            true is translated to hidden, false to visible
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion.TrueCollapsedFalseVisible">
            <summary>
            true is translated to collapsed, false to visible
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConverter">
            <summary>
            Converter that takes a bool value and translates it into a visibility.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConverter.DefaultConversion">
            <summary>
            The default conversion mode to be applied if nothing else was 
            specified.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConverter.Translate(System.Boolean,Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion)">
            <summary>
            The translation function.
            </summary>
            <param name="val">value to be translated</param>
            <param name="mode">translation mode</param>
            <returns>translated value</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConverter.Translate(System.Windows.Visibility,Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion)">
            <summary>
            The inverse translation function.
            </summary>
            <param name="val">value to be translated</param>
            <param name="mode">translation mode</param>
            <returns>translated value</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion.
            </summary>
            <param name="value">value to be converted</param>
            <param name="targetType">target type to convert the value to</param>
            <param name="parameter">conversion specification (must be of type
            <see cref="T:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion"/>)</param>
            <param name="culture">ignored</param>
            <returns>conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="targetType">Target type for conversion.</param>
            <param name="parameter">Conversion parameter.</param>
            <param name="culture">Conversion culture (ignored).</param>
            <returns>Back-converted value.</returns>
            <exception cref="T:System.NotSupportedException">If the 
            <paramref name="targetType"/> is not <c>bool</c> or 
            <paramref name="targetType"/> is <c>null</c>.</exception>
            <exception cref="T:System.NullReferenceException">If <paramref name="value"/>
            is null.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.BoolInversionConverter">
            <summary>
            Converter that inverts a boolean value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.BoolInversionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion.
            </summary>
            <param name="value">value to be converted</param>
            <param name="targetType">target type to convert the value to</param>
            <param name="parameter">conversion specification (must be of type
            <see cref="T:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion"/>)</param>
            <param name="culture">ignored</param>
            <returns>conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.BoolInversionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="targetType">Target type for conversion.</param>
            <param name="parameter">Conversion parameter (ignored).</param>
            <param name="culture">Culture parameter (ignored).</param>
            <returns>Converted value.</returns>
            <exception cref="T:System.NotSupportedException">When trying to convert to 
            any target type other than <see cref="T:System.Boolean"/> or when 
            <paramref name="parameter"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.NullReferenceException">If <paramref name="value"/>
            is <c>null</c>.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.ComparisonToVisibilityConverter">
            <summary>
            Converter that takes a <c>bool</c> value and translates it into a
            visibility.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ComparisonToVisibilityConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion of <c>bool</c> to <see cref="T:System.Windows.Visibility"/>.
            </summary>
            <param name="values">values to be compared for equality</param>
            <param name="targetType">Target type for conversion.</param>
            <param name="parameter">Conversion parameter.</param>
            <param name="culture">Conversion culture (ignored).</param>
            <returns><see cref="T:System.Windows.Visibility"/> value.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ComparisonToVisibilityConverter.System#Windows#Data#IMultiValueConverter#ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion (not supported).
            </summary>
            <param name="value">ignored</param>
            <param name="targetTypes">ignored</param>
            <param name="parameter">ignored</param>
            <param name="culture">ignored</param>
            <returns>Nothing (always throws).</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.CrosshairBarThicknessConverter">
            <summary>
            Converter specific for the ModelFrameOverlay class. Converts a cross
            hair bar size and a zoom factor into a Margin paintable in image 
            coordinates.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.CrosshairBarThicknessConverter.SupportedTypes">
            <summary>
            Array of types that can be converted from by this converter.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.CrosshairBarThicknessConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion (see MSDN help for more information about this method...).
            </summary>
            <param name="values">Input values to be converted</param>
            <param name="targetType">Target data type (currently only double is
            supported</param>
            <param name="parameter">Mathmetical expression.</param>
            <param name="culture">Ignored</param>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.CrosshairBarThicknessConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion - not supported by this converter.
            </summary>
            <param name="value">Ignored.</param>
            <param name="targetTypes">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.MathConverter">
            <summary>
            Converts the binding values according to the mathematical expression in 
            the parameter.
            </summary>
            <remarks>
            Refer to the binding values via variable <i>v</i> for single binding and
            <i>v0</i>, <i>v1</i>, <i>v2</i>, ... for multibinding.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.MathConverter.SupportedTypes">
            <summary>
            Array of types that can be converted from by this converter.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.MathConverter.Process(System.Object[],System.Type,System.String)">
            <summary>
            The actual processing function.
            </summary>
            <param name="values">values to be processed</param>
            <param name="targetType">target type</param>
            <param name="parameter">Conversion parameter containing the formula.
            </param>
            <returns>Evaluation result.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.MathConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion (see MSDN help for more information about this method...).
            </summary>
            <param name="value">Input value.</param>
            <param name="targetType">Target data type (currently only double is
            supported</param>
            <param name="parameter">Mathmetical expression.</param>
            <param name="culture">Ignored</param>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.MathConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion (see MSDN help for more information about this method...).
            </summary>
            <param name="values">Input values to be converted</param>
            <param name="targetType">Target data type (currently only double is
            supported</param>
            <param name="parameter">Mathmetical expression.</param>
            <param name="culture">Ignored</param>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.MathConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion - not supported by this converter.
            </summary>
            <param name="value">Ignored.</param>
            <param name="targetType">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>Inverse conversion result.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.MathConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion (not supported).
            </summary>
            <param name="value">ignored</param>
            <param name="targetTypes">ignored</param>
            <param name="parameter">ignored</param>
            <param name="culture">ignored</param>
            <returns>Nothing (always throws).</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.NoEmptyStringConverter">
            <summary>
            Converter that inverts a boolean value.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.NoEmptyStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion.
            </summary>
            <param name="value">value to be converted</param>
            <param name="targetType">target type to convert the value to</param>
            <param name="parameter">conversion specification (must be of type
            <see cref="T:Stemmer.Cvb.Wpf.Converters.BoolToVisibilityConversion"/>)</param>
            <param name="culture">ignored</param>
            <returns>conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.NoEmptyStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion - same as forward conversion.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="targetType">Value to be converted.</param>
            <param name="parameter">Conversion parameter.</param>
            <param name="culture">Conversion culture.</param>
            <returns>Conversion result.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.TernaryEqualityCheck">
            <summary>
            Operation logic for the TernaryEqualityCheckConverter
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.TernaryEqualityCheck.Equality">
            <summary>
            check for equality
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.TernaryEqualityCheck.Inequality">
            <summary>
            check for inequality
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.TernaryEqualityCheckConverter">
            <summary>
            Compares the binding values 1 and 2. If both are equal (or not equal,
            depending on the parameter value...) then value 3 is returned, 
            otherwise value 4 is returned. Any value beyond 4 will be ignored.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.TernaryEqualityCheckConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion (see MSDN help for more information about this method...).
            </summary>
            <param name="values">Input values to be converted</param>
            <param name="targetType">Target data type (currently only double is
            supported</param>
            <param name="parameter">Mathmetical expression.</param>
            <param name="culture">Ignored</param>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.TernaryEqualityCheckConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion - not supported by this converter.
            </summary>
            <param name="value">Ignored.</param>
            <param name="targetTypes">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.ThicknessComposeConverter">
            <summary>
            Composes a Thickness value from 1 or more input values, potentially
            doing calculations on them as defined by the converter parameter.
            </summary>
            <remarks>
            Refer to the binding values via variable <i>v</i>; calculation is being
            carried out uniformly for all the constituents...
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Converters.ThicknessComposeConverter.SupportedTypes">
            <summary>
            Array of types that can be converted to by this converter.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ThicknessComposeConverter.Parse(System.Double[],System.String)">
            <summary>
            Convert one or more double values into a Thickness structure.
            </summary>
            <param name="v">double values</param>
            <param name="param">parser expression(s) (comma separated)</param>
            <returns>The parsed thickness.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ThicknessComposeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion (see MSDN help for more information about this method...).
            </summary>
            <param name="value">Input value.</param>
            <param name="targetType">Target data type (currently only double is
            supported</param>
            <param name="parameter">Mathmetical expression.</param>
            <param name="culture">Ignored</param>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ThicknessComposeConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Conversion (see MSDN help for more information about this method...).
            </summary>
            <param name="values">Input values to be converted</param>
            <param name="targetType">Target data type (currently only double is
            supported</param>
            <param name="parameter">Mathmetical expression.</param>
            <param name="culture">Ignored</param>
            <returns>Conversion result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ThicknessComposeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion - not supported by this converter.
            </summary>
            <param name="value">Ignored.</param>
            <param name="targetType">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Converters.ThicknessComposeConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Inverse conversion - not supported by this converter.
            </summary>
            <param name="value">Ignored.</param>
            <param name="targetTypes">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>Nothing.</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Converters.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Wpf.Converters</c> contains 
            controls for use in Bindings in WPF applications.
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.Wpf.ImageEditorTools.IApplicable">
            <summary>
            Interface for tools which have an <see cref="M:Stemmer.Cvb.Wpf.ImageEditorTools.IApplicable.Apply"/> step.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageEditorTools.IApplicable.Apply">
            <summary>
            Apply the current tool's region to the overlay bits.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase">
            <summary>
            Base class for all <see cref="T:Stemmer.Cvb.Wpf.Controls.ImageEditor"/> tools.
            </summary>
            <remarks>
            Adorners of this type also support <see cref="T:System.Windows.Media.Visual"/>s.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.ToolCursor">
            <summary>
            Gets/sets the cursor the <see cref="T:Stemmer.Cvb.Wpf.Controls.ImageEditor"/> shows when this tool
            is selected.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.ToolCursorProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.ToolCursor"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.ImageViewportRect">
            <summary>
            Gets the rect placement of the image based on the 
            <see cref="P:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.ParentEditor"/> coordinates.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.ParentEditor">
            <summary>
            Gets the parent editor control.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.ParentImageChanged">
            <summary>
            Event that is fired when the parent <see cref="T:Stemmer.Cvb.Wpf.Controls.ImageEditor"/>'s 
            <see cref="T:Stemmer.Cvb.Image"/> is changed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.ParentDisplayCanvasChanged">
            <summary>
            Event that is fired when the parent <see cref="T:Stemmer.Cvb.Wpf.Controls.ImageEditor"/>'s
            <see cref="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas"/> is changed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.ParentActualZoomCenterChanged">
            <summary>
            Event that is fired when the parent <see cref="T:Stemmer.Cvb.Wpf.Controls.ImageEditor"/>'s
            actual zoom center is changed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.ParentActualZoomFactorChanged">
            <summary>
            Event that is fired when the parent <see cref="T:Stemmer.Cvb.Wpf.Controls.ImageEditor"/>'s
            actual zoom factor is changed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.#cctor">
            <summary>
            Initializes the dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.#ctor(Stemmer.Cvb.Wpf.Controls.ImageEditor)">
            <summary>
            Registers the overlay to the parent editor.
            </summary>
            <param name="editor">Parent image editor to adorn.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.Visuals">
            <summary>
            Stores the visuals of this adorner.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.GetVisualChild(System.Int32)">
            <summary>
            Gets the visual child at the given <paramref name="index"/>.
            </summary>
            <param name="index">Index of the visual.</param>
            <returns>The <see cref="T:System.Windows.Media.Visual"/> at <paramref name="index"/>.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.ImageEditorTools.ImageEditorToolBase.VisualChildrenCount">
            <summary>
            Gets the number of visual children.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.ImageEditorTools.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Wpf.ImageEditorTools</c> contains 
            editor tools that may be used on an 
            <see cref="T:Stemmer.Cvb.Wpf.Controls.ImageEditor"/>.
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Clipboard">
            <summary>
            Copy a <see cref="T:Stemmer.Cvb.Image"/> object to the clipboard.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Clipboard.SetImage(Stemmer.Cvb.Image)">
            <summary>
            Copy a <see cref="T:Stemmer.Cvb.Image"/> object to the clipboard.
            </summary>
            <param name="image">image to be copied to the clipboard.</param>
            <exception cref="T:System.ArgumentNullException">If the 
            <paramref name="image"/> parameter is null</exception>
            <exception cref="T:System.ObjectDisposedException">If the 
            <paramref name="image"/> has already been disposed</exception>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">If copying to the clipboard 
            failed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Clipboard.GetImage">
            <summary>
            Get a <see cref="T:Stemmer.Cvb.Image"/> currently stored in the clipboard.
            </summary>
            <returns>image from the clipboard</returns>
            <exception cref="T:System.Runtime.InteropServices.ExternalException">If getting the image from the
            clipboard failed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Clipboard.ContainsImage">
            <summary>
            Check whether the clipboard contains data that can be directly pasted
            into a CVB image.
            </summary>
            <returns><c>true</c> if the application's clipboard currently contains
            and image that is compatible with CVB, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.ImageToImageSourceConverter">
            <summary>
            Converts a <see cref="T:Stemmer.Cvb.Image"/> into an
            <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageToImageSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the given image <paramref name="value"/> int an 
            <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="value"><see cref="T:Stemmer.Cvb.Image"/> to convert.
            </param>
            <param name="targetType">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns><see cref="T:System.Windows.Media.ImageSource"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageToImageSourceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented.
            </summary>
            <param name="value"><see cref="T:System.Windows.Media.ImageSource"/>.</param>
            <param name="targetType">Ignored.</param>
            <param name="parameter">Ignored.</param>
            <param name="culture">Ignored.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.FileDialogs">
            <summary>
            Container class for utility functions for file dialogs.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.ConfigureAndShowDialog(System.Windows.Window,Microsoft.Win32.FileDialog,System.String,System.String,System.String)">
            <summary>
            Utility function that covers those things that are identical to 
            loading and saving.
            </summary>
            <param name="owner"></param>
            <param name="dlg"></param>
            <param name="title"></param>
            <param name="filter"></param>
            <param name="defaultExtension"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.LoadByDialog``1(Stemmer.Cvb.Utilities.LoadConstructor{``0},System.Windows.Window,System.String,System.String,System.String)">
            <summary>
            Generic file load function.
            </summary>
            <typeparam name="TObject">Type of the object to be loaded.</typeparam>
            <param name="f">Load delegate.</param>
            <param name="owner">Window that owns the modal dialog.</param>
            <param name="title">Title of the dialog.</param>
            <param name="filter">File type filter.</param>
            <param name="defaultExtension">Default extension to append to the file
            name if no extension was specified.</param>
            <returns>Loaded object (or null if loading fails).</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.LoadByDialog``1(Stemmer.Cvb.Utilities.LoadConstructor{``0},System.Windows.Window,System.String,System.String)">
            <summary>
            Generic file load function.
            </summary>
            <typeparam name="TObject">Type of the object to be load
            ed.</typeparam>
            <param name="f">Load delegate.</param>
            <param name="owner">Window that owns the modal dialog.</param>
            <param name="title">Title of the dialog.</param>
            <param name="filter">File type filter.</param>
            <returns>Loaded object (or null if loading fails).</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.LoadByDialog``1(Stemmer.Cvb.Utilities.LoadConstructor{``0},System.String,System.String)">
            <summary>
            Generic file load function.
            </summary>
            <typeparam name="TObject">Type of the object to be loaded.</typeparam>
            <param name="f">Load delegate.</param>
            <param name="title">Title of the dialog.</param>
            <param name="filter">File type filter.</param>
            <returns>Loaded object (or null if loading fails).</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.LoadByDialog``1(Stemmer.Cvb.Utilities.LoadConstructor{``0},System.String)">
            <summary>
            Generic file load function.
            </summary>
            <typeparam name="TObject">Type of the object to be loaded.</typeparam>
            <param name="f">Load delegate.</param>
            <param name="filter">File type filter.</param>
            <returns>Loaded object (or null if loading fails).</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.LoadByDialog``1(Stemmer.Cvb.Utilities.LoadConstructor{``0})">
            <summary>
            Generic file load function.
            </summary>
            <typeparam name="TObject">Type of the object to be loaded.</typeparam>
            <param name="f">Load delegate.</param>
            <returns>Loaded object (or null if loading fails).</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.SaveByDialog``1(``0,Stemmer.Cvb.Utilities.SaveFunction{``0},System.Windows.Window,System.String,System.String,System.String)">
            <summary>
            Generic file save function.
            </summary>
            <typeparam name="TObject">Type of the object to be saved.</typeparam>
            <param name="f">Load delegate.</param>
            <param name="owner">Window that owns the modal dialog.</param>
            <param name="title">Title of the dialog.</param>
            <param name="filter">File type filter.</param>
            <param name="defaultExtension">Default extension to append to the file
            name if no extension was specified.</param>
            <param name="obj">Object to be saved.</param>
            <returns><c>true</c> if the save operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.SaveByDialog``1(``0,Stemmer.Cvb.Utilities.SaveFunction{``0},System.Windows.Window,System.String,System.String)">
            <summary>
            Generic file save function.
            </summary>
            <typeparam name="TObject">Type of the object to be saved.</typeparam>
            <param name="f">Load delegate.</param>
            <param name="owner">Window that owns the modal dialog.</param>
            <param name="title">Title of the dialog.</param>
            <param name="filter">File type filter.</param>
            <param name="obj">Object to be saved.</param>
            <returns><c>true</c> if the save operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.SaveByDialog``1(``0,Stemmer.Cvb.Utilities.SaveFunction{``0},System.String,System.String)">
            <summary>
            Generic file save function.
            </summary>
            <typeparam name="TObject">Type of the object to be saved.</typeparam>
            <param name="f">Load delegate.</param>
            <param name="title">Title of the dialog.</param>
            <param name="filter">File type filter.</param>
            <param name="obj">Object to be saved.</param>
            <returns><c>true</c> if the save operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.SaveByDialog``1(``0,Stemmer.Cvb.Utilities.SaveFunction{``0},System.String)">
            <summary>
            Generic file save function.
            </summary>
            <typeparam name="TObject">Type of the object to be saved.</typeparam>
            <param name="f">Load delegate.</param>
            <param name="filter">File type filter.</param>
            <param name="obj">Object to be saved.</param>
            <returns><c>true</c> if the save operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.FileDialogs.SaveByDialog``1(``0,Stemmer.Cvb.Utilities.SaveFunction{``0})">
            <summary>
            Generic file save function.
            </summary>
            <typeparam name="TObject">Type of the object to be saved.</typeparam>
            <param name="f">Load delegate.</param>
            <param name="obj">Object to be saved.</param>
            <returns><c>true</c> if the save operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Imaging.BitmapSource">
            <summary>
            <see cref="T:Stemmer.Cvb.Wpf.Imaging.BitmapSource"/> for <see cref="T:Stemmer.Cvb.Image"/> objects.
            </summary>
            <remarks>
            <para>
            <c>Attention:</c> do not use this class directly in any control 
            displaying an image source. There is a bug in the WPF
            <c>BitmapSource</c> implementation throwing a <c>NotImplemented</c> 
            exception in out of memory conditions in the render thread.
            </para>
            <para>
            Makes CVB images accessible for WPF imaging. Resulting 
            <see cref="T:System.Windows.Media.PixelFormat"/>s are either <see cref="P:System.Windows.Media.PixelFormats.Gray8"/>
            for single plane unsigned 8bpp image or <see cref="P:System.Windows.Media.PixelFormats.Bgr24"/>
            for all other formats (three plane 8bpp per plane images are also copied
            directly; all other formats are processed via the 
            <c>Image.ToBitmap</c> method. 
            </para>
            <para>
            As the WPF imaging model is only designed for still image support, you 
            need to create a new <see cref="T:Stemmer.Cvb.Wpf.Imaging.BitmapSource"/>
            each time you want to display an update. Update behavior is sadly 
            hard-coded in WPF for just three BitmapSources: 
            <see cref="T:System.Windows.Media.Imaging.WriteableBitmap"/>, 
            <see cref="T:System.Windows.Interop.InteropBitmap"/> and 
            <see cref="T:System.Windows.Media.Imaging.RenderTargetBitmap"/>. Creating new
            <see cref="T:Stemmer.Cvb.Wpf.Imaging.BitmapSource"/> is 
            designed to be cheap.
            </para>
            <para>
            <see cref="T:Stemmer.Cvb.Wpf.Imaging.BitmapSource"/> implementation based on the articles of 
            Dwayne Need 
            (http://social.msdn.microsoft.com/profile/dwayne%20need%20%5Bmsft%5D).
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Imaging.BitmapSource.HighBitScaleModeProperty">
            <summary>
            Dependency property backing store of <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.HighBitScaleMode"/>.
            </summary>
            <remarks>
            This property can only be set between <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.BeginInit"/> and
            <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.EndInit"/> calls.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.HighBitScaleMode">
            <summary>
            Sets the <see cref="T:Stemmer.Cvb.HighBitScaleMode"/> for scaling
            non-8bpp images.
            </summary>
            <remarks>
            This property can only be set between <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.BeginInit"/> and
            <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.EndInit"/> calls.
            </remarks>
            <value>
            Default is <see cref="F:Stemmer.Cvb.HighBitScaleMode.Default"/>.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Imaging.BitmapSource.MaxDecodePixelHeightProperty">
            <summary>
            Dependency property backing store for 
            <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.MaxDecodePixelHeight"/> property.
            </summary>
            <remarks>
            This property can only be set between <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.BeginInit"/> and
            <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.EndInit"/> calls.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.MaxDecodePixelHeight">
            <summary>
            Gets/sets maximal decode height.
            </summary>
            <remarks>
            <para>
            Decodes the <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Source"/> image at this maximal resolution if
            unequal 0. If only one of the decode properties is set, the aspect
            ratio is preserved.
            </para>
            <para>
            This property can only be set between <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.BeginInit"/> and
            <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.EndInit"/> calls.
            </para>
            </remarks>
            <value>
            0 is default and doesn't change the <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Source"/> image.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Imaging.BitmapSource.MaxDecodePixelWidthProperty">
            <summary>
            Dependency property backing store for 
            <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.MaxDecodePixelWidth"/> property.
            </summary>
            <remarks>
            This property can only be set between <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.BeginInit"/> and
            <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.EndInit"/> calls.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.MaxDecodePixelWidth">
            <summary>
            Gets/sets maximal decode width.
            </summary>
            <remarks>
            <para>
            Decodes the <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Source"/> image at this maximal resolution if
            unequal 0. If only one of the decode properties is set, the aspect
            ratio is preserved.
            </para>
            <para>
            This property can only be set between <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.BeginInit"/> and
            <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.EndInit"/> calls.
            </para>
            </remarks>
            <value>
            0 is default and doesn't change the <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Source"/> image.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Imaging.BitmapSource.SourceProperty">
            <summary>
            Dependency property backing store for <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Source"/> property.
            </summary>
            <remarks>
            This property can only be set between <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.BeginInit"/> and
            <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.EndInit"/> calls.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Source">
            <summary>
            Gets/sets the <see cref="T:Stemmer.Cvb.Image"/> source for this BitmapSource.
            </summary>
            <remarks>
            This property can only be set between <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.BeginInit"/> and
            <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.EndInit"/> calls.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.#ctor">
            <summary>
            Creates an empty BitmapSource.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.#ctor(Stemmer.Cvb.Image,System.Int32,System.Int32,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Creates a BitmapSource from the given <paramref name="source"/> image.
            </summary>
            <param name="source">Source image.</param>
            <param name="maxDecodePixelWidth">Maximal decode pixel width; 0 for
            default.</param>
            <param name="maxDecodePixelHeight">Maximal decode pixel height; 0 for
            default.</param>
            <param name="highBitScaleMode">The 
            <see cref="T:Stemmer.Cvb.HighBitScaleMode"/> to use for non-8bpp 
            images.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.BeginInit">
            <summary>
            Begin the initialization phase.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.EndInit">
            <summary>
            End the initialization phase and setup the object.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CreateMappedImageIfNecessary">
            <summary>
            Creates a mapped image if <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.MaxDecodePixelHeight"/> or
            <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.MaxDecodePixelWidth"/> is unequal zero.
            </summary>
            <returns>Mapped image or <c>null</c>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Dispose">
            <summary>
            Dispose this BitmapSource.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Dispose(System.Boolean)">
            <summary>
            Dispose implementation.
            </summary>
            <remarks>
            Derived classes can override this method for additional resource
            disposal. But remember to always call the base implementation!
            </remarks>
            <param name="disposing"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CreateInstanceCore">
            <summary>
            Creates an instance of a CustomBitmap.
            </summary>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CloneCore(System.Windows.Freezable)">
            <summary>
            Copies data into a cloned instance.
            </summary>
            <param name="source">
            The original instance to copy data from.
            </param>
            <remarks>
            When <see cref="T:System.Windows.Freezable"/> is cloned, WPF will make deep clones of 
            all writable, locally-set properties including expressions. The 
            property's base value is copied -- not the current value. WPF skips 
            read only DPs.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CloneCurrentValueCore(System.Windows.Freezable)">
            <summary>
            Copies data into a cloned instance.
            </summary>
            <param name="source">
            The original instance to copy data from.
            </param>
            <remarks>
            When a <see cref="T:System.Windows.Freezable"/>'s "current value" is cloned, WPF will 
            make deep clones of the "current values" of all writable, locally-set 
            properties. This has the effect of resolving expressions to their 
            values. WPF skips read only DPs.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.GetAsFrozenCore(System.Windows.Freezable)">
            <summary>
            Copies data into a cloned instance.
            </summary>
            <param name="source">
            The original instance to copy data from.
            </param>
            <remarks>
            Freezable.GetAsFrozen is semantically equivalent to 
            <c>Freezable.Clone().Freeze()</c>, except that you can avoid copying
            any portions of the Freezable graph which are already frozen.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
            <summary>
            Copies data into a cloned instance.
            </summary>
            <param name="source">
            The original instance to copy data from.
            </param>
            <remarks>
            <see cref="M:System.Windows.Freezable.GetCurrentValueAsFrozen"/> is semantically 
            equivalent to <c>Freezable.CloneCurrentValue().Freeze()</c>, except 
            that WPF will avoid copying any portions of the Freezable graph which 
            are already frozen.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CopyCore(Stemmer.Cvb.Wpf.Imaging.BitmapSource,System.Boolean,System.Boolean)">
            <summary>
            Copies data into a cloned instance.
            </summary>
            <param name="original">
            The original instance to copy data from.
            </param>
            <param name="useCurrentValue">
            Whether or not to copy the current value of expressions, or the
            expressions themselves.
            </param>
            <param name="willBeFrozen">
            Indicates whether or not the clone will be frozen.  If the clone will 
            be immediately frozen, there is no need to clone data that is already 
            frozen, you can just share the instance.
            </param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.EffectiveSource">
            <summary>
            Gets the effective source image.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Format">
            <summary>
            The pixel format of this BitmapSource.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.PixelWidth">
            <summary>
            Gets the width of this BitmapSource in pixels.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.PixelHeight">
            <summary>
            Gets the height of this BitmapSource in pixels.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.DpiX">
            <summary>
            Horizontal DPI of the bitmap.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.DpiY">
            <summary>
            Vertical DPI of the bitmap.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Palette">
            <summary>
            Palette of the bitmap.
            </summary>
            <remarks>
            Derived classes can override this to specify their own value. Default
            is <c>null</c>.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.UseImageToBitmap(Stemmer.Cvb.Image)">
            <summary>
            Gets whether the <c>Image.ToBitmap</c> method is used to
            create a BitmapSource.
            </summary>
            <param name="image">Image to check.</param>
            <returns><c>true</c> if the <see cref="T:Stemmer.Cvb.Image"/> is first converted
            to a <see cref="T:System.Drawing.Bitmap"/>; <c>false</c> if it can be
            directly copied.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.GetPixelFormatFromImage(Stemmer.Cvb.Image)">
            <summary>
            Helper to get the pixel format for an <paramref name="image"/>.
            </summary>
            <remarks>
            This method expects that the image is not converted to a bitmap!
            </remarks>
            <param name="image">Image to get format from.</param>
            <returns>WPF pixel format.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CopyPixels(System.Array,System.Int32,System.Int32)">
            <summary>
            Requests pixels from this BitmapSource.
            </summary>
            <param name="pixels">
            The destination array of pixels.
            </param>
            <param name="stride">
            The stride of the destination array.
            </param>
            <param name="offset">
            The starting index within the destination array to copy to.
            </param>
            <remarks>
            Derived classes must override <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CopyPixelsCore(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)"/> to 
            implement custom logic.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CopyPixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32)">
            <summary>
            Requests pixels from this BitmapSource.
            </summary>
            <param name="sourceRect">
            The rectangle of pixels to copy.
            </param>
            <param name="pixels">
            The destination array of pixels.
            </param>
            <param name="stride">
            The stride of the destination array.
            </param>
            <param name="offset">
            The starting index within the destination array to copy to.
            </param>
            <remarks>
            Derived classes must override <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CopyPixelsCore(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)"/> to 
            implement custom logic.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CopyPixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Requests pixels from this BitmapSource.
            </summary>
            <param name="sourceRect">
            The rectangle of pixels to copy.
            </param>
            <param name="buffer">
            The destination buffer of pixels.
            </param>
            <param name="bufferSize">
            The size of the buffer, in bytes.
            </param>
            <param name="stride">
            The stride of the destination buffer.
            </param>
            <remarks>
            Derived classes must override <see cref="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CopyPixelsCore(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)"/> to 
            implement custom logic.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CopyPixelsCore(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Requests pixels from this BitmapSource.
            </summary>
            <param name="sourceRect">
            The caller can restrict the operation to a rectangle of interest (ROI)
            using this parameter. The ROI sub-rectangle must be fully contained in 
            the bounds of the bitmap. Careful use of the ROI can be a significant
            performance optimization when the pixel-production algorithm is 
            expensive - e.g. JPEG decoding. 
            </param>
            <param name="buffer">
            The caller controls the memory management and must provide an output 
            buffer of sufficient size to complete the call based on the width, 
            height and pixel format of the bitmap and the sub-rectangle provided 
            to the copy method. 
            </param>
            <param name="bufferSize">
            The size of the <paramref name="buffer"/>.
            </param>
            <param name="stride">
            Defines the count of bytes between two vertically adjacent pixels in 
            the output buffer. 
            </param>
            <remarks>
            <para>
            This is the main image processing routine. It instructs the 
            BitmapSource instance to produce pixels according to its algorithm - 
            e.g. copying a block of memory or even analytically computing a 
            complex gradient. The algorithm is completely dependent on the 
            implementation.
            </para>
            <para>
            Implementation of this method must only write to the first 
            <c>(rc.Width*PixelFormat.BitsPerPixel+7)/8</c> bytes of each line of
            the output buffer (in this case, a line is a consecutive string of 
            "stride" bytes).
            </para>
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CopyCvbImagePixels(Stemmer.Cvb.Image,System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies the Mono8/RGB24 image to the destination 
            <paramref name="buffer"/>.
            </summary>
            <remarks>
            This method expects the <paramref name="buffer"/> either to be Grey8 
            or Bgr24.
            </remarks>
            <param name="image">Image to copy from.</param>
            <param name="sourceRect">Source rectangle.</param>
            <param name="buffer">Target buffer.</param>
            <param name="bufferSize">Target buffer size in bytes.</param>
            <param name="stride">Byte count to next line.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.CopyBitmapPixels(System.Drawing.Bitmap,System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Copies the <paramref name="bitmap"/> to the given 
            <paramref name="buffer"/>.
            </summary>
            <remarks>
            This method expects the <paramref name="buffer"/> either to be Grey8 
            or Bgr24.
            </remarks>
            <param name="bitmap">Bitmap to copy from.</param>
            <param name="sourceRect">Source rectangle.</param>
            <param name="buffer">Target buffer.</param>
            <param name="bufferSize">Target buffer size in bytes.</param>
            <param name="stride">Byte count to next line.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.ValidateArrayAndGetInfo(System.Array,System.Int32@,System.Int32@,System.Type@)">
            <summary>
            Get the size of the specified array and of the elements in it.
            </summary>
            <param name="pixels">
            The array to get info about.
            </param>
            <param name="elementSize">
            On output, will contain the size of the elements in the array.
            </param>
            <param name="sourceBufferSize">
            On output, will contain the size of the array.
            </param>
            <param name="elementType">
            On output, will contain the type of the elements in the array.
            </param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.IsDownloading">
            <summary>
            Gets whether this bitmap source is downloading (never).
            </summary>
            <value>
            Always <c>false</c>.
            </value>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Imaging.BitmapSource.DownloadCompleted">
            <summary>
            Raised if the download is completed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.RaiseDownloadCompleted">
            <summary>
            Raises the download completed event.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Imaging.BitmapSource.DecodeFailed">
            <summary>
            Raised if the <see cref="P:Stemmer.Cvb.Wpf.Imaging.BitmapSource.Source"/> could not be decoded.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Imaging.BitmapSource.RaiseDecodeFailed(System.Windows.Media.ExceptionEventArgs)">
            <summary>
            Raises the decode failed event.
            </summary>
            <param name="e">Exception data.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Imaging.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Wpf.Imaging</c> contains utility classes
            and definitions for adapting CVB to WPF bitmap sources.
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">
            <summary>
            Represents a generic collection of key/value pairs that are ordered independently of the key and value.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary</typeparam>
            <remarks>
            Implementation from 
            http://www.codeproject.com/Articles/274093/Math-Parser-NET page.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified initial capacity.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> can contain.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified comparer.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">IEqualityComparer&lt;TKey&gt;</see> to use when comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1">EqualityComparer&lt;TKey&gt;</see> for the type of the key.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> class using the specified initial capacity and comparer.
            </summary>
            <param name="capacity">The initial number of elements that the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1">IEqualityComparer&lt;TKey&gt;</see> to use when comparing keys, or <null/> to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1">EqualityComparer&lt;TKey&gt;</see> for the type of the key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="capacity"/> is less than 0</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.ConvertToKeyType(System.Object)">
            <summary>
            Converts the object passed as a key to the key type of the dictionary
            </summary>
            <param name="keyObject">The key object to check</param>
            <returns>The key object, cast as the key type of the dictionary</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyObject"/> is <null/>.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="keyObject"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.ConvertToValueType(System.Object)">
            <summary>
            Converts the object passed as a value to the value type of the dictionary
            </summary>
            <param name="value">The object to convert to the value type of the dictionary</param>
            <returns>The value object, converted to the value type of the dictionary</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <null/>, and the value type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The value type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Dictionary">
            <summary>
            Gets the dictionary object that stores the keys and values
            </summary>
            <value>The dictionary object that stores the keys and values for the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></value>
            <remarks>Accessing this property will create the dictionary object if necessary</remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.List">
            <summary>
            Gets the list object that stores the key/value pairs.
            </summary>
            <value>The list object that stores the key/value pairs for the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></value>
            <remarks>Accessing this property will create the list object if necessary.</remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Insert(System.Int32,`0,`1)">
            <summary>
            Inserts a new entry into the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#Specialized#IOrderedDictionary#Insert(System.Int32,System.Object,System.Object)">
            <summary>
            Inserts a new entry into the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the specified key and value at the specified index.
            </summary>
            <param name="index">The zero-based index at which the element should be inserted.</param>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. The value can be <null/> if the type of the values in the dictionary is a reference type.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            <paramref name="index"/> is greater than <see cref="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.<br/>
            -or-<br/>
            <paramref name="value"/> is <null/>, and the value type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.<br/>
            -or-<br/>
            The value type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.<br/>
            -or-<br/>
            An element with the same key already exists in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Removes the entry at the specified index from the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="index">The zero-based index of the entry to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Count"/>.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#Specialized#IOrderedDictionary#Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <value>The value of the item at the specified index.</value>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than 0.<br/>
            -or-<br/>
            index is equal to or greater than <see cref="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Count"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference, and the value type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The value type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Add(`0,`1)"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <returns>The index of the newly added entry</returns>
            <remarks>A key cannot be <null/>, but a value can be.
            <para>You can also use the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property to add new elements by setting the value of a key that does not exist in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection; however, if the specified key already exists in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>, setting the <see cref="P:OrderedDictionary{TKey,TValue}.Item(TKey)"/> property overwrites the old value. In contrast, the <see cref="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Add(`0,`1)"/> method does not modify existing elements.</para></remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an entry with the specified key and value into the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection with the lowest available index.
            </summary>
            <param name="key">The key of the entry to add.</param>
            <param name="value">The value of the entry to add. This value can be <null/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/>.<br/>
            -or-<br/>
            <paramref name="value"/> is <null/>, and the value type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is a value type.</exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.<br/>
            -or-<br/>
            The value type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="value"/>.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <remarks>The capacity is not changed as a result of calling this method.</remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</param>
            <returns><see langword="true"/> if the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains a specific key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</param>
            <returns><see langword="true"/> if the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is <null/></exception>
            <exception cref="T:System.ArgumentException">The key type of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is not in the inheritance hierarchy of <paramref name="key"/>.</exception>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> has a fixed size.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> has a fixed size; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection is read-only.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> is read-only; otherwise, <see langword="false"/>. The default is <see langword="false"/>.</value>
            <remarks>
            A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.
            <para>A collection that is read-only is simply a collection with a wrapper that prevents modification of the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</para>
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the keys in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> object containing the keys in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:System.Collections.ICollection"/> object is not a static copy; instead, the collection refers back to the keys in the original <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the key collection.</remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.IndexOfKey(`0)">
            <summary>
            Returns the zero-based index of the specified key in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>
            </summary>
            <param name="key">The key to locate in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></param>
            <returns>The zero-based index of <paramref name="key"/>, if <paramref name="key"/> is found in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>; otherwise, -1</returns>
            <remarks>This method performs a linear search; therefore it has a cost of O(n) at worst.</remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Remove(`0)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
            <returns><see langword="true"/> if the key was found and the corresponding element was removed; otherwise, <see langword="false"/></returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <param name="key">The key of the entry to remove</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> object containing the values in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</value>
            <remarks>The returned <see cref="T:System.Collections.ICollection"/> object is not a static copy; instead, the <see cref="T:System.Collections.ICollection"/> refers back to the values in the original <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection. Therefore, changes to the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the <see cref="T:System.Collections.ICollection"/>.</remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Item(`0)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <value>The value associated with the specified key. If the specified key is not found, attempting to get it returns <null/>, and attempting to set it creates a new element using the specified key.</value>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> elements to a one-dimensional Array object at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> object that is the destination of the <see cref="T:KeyValuePair`2>"/> objects copied from the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <remarks>The <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/> method preserves the order of the elements in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see></remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Count">
            <summary>
            Gets the number of key/values pairs contained in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.
            </summary>
            <value>The number of key/value pairs contained in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> collection.</value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object is synchronized (thread-safe).
            </summary>
            <value>This method always returns false.</value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object.
            </summary>
            <value>An object that can be used to synchronize access to the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> object.</value>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object containing the keys in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object containing the keys in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:System.Collections.Generic.ICollection{TKey}">ICollection&lt;TKey&gt;</see> object is not a static copy; instead, the collection refers back to the keys in the original <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the key collection.</remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of <paramref name="value"/>. This parameter can be passed uninitialized.</param>
            <returns><see langword="true"/> if the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> contains an element with the specified key; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.Values">
            <summary>
            Gets an <see cref="T:ICollection{TValue}">ICollection&lt;TValue&gt;</see> object containing the values in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.
            </summary>
            <value>An <see cref="T:ICollection{TValue}">ICollection&lt;TValue&gt;</see> object containing the values in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</value>
            <remarks>The returned <see cref="T:ICollection{TValue}">ICollection&lt;TKey&gt;</see> object is not a static copy; instead, the collection refers back to the values in the original <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. Therefore, changes to the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> continue to be reflected in the value collection.</remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds the specified value to the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> with the specified key.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure representing the key and value to add to the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> contains a specific key and value.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure to locate in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
            <returns><see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see> to an array of type <see cref="T:KeyValuePair`2>"/>, starting at the specified index.
            </summary>
            <param name="array">The one-dimensional array of type <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> that is the destination of the <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> elements copied from the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>. The array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes a key and value from the dictionary.
            </summary>
            <param name="item">The <see cref="T:KeyValuePair{TKey,TValue}">KeyValuePair&lt;TKey,TValue&gt;</see> structure representing the key and value to remove from the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</param>
            <returns><see langword="true"/> if the key and value represented by <paramref name="item"/> is successfully found and removed; otherwise, <see langword="false"/>. This method returns <see langword="false"/> if <paramref name="item"/> is not found in the <see cref="T:Stemmer.Cvb.Wpf.MathParser.OrderedDictionary`2">OrderedDictionary&lt;TKey,TValue&gt;</see>.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.MathParser.Parser">
            <summary>
            Mathematical expression parser.
            </summary>
            <remarks>
            Implementation based on parser from
            http://www.codeproject.com/Articles/274093/Math-Parser-NET page.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.MathParser.Tokenizer">
            <summary>
            Parses the expression's tokens.
            </summary>
            <remarks>
            Implementation based on parser from
            http://www.codeproject.com/Articles/274093/Math-Parser-NET page.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.NamespaceDoc">
            <summary>
            The namespace and assembly <c>Stemmer.Cvb.Wpf</c> contains definitions
            for a display for WPF applications and overlays to go with that display.
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.NamespaceDoc">
            <summary>
            The namespace <c>Stemmer.Cvb.Wpf.Overlays</c> contains overlays that
            may be used on <see cref="T:Stemmer.Cvb.Wpf.Controls.Display"/> 
            objects.
            </summary> 
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay">
            <summary>
            Interaction logic for Area2DOverlay.xaml
            </summary>
            <summary>
            Area2DOverlay
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.#cctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.#ctor(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
            Constructor.
            </summary>
            <param name="p0">Point P0.</param>
            <param name="p1">Point P1.</param>
            <param name="p2">Point P2.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay._blockRecursion">
            <summary>
            flag that helps block update recursions.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.CoercePixelCoordinateSystem(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prevent the pixel coordinate system from being changed.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.OnParentDisplayCanvasChanged(Stemmer.Cvb.Wpf.Controls.DisplayCanvas,Stemmer.Cvb.Wpf.Controls.DisplayCanvas)">
            <summary>
            React to changes in the canvas...
            </summary>
            <param name="oldCanvas">Canvas on which the overlay was hitherto
            located.</param>
            <param name="newCanvas">Canvas on which the overlay will now "live".
            </param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.OnActualZoomFactorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to changes in the zoom factor on the displaying canvas.
            </summary>
            <param name="d">Dependency object on which the change occurred.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.Selection">
            <summary>
            Current selection.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P0X">
            <summary>
            Point P0, X coordinate
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.OnP0XChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            react to changes...
            </summary>
            <param name="d">Dependency object on which the change occurred.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P0XProperty">
            <summary>
            backing store
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P0Y">
            <summary>
            Point P0, Y coordinate.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P0YProperty">
            <summary>
            backing store
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.OnP0YChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            react to changes...
            </summary>
            <param name="d">Dependency object on which the change occurred.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P1X">
            <summary>
            Point P1, X coordinate.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P1XProperty">
            <summary>
            backing store
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.OnP1Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            react to changes
            </summary>
            <param name="d">Dependency object on which the change occurred.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P1Y">
            <summary>
            Point P1, Y coordinate.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P1YProperty">
            <summary>
            backing store
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P2X">
            <summary>
            Point P2, X coordinate.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P2XProperty">
            <summary>
            backing store
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.OnP2Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            react to changes
            </summary>
            <param name="d">Dependency object on which the change occurred.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P2Y">
            <summary>
            Point P2, Y coordinate.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P2YProperty">
            <summary>
            backing store
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P3X">
            <summary>
            P3, x coordinate (read only...)
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P3XPropertyKey">
            <summary>
            Backing store key.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P3XProperty">
            <summary>
            Backing store.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P3Y">
            <summary>
            P3, y coordinate (read only...)
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P3YPropertyKey">
            <summary>
            Backing store key.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.P3YProperty">
            <summary>
            Backing store.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.ArrowWidthDefault">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.ArrowWidth">
            <summary>
            Width of the arrows (and the diameter of the ellipse...)
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.ArrowWidthProperty">
            <summary>
            backing store
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.OnArrowWidthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to changes.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.ArrowLengthDefault">
            <summary>
            default value
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.ArrowLength">
            <summary>
            Length of the Arrow heads
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.ArrowLengthProperty">
            <summary>
            backing store
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.OnArrowLengthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to changes.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.EffectiveArrowWidth">
            <summary>
            The width of the arrow in image pixels (subject to change depending
            on the actual zoom factor) for painting purposes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.EffectiveArrowWidthPropertyKey">
            <summary>
            Read only property key.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.EffectiveArrowWidthProperty">
            <summary>
            Backing store.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.EffectiveArrowLength">
            <summary>
            The length of the arrow in image pixels (subject to change depending
            on the actual zoom factor) for painting purposes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.EffectiveArrowLengthPropertyKey">
            <summary>
            Read only property key.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.EffectiveArrowLengthProperty">
            <summary>
            Backing store.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.Stroke">
            <summary>
            Stroke being used for painting.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.StrokeProperty">
            <summary>
            Backing store.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.StrokeThicknessDefault">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.StrokeThickness">
            <summary>
            Thickness at which to paint the strokes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.StrokeThicknessProperty">
            <summary>
            backing store
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.UpdateP2">
            <summary>
            Calculate location of P1
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.UpdateP1">
            <summary>
            Calculate location of P2
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.UpdateP3">
            <summary>
            Calculate location of P3.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.ForceRectangle(System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            calculate the parameters for updating P1 or P2
            </summary>
            <param name="dX1">x coordinate of p1</param>
            <param name="dY1">y coordinate of p1</param>
            <param name="dX2">x coordinate of p2</param>
            <param name="dY2">y coordinate of p2</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.Area2DOverlay.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay">
            <summary>
            This overlay paints 
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.CrosshairSizeDefault">
            <summary>
            Default for the property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.CrosshairSizeProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.CrosshairSize">
            <summary>
            Extent of the feature window relative to the position of the overlay.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.OnCrosshairSizeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Creates a new crosshair crosshairGeometry and guideline set.
            </summary>
            <param name="d">Dependency object source.</param>
            <param name="e">Change arguments.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.StrokeProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.Stroke">
            <summary>
            Brush to use for painting
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.OnPenPropsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when either <see cref="P:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.Stroke"/> or 
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.StrokeThickness"/> are changed.
            </summary>
            <param name="d">Crosshair dependency object.</param>
            <param name="e">Change params.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.StrokeThicknessDefault">
            <summary>
            Default for the property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.StrokeThicknessProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.StrokeThickness">
            <summary>
            Extent of the feature window relative to the position of the overlay.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.OnStrokeThicknessChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calculates a new guideline set.
            </summary>
            <param name="d">Dependency object source.</param>
            <param name="e">Change arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.#ctor">
            <summary>
            Creates the crosshair overlay.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.BorderBreadth">
            <summary>
            Always 0 as no border handling is done.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called every time this overlay needs to be repainted.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator">
            <summary>
            Interaction logic for ExtentIndicator.xaml
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.#cctor">
            <summary>
            static ctor
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Render the whole object including the text labels
            </summary>
            <param name="drawingContext">Draing context to render to.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.ExtentIndicator_ImageSourceChanged(System.Object,Stemmer.Cvb.Wpf.Controls.ImageSourceChangedEventArgs)">
            <summary>
            React to new image source.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.CoercePixelCoordinateSystem(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prevent the pixel coordinate system from being changed.
            </summary>
            <param name="d"></param>
            <param name="v"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.OnActualZoomFactorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to changes in the zoom factor on the displaying canvas.
            </summary>
            <param name="d">Dependency object on which the change occurred.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator._BuildFormattedText(System.String)">
            <summary>
            Trivial function that helps reduce code size.
            </summary>
            <param name="txt"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator._DrawOutlined(System.Windows.Media.DrawingContext,System.Windows.Media.FormattedText,System.Windows.Point,System.Windows.Media.Transform)">
            <summary>
            Semi-trivial function that helps reduce code size.
            </summary>
            <param name="dc"></param>
            <param name="txt"></param>
            <param name="pos"></param>
            <param name="transformation"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator._UpdateGuideLines">
            <summary>
            Update the guide lines that make sure that the horizontal and 
            vertical lines do not become squishy
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.OriginX">
            <summary>
            X-Position of the Origin.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.OriginXProperty">
            <summary>
            Backing store for dependency Property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.OriginY">
            <summary>
            Y-position of the Origin.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.OriginYProperty">
            <summary>
            Backing store for dependency Property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.OnOriginChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            update guidelines if necessary
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator._guideLines">
            <summary>
            guide lines
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.Stroke">
            <summary>
            Stroke being used for painting.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ExtentIndicator.StrokeProperty">
            <summary>
            Backing store.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay">
            <summary>
            Combines <see cref="T:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay"/> with a 
            <see cref="T:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay"/> like the <see cref="T:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay"/>.
            </summary>
            <remarks>
            <para>
            The difference to the <c>ModelRectOverlay</c> is the focus on the 
            feature point and the feature extent. Here not the rect is positioned
            but the feature point and the rect is spanned according to this point.
            </para><para>
            This behavior is also reflected in the UI: moving the crosshair moves
            the whole rect.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.PART_Crosshair">
            <summary>
            The name of the crosshair part.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.CrosshairSizeDefault">
            <summary>
            Default for the property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.CrosshairSizeProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.CrosshairSize">
            <summary>
            Extent of the feature window relative to the position of the overlay.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.OnCrosshairSizeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Creates a new crosshair geometry and guideline set.
            </summary>
            <param name="d">Dependency object source.</param>
            <param name="e">Change arguments.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureX">
            <summary>
            Gets or sets the feature point.
            </summary>
            <remarks>
            <para>
            The point is in absolute image coordinates.
            </para><para>
            Setting this feature moves the whole rect on the x-axis.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureXProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureX"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureY">
            <summary>
            Gets or sets the feature point.
            </summary>
            <remarks>
            <para>
            The point is in absolute image coordinates.
            </para><para>
            Setting this feature moves the whole rect on the y-axis.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureYProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureY"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentLeft">
            <summary>
            Gets or sets the extent of the feature.
            </summary>
            <remarks>
            <para>
            The extent is relative to the <i>Feature</i> point in image 
            coordinates.
            </para><para>
            Setting this feature moves the left border without changing the
            <i>Feature</i> point.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentLeftProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentLeft"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentTop">
            <summary>
            Gets or sets the extent of the feature.
            </summary>
            <remarks>
            <para>
            The extent is relative to the <i>Feature</i> point in image 
            coordinates.
            </para><para>
            Setting this feature moves the top border without changing the
            <i>Feature</i> point.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentTopProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentTop"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentRight">
            <summary>
            Gets or sets the extent of the feature.
            </summary>
            <remarks>
            <para>
            The extent is relative to the <i>Feature</i> point in image 
            coordinates.
            </para><para>
            Setting this feature moves the right border without changing the
            <i>Feature</i> point.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentRightProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentRight"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentBottom">
            <summary>
            Gets or sets the extent of the feature.
            </summary>
            <remarks>
            <para>
            The extent is relative to the <i>Feature</i> point in image 
            coordinates.
            </para><para>
            Setting this feature moves the bottom border without changing the
            <i>Feature</i> point.
            </para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentBottomProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentBottom"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.RelativeFeatureX">
            <summary>
            Gets the relative feature point.
            </summary>
            <remarks>
            The point is in image coordinates relative to the overlay origin.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.RelativeFeatureXProperty">
            <summary>
            Read-only <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureX"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.RelativeFeatureY">
            <summary>
            Gets the relative feature point.
            </summary>
            <remarks>
            The point is in image coordinates relative to the overlay origin.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.RelativeFeatureYProperty">
            <summary>
            Read-only <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureY"/> dependency property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.OnPenPropsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when either <see cref="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.Stroke"/> or 
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.StrokeThickness"/> are changed.
            </summary>
            <param name="d">Feature dependency object.</param>
            <param name="e">Change params.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.OnStrokeThicknessChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Calculates a new guideline set.
            </summary>
            <param name="d">Dependency object source.</param>
            <param name="e">Change arguments.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.#cctor">
            <summary>
            Initializes the dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.#ctor">
            <summary>
            Creates a default, unpositioned feature overlay.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureLocation">
            <summary>
            Gets or sets the feature location (<see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureX"/> and 
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureY"/> properties.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtent">
            <summary>
            Gets or sets the relative feature extent.
            </summary>
            <remarks>
            See <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentLeft"/>, <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentTop"/>,
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentRight"/> and <see cref="P:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.FeatureExtentBottom"/>.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.FeatureOverlay.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called every time this overlay needs to be repainted.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay">
            <summary>
            Like a label that adorns a rectangular area instead of a point.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.CanCenterDrag">
            <summary>
            Gets or sets whether the rect inner area is used for drag operations.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.CanCenterDragProperty">
            <summary>
            Dependency property <see cref="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.CanCenterDrag"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.StrokeProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.Stroke">
            <summary>
            Brush to use for painting
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.OnPenPropsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when either <see cref="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.Stroke"/> or 
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.StrokeThickness"/> are changed.
            </summary>
            <param name="d">Crosshair dependency object.</param>
            <param name="e">Change params.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.StrokeThicknessDefault">
            <summary>
            Default for the property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.StrokeThicknessProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.StrokeThickness">
            <summary>
            Extent of the feature window relative to the position of the overlay.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.Text">
            <summary>
            Gets or sets the label text.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.TextProperty">
            <summary>
            Dependency property for <see cref="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.Text"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.OnTextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the label <see cref="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.Text"/> is changed.
            </summary>
            <param name="d">Dependency object.</param>
            <param name="e">Change event args.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.TextMargin">
            <summary>
            Gets or sets the margin around the label text.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.TextMarginProperty">
            <summary>
            Dependency property <see cref="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.TextMargin"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.OnTextMarginChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the label text margin changes.
            </summary>
            <param name="d">Dependency object.</param>
            <param name="e">Change event args.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.#ctor">
            <summary>
            Creates the labeled rect overlay.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.BorderBreadth">
            <summary>
            Border width is the stroke thickness.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.ArrangeOverride(System.Windows.Size)">
            <summary>
            Called when this overlay is to be placed on the canvas.
            </summary>
            <param name="arrangeBounds">Bounds in which this control is placed.</param>
            <returns>Effective bounds.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.CalculateTextFieldSize">
            <summary>
            Calculates the current text field size including the margin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.UpdateTextBorderGeometry">
            <summary>
            Updates the geometry that draws the border around the 
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.Text"/> considering the current margin.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called every time this overlay needs to be repainted.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.LabelOverlay">
            <summary>
            Interaction logic for Label.xaml
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabelOverlay.#cctor">
            <summary>
            static ctor
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabelOverlay.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.LabelOverlay.OnApplyTemplate">
            <summary>
            Connect to the class's style.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.LabelOverlay.MovableDefault">
            <summary>
            Default value for the property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.LabelOverlay.TextProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.LabelOverlay.Text">
            <summary>
            Text to display on the label.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.LabelOverlay.MovableProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.LabelOverlay.Movable">
            <summary>
            Movable flag.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay">
            <summary>
            Combined <see cref="T:Stemmer.Cvb.Wpf.Overlays.CrosshairOverlay"/> for model anchor points in an 
            <see cref="T:Stemmer.Cvb.Wpf.Overlays.LabeledRectOverlay"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.PART_Crosshair">
            <summary>
            The name of the crosshair part.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AbsoluteAnchorX">
            <summary>
            Gets the x component of the model's anchor point in image coordinates 
            relative to the image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AbsoluteAnchorXProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AbsoluteAnchorX"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AbsoluteAnchorY">
            <summary>
            Gets or sets the y component of the model's anchor point in image
            coordinates relative to the overlay.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AbsoluteAnchorYProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AbsoluteAnchorY"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AnchorMovable">
            <summary>
            Gets or sets whether the anchor is movable.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AnchorMovableProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AnchorMovable"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AnchorX">
            <summary>
            Gets or sets the x component of the model's anchor point in image
            coordinates relative to the overlay.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AnchorXProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AnchorX"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AnchorY">
            <summary>
            Gets or sets the y component of the model's anchor point in image
            coordinates relative to the image.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AnchorYProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.AnchorY"/> dependency property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.#ctor">
            <summary>
            Creates the model rect overlay.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ModelRectOverlay.OnApplyTemplate">
            <summary>
            Connect to the class's style.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay">
            <summary>
            An overlay that can be dragged, resized at its borders, or both.
            </summary>
            <remarks>
            Default settings are non-movable and non-resizeable.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsDragging">
            <summary>
            Gets whether the overlay is currently dragged.
            </summary>
            <remarks>
            Resize state is signaled via <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsResizing"/>.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsDraggingKey">
            <summary>
            Read-only <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsDragging"/> dependency property key.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsDraggingProperty">
            <summary>
            Read-only <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsDragging"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsResizing">
            <summary>
            Gets whether the overlay is currently resized.
            </summary>
            <remarks>
            Drag state is signaled via <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsDragging"/>.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsResizingKey">
            <summary>
            Read-only <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsResizing"/> dependency property key.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsResizingProperty">
            <summary>
            Read-only <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.IsResizing"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.MinOverlayWidth">
            <summary>
            Gets or sets minimal width of the overlay.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.MinOverlayWidthProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.MinOverlayWidth"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.MinOverlayHeight">
            <summary>
            Gets or sets minimal width of the overlay.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.MinOverlayHeightProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.MinOverlayWidth"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.MovableProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.Movable"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.Movable">
            <summary>
            Movable flag.
            </summary>
            <remarks>
            Default is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.Resizable">
            <summary>
            Resizable flag.
            </summary>
            <remarks>
            Default is <c>false</c>.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.ResizableProperty">
            <summary>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.Resizable"/> dependency property.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.#cctor">
            <summary>
            Initializes the dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.#ctor">
            <summary>
            Creates the movable image overlay.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.BorderBreadth">
            <summary>
            Gets the width of the border line.
            </summary>
            <remarks>
            This is used to determine the drag/size positions on the border.
            </remarks>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.DefaultNonBorderOperation">
            <summary>
            Gets or sets the default operation when the mouse is not over the
            border.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.TranslateBorderRectPos(System.Windows.Point,Stemmer.Cvb.Wpf.RectPos)">
            <summary>
            Translates the detected <paramref name="rectPos"/> bases on the given
            <paramref name="pt"/>.
            </summary>
            <remarks>
            <para>
            Default implementation just returns <paramref name="rectPos"/>.
            </para><para>
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.MovableImageOverlay.DefaultNonBorderOperation"/> is applied afterwards.
            </para>
            </remarks>
            <param name="pt">Point in overlay control coordinates.</param>
            <param name="rectPos">Currently detected position.</param>
            <returns>Translated position.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.NonClippingImageOverlay">
            <summary>
            Base class for image overlays that should not be clipped (i.e. that 
            extend beyond their definition).
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.NonClippingImageOverlay.#ctor">
            <summary>
            default ctor
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.NonClippingImageOverlay.#cctor">
            <summary>
            static ctor
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.NonClippingImageOverlay.GetLayoutClip(System.Windows.Size)">
            <summary>
            Prevent clipping at the edge of the user control (that way we can
            implement dragging of the overlay more easily).
            </summary>
            <param name="layoutSlotSize">Ignored.</param>
            <returns><c>null</c></returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.NonClippingImageOverlay.CoerceOverlaySize(System.Windows.DependencyObject,System.Object,System.Windows.Controls.Orientation)">
            <summary>
            Coerce the overlay size whenever it is about to change. This makes
            sure that the total size is big enough, otherwise funny effects with
            clipping will happen...
            </summary>
            <param name="d"></param>
            <param name="value"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.NonClippingImageOverlay.CoerceOverlayWidth(System.Double)">
            <summary>
            Inheritors must override this to specify the effective overlay width
            (which should be total render extent regardless of clipping 
            considerations).
            </summary>
            <param name="value">Value to be coerced.</param>
            <returns>Coercion result.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.NonClippingImageOverlay.CoerceOverlayHeight(System.Double)">
            <summary>
            Inheritors must override this to specify the effective overlay width
            (which should be total render extent regardless of clipping 
            considerations).
            </summary>
            <param name="value">Value to be coerced.</param>
            <returns>Coercion result.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas">
            <summary>
            An overlay canvas is a canvas for overlays which is on top of the 
            <see cref="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas"/> in the visual tree.
            </summary>
            <remarks>
            This canvas enables relative coordinates inside the full image extent 
            and placing overlays in other overlays or non-overlay controls which 
            have a <c>DisplayCanvas</c> visual parent.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ActualZoomFactorDefault">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ActualZoomFactorKey">
            <summary>
            The Key for readonly <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ActualZoomFactor"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ActualZoomFactorProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ActualZoomFactor"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ActualZoomFactor">
            <summary>
            Gets the actual zoom factor of the display canvas this overlay is on.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ParentDisplayCanvasKey">
            <summary>
            The key for the readonly ParentDisplayCanvas property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ParentDisplayCanvasProperty">
            <summary>
            Backing store for the readonly <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ParentDisplayCanvas"/> 
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ParentDisplayCanvas">
            <summary>
            The <see cref="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas"/> this overlay is child of.
            </summary>
            <value>
            <c>null</c> if no <c>DisplayCanvas</c> parent is present.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.#ctor">
            <summary>
            Creates the overlay canvas.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures all child elements with infinite space.
            </summary>
            <remarks>
            First layout pass.
            </remarks>
            <param name="availableSize">Ignored.</param>
            <returns>Empty size.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.OverlayCanvas.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges all child elements depending on their coordinates and unit.
            </summary>
            <param name="finalSize">Size of the canvas.</param>
            <returns>Input size.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay">
            <summary>
            Overlay simply showing a rectangle that is optionally movable.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.CanCenterDrag">
            <summary>
            Gets or sets whether the rect inner area is used for drag operations.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.CanCenterDragProperty">
            <summary>
            Dependency property <see cref="P:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.CanCenterDrag"/>.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.StrokeProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.Stroke">
            <summary>
            Brush to use for painting
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.OnPenPropsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when either <see cref="P:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.Stroke"/> or 
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.StrokeThickness"/> are changed.
            </summary>
            <param name="d">Crosshair dependency object.</param>
            <param name="e">Change params.</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.StrokeThicknessDefault">
            <summary>
            Default for the property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.StrokeThicknessProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.StrokeThickness">
            <summary>
            Extent of the feature window relative to the position of the overlay.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.#cctor">
            <summary>
            Initializes the dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.#ctor">
            <summary>
            Creates the rectangle overlay.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.Selection">
            <summary>
            The pixel range currently covered by the overlay.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.BorderBreadth">
            <summary>
            Border width is the stroke thickness.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.ArrangeOverride(System.Windows.Size)">
            <summary>
            Called when this overlay is to be placed on the canvas.
            </summary>
            <param name="arrangeBounds">Bounds in which this control is placed.</param>
            <returns>Effective bounds.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.RectangleOverlay.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called every time this overlay needs to be repainted.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay">
            <summary>
            Interaction logic for RectSelectOverlay.xaml
            </summary>
            <summary>
            RectSelectOverlay
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.#cctor">
            <summary>
            Static initialization.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.#ctor">
            <summary>
            Creates the overlay.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.UnselectedMarginProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.UnselectedMargin"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.UnselectedMargin">
            <summary>
            Gets the unselected margin.
            </summary>
            <remarks>
            The unselected margin identifies the unselected region of the image.
            Thus the inverted selected rect.
            </remarks>
            <value>
            The <c>Thickness</c> returned is in image pixels.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.SizeCursorProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.SizeCursor"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.SizeCursor">
            <summary>
            The cursor to be displayed when over the rectangle.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.StrokeProperty">
            <summary>
            Dependency property object for <see cref="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.Stroke"/>
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.Stroke">
            <summary>
            Brush used for painting the feature window editor.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.StrokeThicknessProperty">
            <summary>
            Dependency property object for <see cref="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.StrokeThickness"/>
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.StrokeThickness">
            <summary>
            X position of the feature window origin.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.CoerceStrokeThickness(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion delegate that makes sure that the currently set origin does
            not exceed the range 0...Height-1
            </summary>
            <param name="d">object on which the property is about to be set
            </param>
            <param name="value">value to which the property is about to be set
            </param>
            <returns>validated and potentially corrected value</returns>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.MaximizeOnNewImage">
            <summary>
            Gets/sets whether the selected rect is set to the whole image region if
            a new image is assigned.
            </summary>
            <remarks>
            If set to <c>false</c> the <see cref="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.SelectedRect"/> is not touched
            and must be set to a valid region externally.
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.MaximizeOnNewImageProperty">
            <summary>
            Backing store of the <see cref="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.MaximizeOnNewImage"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.SelectedRectProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.SelectedRect"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.SelectedRect">
            <summary>
            The selected area.
            </summary>
            <value>
            Selected CVB rect. 
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.RectSelectOverlay.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay">
            <summary>
            Interaction logic for RulerOverlay.xaml
            </summary>
            <summary>
            HorizontalRulerOverlay
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.RowProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.Row"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.Row">
            <summary>
            Gets/sets the row of the ruler.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.StrokeProperty">
            <summary>
            Dependency property object for <see cref="P:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.Stroke"/>
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.Stroke">
            <summary>
            Brush used for painting the feature window editor.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.StrokeThicknessProperty">
            <summary>
            Dependency property object for <see cref="P:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.StrokeThickness"/>
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.StrokeThickness">
            <summary>
            X position of the feature window origin.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.CoerceStrokeThickness(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coercion delegate that makes sure that the currently set origin does
            not exceed the range 0...Height-1
            </summary>
            <param name="d">object on which the property is about to be set
            </param>
            <param name="value">value to which the property is about to be set
            </param>
            <returns>validated and potentially corrected value</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.#cctor">
            <summary>
            Initializes/change dependency properties.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.#ctor">
            <summary>
            Creates the ruler overlay.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the horizontal ruler aligned to physical pixels.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.GetLayoutClip(System.Windows.Size)">
            <summary>
            Remove clipping region.
            </summary>
            <param name="layoutSlotSize">Ignored.</param>
            <returns>Always <c>null</c>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.HorizontalRulerOverlay.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay">
            <summary>
            Base class for readable (shadowed) text overlays on a display.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay.FontShadowProperty">
            <summary>
            Backing store for <see cref="P:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay.FontShadow"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay.FontShadow">
            <summary>
            Gets/sets the background color for the font's background.
            </summary>
            <value>
            Default is <see cref="P:System.Windows.Media.Colors.White"/>.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay.FontShadowThicknessProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay.FontShadowThickness"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay.FontShadowThickness">
            <summary>
            Gets/sets the thickness of the border of the text.
            </summary>
            <remarks>
            Thickness in pixels (default is 2).
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay.CreateDefaultText(System.Windows.Controls.Control,System.String)">
            <summary>
            Creates a new <see cref="T:System.Windows.Media.FormattedText"/> based on the current culture
            and <paramref name="control"/> font settings.
            </summary>
            <param name="control">Control to get color and font settings from.
            </param>
            <param name="text">Text from which the formatted text is creatd.</param>
            <returns>New formatted text.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay.NewDefaultText(System.String)">
            <summary>
            Creates a new <see cref="T:System.Windows.Media.FormattedText"/> based on the current culture
            and control font settings.
            </summary>
            <param name="text">Text from which the formatted text is creatd.</param>
            <returns>New formatted text.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay.DrawString(System.Windows.Media.DrawingContext,System.Windows.Media.FormattedText,System.Windows.Point)">
            <summary>
            Draws the given <paramref name="text"/> with a drop shadow to ensure 
            its visibility.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
            <param name="text">Formatted text to print.</param>
            <param name="location">Point where the text is drawn.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TextImageOverlay.DrawString(System.Windows.Media.DrawingContext,System.String,System.Windows.Point)">
            <summary>
            Draws the given <paramref name="text"/> with a drop shadow to ensure
            its visibility with the controls default text properties.
            </summary>
            <param name="drawingContext">Context to draw on.</param>
            <param name="text">Text to print.</param>
            <param name="location">Point where the text is drawn.</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.TrackerBox">
            <summary>
            Interaction logic for TrackerBox.xaml
            </summary>
            <summary>
            TrackerBox
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TrackerBox.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.TrackerBox.PositionX">
            <summary>
            X position of the object being tracked
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.TrackerBox.PositionXProperty">
            <summary>
            Backing store for PositionX
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.TrackerBox.PositionY">
            <summary>
            Y position of the object being tracked
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.TrackerBox.PositionYProperty">
            <summary>
            Backing store for PositionY
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TrackerBox.OnPositionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to changes in the position
            </summary>
            <param name="d">Dependency object on which the change occurred.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.TrackerBox.BoxSize">
            <summary>
            Size of the box of the visual tracker
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.TrackerBox.BoxSizeProperty">
            <summary>
            Backing store for BoxSize
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TrackerBox.OnBoxSizeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to changes in the box size
            </summary>
            <param name="d">Dependency object on which the change occurred.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.TrackerBox.CrosshairLength">
            <summary>
            Length of the cross hair strokes
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.TrackerBox.CrosshairLengthProperty">
            <summary>
            Backing store for CrosshairLength
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TrackerBox.OnCrosshairLengthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to changes in the box size
            </summary>
            <param name="d">Dependency object on which the change occurred.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.TrackerBox.Stroke">
            <summary>
            The brush with which to paint the visual tracker.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.TrackerBox.StrokeProperty">
            <summary>
            Backing store for Stroke
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.TrackerBox.StrokeThickness">
            <summary>
            Thickness of the unit stroke
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.TrackerBox.StrokeThicknessProperty">
            <summary>
            Backing store for StrokeThickness
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TrackerBox.PaintSegment(System.Windows.Media.StreamGeometryContext,System.Windows.Point[],System.Windows.Size,System.Windows.Size)">
            <summary>
            Paint one of the segments
            </summary>
            <param name="dc"></param>
            <param name="points"></param>
            <param name="innerCurveSize"></param>
            <param name="outerCurveSize"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TrackerBox.RotateBy90(System.Windows.Point[])">
            <summary>
            Rotate an array of points by 90 degree around (PositionX, PositionY)
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TrackerBox.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            The overlay in this case is user drawn...
            </summary>
            <param name="drawingContext">Drawing context to render to.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.TrackerBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.ControlOverlay">
            <summary>
            <see cref="T:Stemmer.Cvb.Wpf.Controls.Display"/> overlay placed on the
            display canvas.
            </summary>
            <remarks>
            These overlays are always placed in control coordinates like on a 
            canvas and are <i>not</i> moved/scaled based on the displayed image.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ControlOverlay.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.ImageOverlay">
            <summary>
            <see cref="T:Stemmer.Cvb.Wpf.Controls.Display"/> overlay placed on the
            displayed image.
            </summary>
            <remarks>
            These overlays are always placed in image coordinates directly on the
            displayed image and <i>are</i>> moved/scaled accordingly.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.OnActualZoomFactorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to changes in the zoom factor.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.AutoScaleContentProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.AutoScaleContent"/> property.
            </summary>
            
            <AttachedPropertyComments>
            <inheritdoc cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.AutoScaleContent" />
            </AttachedPropertyComments>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.AutoScaleContent">
            <summary>
            Defines whether or not the overlays in the canvas are automatically 
            scaled according to the zoom factor.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.CoordinatesDefault">
            <summary>
            Default for the property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.CoordinatesProperty">
            <summary>
            Dependency property object.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.Coordinates">
            <summary>
            Coordinate system usage (pixel or sub pixel).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.NonScaledTransformProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.NonScaledTransform"/> property.
            </summary>
            
            <AttachedPropertyComments>
            <inheritdoc cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.NonScaledTransform" />
            </AttachedPropertyComments>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.NonScaledTransform">
            <summary>
            Gets the the transform that is used to undo automatic scaling of 
            content according to the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactor"/>.
            </summary>
            <value>
            This is the <see cref="P:System.Windows.Media.Transform.Identity"/> if the whole overlay is
            not scaled (<see cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.AutoScaleContent"/> is 
            <see cref="F:Stemmer.Cvb.Wpf.Controls.AutoScaleContent.Off"/>) or the 
            inverse scale matrix based on the 
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactor"/> otherwise.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.PixelCoordinateSystemProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.PixelCoordinateSystem"/> property.
            </summary>
            
            <AttachedPropertyComments>
            <inheritdoc cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.PixelCoordinateSystem" />
            </AttachedPropertyComments>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.PixelCoordinateSystem">
            <summary>
            Defines the location of a point in a pixel.
            </summary>
            <remarks>
            <para>This attached works in conjunction with the 
            <see cref="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.LengthUnitProperty"/> if it is set to 
            <see cref="F:Stemmer.Cvb.Wpf.Controls.LengthUnit.ImagePixel"/>. It is ignored for
            <see cref="F:Stemmer.Cvb.Wpf.Controls.LengthUnit.DeviceIndependentPixel"/>.</para>
            <para>This defines where overlays are placed in the canvas. Either at 
            the left-top location or in the center of the pixel/barycentric 
            (default).</para>
            </remarks>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.ScaledTransformProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.ScaledTransform"/> property.
            </summary>
            
            <AttachedPropertyComments>
            <inheritdoc cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.ScaledTransform" />
            </AttachedPropertyComments>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.ScaledTransform">
            <summary>
            Gets the the transform that is used to scale content according to the
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactor"/>.
            </summary>
            <value>
            This is the <see cref="P:System.Windows.Media.Transform.Identity"/> if the whole overlay is
            scaled (<see cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.AutoScaleContent"/> is 
            <see cref="F:Stemmer.Cvb.Wpf.Controls.AutoScaleContent.RenderTransform"/>) or the scale matrix based on the
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactor"/> otherwise.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.StandardLineWidthDefault">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.StandardLineWidth">
            <summary>
            The standard line width is the width at which "normal" lines should
            be painted in the overlay. It is mostly a vehicle for calculating
            the effective line width and for binding purposes.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.StandardLineWidthProperty">
            <summary>
            Backing store.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.OnStandardLineWidthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            If the standard line width changed, update the effective line width.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.EffectiveLineWidthDefault">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.EffectiveLineWidth">
            <summary>
            The effective line width is the line width at which to paint in order
            to make lines with the width defined in the property
            <see cref="P:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.StandardLineWidth"/> appear as if they were *not* zoomed.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.EffectiveLineWidthPropertyKey">
            <summary>
            Backing store key.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.EffectiveLineWidthProperty">
            <summary>
            Backing store.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.CoerceCoordinate(System.Windows.DependencyObject,System.Object)">
            <summary>
            Ensures correct location handling for (sub)pixel coordinate mode.
            </summary>
            <param name="d">Dependency property which is coerced.</param>
            <param name="baseValue">Input value.</param>
            <returns>Coerced value.</returns>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.ImageSourceChanged">
            <summary>
            Event that is fired when the parent <see cref="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas"/>'
            actual zoom factor is changed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.#cctor">
            <summary>
            Static ctor
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.ImageOverlay.#ctor">
            <summary>
            Creates an image overlay object.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Overlays.OverlayBase">
            <summary>
            Base class for <see cref="T:Stemmer.Cvb.Wpf.Controls.Display"/> overlays.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactorDefault">
            <summary>
            Default value
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactorKey">
            <summary>
            The Key for readonly <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactor"/> property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactorProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactor"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactor">
            <summary>
            Gets the actual zoom factor of the display canvas this overlay is on.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OnActualZoomFactorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            React to property changes.
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.InverseActualZoomFactorDefault">
            <summary>
            Default value.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.InverseActualZoomFactor">
            <summary>
            Gets the inverse value of the actual Zoom factor (useful for painting
            items that are the same size regardless of zoom factor).
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.InverseActualZoomFactorPropertyKey">
            <summary>
            Backing store key.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.InverseActualZoomFactorProperty">
            <summary>
            Backing store.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayHeightProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayHeight"/> property
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayHeight">
            <summary>
            Gets/sets the height of the overlay in the current length unit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayWidthProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayWidth"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayWidth">
            <summary>
            Gets/sets the width of the overlay in the current length unit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayXProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayX"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayX">
            <summary>
            Gets/sets the overlay x coordinate in the current length unit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayYProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayY"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OverlayY">
            <summary>
            Gets/set the overlay Y in the current length unit.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ParentDisplayCanvasKey">
            <summary>
            The key for the readonly ParentDisplayCanvas property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ParentDisplayCanvasProperty">
            <summary>
            Backing store for the readonly <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ParentDisplayCanvas"/> 
            property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ParentDisplayCanvas">
            <summary>
            The <see cref="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas"/> this overlay is child of.
            </summary>
            <value>
            <c>null</c> if no <c>DisplayCanvas</c> parent is present.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OnParentDisplayCanvasChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the ParentDisplayCanvas property changed.
            </summary>
            <param name="d">Overlay object.</param>
            <param name="e">Change state</param>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.BottomProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.Bottom"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.Bottom">
            <summary>
            Layouts a child from the bottom.
            </summary>
            <value>
            Default is <see cref="F:System.Double.NaN"/>.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.LeftProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.Left"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.Left">
            <summary>
            Layouts a child from the left.
            </summary>
            <value>
            Default is <see cref="F:System.Double.NaN"/>.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.LengthUnitProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.LengthUnit"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.LengthUnit">
            <summary>
            Defines whether the layout properties are measured in image pixels
            or in device independent pixels as displayed by the canvas.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.RightProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.Right"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.Right">
            <summary>
            Layouts a child from the right.
            </summary>
            <value>
            Default is <see cref="F:System.Double.NaN"/>.
            </value>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Overlays.OverlayBase.TopProperty">
            <summary>
            Backing store for the <see cref="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.Top"/> property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Overlays.OverlayBase.Top">
            <summary>
            Layouts a child from the top.
            </summary>
            <value>
            Default is <see cref="F:System.Double.NaN"/>.
            </value>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.OverlayBase.OnParentDisplayCanvasChanged(Stemmer.Cvb.Wpf.Controls.DisplayCanvas,Stemmer.Cvb.Wpf.Controls.DisplayCanvas)">
            <summary>
            Event raiser.
            </summary>
            <param name="oldCanvas"></param>
            <param name="newCanvas"></param>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ParentDisplayCanvasChanged">
            <summary>
            Event that is fired when the parent <see cref="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas"/> is 
            changed.
            </summary>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.Overlays.OverlayBase.ActualZoomFactorChanged">
            <summary>
            Event that is fired when the parent <see cref="T:Stemmer.Cvb.Wpf.Controls.DisplayCanvas"/>'
            actual zoom factor is changed.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.OverlayBase.#cctor">
            <summary>
            Static ctor.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Overlays.OverlayBase.#ctor">
            <summary>
            Creates an overlay object.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Properties.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Properties.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Properties.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Properties.Messages.DisplayBitmapSizeLimitExceeded">
            <summary>
              Looks up a localized string similar to The input image is too big to be displayed in the currently selected mode using a DisplayCanvas..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Properties.Messages.GenericObjectDisposed">
            <summary>
              Looks up a localized string similar to The {0} object has already been disposed of and may not be used any longer..
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Properties.Messages.ImageDataTypeNotSupported">
            <summary>
              Looks up a localized string similar to The data type {0} is not supported..
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.MiscExtensions">
            <summary>
            Collection of miscellaneous extension methods that did not fit in 
            anywhere else.
            <see cref="T:Stemmer.Cvb.Image"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.ToGdiColor(System.Windows.Media.Color)">
            <summary>
            Convert a WPF color to a GDI color. 
            </summary>
            <param name="clr">colour to be converted</param>
            <returns>converted color</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.ToWpfColor(System.Drawing.Color)">
            <summary>
            Convert a GDI color to a WPF color.
            </summary>
            <param name="clr">color to be converted</param>
            <returns>converted color</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.ToWpfSize(System.Drawing.Size)">
            <summary>
            Convert a <see cref="T:System.Drawing.Size"/> to a WPF 
            <see cref="T:System.Windows.Size"/>.
            </summary>
            <param name="s">Size to convert.</param>
            <returns>WPF size.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.ToWpfSize(Stemmer.Cvb.Size2D)">
            <summary>
            Convert a <see cref="T:Stemmer.Cvb.Size2D"/> to a WPF 
            <see cref="T:System.Windows.Size"/>.
            </summary>
            <param name="s">Size to convert.</param>
            <returns>WPF size.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.ToDrawingSize(System.Windows.Size)">
            <summary>
            Convert a <see cref="T:System.Windows.Size"/> to a Forms
            <see cref="T:System.Drawing.Size"/>.
            </summary>
            <remarks>
            This method truncates floating point values.
            </remarks>
            <param name="s">Size to convert.</param>
            <returns>Drawing size.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.ToCvbSize(System.Windows.Size)">
            <summary>
            Convert a <see cref="T:System.Windows.Size"/> to a Forms
            <see cref="T:Stemmer.Cvb.Size2D"/>.
            </summary>
            <remarks>
            This method truncates floating point values.
            </remarks>
            <param name="s">Size to convert.</param>
            <returns>Drawing size.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.RemoveAll``1(System.Windows.Controls.ItemCollection)">
            <summary>
            Remove all elements of a given type from an item collection.
            </summary>
            <typeparam name="T">Type of the items to be removed.</typeparam>
            <param name="c">Collection from which to remove.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.Length(System.Windows.Point)">
            <summary>
            Calculate the length of a vector defined through a Point object.
            </summary>
            <param name="p">Point to calculate for.</param>
            <returns>Length (L2 norm).</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.ToPointD(System.Windows.Point)">
            <summary>
            Point conversion.
            </summary>
            <param name="p">System.Windows.Point to be converted.</param>
            <returns>Converted Stemmer.Cvb.PointD</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.ToChar(System.Windows.Input.Key)">
            <summary>
            Convert a key state into a printable character.
            </summary>
            <param name="key">Key value to convert.</param>
            <returns>Printable representation of the key.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.MiscExtensions.ToCursor(Stemmer.Cvb.Wpf.RectPos)">
            <summary>
            Gets an appropriate cursor object depending on 
            <paramref name="border"/> location.
            </summary>
            <param name="border">Location to get cursor for.</param>
            <returns>Appropriate cursor.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.ImageExtensions">
            <summary>
            Collection of extension methods that involve the type
            <see cref="T:Stemmer.Cvb.Image"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.DeleteObject(System.IntPtr)">
            <summary>
            Needed for the ToBitmapSource extensions.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.ToBitmapSource(System.Drawing.Bitmap)">
            <summary>
            Extension method to create a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> from a
            <see cref="T:System.Drawing.Bitmap"/> object.
            </summary>
            <param name="bmp">Bitmap object to work on.</param>
            <returns>Resulting <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.ToBitmapSource(Stemmer.Cvb.Image,System.Int32,System.Int32,Stemmer.Cvb.Rect,Stemmer.Cvb.PlaneConfiguration,System.Double,System.Int32,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Create a <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>
            from this CVB image.
            </summary>
            <param name="width">width of the Bitmap to be returned; may be 0, in
            which case the width is calculated taking into account the aspect
            ration of <paramref name="sourceRect"/> (if height != 0) or will be
            set to the width of <paramref name="sourceRect"/> (if width and height
            are 0)</param>
            <param name="height">height of the Bitmap to be returned; may be 0, in
            which case the height is calculated taking into account the aspect
            ration of <paramref name="sourceRect"/> (if width != 0) or will be
            set to the height of <paramref name="sourceRect"/> (if width and
            height are 0)</param>
            <param name="sourceRect">subregion of the image to paint into the
            bmData</param>
            <param name="planes">plane configuration to use for painting</param>
            <param name="gain">gain to apply during painting</param>
            <param name="offset">offset to apply during painting</param>
            <param name="img">the <see cref="T:Stemmer.Cvb.Image"/> to work on</param>
            <param name="mode">treatment for images with more than 8 bits per
            pixel</param>
            <returns>newly created bmData source</returns>
            <exception cref="T:System.ObjectDisposedException">If this image has already
            been disposed</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.ToBitmapSource(Stemmer.Cvb.Image,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Convert this Cvb image into a bmData source of identical size.
            </summary>
            <param name="img">the <see cref="T:Stemmer.Cvb.Image"/> to work on</param>
            <param name="mode">treatment for images with more than 8 bits per
            pixel</param>
            <returns>newly created bmData source</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.ToBitmapSource(Stemmer.Cvb.Image)">
            <summary>
            Convert this Cvb image into a bmData source of identical size, using
            default conversion for high bit images.
            </summary>
            <param name="img">image to be converted</param>
            <returns>bitmap source result</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.ToBitmapSource(Stemmer.Cvb.Image,System.Int32,System.Int32,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Convert this Cvb image into a bmData of selectable size.
            </summary>
            <param name="width">width of the Bitmap to be returned; may be 0, in
            which case the width is calculated taking into account the aspect
            ration of this image(if height != 0) or will be
            set to the width of this image(if width and height
            are 0)</param>
            <param name="height">height of the Bitmap to be returned; may be 0, in
            which case the height is calculated taking into account the aspect
            ration of this image (if width != 0) or will be
            set to the height of this image (if width and
            height are 0)</param>
            <param name="img">the <see cref="T:Stemmer.Cvb.Image"/> to work on</param>
            <param name="mode">treatment for images with more than 8 bits per
            pixel</param>
            <returns>newly created bmData source</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.GetDrawingPixelFormat(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            Gets the <c>System.Drawing.Imaging.PixelFormat</c> from the
            <see cref="T:System.Windows.Media.Imaging.BitmapSource"/>.
            </summary>
            <param name="bm">Bitmap source to query.</param>
            <returns>Pixel format.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if not 8bpp RGB or Gray
            format.</exception>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.WriteSpecialImage(System.Windows.Media.Imaging.WriteableBitmap,Stemmer.Cvb.Image,Stemmer.Cvb.Rect,System.Windows.Int32Rect,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Writes the image like overlay images or float images to the
            back-buffer.
            </summary>
            <param name="bm">The writeable bmData to copy to.</param>
            <param name="img">The CVB image to copy from.</param>
            <param name="sourceRect">Region to copy from.</param>
            <param name="targetRect">Region to copy to.</param>
            <param name="mode">treatment for images with more than 8 bits per
            pixel</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.WriteMono8Image(System.Windows.Media.Imaging.WriteableBitmap,Stemmer.Cvb.Image,Stemmer.Cvb.Rect,System.Windows.Int32Rect)">
            <summary>
            Writes the image as a mono image to the back-buffer.
            </summary>
            <param name="bm">The writeable bmData to copy to.</param>
            <param name="img">The CVB image to copy from.</param>
            <param name="sourceRect">Region to copy from.</param>
            <param name="targetRect">Region to copy to.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.WriteColor8Image(System.Windows.Media.Imaging.WriteableBitmap,Stemmer.Cvb.Image,Stemmer.Cvb.Rect,System.Windows.Int32Rect)">
            <summary>
            Writes the image as a color image to the back-buffer.
            </summary>
            <param name="bm">The writeable bmData to copy to.</param>
            <param name="img">The CVB image to copy from.</param>
            <param name="sourceRect">Region to copy from.</param>
            <param name="targetRect">Region to copy to.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.WriteImage(System.Windows.Media.Imaging.WriteableBitmap,Stemmer.Cvb.Image,Stemmer.Cvb.Rect,Stemmer.Cvb.Rect,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Copies the pixel data from the given <paramref name="sourceRect"/>
            of the <see cref="T:Stemmer.Cvb.Image"/> <paramref name="img"/>.
            </summary>
            <param name="bm">The writeable bmData to copy to.</param>
            <param name="img">The CVB image to copy from.</param>
            <param name="sourceRect">Region to copy from in pixels.</param>
            <param name="targetRect">Region to copy to in pixels.</param>
            <param name="mode">treatment for images with more than 8 bits per
            pixel</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.IsSpecial(Stemmer.Cvb.Image)">
            <summary>
            Gets whether this image should be displayed via <b>ToBitmap</b>.
            </summary>
            <param name="img">Image to be tested.</param>
            <returns><b>true</b> if display conversion is needed.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.WriteImage(System.Windows.Media.Imaging.WriteableBitmap,Stemmer.Cvb.Image,System.Windows.Int32Rect,System.Windows.Int32Rect,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Copies the pixel data from the given <paramref name="sourceRect"/>
            of the <see cref="T:Stemmer.Cvb.Image"/> <paramref name="img"/>.
            </summary>
            <param name="bm">The writeable bmData to copy to.</param>
            <param name="img">The CVB image to copy from.</param>
            <param name="sourceRect">Region to copy from in pixels.</param>
            <param name="targetRect">Region to copy to in pixels.</param>
            <param name="mode">treatment for images with more than 8 bits per
            pixel</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.WriteImage(System.Windows.Media.Imaging.WriteableBitmap,Stemmer.Cvb.Image,Stemmer.Cvb.Rect,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Copies the pixel data from the given <paramref name="sourceRect"/>
            of the <see cref="T:Stemmer.Cvb.Image"/> <paramref name="img"/>.
            </summary>
            <param name="bm">The writeable bmData to copy to.</param>
            <param name="img">The CVB image to copy from.</param>
            <param name="sourceRect">Region to copy in pixels.</param>
            <param name="mode">treatment for images with more than 8 bits per
            pixel</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.WriteImage(System.Windows.Media.Imaging.WriteableBitmap,Stemmer.Cvb.Image,System.Windows.Int32Rect,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Copies the pixel data from the given <paramref name="sourceRect"/>
            of the <see cref="T:Stemmer.Cvb.Image"/> <paramref name="img"/>.
            </summary>
            <param name="bm">The writeable bmData to copy to.</param>
            <param name="img">The CVB image to copy from.</param>
            <param name="sourceRect">Region to copy in pixels.</param>
            <param name="mode">treatment for images with more than 8 bits per
            pixel</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.ImageExtensions.WriteImage(System.Windows.Media.Imaging.WriteableBitmap,Stemmer.Cvb.Image,Stemmer.Cvb.HighBitScaleMode)">
            <summary>
            Copies the <see cref="T:Stemmer.Cvb.Image"/> pixel data.
            </summary>
            <param name="bm">The writeable bmData to copy to.</param>
            <param name="img">The CVB image to copy from.</param>
            <param name="mode">treatment for images with more than 8 bits per
            pixel</param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.PropertyChangeNotifier">
            <summary>
            Helper to not root (keep alive) the target object if registering on
            value change events.
            </summary>
            <remarks>
            Code is based on 
            <i><![CDATA[https://agsmith.wordpress.com/2008/04/07/propertydescriptor-addvaluechanged-alternative/]]></i>.
            </remarks>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.PropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.String)">
            <summary>
            Creates the notifier from the given <paramref name="propertySource"/>
            and its property <paramref name="path"/>.
            </summary>
            <param name="propertySource">Object to register event on.</param>
            <param name="path">Path to the property to get notified on.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.PropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Creates the notifier from the given <paramref name="propertySource"/>
            and its <paramref name="property"/>.
            </summary>
            <param name="propertySource">Object to register event on.</param>
            <param name="property">Property to get notified on.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.PropertyChangeNotifier.#ctor(System.Windows.DependencyObject,System.Windows.PropertyPath)">
            <summary>
            Creates the notifier from the given <paramref name="propertySource"/>
            and its <paramref name="property"/> path.
            </summary>
            <param name="propertySource">Object to register event on.</param>
            <param name="property">Property path to get notified on.</param>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.PropertyChangeNotifier.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.PropertyChangeNotifier.Dispose">
            <summary>
            Clears the binding.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.PropertyChangeNotifier.Dispose(System.Boolean)">
            <summary>
            Dispose implementation.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.PropertyChangeNotifier.PropertySource">
            <summary>
            Gets the property source object or <c>null</c> if it doesn't exist.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.PropertyChangeNotifier.ValueProperty">
            <summary>
            Identifies the <see cref="P:Stemmer.Cvb.Wpf.PropertyChangeNotifier.Value"/> dependency property.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.PropertyChangeNotifier.Value">
            <summary>
            Returns/sets the value of the property.
            </summary>
            <seealso cref="F:Stemmer.Cvb.Wpf.PropertyChangeNotifier.ValueProperty"/>
        </member>
        <member name="E:Stemmer.Cvb.Wpf.PropertyChangeNotifier.ValueChanged">
            <summary>
            The event to notify on registered property value change.
            </summary>
            <remarks>
            The sender is this object.
            </remarks>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.RectPos">
            <summary>
            Helper to identify the currently border location.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.RectPos.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.RectPos.LeftBorder">
            <summary>
            Left border.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.RectPos.TopBorder">
            <summary>
            Top border.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.RectPos.RightBorder">
            <summary>
            Right border.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.RectPos.BottomBorder">
            <summary>
            Bottom border.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.RectPos.Center">
            <summary>
            Center position.
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.RectExtensions">
            <summary>
            Extension methods for the <see cref="T:Stemmer.Cvb.Rect"/>.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.RectExtensions.ToWindowsRect(Stemmer.Cvb.Rect)">
            <summary>
            Creates a <see cref="T:System.Windows.Rect"/> from this rectangle.
            </summary>
            <param name="rect">This rectangle.</param>
            <returns>New <see cref="T:System.Windows.Rect"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.RectExtensions.ToWindowsRect(Stemmer.Cvb.RectD)">
            <summary>
            Creates a <see cref="T:System.Windows.Rect"/> from this rectangle.
            </summary>
            <param name="rect">This rectangle.</param>
            <returns>New <see cref="T:System.Windows.Rect"/>.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.RectExtensions.ToCvbRectD(System.Windows.Rect)">
            <summary>
            Converts the given <paramref name="rect"/> into a <see cref="T:Stemmer.Cvb.RectD"/>.
            </summary>
            <param name="rect">Rectangle to be converted.</param>
            <returns>New <c>RectD</c> object.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.RectExtensions.Contains(Stemmer.Cvb.Rect,System.Windows.Point)">
            <summary>
            Check if a point is located inside this <see cref="T:Stemmer.Cvb.Rect"/>.
            </summary>
            <param name="rect">This rectangle.</param>
            <param name="pt">point to be checked</param>
            <returns>true if <paramref name="pt"/> is inside this Rect, false 
            otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.RectExtensions.Contains(Stemmer.Cvb.RectD,System.Windows.Point)">
            <summary>
            Check if a point is located inside this <see cref="T:Stemmer.Cvb.Rect"/>.
            </summary>
            <param name="rect">This rectangle.</param>
            <param name="pt">point to be checked</param>
            <returns>true if <paramref name="pt"/> is inside this Rect, false 
            otherwise.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.RectExtensions.GetRectPos(System.Windows.Rect,System.Windows.Point,System.Double)">
            <summary>
            Check the location in/out of this <see cref="T:Stemmer.Cvb.Rect"/>.
            </summary>
            <param name="rect">This rectangle.</param>
            <param name="pt">Point to be checked.</param>
            <param name="borderMargin">Margin to be considered as border 
            thickness.</param>
            <returns>The location.</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Runtime.InteropServices.KeyboardInterop">
            <summary>
            Utilities for inter-operation between Windows SDK and WPF keyboard 
            functions. As found in
            http://stackoverflow.com/questions/5825820/how-to-capture-the-character-on-different-locale-keyboards-in-wpf-c
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Runtime.InteropServices.KeyboardInterop.GetCharFromKey(System.Windows.Input.Key)">
            <summary>
            Convert a key into something that we can use inside a string.
            </summary>
            <param name="key">Key</param>
            <returns>converted character</returns>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Shapes.Arrow">
            <summary>
            Arrow shape.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Shapes.Arrow.X1">
            <summary>
            Exposed property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Shapes.Arrow.X1Property">
            <summary>
            Backing Store.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Shapes.Arrow.Y1">
            <summary>
            Exposed property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Shapes.Arrow.Y1Property">
            <summary>
            Backing Store.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Shapes.Arrow.X2">
            <summary>
            Exposed Property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Shapes.Arrow.X2Property">
            <summary>
            Backing Store.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Shapes.Arrow.Y2">
            <summary>
            Exposed Property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Shapes.Arrow.Y2Property">
            <summary>
            Backing Store.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Shapes.Arrow.HeadWidth">
            <summary>
            Exposed Property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Shapes.Arrow.HeadWidthProperty">
            <summary>
            Backing Store.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Shapes.Arrow.HeadLength">
            <summary>
            Exposed property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Shapes.Arrow.HeadLengthProperty">
            <summary>
            Backing Store
            </summary>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.Shapes.Arrow.ArrowType">
            <summary>
            Available appearances of the Arrow.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Shapes.Arrow.ArrowType.Open">
            <summary>
            Draw an arrow that is "open", i.e. it does not have a bar.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Shapes.Arrow.ArrowType.Closed">
            <summary>
            Draw an arrow that is "closed", i.e. it have a bar.
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Shapes.Arrow.ArrowAppearance">
            <summary>
            Exposed property.
            </summary>
        </member>
        <member name="F:Stemmer.Cvb.Wpf.Shapes.Arrow.ArrowAppearanceProperty">
            <summary>
            Backing Store
            </summary>
        </member>
        <member name="P:Stemmer.Cvb.Wpf.Shapes.Arrow.DefiningGeometry">
            <summary>
            Implementation of the appearance...
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.Shapes.Arrow.DrawArrow(System.Windows.Media.StreamGeometryContext)">
            <summary>
            Paint the arrow
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Stemmer.Cvb.Wpf.VisualTreeHelperExtensions">
            <summary>
            Extends the VisualTreeHelper class.
            </summary>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.VisualTreeHelperExtensions.FindChildren``1(System.Windows.DependencyObject,System.String)">
            <summary>
            Find all visual children with matching type and element name.
            </summary>
            <typeparam name="T">Type to look for.</typeparam>
            <param name="parent">Node at which to start.</param>
            <param name="childName">Element name to look for.</param>
            <returns>Collection of matching visual tree child nodes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.VisualTreeHelperExtensions.FindChildren``1(System.Windows.DependencyObject)">
            <summary>
            Find all visual children with matching type.
            </summary>
            <typeparam name="T">Type to look for.</typeparam>
            <param name="parent">Node at which to start.</param>
            <returns>Collection of matching visual tree child nodes.</returns>
        </member>
        <member name="M:Stemmer.Cvb.Wpf.VisualTreeHelperExtensions.FindVisualParent``1(System.Windows.DependencyObject)">
            <summary>
            Finds a parent of a certain type of a this item in the visual tree.
            </summary>
            <typeparam name="T">The type of the queried item.</typeparam>
            <param name="obj">A direct or indirect obj of the queried item.
            </param>
            <returns>The first parent item that matches the submitted type 
            parameter. If no matching item can be found, a null reference is being 
            returned.</returns>
        </member>
        <member name="T:Stemmer.Cvb.VPAEntry">
            VPAT entry storage
        </member>
        <member name="T:Stemmer.Cvb.ImgLib">
            <summary>
            Internal class holding the method specifications and types for p/invoke.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
